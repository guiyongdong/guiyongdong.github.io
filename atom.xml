<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>贵大头的博客</title>
  <subtitle>贵大头的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.guiyongdong.com/"/>
  <updated>2017-04-19T03:54:36.000Z</updated>
  <id>http://www.guiyongdong.com/</id>
  
  <author>
    <name>贵永冬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一天一Android之Material Desisgn</title>
    <link href="http://www.guiyongdong.com/2017/04/15/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BMaterial%20Desisgn/"/>
    <id>http://www.guiyongdong.com/2017/04/15/一天一Android之Material Desisgn/</id>
    <published>2017-04-15T03:32:11.000Z</published>
    <updated>2017-04-19T03:54:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先要说一下现在手机的UI风格，其实之前包括现在，<code>Android</code>的界面设计都是模仿<code>iOS</code>的，就拿我之前的公司，所有的<code>UI</code>图都是根据<code>6s</code>的尺寸，<code>iOS</code>的设计风格来设计得到，<code>Android</code>同学有时候就抱怨，这个好难实现，但是在<code>iOS</code>上，实现起来就很容易了。那么在2014年，谷歌推出了<code>Material Desisgn</code>，一套全新的界面设计语言，但是不少<code>Material Desisgn</code>的效果却很难实现，而<code>Android</code>中却几乎没有提供相应的<code>API</code>支持，于是在2015年，谷歌推出了一个<code>Design Support</code>库，这个库将<code>Material Desisgn</code>中最具代表性的一些控件和效果进行了封装，那么，今天我们就来看看有哪些常用的控件。</p>
<a id="more"></a>
<h3 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h3><p><code>Toolbar</code>是<code>Android</code>5.0开始推出的一个导航控件，用来替换<code>ActionBar</code>。为了兼容老系统，需要在<code>build.gradle</code>导入<code>v7 appcompat</code>支持库。谷歌允许开发者定制修改<code>Toolbar</code>，如：</p>
<ul>
<li>设置导航栏图标</li>
<li>设置App的logo</li>
<li>支持设置标题和子标题</li>
<li>支持添加一个或多个自定义控件</li>
<li>支持Action Menu</li>
</ul>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/912181-dca123890a64e6e0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<p>另外，一个<code>Toolbar</code>就是一个<code>View</code>，跟其他<code>View</code>一样包含在布局中，并且一个<code>Activity</code>中可以有多个<code>Toolbar</code>。</p>
<p>任何一个新建的项目，默认都会显示<code>ActionBar</code>，为了取消系统自带的<code>ActionBar</code>，通常会更改<code>APP</code>的<code>theme</code>。例如，会直接在<code>styles.xml</code>文件中如此修改：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里直接把之前的<code>Theme.AppCompat.Light.DarkActionBar</code>更改为<code>Theme.AppCompat.Light.NoActionBar</code>，当然，你也可以修改主题的其他属性。</p>
<p>现在已经把<code>ActionBar</code>隐藏起来了，接下来在<code>activity_main.xml</code>上添加如下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.MainActivity"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"自定义"</span></div><div class="line">            /&gt;</div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在<code>MainActivity</code>中这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>找到<code>toolbar</code>，并调用<code>setSupportActionBar(toolbar)</code>，这样既可以使用<code>Toolbar</code>，也可以使用<code>ActionBar</code>的外观。当然，你也可以不调用<code>setSupportActionBar(toolbar)</code>，将<code>Toolbar</code>当成普通的<code>View</code>使用。</p>
<p>那<code>Toolbar</code>还可以设置哪些属性呢？</p>
<p><strong>设置左边的图标</strong><br><code>toolbar.setNavigationIcon(R.drawable.home);</code></p>
<p><strong>设置logo</strong><br><code>toolbar.setLogo(R.mipmap.ic_launcher);</code></p>
<p><strong>设置主标题</strong><br><code>toolbar.setTitle(&quot;主标题&quot;);</code></p>
<p><strong>设置子标题</strong><br><code>toolbar.setSubtitle(&quot;子标题&quot;);</code></p>
<p>当然，它不仅可以添加自定义<code>View</code>，它也可以添加<code>action</code>按钮，如下，创建<code>Menu resource file</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">      <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/search"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/search"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"搜索"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/notification"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ling"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"通知"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/item1"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"item1"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/item2"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"item2"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在<code>MainActivity</code>中这样用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        <span class="comment">//设置左边的图标</span></div><div class="line">        toolbar.setNavigationIcon(R.drawable.home);</div><div class="line">        <span class="comment">//设置logo</span></div><div class="line">        toolbar.setLogo(R.mipmap.ic_launcher);</div><div class="line">        <span class="comment">//设置主标题</span></div><div class="line">        toolbar.setTitle(<span class="string">"主标题"</span>);</div><div class="line">        <span class="comment">//子标题</span></div><div class="line">        toolbar.setSubtitle(<span class="string">"子标题"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        getMenuInflater().inflate(R.menu.toolbar_action,menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (item.getItemId())&#123;</div><div class="line">            <span class="keyword">case</span> R.id.search:</div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"搜索"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.notification:</div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"通知"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.item1:</div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"item1"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.item2:</div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"item2"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们不设置<code>setSupportActionBar(toolbar)</code>，那么<code>Toolbar</code>就是当成一个<code>View</code>使用，就可以这样添加<code>action</code>按钮：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line"></div><div class="line">        <span class="comment">//设置左边的图标</span></div><div class="line">        toolbar.setNavigationIcon(R.drawable.home);</div><div class="line">        <span class="comment">//设置logo</span></div><div class="line">        toolbar.setLogo(R.mipmap.ic_launcher);</div><div class="line">        <span class="comment">//设置主标题</span></div><div class="line">        toolbar.setTitle(<span class="string">"主标题"</span>);</div><div class="line">        <span class="comment">//子标题</span></div><div class="line">        toolbar.setSubtitle(<span class="string">"子标题"</span>);</div><div class="line"></div><div class="line">        toolbar.inflateMenu(R.menu.toolbar_action);</div><div class="line">        toolbar.setOnMenuItemClickListener(<span class="keyword">new</span> Toolbar.OnMenuItemClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">                <span class="keyword">switch</span> (item.getItemId())&#123;</div><div class="line">                    <span class="keyword">case</span> R.id.search:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"搜索"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.notification:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"通知"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.item1:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"item1"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.item2:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"item2"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终运行效果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android22.png?raw=true" width="375"><br></div>


<hr>
<h3 id="DrawerLayout"><a href="#DrawerLayout" class="headerlink" title="DrawerLayout"></a>DrawerLayout</h3><p><code>APP</code>中，侧滑菜单使用的频率蛮高的，比如<code>QQ</code>。<code>Android</code>提供了<code>DrawerLayout</code>来实现这种效果，<code>DrawerLayout</code>是一个布局，在布局中允许放两个直接子控件，第一个子控件是主屏幕中显示的内容，第二个子控件是滑动菜单中显示的内容，因此，我们修改一下<code>activity_main.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.MainActivity"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"自定义"</span></div><div class="line">                /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#fff"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"侧滑菜单"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>首先，在根布局<code>DrawerLayout</code>里面，我们放了两个<code>LinearLayout</code>布局，第一个<code>LinearLayout</code>作为屏幕中显示的内容，里面放置了<code>Toolbar</code>。第二个<code>LinearLayout</code>就是我们的侧滑菜单，里面放置了一个<code>TextView</code>。但是关于第二个<code>LinearLayout</code>我们需要注意一点，<code>android:layout_gravity</code>这个属性是必须指定的，因为需要告诉<code>DrawerLayout</code>互动菜单是在屏幕的左边还是右边，指定<code>left</code>表示左边，指定<code>right</code>表示右边，我们这里指定了<code>start</code>，表示根据系统语言进行判断，如果系统语言是从左往右的，菜单就在左边。</p>
<p>现在就可以通过滑动屏幕的左边，打开菜单栏了。如图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android23.png?raw=true" width="375"><br></div>

<p>现在，只能通过屏幕的左边滑动才能打开菜单，但是，一般我们都会在<code>Toolbar</code>上的左边放置一个按钮，通过点击按钮也能打开菜单栏。来看<code>MainActivity.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DrawerLayout mDrawerLayout;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line"></div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line"><span class="comment">//        setSupportActionBar(toolbar);</span></div><div class="line"></div><div class="line">        <span class="comment">//设置左边的图标</span></div><div class="line">        toolbar.setNavigationIcon(R.drawable.home);</div><div class="line">        <span class="comment">//设置logo</span></div><div class="line">        toolbar.setLogo(R.mipmap.ic_launcher);</div><div class="line">        <span class="comment">//设置主标题</span></div><div class="line">        toolbar.setTitle(<span class="string">"主标题"</span>);</div><div class="line">        <span class="comment">//子标题</span></div><div class="line">        toolbar.setSubtitle(<span class="string">"子标题"</span>);</div><div class="line"></div><div class="line">        toolbar.inflateMenu(R.menu.toolbar_action);</div><div class="line">        toolbar.setOnMenuItemClickListener(<span class="keyword">new</span> Toolbar.OnMenuItemClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">                <span class="keyword">switch</span> (item.getItemId())&#123;</div><div class="line">                    <span class="keyword">case</span> R.id.search:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"搜索"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.notification:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"通知"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.item1:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"item1"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.item2:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"item2"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        toolbar.setNavigationOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"home"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                mDrawerLayout.openDrawer(GravityCompat.START);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们没有将<code>Toolbar</code>设置为<code>ActionBar</code>，但是我们设置了<code>Toolbar</code>的<code>NavigationIcon</code>，所以，我们直接给<code>NavigationIcon</code>添加点击事件:<code>toolbar.setNavigationOnClickListener()</code>，然后调用<code>mDrawerLayout.openDrawer(GravityCompat.START)</code>开启菜单。</p>
<p>如果将<code>Toolbar</code>设置为<code>ActionBar</code>，则需要在<code>onOptionsItemSelected()</code>方法中来处理点击事件。并且，如果你没有设置<code>Toolbar</code>的<code>NavigationIcon</code>，则需要这样设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">ActionBar actionBar = getSupportActionBar();</div><div class="line"><span class="keyword">if</span> (actionBar != <span class="keyword">null</span>) &#123;</div><div class="line">    actionBar.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">    actionBar.setHomeAsUpIndicator(R.drawable.home);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>并且此按钮的<code>id</code>永远是<code>android.R.id.home</code>。</p>
<hr>
<h3 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h3><p><code>NavigationView</code>也是<code>Design Support</code>库中提供的一个控件，也很好用。首先需要导入这个库，在<code>app/build.gradle</code>文件，在<code>dependencies</code>中添加如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile 'com.android.support:design:25.3.0'</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们先来看一下运行效果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android24.png?raw=true" width="375"><br></div>

<p>首先我定义了一个头视图和一个<code>menu</code>，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/search"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/search"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"搜索"</span></div><div class="line">                /&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/notification"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ling"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"通知"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/item1"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"首页"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/home"</span></div><div class="line">                /&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/item2"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"item2"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">                /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"180dp"</span></div><div class="line">                <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">                &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"头视图"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#000"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在<code>activity_main.xml</code>这样用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.MainActivity"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"自定义"</span></div><div class="line">                /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">app:menu</span>=<span class="string">"@menu/nav_menu"</span></div><div class="line">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/nav_header"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_view"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#963"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以看到，我们直接把菜单换成了<code>NavigationView</code>，<code>app:menu</code>设置<code>menu</code>，<code>app:headerLayout</code>设置头视图。当然我们也可以为<code>NavigationView</code>的<code>menu</code>添加点击事件。在<code>MainActivity.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DrawerLayout mDrawerLayout;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        ...</div><div class="line"></div><div class="line">        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);</div><div class="line">        navigationView.setNavigationItemSelectedListener(<span class="keyword">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(@NonNull MenuItem item)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,item.getItemId()+<span class="string">""</span>,Toast.LENGTH_SHORT);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="FloatingActionButton-悬浮按钮"><a href="#FloatingActionButton-悬浮按钮" class="headerlink" title="FloatingActionButton 悬浮按钮"></a>FloatingActionButton 悬浮按钮</h3><p>这个控件可以实现悬浮按钮的效果，它默认会使用<code>colorAccent</code>来作为按钮的颜色，当然还可以为它指定一个图标。修改<code>activity_main.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.MainActivity"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"自定义"</span></div><div class="line">                /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"end|bottom"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/car"</span></div><div class="line">            <span class="attr">android:elevation</span>=<span class="string">"8dp"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">	...</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里，可以通过<code>android:src</code>指定按钮的图片，<code>android:elevation</code>可以指定按钮的投影度，数值越大，投影面积越大，但是投影效果越淡，反之越浓。当然，还可以为它添加点击事件，其实<code>FloatingActionButton</code>和一个普通的按钮一样，也是通过<code>setOnClickListener</code>来添加点击是事件。</p>
<hr>
<h3 id="AppBarLayout"><a href="#AppBarLayout" class="headerlink" title="AppBarLayout"></a>AppBarLayout</h3><p><code>AppBarLayout</code>实际上是一个垂直方向的<code>LinearLayout</code>，它内部做了很多滚动事件的封装。它可以通过监听滚动视图的滚动来做出响应。我们依然在<code>activity_main.xml</code>中修改代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.MainActivity"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">                <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways|snap"</span>&gt;</div><div class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:text</span>=<span class="string">"自定义"</span></div><div class="line">                    /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/text_view"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"end|bottom"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/car"</span></div><div class="line">            <span class="attr">android:elevation</span>=<span class="string">"8dp"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">app:menu</span>=<span class="string">"@menu/nav_menu"</span></div><div class="line">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/nav_header"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_view"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#963"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>首先，我们修改了主布局为<code>CoordinatorLayout</code>，<code>CoordinatorLayout</code>是一个加强版的<code>FrameLayout</code>布局。然后添加<code>AppBarLayout</code>布局，并让<code>Toolbar</code>当做它的子布局。最后，添加一个<code>NestedScrollView</code>，最重要的一点是，设置<code>app:layout_behavior</code>属性为<code>@string/appbar_scrolling_view_behavior</code>，表示滚动视图在<code>Toolbar</code>的下面。另外，还给<code>Toolbar</code>添加了属性<code>app:layout_scrollFlags</code>，值为<code>scroll|enterAlways|snap</code>，其中<code>scroll</code>表示当<code>NestedScrollView</code>向上滚动的时候，<code>Toolbar</code>会跟着一起向上滚动并隐藏，<code>enterAlways</code>表示<code>NestedScrollView</code>向下滚动的时候，<code>Toolbar</code>会跟着一起向下滚动并显示出来。<code>snap</code>表示当<code>Toolbar</code>还没有完全隐藏或显示的时候，会根据当前滚动的距离，自动选择是隐藏还是显示。</p>
<hr>
<h3 id="CollapsingToolbarLayout-可折叠式标题栏"><a href="#CollapsingToolbarLayout-可折叠式标题栏" class="headerlink" title="CollapsingToolbarLayout 可折叠式标题栏"></a>CollapsingToolbarLayout 可折叠式标题栏</h3><p><code>CollapsingToolbarLayout</code></p>
<p><code>CollapsingToolbarLayout</code>是一个作用于<code>Toolbar</code>基础上的布局，它可以根据滚动视图的滚动距离来改变高度。先来看一下运行的结果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android25.gif?raw=true" width="375"><br></div>

<p>我这里创建另一个活动<code>SecondActivity</code>，布局如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.SecondActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--标题栏--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"250dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/appBar"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_toolbar"</span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></div><div class="line">            <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span></div><div class="line">                <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#852"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">            </div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_marginBottom</span>=<span class="string">"15dp"</span></div><div class="line">                <span class="attr">android:layout_marginRight</span>=<span class="string">"15dp"</span></div><div class="line">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"15dp"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"35dp"</span>&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/content_text"</span></div><div class="line">                    <span class="attr">android:textColor</span>=<span class="string">"#000"</span></div><div class="line">                    /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们根布局依然使用<code>CoordinatorLayout</code>，同样的，需要使用<code>AppBarLayout</code>作为<code>Toolbar</code>的根布局。这里，指定<code>AppBarLayout</code>的高度为<code>250dp</code>，当然，可以根据需求改动。然后添加了<code>CollapsingToolbarLayout</code>布局，并且指定了主题为<code>@style/ThemeOverlay.AppCompat.Dark.ActionBar</code>，<code>app:contentScrim</code>属性用于指定<code>CollapsingToolbarLayout</code>在趋于折叠状态以及折叠之后的背景色，其实<code>CollapsingToolbarLayout</code>折叠之后就是一个普通的<code>Toolbar</code>。<code>app:layout_scrollFlags</code>我们刚才也用到过，这里指定为<code>scroll|exitUntilCollapsed</code>，<code>scroll</code>表示<code>CollapsingToolbarLayout</code>会随着滚动内容滚动，<code>exitUntilCollapsed</code>表示当<code>CollapsingToolbarLayout</code>随着滚动完成折叠之后就保留在界面上，不再移出屏幕。</p>
<p>可以看到，我们又在<code>CollapsingToolbarLayout</code>中定义了一个<code>View</code>和<code>Toolbar</code>，其实也就意味着，这个标题栏是由普通的<code>View</code>加上<code>Toolbar</code>合成的，<code>app:layout_collapseMode</code>属性，用于指定当前控件<code>CollapsingToolbarLayout</code>折叠过程中的折叠模式，其中<code>Toolbar</code>指定为<code>pin</code>，表示在折叠过程中位置始终保持不变，<code>View</code>指定为<code>parallax</code>，表示会在折叠的过程中产生一定的位置偏移。</p>
<p>最后，在<code>SecondActivity.java</code>中，添加如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_second);</div><div class="line">        <span class="comment">//获取到CollapsingToolbarLayout  并设置标题</span></div><div class="line">        CollapsingToolbarLayout collapsingToolbarLayout = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);</div><div class="line">        collapsingToolbarLayout.setTitle(<span class="string">"苹果"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//获取Toolbar 并将Toolbar设置为ActionBar</span></div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">        ActionBar actionBar = getSupportActionBar();</div><div class="line">        <span class="keyword">if</span> (actionBar != <span class="keyword">null</span>) &#123;</div><div class="line">            actionBar.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//设置内容</span></div><div class="line">        TextView textView = (TextView) findViewById(R.id.content_text);</div><div class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++) &#123;</div><div class="line">            stringBuilder.append(<span class="string">"苹果"</span>);</div><div class="line">        &#125;</div><div class="line">        textView.setText(stringBuilder.toString());</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        getMenuInflater().inflate(R.menu.toolbar_action,menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (item.getItemId() == android.R.id.home) &#123;</div><div class="line">            finish();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改状态栏"><a href="#修改状态栏" class="headerlink" title="修改状态栏"></a>修改状态栏</h3><p>最初的时候，<code>iOS</code>和<code>Android</code>一个比较大的不同就是状态栏，<code>iOS</code>的状态栏属于当前视图的一部分，而<code>Android</code>却永远是黑色的。好在在<code>Android 5.0</code>之后，也可以对状态栏进行修改了。</p>
<p>要想让背景图能和系统的状态栏融合，需要借助<code>android:fitsSystemWindows</code>这个属性。我们需要在<code>activity_second.xml</code>修改布局，给<code>View</code>布局和它的所有父布局都添加这个属性。如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.SecondActivity"</span></div><div class="line">    </div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--标题栏--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"250dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/appBar"</span></div><div class="line">        </div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_toolbar"</span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></div><div class="line">            <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span></div><div class="line">            </div><div class="line">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span></div><div class="line">                <span class="attr">android:background</span>=<span class="string">"#956"</span></div><div class="line">                </div><div class="line">                <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">    </div><div class="line">	...</div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后，我们还需要在主题中将<code>android:statusBarColor</code>属性指定为<code>@android:color/transparent</code>，即将状态栏的颜色设置为透明。因为<code>android:statusBarColor</code>属性是从<code>API 21</code>才有的。所以，新建<code>values-v21.xml</code>布局，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"SecondActivityTheme"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里定义了<code>SecondActivityTheme</code>，并设置<code>android:statusBarColor</code>。然后将这个主题添加到<code>values.xml</code>中，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;item name="android:textColorPrimary"&gt;#000&lt;/item&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"SecondActivityTheme"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>/&gt;</span><span class="xml"></span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>最后，在<code>AndroidManifest.xml</code>文件中设置<code>SecondActivity</code>的主题：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.materialdesisgndemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span></span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@style/SecondActivityTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android26.png?raw=true" width="375"><br></div>


<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>好了，至此关于<code>Material Desisgn</code>风格的控件已经学的差不多了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先要说一下现在手机的UI风格，其实之前包括现在，&lt;code&gt;Android&lt;/code&gt;的界面设计都是模仿&lt;code&gt;iOS&lt;/code&gt;的，就拿我之前的公司，所有的&lt;code&gt;UI&lt;/code&gt;图都是根据&lt;code&gt;6s&lt;/code&gt;的尺寸，&lt;code&gt;iOS&lt;/code&gt;的设计风格来设计得到，&lt;code&gt;Android&lt;/code&gt;同学有时候就抱怨，这个好难实现，但是在&lt;code&gt;iOS&lt;/code&gt;上，实现起来就很容易了。那么在2014年，谷歌推出了&lt;code&gt;Material Desisgn&lt;/code&gt;，一套全新的界面设计语言，但是不少&lt;code&gt;Material Desisgn&lt;/code&gt;的效果却很难实现，而&lt;code&gt;Android&lt;/code&gt;中却几乎没有提供相应的&lt;code&gt;API&lt;/code&gt;支持，于是在2015年，谷歌推出了一个&lt;code&gt;Design Support&lt;/code&gt;库，这个库将&lt;code&gt;Material Desisgn&lt;/code&gt;中最具代表性的一些控件和效果进行了封装，那么，今天我们就来看看有哪些常用的控件。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>说一说JS和Objective-C的交互</title>
    <link href="http://www.guiyongdong.com/2017/04/14/%E8%AF%B4%E4%B8%80%E8%AF%B4JS%E5%92%8CObjective-C%E7%9A%84%E4%BA%A4%E4%BA%92/"/>
    <id>http://www.guiyongdong.com/2017/04/14/说一说JS和Objective-C的交互/</id>
    <published>2017-04-14T08:39:35.000Z</published>
    <updated>2017-04-14T10:35:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>很早以前就听闻<code>&lt;JavaScriptCore/JavaScriptCore.h&gt;</code>的大名了，只是没有正面接触过，有的也只是间接接触过，比如<code>ReactNative</code>，它渲染界面的核心就是<code>&lt;JavaScriptCore/JavaScriptCore.h&gt;</code>。但是今天就不得不和它有一次正面的接触了，公司要做一个功能，需要<code>Native</code>和<code>js</code>方法之间的互调，所以，本篇文章就说说如何实现。当然，本篇文章说的都是基础。</p>
<a id="more"></a>
<h3 id="JSContext"><a href="#JSContext" class="headerlink" title="JSContext"></a>JSContext</h3><p>这个东西是干什么的？看看苹果官方给的解释：A JSContextobject represents a JavaScript execution environment. You create and use JavaScript contexts to evaluate JavaScript scripts from Objective-C or Swift code, to access values defined in or calculated in JavaScript, and to make native objects, methods, or functions accessible to JavaScript.翻译一下，大概意思就是：<code>JSContext</code>就是整个<code>JavaScript</code>的上下文，拥有这个上下文，就可以访问<code>JavaScript</code>中的对象或者方法，也可以使用本地的对象或者方法来供<code>JavaScript</code>调用。说白了，通过<code>JSContext</code>就可以实现交互。</p>
<h5 id="获取JSContext"><a href="#获取JSContext" class="headerlink" title="获取JSContext"></a>获取<code>JSContext</code></h5><p>通常情况下可以在<code>webView</code>加载完以后获取:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    JSContext *context = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取到<code>JSContext</code>就可以和<code>js</code>交互了。</p>
<h3 id="js调用原生方法"><a href="#js调用原生方法" class="headerlink" title="js调用原生方法"></a>js调用原生方法</h3><p><code>JSContext</code>提供了两种方式，可以让<code>js</code>调用原生的方法，一种是<code>block</code>，一种是<code>JSExport</code>协议。</p>
<h5 id="使用block交互"><a href="#使用block交互" class="headerlink" title="使用block交互"></a>使用block交互</h5><p>例如，有如下网页:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"playAudio()"</span>&gt;</span>播放音频<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>点击<code>webView</code>中的播放按钮，然后调用原生的播放功能，我们这里定义播放按钮的方法为<code>playAudio</code>，所以在<code>Objective-C</code>这样调用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    JSContext *context = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line">    context[<span class="string">@"playAudio"</span>] = ^() &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"js调用本地开始播放"</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>点击播放按钮，控制台如下输出：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-14</span> <span class="number">17</span>:<span class="number">42</span>:<span class="number">42.692</span> JSCoreDemo[<span class="number">30994</span>:<span class="number">1357505</span>] js调用本地开始播放</div></pre></td></tr></table></figure></p>
<p>这里需要注意的是<code>js</code>中的方法名和<code>block</code>中的字符串一定要一样。</p>
<p>这种情况下，是<code>js</code>调用原生是不传参数的，那传参又该如何呢？</p>
<p>例如，如下网页：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">jsPlayAudio</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            nativePlayAudio(<span class="string">"http://www.baidu.com"</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"jsPlayAudio()"</span>&gt;</span>给Native传参<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里是显调用<code>js</code>的<code>jsPlayAudio</code>方法，然后调用原生的<code>nativePlayAudio</code>方法，并且传过去一个字符串。在<code>Objective-C</code>这样调用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    JSContext *context = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line">    context[<span class="string">@"nativePlayAudio"</span>] = ^() &#123;</div><div class="line">        <span class="built_in">NSArray</span> *args = [JSContext currentArguments];</div><div class="line">        <span class="keyword">for</span> (JSValue obj <span class="keyword">in</span> args) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"js传过来的参数是：%@"</span>,obj);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-14</span> <span class="number">17</span>:<span class="number">49</span>:<span class="number">19.051</span> JSCoreDemo[<span class="number">31131</span>:<span class="number">1367134</span>] js传过来的参数是：http:<span class="comment">//www.baidu.com</span></div></pre></td></tr></table></figure></p>
<p>通过<code>[JSContext currentArguments]</code>可以获取到所有的参数，因为参数有可能不是一个。所有的参数都会被包装成<code>JSValue</code>对象，查看<code>JSValue</code>可以看出，<code>JSValue</code>可以转换为：<code>Object</code>、<code>Bool</code>、<code>Double</code>、<code>Int32</code>、<code>UInt32</code>、<code>Number</code>、<code>String</code>、<code>Date</code>、<code>Array</code>、<code>Dictionary</code>等类型。并且<code>JSValue</code>还提供了一系列的判断是否是某一类型的方法。具体转换类型如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">  Objective-C type  |   JavaScript type</div><div class="line">--------------------+---------------------</div><div class="line">        nil         |     undefined</div><div class="line">       NSNull       |        null</div><div class="line">      NSString      |       string</div><div class="line">      NSNumber      |   number, boolean</div><div class="line">    NSDictionary    |   Object object</div><div class="line">      NSArray       |    Array object</div><div class="line">       NSDate       |     Date object</div><div class="line">      NSBlock (1)   |   Function object (1)</div><div class="line">         id (2)     |   Wrapper object (2)</div><div class="line">       Class (3)    | Constructor object (3)</div></pre></td></tr></table></figure>
<h5 id="使用JSExport交互"><a href="#使用JSExport交互" class="headerlink" title="使用JSExport交互"></a>使用JSExport交互</h5><p>使用<code>block</code>交互有一个问题，加入我们在<code>js</code>中不是直接调用方法，而是调用某个对象的某个方法，这个时候再使用<code>block</code>就不行了，这就使用到了<code>JSExport</code>。</p>
<p>例如，如下网页：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">jsPlayAudio</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            nativeObj.playAudio();</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"jsPlayAudio()"</span>&gt;</span>给Native传参<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>nativeObj</code>是在<code>js</code>中定义的对象，当然，<code>js</code>可能并没有创建这个对象。那该如何使用呢？</p>
<p>这里需要我们定义一个协议，并继承<code>JSExport</code>协议，在协议中添加方法，如下：</p>
<p><strong>BridgeModel.h</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;JavaScriptCore/JavaScriptCore.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">BridgeProtocol</span> &lt;<span class="title">JSExport</span>&gt;</span></div><div class="line">-  (<span class="keyword">void</span>)playAudio;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BridgeModel</span> : <span class="title">NSObject</span>&lt;<span class="title">BridgeProtocol</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>BridgeModel.m</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"BridgeModel.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">BridgeModel</span></span></div><div class="line">-  (<span class="keyword">void</span>)playAudio &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"js调用本地开始播放"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>需要如此使用：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    JSContext *context = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];    </div><div class="line">    BridgeModel *model = [[BridgeModel alloc] init];</div><div class="line">    context[<span class="string">@"nativeObj"</span>] = model;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>记住，<code>js</code>中的对象名和<code>Objective-C</code>中的对象名要一致。并且协议方法一定不能是<code>@optional</code>。</p>
<p>输出如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-14</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">41.545</span> JSCoreDemo[<span class="number">31708</span>:<span class="number">1402262</span>] js调用本地开始播放</div></pre></td></tr></table></figure></p>
<p>我们再来看看传参该如何处理：</p>
<p>例如，如下网页：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">jsPlayAudio</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            nativeObj.playAudioWithUrlAndType(<span class="string">"http://www.baidu.com"</span>,<span class="number">666</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"jsPlayAudio()"</span>&gt;</span>给Native传参<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里传了两个参数。</p>
<p>来看<code>Objective-C</code>:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">BridgeProtocol</span> &lt;<span class="title">JSExport</span>&gt;</span></div><div class="line">- (<span class="keyword">void</span>)playAudioWithUrl:(<span class="built_in">NSString</span> *)url AndType:(<span class="built_in">NSInteger</span>)type;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)playAudioWithUrl:(<span class="built_in">NSString</span> *)url AndType:(<span class="built_in">NSInteger</span>)type &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"js调用本地开始播放--%@--%ld"</span>,url,type);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>协议中我们定义了一个方法，<code>playAudioWithUrl</code>和<code>AndType</code>拼起来正好是<code>js</code>中的方法，所以，只要原生的方法拼起来和<code>js</code>中的方法一致就可以调用。</p>
<p>输出如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-14</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">45.854</span> JSCoreDemo[<span class="number">31973</span>:<span class="number">1416619</span>] js调用本地开始播放--http:<span class="comment">//www.baidu.com--666</span></div></pre></td></tr></table></figure></p>
<h3 id="原生调用js"><a href="#原生调用js" class="headerlink" title="原生调用js"></a>原生调用js</h3><p>使用原生调用js方法就很简单了。</p>
<p>例如，如下网页：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">endAudio</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">            alert(<span class="string">'停止'</span>+str);</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">endAudio</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">            alert(<span class="string">'停止'</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"jsPlayAudio()"</span>&gt;</span>给Native传参<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>直接使用<code>JSContext</code>就可以调用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    JSContext *context = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line">    </div><div class="line">    [context evaluateScript:<span class="string">@"endAudio()"</span>];</div><div class="line">    [context evaluateScript:<span class="string">@"endAudio(abc)"</span>];    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，想调用某个<code>js</code>对象的方法，也可以直接调用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[context evaluateScript:<span class="string">@"jsObj.endAudio(abc)"</span>];</div></pre></td></tr></table></figure>
<p>另外，你也可以传<code>JSValue</code>对象：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *js = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"endAudio(%@)"</span>,[JSValue valueWithDouble:<span class="number">1.11</span> inContext:context]];</div><div class="line">[context evaluateScript:js];</div></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>好了，基本的<code>Objective-C</code>和<code>js</code>交互已经说完了，至于更强大的功能，就由你慢慢专研吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很早以前就听闻&lt;code&gt;&amp;lt;JavaScriptCore/JavaScriptCore.h&amp;gt;&lt;/code&gt;的大名了，只是没有正面接触过，有的也只是间接接触过，比如&lt;code&gt;ReactNative&lt;/code&gt;，它渲染界面的核心就是&lt;code&gt;&amp;lt;JavaScriptCore/JavaScriptCore.h&amp;gt;&lt;/code&gt;。但是今天就不得不和它有一次正面的接触了，公司要做一个功能，需要&lt;code&gt;Native&lt;/code&gt;和&lt;code&gt;js&lt;/code&gt;方法之间的互调，所以，本篇文章就说说如何实现。当然，本篇文章说的都是基础。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="http://www.guiyongdong.com/categories/Objective-C/"/>
    
    
      <category term="js交互" scheme="http://www.guiyongdong.com/tags/js%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative利用CodePush实现热更新</title>
    <link href="http://www.guiyongdong.com/2017/04/07/ReactNative%E5%88%A9%E7%94%A8CodePush%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://www.guiyongdong.com/2017/04/07/ReactNative利用CodePush实现热更新/</id>
    <published>2017-04-07T02:55:30.000Z</published>
    <updated>2017-04-08T07:37:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要说一下如何利用<code>ReactNative</code>的<code>jsbundle</code>机制来实现<code>App</code>的热更新。</p>
<p>前段时间<code>iOS</code>界发生了一件大事，苹果禁止含有热更新或者热修复的<code>APP</code>上架，这里主要是禁止使用<code>runtime</code>的一些特性。但是<code>ReactNative</code>不同，它没有使用到<code>runtime</code>特性，并且好多人已经证实，<code>ReactNative</code>应用依然可以上线。</p>
<p>其实好多应用并不是使用<code>ReactNative</code>直接开发，而是在原生应用的基础上，导入<code>ReactNative</code>。<code>iOS</code>最好使用<code>cocoapods</code>导入，<code>Android</code>使用<code>build.gradle</code>添加依赖包。本篇文章主要包含三个部分：环境搭建、<code>iOS</code>热更新和<code>Android</code>热更新。</p>
<a id="more"></a>
<h3 id="环境搭建-macOS"><a href="#环境搭建-macOS" class="headerlink" title="环境搭建-macOS"></a>环境搭建-macOS</h3><p>在了解本篇文章之前，你要把<code>ReactNative</code>的环境配好，你可以看<a href="http://reactnative.cn/docs/0.43/getting-started.html" target="_blank" rel="external">这里</a>来配置环境。如果你是<code>macOS</code>系统，这里推荐你一定要装<code>Homebrew</code>，因为<code>Homebrew</code>是<code>macOS</code>下的包管理器，可以安装很多软件。但是，这里并不推荐你使用<code>Homebrew</code>来安装<code>Node</code>，最好使用<code>nvm</code>来安装<code>node</code>，主要是因为<code>nvm</code>是一个强大的<code>node</code>包管理器，在你本机上你可以安装好几个版本的<code>node</code>，并且可以切换任意版本的<code>node</code>。可以使用<code>Homebrew</code>来安装<code>nvm</code>。</p>
<p><strong>安装Homebrew</strong></p>
<p>直接在终端执行以下命令即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<p>因为<code>macOS</code>自带<code>ruby</code>，放在<code>/usr/bin</code>目录下，所以你可以直接使用<code>ruby</code>命令。下面的你可以不实现：（如果你的<code>ruby</code>版本过低，最好别动系统自带的<code>ruby</code>，你可以使用<code>rvm</code>来添加新版本<code>ruby</code>，使用<code>homebrew</code>来安装<code>rvm</code>，重新配置环境变量即可。如果你当前<code>shell</code>是<code>bash</code>，则在当前用户目录下修改<code>.bash_profile</code>添加环境变量，如果当前<code>shell</code>是<code>zsh</code>，则在当前用户目录下修改<code>.zshrc</code>添加环境变量，我接下来所说的添加环境变量都这种情况，当然你电脑的<code>shell</code>也可能是另外两只情况，但是都一样）</p>
<p><strong>安装nvm</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">brew install nvm</div></pre></td></tr></table></figure>
<p>安装完<code>nvm</code>，必须要配置环境变量，需要在根据你当前的<code>shell</code>在相应的文件中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</div><div class="line">  . &quot;/usr/local/opt/nvm/nvm.sh&quot;</div></pre></td></tr></table></figure>
<p>然后可以使用如下命令查看是否配好环境:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nvm --version</div></pre></td></tr></table></figure></p>
<p><strong>安装node</strong></p>
<p>通过<code>nvm ls-remote</code>可以列出所有版本的<code>node</code>，你可以根据你的所需按钮指定版本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nvm install v6.10.0</div></pre></td></tr></table></figure>
<p>安装完<code>node</code>以后通过<code>nvm ls</code>查看当前已经按钮的有哪些版本。<code>node</code>中自带<code>npm</code>，所有你以后可以直接使用<code>npm</code>来安装其他依赖包。</p>
<p><strong>安装react-native-cli</strong></p>
<p>这是<code>ReactNative</code>命令，使用它可以构建<code>ReactNative</code>应用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install -g react-native-cli</div></pre></td></tr></table></figure>
<p><code>-g</code>表示安装到全局模块。</p>
<p>接下来还推荐你安装<code>Watchman</code>和<code>Flow</code>，但是你安装这写不影响开发，安装了更好。它们都可以通过<code>homebrew</code>来安装。</p>
<p>关于IDE，这里推荐<code>Visual Studio Code</code>和<code>WebStorm</code>，至于选哪个看你。</p>
<hr>
<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p><code>ReactNative</code>提供了热更新的功能，但是它并没有热更新的能力，我们需要借助其他平台来实现，这里推荐使用微软的<code>CodePush</code>，它专门用来给<code>ReactNative</code>和<code>Cordova</code>提供热更新管理。它是一个中央管理库。</p>
<h4 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h4><p>首先创建一个<code>iOS</code>工程，这里创建一个示例工程名为：<code>CodePushDemo</code>，并添加<code>cocoapods</code>支持。为了方便管理，我们在工程的根目录下创建一个名为<code>ReactNative</code>的文件夹，这里面放置所有关于<code>ReactNative</code>的文件。打开终端，并进入到<code>ReactNative</code>文件夹中。使用下列命令来初始化依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm init</div><div class="line">npm install --save react react-native</div></pre></td></tr></table></figure>
<p>至此，你文件夹下会有如下文件：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/reactnative/reactnative1.png?raw=true" width="375"><br></div>

<p>打开<code>package.json</code>，如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"CodePushDemo"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"node node_modules/react-native/local-cli/cli.js start"</span>,</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"jest"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"GYD"</span>,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"react"</span>: <span class="string">"^16.0.0-alpha.6"</span>,</div><div class="line">    <span class="attr">"react-native"</span>: <span class="string">"^0.43.1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"babel-jest"</span>: <span class="string">"19.0.0"</span>,</div><div class="line">    <span class="attr">"babel-preset-react-native"</span>: <span class="string">"1.9.1"</span>,</div><div class="line">    <span class="attr">"jest"</span>: <span class="string">"19.0.2"</span>,</div><div class="line">    <span class="attr">"react-test-renderer"</span>: <span class="string">"16.0.0-alpha.6"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"jest"</span>: &#123;</div><div class="line">    <span class="attr">"preset"</span>: <span class="string">"react-native"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，<code>React</code>和<code>ReactNative</code>包我们已经下好了，下面需要装一下<code>code-push-cli</code>，这是<code>CodePush</code>为我们提供的管理工具。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install -g code-push-cli</div></pre></td></tr></table></figure>
<p>如此，<code>code-push-cli</code>已经装好，使用<code>code-push -v</code>可以查看当前版本。</p>
<p>接下来还需要导入<code>CodePush</code>包。依然使用终端，进入到我们刚刚创建的<code>ReactNative</code>文件夹中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install react-native-code-push</div></pre></td></tr></table></figure>
<p>然后你再次打开<code>package.json</code>，你会发现在<code>dependencies</code>字段下多了<code>&quot;react-native-code-push&quot;: &quot;^2.0.1-beta&quot;</code>这一句，说明我们的包已经添加好了。</p>
<p>至此，我们说有的<code>ReactNative</code>依赖已经添加好。</p>
<h4 id="添加pod依赖"><a href="#添加pod依赖" class="headerlink" title="添加pod依赖"></a>添加pod依赖</h4><p>我们这里使用<code>cocoapods</code>来添加<code>ReactNative</code>的依赖，打开并编辑<code>Podfile</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">platform :ios, ‘8.0’</div><div class="line"></div><div class="line">target &apos;CodePushDemo&apos; do</div><div class="line">  # 导入ReactNative 注意，这里的path路径一定要写对 因为我们的node_modules放在了ReactNative文件夹下。</div><div class="line">  pod &apos;React&apos;, :path =&gt; &apos;./ReactNative/node_modules/react-native&apos;, :subspecs =&gt; [</div><div class="line">    &apos;Core&apos;,</div><div class="line">    &apos;RCTText&apos;,</div><div class="line">    &apos;RCTNetwork&apos;,</div><div class="line">    &apos;RCTWebSocket&apos;, # 这个模块是用于调试功能的</div><div class="line">    # 在这里继续添加你所需要的模块</div><div class="line">  ]</div><div class="line">  # 如果你的RN版本 &gt;= 0.42.0，请加入下面这行</div><div class="line">  pod &quot;Yoga&quot;, :path =&gt; &quot;./ReactNative/node_modules/react-native/ReactCommon/yoga&quot;	</div><div class="line">  #CodePush 热更新</div><div class="line">  pod &apos;CodePush&apos;, :path =&gt; &apos;./ReactNative/node_modules/react-native-code-push&apos;</div><div class="line"></div><div class="line">  target &apos;CodePushDemoTests&apos; do</div><div class="line">    inherit! :search_paths</div><div class="line">  end</div><div class="line"></div><div class="line">  target &apos;CodePushDemoUITests&apos; do</div><div class="line">    inherit! :search_paths</div><div class="line">  end</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure>
<p>然后执行<code>pod install</code>，接下来打开工程，看是否编译通过。</p>
<h4 id="在CodePush上创建应用"><a href="#在CodePush上创建应用" class="headerlink" title="在CodePush上创建应用"></a>在CodePush上创建应用</h4><p><strong>注册账号</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">code-push register</div></pre></td></tr></table></figure></p>
<p>你注册完成以后会给你一个key，你需要将这个key输入终端。</p>
<p><strong>向CodePush服务器注册app</strong><br>为了让CodePush服务器知道你的app，我们需要向它注册app： 在终端输入code-push app add <appname>即可完成注册。</appname></p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/reactnative/reactnative2.png?raw=true" width="375"><br></div>

<p>注册完成之后会返回一套deployment key，该key在后面步骤中会用到。</p>
<p>注意，因为<code>CodePush</code>不会区分<code>iOS</code>和<code>Android</code>，所以我们需要注册两个<code>APP</code>。</p>
<p><code>code-push</code> 关于<code>app</code>的相关命令：</p>
<ul>
<li><code>code-push app add</code> 在账号里面添加一个新的app </li>
<li><code>code-push app remove</code> 在账号里移除一个app </li>
<li><code>code-push app rename</code> 重命名一个存在app</li>
<li><code>code-push app list</code> 列出账号下面的所有app </li>
<li><code>code-push app transfer</code> 把app的所有权转移到另外一个账号 </li>
</ul>
<h4 id="使用CodePush"><a href="#使用CodePush" class="headerlink" title="使用CodePush"></a>使用CodePush</h4><p>首先在<code>Info.plist</code>文件中添加键值对：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CodePushDeploymentKey<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>zjS1l098BMmScNFNrOl7ZmsAi3VCNylurZJ6M<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中这个key是你在注册<code>app</code>的时候<code>CodePush</code>给你的，我们这里使用<code>Production key</code>。你也可以通过<code>code-push deployment ls &lt;APP_NAME&gt; -k</code>来查看<code>deployment key</code>。</p>
<p>当然，在我们测试的时候，要把工程更改为<code>Release</code>模式。</p>
<p>然后创建<code>index.ios.js</code>，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React , &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="comment">//导入热更新</span></div><div class="line"><span class="keyword">import</span> codePush <span class="keyword">from</span> <span class="string">"react-native-code-push"</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CodePushDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.highScoresTitle&#125;</span>&gt;</span></div><div class="line">          测试</div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  componentDidMount()&#123;</div><div class="line">    <span class="comment">//检查是否有信版本</span></div><div class="line">    codePush.sync();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: <span class="number">1</span>,</div><div class="line">    justifyContent: <span class="string">'center'</span>,</div><div class="line">    alignItems: <span class="string">'center'</span>,</div><div class="line">    backgroundColor: <span class="string">'#FFFFFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  highScoresTitle: &#123;</div><div class="line">    fontSize: <span class="number">20</span>,</div><div class="line">    textAlign: <span class="string">'center'</span>,</div><div class="line">    margin: <span class="number">10</span>,</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 整体js模块的名称</span></div><div class="line">AppRegistry.registerComponent(<span class="string">'CodePushDemo'</span>, () =&gt; CodePushDemo);</div></pre></td></tr></table></figure>
<p>首先要导入热更新模块<code>import codePush from &quot;react-native-code-push&quot;;</code>，而且我们一般再<code>componentDidMount</code>方法中调用<code>sync</code>放，后台请求更新。</p>
<p>我们在原生里面需要这么使用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"RNViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTRootView.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBundleURLProvider.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;CodePush/CodePush.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RNViewController</span> ()</span></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RNViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">    <span class="keyword">self</span>.title = <span class="string">@"RN界面"</span>;</div><div class="line">  </div><div class="line">    <span class="built_in">NSURL</span> *jsCodeLocation;  </div><div class="line">    jsCodeLocation = [CodePush bundleURL];</div><div class="line">    RCTRootView *view = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation moduleName:<span class="string">@"CodePushDemo"</span> initialProperties:<span class="literal">nil</span> launchOptions:<span class="literal">nil</span>];</div><div class="line">    view.frame = <span class="keyword">self</span>.view.bounds;</div><div class="line">    [<span class="keyword">self</span>.view addSubview:view];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们知道，<code>ReactNative</code>是以<code>bundle</code>的形式加载界面的，所以，我们需要向<code>CodePush</code>提交我们的新<code>Bundle</code>。</p>
<p>将<code>js</code>打包成<code>Bundle</code>的命令是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">react-native bundle --platform 平台 --entry-file 启动文件 --bundle-output 打包js输出文件 --assets-dest 资源输出目录 --dev 是否调试。 </div><div class="line"></div><div class="line">react-native bundle --platform ios --entry-file index.ios.js --bundle-output ./bundle/main.jsbundle --dev false</div></pre></td></tr></table></figure>
<p>最终打好的包如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/reactnative/reactnative3.png?raw=true" width="375"><br></div>

<p>注意，这里有一个坑，在你首次打好包以后，或者你重新上传<code>app</code>到<code>appstore</code>的时候，你需要先把这个<code>main.jsbundle</code>导入到工程中，但是以后更新<code>bundle</code>的时候就不用再次导了，总之，需要保证你的工程中有一个<code>main.jsbundle</code>。</p>
<p>接下来，需要把我们新打好的<code>bundle</code>上传到<code>CodePush</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">code-push release &lt;应用名称&gt; &lt;Bundles所在目录&gt; &lt;对应的应用版本&gt; --deploymentName： 更新环境 --description： 更新描述 --mandatory： 是否强制更新</div><div class="line"></div><div class="line">code-push release CodePushDemo ./bundle/main.jsbundle 1.0.0 --deploymentName Production --description &quot;1.0&quot; --mandatory true</div></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li><code>CodePush</code>默认是<code>staging</code>环境，这里我们切换到<code>Production</code>环境</li>
<li>如果有<code>mandatory</code>则<code>CodePush</code>会根据<code>mandatory</code>是<code>true</code>或<code>false</code>来控制应用是否强制更新。默认情况下<code>mandatory</code>为<code>false</code>即不强制更新。</li>
<li>对应的应用版本（<code>targetBinaryVersion</code>）是指当前app的版本，也就是说此次更新的<code>bundle</code>对应的是<code>app</code>的那个版本。不要将其理解为这次<code>js</code>更新的版本。</li>
<li>如果我们要对某一个应用版本进行多次更新，只需要上传与上次不同的<code>bundle</code>即可</li>
</ul>
<p>在终端输入 <code>code-push deployment history &lt;appName&gt; Production</code> 可以看到<code>Production</code>版本更新的时间、描述等等属性。 </p>
<p>应用启动之后，从<code>CodePush</code>服务器查询更新，并下载到本地，下载好之后跟新界面。</p>
<p>更多部署命令：</p>
<ul>
<li><code>code-push deployment rm</code> 删除部署</li>
</ul>
<p>接下来我们再来看看<code>codePush.sync()</code>方法，它可以传如下几种参数：</p>
<ul>
<li>deploymentKey （String）： 部署key，指定你要查询更新的部署秘钥，默认情况下该值来自于Info.plist(iOS)和MianActivity.java(Android)文件，你可以通过设置该属性来动态查询不同部署key下的更新。</li>
<li>installMode (codePush.InstallMode)： 安装模式，用在向CodePush推送更新时没有设置强制更新(mandatory为true)的情况下，默认codePush.InstallMode.ON_NEXT_RESTART即下一次启动的时候安装。</li>
<li>mandatoryInstallMode (codePush.InstallMode):强制更新,默认codePush.InstallMode.IMMEDIATE。</li>
<li>minimumBackgroundDuration (Number):该属性用于指定app处于后台多少秒才进行重启已完成更新。默认为0。该属性只在installMode为InstallMode.ON_NEXT_RESUME情况下有效。</li>
</ul>
<p>至此，<code>iOS</code>热更新已经说完。</p>
<hr>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><h4 id="创建工程-1"><a href="#创建工程-1" class="headerlink" title="创建工程"></a>创建工程</h4><p>首先，我们依然需要创建<code>package.json</code>，并添加依赖包。最终的工程目录为：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/reactnative/reactnative5.png?raw=true" width="375"><br></div>

<p>接下来配置<code>Android</code>工程，添加依赖。这里我们先添加<code>ReactNative</code>依赖，这里面的坑还是不少的。</p>
<h4 id="添加ReactNative依赖"><a href="#添加ReactNative依赖" class="headerlink" title="添加ReactNative依赖"></a>添加ReactNative依赖</h4><p>在你的app中 build.gradle 文件中添加 React Native 依赖:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile &apos;com.facebook.react:react-native:0.43.1&apos;</div><div class="line">&#125;</div><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    configurations.all &#123;</div><div class="line">        resolutionStrategy.force &apos;com.google.code.findbugs:jsr305:1.3.9&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>react-native</code>后面的版本是你当前<code>package.json</code>内的<code>react-native</code>版本。在这里我们还添加了<code>configurations.all</code>，这里是为了兼容<code>appcompat</code>库。</p>
<p>然后在项目的<code>build.gradle</code>文件中为<code>ReactNative</code>添加一个<code>maven</code>依赖的入口，必须写在<code>&quot;allprojects&quot;</code>代码块中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123;</div><div class="line">            // All of React Native (JS, Android binaries) is installed from npm</div><div class="line">            url &quot;$rootDir/../ReactNative/node_modules/react-native/android&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加完依赖后，新建一个<code>RNActivity</code>。在<code>MainActivity</code>中添加一个按钮，按钮点击打开<code>RNActivity</code>，在<code>RNActivity</code>里面的添加<code>ReactNative</code>界面。由于需要一些权限问题，所以一定要在<code>AndroidManifest.xml</code>文件中添加如下权限：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.SYSTEM_ALERT_WINDOW"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.SYSTEM_OVERLAY_WINDOW"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>因为<code>SYSTEM_OVERLAY_WINDOW</code>是运行时权限，所以我们要在按钮点击的时候去添加权限。<code>MainActivity</code>如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.button);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (!Settings.canDrawOverlays(MainActivity.<span class="keyword">this</span>)) &#123;</div><div class="line">                        <span class="comment">//开启权限</span></div><div class="line">                        Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</div><div class="line">                        startActivity(intent);</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        openRNActivity();</div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    openRNActivity();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openRNActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,RNActivity.class);</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再来看<code>RNActivity</code>，因为我们是将<code>ReactNative</code>作为一个子界面放在布局中的，所以我们直接在<code>RNActivity</code>的布局文件中添加<code>ReactRootView</code>布局，布局如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.codepushdemoandroid.RNActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.facebook.react.ReactRootView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rn_layout"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后看<code>RNActivity.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RNActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">DefaultHardwareBackBtnHandler</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> ReactRootView mReactRootView;</div><div class="line">    <span class="keyword">private</span> ReactInstanceManager mReactInstanceManager;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_rn);</div><div class="line"></div><div class="line">        mReactRootView = (ReactRootView) findViewById(R.id.rn_layout);</div><div class="line">        mReactInstanceManager = ReactInstanceManager.builder()</div><div class="line">                .setCurrentActivity(<span class="keyword">this</span>)</div><div class="line">                .setApplication(getApplication())</div><div class="line">                .setBundleAssetName(<span class="string">"index.android.bundle"</span>)</div><div class="line">                .setJSMainModuleName(<span class="string">"index.android"</span>)</div><div class="line">                .addPackage(<span class="keyword">new</span> MainReactPackage())</div><div class="line">                .setUseDeveloperSupport(BuildConfig.DEBUG)</div><div class="line">                .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">                .build();</div><div class="line">        mReactRootView.startReactApplication(mReactInstanceManager,<span class="string">"CodePushDemoAndroid"</span>,<span class="keyword">null</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeDefaultOnBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onBackPressed();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onHostPause(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onHostResume(<span class="keyword">this</span>, <span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onHostDestroy();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onBackPressed();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">super</span>.onBackPressed();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ReactRootView</code>就是我们的<code>ReactNative</code>界面，<code>ReactInstanceManager</code>主要是去加载<code>bundle</code>的，注意，这里的名字一定要和<code>js</code>中注册的名字一样。我们再来看<code>index.android.js</code>文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React , &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  Image</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CodePushDemoAndroid</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.highScoresTitle&#125;</span>&gt;</span></div><div class="line">          我是ReactNative界面</div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: <span class="number">1</span>,</div><div class="line">    justifyContent: <span class="string">'center'</span>,</div><div class="line">    alignItems: <span class="string">'center'</span>,</div><div class="line">    backgroundColor: <span class="string">'#FFFFFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  highScoresTitle: &#123;</div><div class="line">    fontSize: <span class="number">20</span>,</div><div class="line">    textAlign: <span class="string">'center'</span>,</div><div class="line">    margin: <span class="number">10</span>,</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 整体js模块的名称</span></div><div class="line">AppRegistry.registerComponent(<span class="string">'CodePushDemoAndroid'</span>, () =&gt; CodePushDemoAndroid);</div></pre></td></tr></table></figure>
<p>最终运行结果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/reactnative/reactnative6.gif?raw=true" width="375"><br></div>

<p>至此，我们<code>Android</code>原生项目导入<code>ReactNative</code>已经完成，是不是感觉比<code>iOS</code>坑太多了。<br>下面我们再来看如何导入<code>CodePush</code>。</p>
<h4 id="添加CodePush依赖"><a href="#添加CodePush依赖" class="headerlink" title="添加CodePush依赖"></a>添加CodePush依赖</h4><p>在使用<code>CodePush</code>之前，我们依然要在<code>CodePush</code>平台上添加一个<code>APP</code>，获取<code>key</code>。这些过程和<code>iOS</code>一样，这里就不再说了。</p>
<p>在 <code>app</code>的<code>build.gradle</code>文件里面添如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">apply from: &quot;../../ReactNative/node_modules/react-native-code-push/android/codepush.gradle&quot;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile project(&apos;:react-native-code-push&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，这里的路径一定要根据实际情况来写。比如我的<code>node_modules</code>是放在了和工程目录同一目录下的<code>ReactNative</code>文件夹下。</p>
<p>然后在工程下的<code>settings.gradle</code>中添加如下代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">include &apos;:react-native-code-push&apos;</div><div class="line">project(&apos;:react-native-code-push&apos;).projectDir = new File(rootProject.projectDir, &apos;../ReactNative/node_modules/react-native-code-push/android/app&apos;)</div></pre></td></tr></table></figure>
<p>这里是将<code>react-native-code-push</code>模块导入到工程中，作为一个子模块。</p>
<p>注意，你<code>Android</code>工程的<code>buildToolsVersion</code>版本可能比<code>react-native-code-push</code>的版本高，所以你需要修改<code>react-native-code-push</code>的版本。</p>
<p>至此，<code>CodePush</code>的环境算是配好了。接下来看如何使用。</p>
<p>在这里，你只需要修改<code>RNActivity.java</code>中<code>onCreate</code>方法就行:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RNActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">DefaultHardwareBackBtnHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ReactRootView mReactRootView;</div><div class="line">    <span class="keyword">private</span> ReactInstanceManager mReactInstanceManager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_rn);</div><div class="line">        <span class="comment">// 这里的key要替换成你自己的key</span></div><div class="line">        CodePush codepush = <span class="keyword">new</span> CodePush(<span class="string">"_lVphT2Ox1tyCFRIhzVrBoTcGwKbNylurZJ6M"</span>,getApplication(),BuildConfig.DEBUG);</div><div class="line">        <span class="comment">// 本地bundle的路径</span></div><div class="line">        String path = CodePush.getJSBundleFile();</div><div class="line">        </div><div class="line">        mReactRootView = (ReactRootView) findViewById(R.id.rn_layout);</div><div class="line">        mReactInstanceManager = ReactInstanceManager.builder()</div><div class="line">                .setCurrentActivity(<span class="keyword">this</span>)</div><div class="line">                .setApplication(getApplication())</div><div class="line">                .setJSBundleFile(path)</div><div class="line"><span class="comment">//                .setBundleAssetName("index.android.bundle")</span></div><div class="line"><span class="comment">//                .setJSMainModuleName("index.android")</span></div><div class="line">                .addPackage(<span class="keyword">new</span> MainReactPackage())</div><div class="line">                .addPackage(codepush)</div><div class="line">                .setUseDeveloperSupport(BuildConfig.DEBUG)</div><div class="line">                .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">                .build();</div><div class="line">        mReactRootView.startReactApplication(mReactInstanceManager,<span class="string">"CodePushDemoAndroid"</span>,<span class="keyword">null</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出来，之前我们是使用<code>setBundleAssetName(&quot;index.android.bundle&quot;)</code>和<code>setJSMainModuleName(&quot;index.android&quot;)</code>方法去加载本地<code>bundle</code>，现在我们使用<code>setJSBundleFile(path)</code>并且还添加了<code>addPackage(codepush)</code>。好了，现在这个界面就可以随时更新了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实，<code>ReactNative</code>为什么能热更新？主要是因为我们使用<code>js</code>将代码写好，然后使用<code>ReactNative</code>将<code>js</code>代码打包成<code>jsbundle</code>，而真正去执行代码的就是这个<code>jsbundle</code>，只要你的<code>app</code>支持<code>ReactNative</code>环境，就可以去加载<code>jsbundle</code>，而这个<code>jsbundle</code>其实是放在本地的。所以，你完全可以自己搭一个服务器，去判断远端是否有新<code>bundle</code>，如果有，那么下载下来，替换本地的<code>bundle</code>，等到下次运行的时候就可以更新的。当然，你也可以在下载完以后才去加载这个<code>bundle</code>。我们使用<code>CodePush</code>，只是因为它版本的控制等做的比较好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要说一下如何利用&lt;code&gt;ReactNative&lt;/code&gt;的&lt;code&gt;jsbundle&lt;/code&gt;机制来实现&lt;code&gt;App&lt;/code&gt;的热更新。&lt;/p&gt;
&lt;p&gt;前段时间&lt;code&gt;iOS&lt;/code&gt;界发生了一件大事，苹果禁止含有热更新或者热修复的&lt;code&gt;APP&lt;/code&gt;上架，这里主要是禁止使用&lt;code&gt;runtime&lt;/code&gt;的一些特性。但是&lt;code&gt;ReactNative&lt;/code&gt;不同，它没有使用到&lt;code&gt;runtime&lt;/code&gt;特性，并且好多人已经证实，&lt;code&gt;ReactNative&lt;/code&gt;应用依然可以上线。&lt;/p&gt;
&lt;p&gt;其实好多应用并不是使用&lt;code&gt;ReactNative&lt;/code&gt;直接开发，而是在原生应用的基础上，导入&lt;code&gt;ReactNative&lt;/code&gt;。&lt;code&gt;iOS&lt;/code&gt;最好使用&lt;code&gt;cocoapods&lt;/code&gt;导入，&lt;code&gt;Android&lt;/code&gt;使用&lt;code&gt;build.gradle&lt;/code&gt;添加依赖包。本篇文章主要包含三个部分：环境搭建、&lt;code&gt;iOS&lt;/code&gt;热更新和&lt;code&gt;Android&lt;/code&gt;热更新。&lt;/p&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="http://www.guiyongdong.com/categories/ReactNative/"/>
    
    
      <category term="reactnative" scheme="http://www.guiyongdong.com/tags/reactnative/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之AsyncTask</title>
    <link href="http://www.guiyongdong.com/2017/04/05/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BAsyncTask/"/>
    <id>http://www.guiyongdong.com/2017/04/05/一天一Android之AsyncTask/</id>
    <published>2017-04-05T09:54:27.000Z</published>
    <updated>2017-04-06T08:27:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间我有说过<code>Handler</code>、<code>Message</code>、<code>Looper</code>三者之间的关系，它们可以解决线程间通信，可以用作子线程处理耗时操作，主线程刷新UI等。今天我要说的是另外一种解决方案：<code>AsyncTask</code>。它的内部还是使用异步消息处理机制，只是<code>Android</code>对这三者进行了高度的封装。如果你对异步消息处理机制还不是很清楚的话，你可以看看这篇文章:<a href="http://www.guiyongdong.com/2017/03/27/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8B%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/">一天一Android之异步消息处理机制</a>。来看看<code>AsyncTask</code>到底如何使用。</p>
<a id="more"></a>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>首先看一下<code>AsyncTask</code>的基本用法，因为<code>AsyncTask</code>是一个抽象类，所以如果我们想使用它，就必须要创建一个子类去继承它，在继承时，我们可以为<code>AsyncTask</code>类来指定3个泛型参数，这3个参数的用途如下：</p>
<ul>
<li>Params 在执行<code>AsyncTask</code>时需要传入的参数，可以在后台任务中使用</li>
<li>Progress 后台任务执行时，如果需要在界面上显示当前的进度，则使用这里指定的泛型作为返回值类型</li>
<li>Result 当任务执行完毕后，如果需要对结果进行返回，则使用这里指定的泛型作为返回值类型。</li>
</ul>
<p>所以，我们定义一个<code>AsyncTask</code>就可以写成如下方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>,<span class="title">Integer</span>,<span class="title">Void</span>&gt; </span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里，我们指定第一个泛型参数为<code>Void</code>，表示在执行<code>AsyncTask</code>的时候不需要传入参数给后台任务，第二个泛型参数我们指定为<code>Integer</code>，表示使用整型数据来作为进度显示单位，第三个泛型参数指定为<code>Void</code>，表示不指定反馈执行结果。</p>
<p>一般情况下，我们需要重写<code>AsyncTask</code>中的几个方法才能完成对任务的定制。经常需要重写的方法有四个：</p>
<p><strong>onPreExecute()</strong></p>
<p>这个方法会在后台任务开始执行之前调用，一般我们会在这里进行一些初始化，比如显示一个进度条对话框等。此方法执行在主线程中。</p>
<p><strong>doInBackground(Void… params)</strong></p>
<p>这个方法中的所有代码都在子线程中执行，应当在这里进行耗时的操作，一旦完成操作，可以使用<code>return</code>语句来将执行的结果返回，因为我们这里定义的返回类型是<code>Void</code>，所以我们这里可以不返回或者返回<code>null</code>。另外特别注意，在这个方法中是不能进行UI操作的，如果需要更新UI，比如更新下载进度等，需要调用<code>publishProgress(Progress... values)</code>来完成。</p>
<p><strong>onProgressUpdate(Integer… values)</strong></p>
<p>当我们在后台任务中调用了<code>publishProgress(Progress... values)</code>方法后，这个方法就会被执行，并且执行在主线程中，而且此方法所带的参数正是在后台任务方法中传多来的，我们一般再这个方法中更新UI，比如更新下载进度等。</p>
<p><strong>onPostExecute(Void aVoid)</strong></p>
<p>当后台任务执行完成并且通过<code>return</code>语句返回时，这个方法就会被调用，返回的数据会作为参数传递到此方法中，可以利用返回的数据来进行一些操作，比如关闭进度条对话框等。当然，此方法执行在主线程中。</p>
<p>我们模拟一个下载任务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line">    <span class="keyword">private</span> ProgressDialog mProgressDialog;</div><div class="line">    <span class="keyword">private</span> TextView mTextView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        mTextView = (TextView) findViewById(R.id.textView);</div><div class="line">        mProgressDialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</div><div class="line">        mProgressDialog.setMax(<span class="number">100</span>);</div><div class="line">        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);</div><div class="line">        mProgressDialog.setCancelable(<span class="keyword">false</span>);</div><div class="line">        <span class="comment">//启动任务</span></div><div class="line">        <span class="keyword">new</span> DownloadTask().execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>,<span class="title">Integer</span>,<span class="title">Void</span>&gt; </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">//显示进度条对话框</span></div><div class="line">            mProgressDialog.show();</div><div class="line">            Log.d(TAG, <span class="string">"onPreExecute: "</span>+Thread.currentThread().getName());</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">            <span class="comment">//模拟耗时操作</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">80</span>);</div><div class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//更新下载进度</span></div><div class="line">                publishProgress(i);</div><div class="line">            &#125;</div><div class="line">            Log.d(TAG, <span class="string">"doInBackground: "</span>+Thread.currentThread().getName());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;</div><div class="line">            <span class="comment">//主线程更新进度对话框</span></div><div class="line">            mProgressDialog.setProgress(values[<span class="number">0</span>]);</div><div class="line">            Log.d(TAG, <span class="string">"onProgressUpdate: "</span>+Thread.currentThread().getName());</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Void aVoid)</span> </span>&#123;</div><div class="line">            <span class="comment">//主线程隐藏进度对话框</span></div><div class="line">            mProgressDialog.dismiss();</div><div class="line">            mTextView.setText(<span class="string">"加载完毕"</span>);</div><div class="line">            Log.d(TAG, <span class="string">"onPostExecute: "</span>+Thread.currentThread().getName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果想启动一个任务，只需要调用如下代码即可：<code>new DownloadTask().execute();</code></p>
<p>运行结果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android21.gif?raw=true" width="375"><br></div>


<h3 id="内部实现"><a href="#内部实现" class="headerlink" title="内部实现"></a>内部实现</h3><p>那么，<code>AsyncTask</code>内部是如何实现的呢？那么，就从我们的执行异步任务的起点开始，看看<code>execute</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec,</span></span></div><div class="line">        Params... params) &#123;</div><div class="line">    <span class="comment">//一个任务同一时间只能开启一次,即当前任务只有在结束以后才能再次开启</span></div><div class="line">    <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</div><div class="line">        <span class="keyword">switch</span> (mStatus) &#123;</div><div class="line">            <span class="keyword">case</span> RUNNING:</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></div><div class="line">                        + <span class="string">" the task is already running."</span>);</div><div class="line">            <span class="keyword">case</span> FINISHED:</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></div><div class="line">                        + <span class="string">" the task has already been executed "</span></div><div class="line">                        + <span class="string">"(a task can be executed only once)"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//设置当前任务的状态是正在进行</span></div><div class="line">    mStatus = Status.RUNNING;</div><div class="line">    <span class="comment">// 执行准备工作，我们一般都会重写这个方法</span></div><div class="line">    onPreExecute();</div><div class="line">    <span class="comment">//保存参数，并设置Handler回调</span></div><div class="line">    mWorker.mParams = params;</div><div class="line">    <span class="comment">//将mFuture添加到线程队列中</span></div><div class="line">    exec.execute(mFuture);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码的意思是：首先会判断当前任务是否已经在执行，如果已经在执行则抛出异常，然后设置当前任务的状态为运行状态，调用<code>onPreExecute()</code>方法，一般我们都会重写此方法，会进行一些初始化操作，当前方法还是在主线程中。然后保存参数，执行<code>exec.execute(mFuture)</code>，下面我们来看看<code>mWorker</code>和<code>mFuture</code>。</p>
<p>先来看看<code>mWorker</code>这个成员变量所属的类<code>WorkerRunnable</code>：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerRunnable</span>&lt;<span class="title">Params</span>, <span class="title">Result</span>&gt; <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Result</span>&gt; </span>&#123;</div><div class="line">    Params[] mParams;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，它只有一个成员变量，就是存储我们传入的参数的，并且它还是一个抽象类，并没有实现<code>Callable</code>接口的方法。我们再来看看<code>AsyncTask</code>的构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//创建mWorker 并实现call方法，在合适的时间会调用call方法</span></div><div class="line">    mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            mTaskInvoked.set(<span class="keyword">true</span>);</div><div class="line">            Result result = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">                <span class="comment">//执行后台任务</span></div><div class="line">                result = doInBackground(mParams);</div><div class="line">                Binder.flushPendingCommands();</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable tr) &#123;</div><div class="line">                mCancelled.set(<span class="keyword">true</span>);</div><div class="line">                <span class="keyword">throw</span> tr;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="comment">//后台任务结束，处理返回的结果</span></div><div class="line">                postResult(result);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里会对<code>mWorker</code>进行初始化。这里实现了<code>call</code>方法，并且设置<code>mTaskInvoked=true</code>，然后调用<code>doInBackground(mParams)</code>，之后又调用了<code>postResult(result)</code>方法来操作后台任务返回的结果，那<code>mWorker</code>的<code>call</code>方法什么时候被调用呢？我们等会再来看，先来看看<code>postResult()</code>方法的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="comment">//通过getHandler()方法获取Handler对象 然后创建Message对象</span></div><div class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</div><div class="line">            <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</div><div class="line">    <span class="comment">//异步发送消息</span></div><div class="line">    message.sendToTarget();</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>终于，我们看到了我们熟悉的异步消息机制，这里传递一个<code>message</code>，<code>message.what</code>为<code>MESSAGE_POST_RESULT</code>，<code>message.object</code>为<code>new AsyncTaskResult&lt;Result&gt;(this, result)</code>，我们再来看<code>AsyncTaskResult</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskResult</span>&lt;<span class="title">Data</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> AsyncTask mTask;</div><div class="line">    <span class="keyword">final</span> Data[] mData;</div><div class="line"></div><div class="line">    AsyncTaskResult(AsyncTask task, Data... data) &#123;</div><div class="line">        mTask = task;</div><div class="line">        mData = data;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AsyncTaskResult</code>只是一个简单的携带数据的对象。</p>
<p>看到这里，我们一定相信在某处还存在一个<code>Handler</code>。在<code>postResult(Result result)</code>方法中，通过<code>getHandler()</code>方法获取了一个<code>Handler</code>对象，我们再来看这个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (AsyncTask.class) &#123;</div><div class="line">        <span class="keyword">if</span> (sHandler == <span class="keyword">null</span>) &#123;</div><div class="line">            sHandler = <span class="keyword">new</span> InternalHandler();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sHandler;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码是线程安全的，并且对<code>sHandler</code>进行了初始化。通过查看<code>sHandler</code>，它是一个静态变量，所以我们可以得出，在整个<code>AsyncTask</code>体系中，都只存在一个<code>Handler</code>。我们再来看看<code>InternalHandler</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Looper.getMainLooper());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class="line">        <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">            <span class="keyword">case</span> MESSAGE_POST_RESULT:</div><div class="line">                <span class="comment">// There is only one result</span></div><div class="line">                result.mTask.finish(result.mData[<span class="number">0</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</div><div class="line">                result.mTask.onProgressUpdate(result.mData);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>InternalHandler</code>类重写了<code>handleMessage</code>方法，在接收到<code>MESSAGE_POST_RESULT</code>消息时，执行了<code>result.mTask.finish(result.mData[0])</code>，其实就是执行了<code>AsyncTask.this.finish(result)</code>，在接收早<code>MESSAGE_POST_PROGRESS</code>消息时，执行了<code>result.mTask.onProgressUpdate(result.mData)</code>，其实是执行了<code>AsyncTask.this.onProgressUpdate(progress)</code>，我们先看<code>finish</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isCancelled()) &#123;</div><div class="line">    	 <span class="comment">//如果是取消 回调onCancelled</span></div><div class="line">        onCancelled(result);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//正常结束任务 回调onPostExecute</span></div><div class="line">        onPostExecute(result);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//设置当前任务的状态</span></div><div class="line">    mStatus = Status.FINISHED;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，如果我们调用了<code>cancel()</code>，则执行<code>onCancelled()</code>回调。正常情况下调用的<code>onPostExecute()</code>，而我们一般都会重新<code>onPostExecute()</code>方法。</p>
<p>现在我们有个疑惑，那么后台任务在什么时候执行呢？那就要看<code>mFuture</code>了。再看<code>AsyncTask</code>的构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">    mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                postResultIfNotInvoked(get());</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                android.util.Log.w(LOG_TAG, e);</div><div class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"An error occurred while executing doInBackground()"</span>,</div><div class="line">                        e.getCause());</div><div class="line">            &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</div><div class="line">                postResultIfNotInvoked(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>任务执行结束会调用<code>postResultIfNotInvoked(get())</code>，<code>get()</code>表示获取<code>mWorker</code>的<code>call</code>方法的返回值，即<code>Result</code>，然后看<code>postResultIfNotInvoked</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postResultIfNotInvoked</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> wasTaskInvoked = mTaskInvoked.get();</div><div class="line">    <span class="keyword">if</span> (!wasTaskInvoked) &#123;</div><div class="line">        postResult(result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果<code>mTaskInvoked</code>不为<code>true</code>，则执行<code>postResult</code>，但是在<code>mWorker</code>初始化时就已经将<code>mTaskInvoked</code>为<code>true</code>，所以一般这个<code>postResult</code>执行不到。</p>
<p>好了，现在<code>mWorker</code>和<code>mFurture</code>都已经介绍完了，不过这里只是初始化了两个对象，并没有真正的执行，下面看真正调用执行的地方。</p>
<p>不知道大家还记得不，在<code>executeOnExecutor</code>中有这样一句代码<code>exec.execute(mFuture)</code>，而<code>exec</code>又是传过来的，为<code>sDefaultExecutor</code>。下面来看看这个<code>sDefaultExecutor</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">    <span class="comment">//线程队列</span></div><div class="line">    <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</div><div class="line">    Runnable mActive;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</div><div class="line">        mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    r.run();</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    scheduleNext();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</div><div class="line">            scheduleNext();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</div><div class="line">            THREAD_POOL_EXECUTOR.execute(mActive);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到<code>sDefaultExecutor</code>其实为<code>SerialExecutor</code>的一个实例，其内部维持一个任务队列，直接看其<code>execute(Runnable runnable)</code>方法，将<code>runnable</code>放入<code>mTasks</code>队尾。并且判断当前<code>mActive</code>是否为空，为空则调用<code>scheduleNext</code>方法，<code>scheduleNext</code>放则直接取出任务队列中的首任务，如果不为<code>null</code>则传入<code>THREAD_POOL_EXECUTOR</code>进行执行。</p>
<p>再来看<code>THREAD_POOL_EXECUTOR</code>是什么：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR;</div><div class="line"></div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</div><div class="line">            CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,</div><div class="line">            sPoolWorkQueue, sThreadFactory);</div><div class="line">    threadPoolExecutor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</div><div class="line">    THREAD_POOL_EXECUTOR = threadPoolExecutor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到就是一个自己设置参数的线程池，参数为：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = Math.max(<span class="number">2</span>, Math.min(CPU_COUNT - <span class="number">1</span>, <span class="number">4</span>));</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE_SECONDS = <span class="number">30</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadFactory sThreadFactory = <span class="keyword">new</span> ThreadFactory() &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger mCount = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"AsyncTask #"</span> + mCount.getAndIncrement());</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =</div><div class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">128</span>);</div></pre></td></tr></table></figure></p>
<p>看到这里，大家会认为背后原来有一个线程池，最大的并发数，长度等和CPU都有关系。但是，其实这是一个线性执行任务的线程池，大家再看<code>SerialExecutor</code>，在<code>execute</code>方法中，会判断当前<code>mActive</code>是不是空，如果不是空，是不会取下一个任务的，只有当前任务执行完成，才会取下一个任务。</p>
<p>再来看<code>mFuture</code>，在创建<code>mFuture</code>的时候就已经将<code>mWorker</code>传给了<code>mFuture</code>，而<code>mFuture</code>又是间接继承了<code>Runnable</code>类，所以，<code>mFuture</code>会在<code>run</code>方法中去执行<code>mWorker</code>的<code>call</code>方法：</p>
<p>先来看<code>FutureTask</code>类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (callable == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="comment">//记录回调</span></div><div class="line">    <span class="keyword">this</span>.callable = callable;</div><div class="line">    <span class="comment">//设置当前状态</span></div><div class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造方法中，记录了当前的<code>callable</code>也就是<code>mWorker</code>。我们直接看<code>run</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (state != NEW ||</div><div class="line">        !U.compareAndSwapObject(<span class="keyword">this</span>, RUNNER, <span class="keyword">null</span>, Thread.currentThread()))</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Callable&lt;V&gt; c = callable;</div><div class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span> &amp;&amp; state == NEW) &#123;</div><div class="line">            V result;</div><div class="line">            <span class="keyword">boolean</span> ran;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">            		<span class="comment">//调用mWorker 的 call方法 执行后台任务</span></div><div class="line">                result = c.call();</div><div class="line">                ran = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">                result = <span class="keyword">null</span>;</div><div class="line">                ran = <span class="keyword">false</span>;</div><div class="line">                setException(ex);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (ran)</div><div class="line">                set(result);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="comment">// runner must be non-null until state is settled to</span></div><div class="line">        <span class="comment">// prevent concurrent calls to run()</span></div><div class="line">        runner = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// state must be re-read after nulling runner to prevent</span></div><div class="line">        <span class="comment">// leaked interrupts</span></div><div class="line">        <span class="keyword">int</span> s = state;</div><div class="line">        <span class="keyword">if</span> (s &gt;= INTERRUPTING)</div><div class="line">            handlePossibleCancellationInterrupt(s);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以清楚的看到，这里执行了<code>mWorker</code>的<code>call</code>方法。</p>
<p>还有一个方法我们没说，<code>publishProgress</code>:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!isCancelled()) &#123;</div><div class="line">        getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</div><div class="line">                <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很简单，直接使用<code>Handler</code>发送一个消息，并且携带参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Looper.getMainLooper());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class="line">        <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">            <span class="keyword">case</span> MESSAGE_POST_RESULT:</div><div class="line">                <span class="comment">//耗时操作完成</span></div><div class="line">                result.mTask.finish(result.mData[<span class="number">0</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</div><div class="line">                <span class="comment">//进度更新</span></div><div class="line">                result.mTask.onProgressUpdate(result.mData);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>好了，至此<code>AsyncTask</code>的使用和原理我们已经说完了，再总结一下原生：</p>
<ul>
<li>首先<code>AsyncTask</code>内部维护了<code>mWorker</code>和<code>mFuture</code>，<code>mWorker</code>是真正的执行后台任务，<code>mFuture</code>是一个线程类，内部持有<code>mWorker</code>对象，主要作用是让<code>mWorker</code>去执行后台任务</li>
<li>并且<code>AsyncTask</code>类内部维护一个静态的线性的线程队列<code>SerialExecutor</code>，只要调用<code>AsyncTask</code>的<code>execute</code>方法，就会将<code>mFuture</code>加入到线程队列中，然后开始执行队列中的任务。</li>
<li>另外<code>AsyncTask</code>内部还维护了一个静态的<code>Handler</code>，当<code>mWorker</code>任务执行完成后，会使用<code>Handler</code>开启异步消息机制发送消息，并且当更新进度时，也会发送消息。</li>
</ul>
<p>好了，关于<code>AsyncTask</code>我们已经了解的差不多了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间我有说过&lt;code&gt;Handler&lt;/code&gt;、&lt;code&gt;Message&lt;/code&gt;、&lt;code&gt;Looper&lt;/code&gt;三者之间的关系，它们可以解决线程间通信，可以用作子线程处理耗时操作，主线程刷新UI等。今天我要说的是另外一种解决方案：&lt;code&gt;AsyncTask&lt;/code&gt;。它的内部还是使用异步消息处理机制，只是&lt;code&gt;Android&lt;/code&gt;对这三者进行了高度的封装。如果你对异步消息处理机制还不是很清楚的话，你可以看看这篇文章:&lt;a href=&quot;http://www.guiyongdong.com/2017/03/27/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8B%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/&quot;&gt;一天一Android之异步消息处理机制&lt;/a&gt;。来看看&lt;code&gt;AsyncTask&lt;/code&gt;到底如何使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative实现js和原生交互</title>
    <link href="http://www.guiyongdong.com/2017/04/01/ReactNative%E5%AE%9E%E7%8E%B0js%E5%92%8C%E5%8E%9F%E7%94%9F%E4%BA%A4%E4%BA%92/"/>
    <id>http://www.guiyongdong.com/2017/04/01/ReactNative实现js和原生交互/</id>
    <published>2017-04-01T10:08:43.000Z</published>
    <updated>2017-04-05T02:51:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>写在此文章之前</p>
<p>最近一直在研究<code>Android</code>，我开始学习<code>Android</code>是有原因的，前段时间写过一个类似于一元夺宝的跨平台APP，里面的好多功能是<code>ReactNative</code>没有提供的，好在现在<code>ReactNative</code>开源社区里面已经有好多优秀的开源库了，就直接拿来用了，但是，这并不能满足开发中一些特殊的需求，这个时候就要写js和原生之间的桥接了，因为我的老本就是<code>iOS</code>，所以写<code>iOS</code>的桥接很容易。但是写<code>Adnroid</code>就有点费力了，因为我对<code>Android</code>一窍不通。但是想学好<code>ReactNative</code>，只会<code>iOS</code>是不行的，所以我就开始了我的<code>Android</code>之旅。还有，假如<code>ReactNative</code>在以后死掉了，我也新郑了<code>Android</code>开发这一新技能，一本万利。</p>
<p><code>Android</code>的博客也写了几篇了，我要回过头来说一些<code>ReactNative</code>的东西，所以，如果你看到我今天在说<code>Android</code>，明天又说<code>ReactNative</code>，你不要奇怪，这很正常。</p>
<p>那今天就先来说说关于js和原生的桥接。</p>
<a id="more"></a>
<h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>首先，本项目是在<code>Mac</code>下开发。这里，我要向大家推荐一个我用着非常方便的<code>IDE</code>：<code>WebStorm</code>，相信前端的同学一定对他不陌生，如果想让<code>WebStorm</code>智能提示代码，大家可以看这篇文章：<a href="http://www.jianshu.com/p/27b804d8b91a" target="_blank" rel="external">点我</a>。最近<code>WebStorm</code>刚更新了<code>2017</code>版本，我感觉优化了好多，起码内存方面小了很多。当然，<code>WebStorm</code>是收费的，但是在天朝，一定有办法的。</p>
<p>先来描述一下我们要做的功能：这里我们模拟一下去调用<code>QQ</code>第三方的登录。当点击<code>登录</code>按钮时，调用原生的<code>QQ</code>登录(原生代码使用2秒延迟模拟登录)，然后把登录结果回调到<code>js</code>，并且在屏幕上添加一个<code>下线</code>的原生按钮。当点击<code>下线</code>按钮时，再次调用js的代码，强制下线。</p>
<p>注意：界面上的<code>登录按钮</code>和<code>文字</code>都是<code>ReactNative</code>生成的，<code>下线</code>按钮是<code>iOS</code>或者<code>Android</code>代码生成的。</p>
<p><strong>iOS运行效果如下：</strong></p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android19.gif?raw=true" width="375"><br></div>

<p><strong>Android运行效果如下：</strong></p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android20.gif?raw=true" width="375"><br></div>



<h3 id="iOS通信实现"><a href="#iOS通信实现" class="headerlink" title="iOS通信实现"></a>iOS通信实现</h3><p><code>js</code>与<code>iOS</code>原生之间的通信主要靠<code>ReactNative</code>定义的一些宏来实现的。能让<code>js</code>来调用的无非是类和类的方法，那么下面就来详细的说一下如何导出类和方法。本例是导出名为<code>LocalModule</code>的类和它的某些方法。</p>
<h5 id="导出类"><a href="#导出类" class="headerlink" title="导出类"></a>导出类</h5><p>如果你想让你的某个类可以实现<code>js</code>调用必须实现<code>RCTBridgeModule</code>协议，我们先来看<code>RCTBridgeModule</code>协议必须实现的方法有哪些方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">RCTBridgeModule</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line"><span class="meta">#define RCT_EXPORT_MODULE(js_name) \</span></div><div class="line">RCT_EXTERN <span class="keyword">void</span> RCTRegisterModule(Class); \</div><div class="line">+ (<span class="built_in">NSString</span> *)moduleName &#123; <span class="keyword">return</span> @<span class="meta">#js_name; &#125; \</span></div><div class="line">+ (<span class="keyword">void</span>)load &#123; RCTRegisterModule(<span class="keyword">self</span>); &#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">NSString</span> *)moduleName;</div><div class="line"></div><div class="line"><span class="keyword">@optional</span></div></pre></td></tr></table></figure>
<p>我们看到，<code>RCTBridgeModule</code>协议只有一个需要实现的方法，这个方法就是告诉<code>js</code>需要导出的类，但是，通常情况下，我们并不直接实现这个方法，而是使用<code>RCT_EXPORT_MODULE</code>这个宏，因为这个宏还帮我们实现了<code>load</code>方法，即在类加载的时候就去注册当前类到<code>js</code>。当然，这个宏还接收一个参数，如果我们不传，默认导出当前类的类名为<code>js</code>的调用模块，当然，你可以自定义导出模块的名字。我们来看看具体如何导出类：</p>
<p>LocalModule.h</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBridgeModule.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTEventEmitter.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LocalModule</span> : <span class="title">RCTEventEmitter</span> &lt;<span class="title">RCTBridgeModule</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们在<code>LocalModule.h</code>里面直接实现<code>RCTBridgeModule</code>就行，当然，如果你不需要<code>iOS</code>向<code>js</code>通信，那么你直接继承<code>NSObject</code>就行。否则就必须继承<code>RCTEventEmitter</code>类，这个功能我们等会再说。</p>
<p>LocalModule.m</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LocalModule</span></span></div><div class="line"><span class="comment">//导出这个类，不然js不能使用 默认导出当前类名</span></div><div class="line">RCT_EXPORT_MODULE();</div><div class="line"></div><div class="line"><span class="comment">//当然也可以自定义 名字你随便起，切记不是NSString类型的参数。</span></div><div class="line">RCT_EXPORT_MODULE(MMMMMM);</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>注意，无论你是否是只用默认的导出名，还是自定义的导出名，将来在<code>js</code>中都很重要，所以，你最好导出一个有实际意义的名字。</p>
<h5 id="导出方法"><a href="#导出方法" class="headerlink" title="导出方法"></a>导出方法</h5><p>导出方法使用的也是宏，有两种宏：<code>RCT_EXPORT_METHOD</code>和<code>RCT_REMAP_METHOD</code>，我们来看看具体的用法：</p>
<p>使用<code>RCT_EXPORT_METHOD</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LocalModule</span></span></div><div class="line"></div><div class="line"><span class="comment">//导出一个方法 RCTResponseSenderBlock 设置回调函数 当然 ReactNative为我们提供了多种回到block</span></div><div class="line">RCT_EXPORT_METHOD(loginWithqq:(<span class="built_in">NSString</span> *)qqkey callback:(RCTResponseSenderBlock)callback) &#123;</div><div class="line">	<span class="comment">//业务逻辑</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>学过<code>iOS</code>也许能看出个大概，此导出方法所对应的原生方法为：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)loginWithqq:(<span class="built_in">NSString</span> *)qq &#123;</div><div class="line">	<span class="comment">//业务逻辑</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>导出方法和原生方法相比，去掉了<code>-(void)</code>，方法写在了<code>RCT_EXPORT_METHOD</code>宏的括号内。</p>
<p>切记，所有的方法都没有返回值，如果你想在<code>iOS</code>返回一些数据给<code>js</code>，你必须使用<code>block</code>回调，就像我们刚才所说的第一个导出方法一样。直接在你原有的方法后面追加一个<code>Block</code>参数就行，<code>ReactNative</code>为我们提供了两种<code>Block</code>回调：<code>RCTResponseSenderBlock</code>和<code>RCTResponseErrorBlock</code>。前者一般处理正常的数据回调，后者会处理错误回调。</p>
<p>还有一点需要特别注意，所有的方法都是在子线程里进行的，如果你想在方法内操作一些UI，必须回调主线程，当然，<code>ReactNative</code>也为我们提供了定义线程的方法，只要重写<code>methodQueue</code>的<code>get</code>方法就可以定义自己的队列。此属性定义在<code>RCTBridgeModule</code>协议中。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//决定此类的所有方法运行在哪个队列中</span></div><div class="line">- (<span class="built_in">dispatch_queue_t</span>)methodQueue &#123;</div><div class="line">  <span class="keyword">return</span> dispatch_get_main_queue();</div><div class="line">&#125;</div><div class="line"><span class="comment">//也可以自己创建队列</span></div><div class="line">- (<span class="built_in">dispatch_queue_t</span>)methodQueue &#123;</div><div class="line">  <span class="keyword">return</span> dispatch_queue_create(<span class="string">"com.custom"</span>, DISPATCH_QUEUE_SERIAL);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果重写这个方法，那么你所有的方法都会在这个队列中运行，当然，你也可以在方法内部重新开启其他的线程。</p>
<p>使用<code>RCT_REMAP_METHOD</code></p>
<p>学过前端的可能都知道<code>Promises</code>，ES7以后新增了<code>async/await</code>语法，所以<code>ReactNative</code>也为我们提供了一个可以返回<code>Promises</code>对象的导出方法。</p>
<p>例如，我的原生方法为：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)loginWithqq:(<span class="built_in">NSString</span> *)qq &#123;</div><div class="line">	<span class="comment">//业务逻辑</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>那么，要是想让此方法支持<code>Promises</code>，你需要这么做：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//返回一个Promises对象 可以搭配ES7的async/await语法</span></div><div class="line">RCT_REMAP_METHOD(asyncLoginWithqq,qqkey:(<span class="built_in">NSString</span> *)qqkey resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)&#123;</div><div class="line">  <span class="comment">//业务处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里必须传的两个参数是:<code>RCTPromiseResolveBlock</code>和<code>RCTPromiseRejectBlock</code>，我们使用<code>RCTPromiseResolveBlock</code>来处理正常的数据，使用<code>RCTPromiseRejectBlock</code>来处理错误的数据。通常情况下，使用这个宏来导出方法，此方法一定会返回数据，不然就没有意义了。</p>
<p>现在我们已经知道如何导出类和方法让<code>js</code>来调用，可是，有时候，我们想主动的向<code>js</code>发送一些消息，这时候该怎么办呢？</p>
<h5 id="RCTEventEmitter"><a href="#RCTEventEmitter" class="headerlink" title="RCTEventEmitter"></a>RCTEventEmitter</h5><p>如果导出类继承于<code>RCTEventEmitter</code>，那么我们只需要实现它的<code>- (NSArray&lt;NSString *&gt; *)supportedEvents</code>方法就可以，此方法返回一个字符串数组，代表可以发送的事件名称有哪几个。其实，这些事件名称就类似与通知名，我们在<code>iOS</code>中定义这些通知名，在<code>js</code>去注册观察这些通知名。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//这里注册一个退出登录的事件(通知名)</span></div><div class="line">- (<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)supportedEvents &#123;</div><div class="line">  <span class="keyword">return</span> @[<span class="string">@"QQLoginOut"</span>];</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)buttonclick:(<span class="built_in">UIButton</span> *)button &#123;</div><div class="line">  [button removeFromSuperview];</div><div class="line">  <span class="comment">//发送事件，可以携带数据</span></div><div class="line">  [<span class="keyword">self</span> sendEventWithName:<span class="string">@"QQLoginOut"</span> body:@&#123;<span class="string">@"result"</span>:@<span class="number">1</span>&#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们在<code>iOS</code>中注册了事件，但是在<code>js</code>中并没有去监听这个事件，那么，程序会发生警告，但并不会崩溃，要解决这种情况，我们可以覆盖<code>RCTEventEmitter</code>类的<code>startObserving</code>放和<code>stopObserving</code>方法。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LocalModule</span> </span>&#123;</div><div class="line">  <span class="keyword">bool</span> hasListeners;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 在添加第一个监听函数时触发</span></div><div class="line">-(<span class="keyword">void</span>)startObserving &#123; </div><div class="line">    hasListeners = <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 取消监听时触发</span></div><div class="line">-(<span class="keyword">void</span>)stopObserving &#123; </div><div class="line">    hasListeners = <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)buttonclick:(<span class="built_in">UIButton</span> *)button &#123;</div><div class="line">  [button removeFromSuperview];</div><div class="line">  <span class="keyword">if</span> (hasListeners) &#123;</div><div class="line">    <span class="comment">//如果有监听，才发送事件</span></div><div class="line">    [<span class="keyword">self</span> sendEventWithName:<span class="string">@"QQLoginOut"</span> body:@&#123;<span class="string">@"result"</span>:@<span class="number">1</span>&#125;];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了，现在来看看开头所说的例子的具体实现：</p>
<p>LocalModule.h</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBridgeModule.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTEventEmitter.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LocalModule</span> : <span class="title">RCTEventEmitter</span> &lt;<span class="title">RCTBridgeModule</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>LocalModule.m</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"LocalModule.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LocalModule</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) RCTResponseSenderBlock callBack;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LocalModule</span> </span>&#123;</div><div class="line">    <span class="keyword">bool</span> hasListeners;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//导出这个类，不然js不能使用 默认导出当前类名</span></div><div class="line">RCT_EXPORT_MODULE();</div><div class="line"></div><div class="line"><span class="comment">//当然也可以自定义 名字你随便起，切记不是NSString类型的参数。</span></div><div class="line"><span class="comment">//RCT_EXPORT_MODULE(MMMMMM);</span></div><div class="line"></div><div class="line"><span class="comment">//决定此类的所有方法运行在哪个队列中</span></div><div class="line"><span class="comment">//- (dispatch_queue_t)methodQueue &#123;</span></div><div class="line"><span class="comment">//  return dispatch_get_main_queue();</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"></div><div class="line"><span class="comment">//也可以自己创建队列</span></div><div class="line"><span class="comment">//- (dispatch_queue_t)methodQueue &#123;</span></div><div class="line"><span class="comment">//  return dispatch_queue_create("com.custom", DISPATCH_QUEUE_SERIAL);</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"></div><div class="line"><span class="comment">//导出一个方法 注意，当前线程为子线程 RCTResponseSenderBlock 设置回调函数 当然 ReactNative为我们提供了多种回到block</span></div><div class="line">RCT_EXPORT_METHOD(loginWithqq:(<span class="built_in">NSString</span> *)qqkey callback:(RCTResponseSenderBlock)callback) &#123;</div><div class="line">  <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">  <span class="comment">//记录回调 有可能会在另一个方法中完成业务逻辑。</span></div><div class="line">  <span class="keyword">self</span>.callBack = callback;</div><div class="line">  <span class="comment">//模拟执行本地操作</span></div><div class="line">  <span class="built_in">NSString</span> *code = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@%@"</span>,qqkey,<span class="string">@"---qq登陆成功---iOS"</span>];</div><div class="line">  <span class="comment">//回调到js函数</span></div><div class="line">  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">    [<span class="keyword">self</span> addButton];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.callBack) &#123;</div><div class="line">      <span class="built_in">NSDictionary</span> *info = @&#123;<span class="string">@"result"</span>:code&#125;;</div><div class="line">      <span class="keyword">self</span>.callBack(@[info]);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用ES7的async/await语法</span></div><div class="line">RCT_REMAP_METHOD(asyncLoginWithqq,qqkey:(<span class="built_in">NSString</span> *)qqkey resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)&#123;</div><div class="line">  <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">  <span class="comment">//模拟登陆</span></div><div class="line">  <span class="built_in">NSString</span> *code = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@%@"</span>,qqkey,<span class="string">@"---qq登陆成功---iOS"</span>];</div><div class="line">  <span class="comment">//回调到js函数</span></div><div class="line">  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">    [<span class="keyword">self</span> addButton];</div><div class="line">    <span class="keyword">if</span> (resolve) &#123;</div><div class="line">      <span class="built_in">NSDictionary</span> *info = @&#123;<span class="string">@"result"</span>:code&#125;;</div><div class="line">      resolve(info);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//注册事件</span></div><div class="line">- (<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)supportedEvents &#123;</div><div class="line">  <span class="keyword">return</span> @[<span class="string">@"QQLoginOut"</span>];</div><div class="line">&#125;</div><div class="line"><span class="comment">//添加一个下线的按钮</span></div><div class="line">- (<span class="keyword">void</span>)addButton &#123;</div><div class="line">  <span class="comment">//所有UI的操作都要在主线程中</span></div><div class="line">  <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">    <span class="built_in">UIButton</span> *button = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeSystem</span>];</div><div class="line">    [button setTitle:<span class="string">@"ios的按钮——下线"</span> forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    button.frame = <span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">40</span>, <span class="number">130</span>, <span class="number">30</span>);</div><div class="line">    [button setTitleColor:[<span class="built_in">UIColor</span> whiteColor] forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    button.backgroundColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">    [[<span class="built_in">UIApplication</span> sharedApplication].keyWindow addSubview:button];</div><div class="line">    [button addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(buttonclick:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 在添加第一个监听函数时触发</span></div><div class="line">-(<span class="keyword">void</span>)startObserving &#123; </div><div class="line">    hasListeners = <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 取消监听时触发</span></div><div class="line">-(<span class="keyword">void</span>)stopObserving &#123; </div><div class="line">    hasListeners = <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//下线</span></div><div class="line">- (<span class="keyword">void</span>)buttonclick:(<span class="built_in">UIButton</span> *)button &#123;</div><div class="line">  [button removeFromSuperview];</div><div class="line">  <span class="keyword">if</span> (hasListeners) &#123;</div><div class="line">    <span class="comment">//如果有监听，才发送事件</span></div><div class="line">    [<span class="keyword">self</span> sendEventWithName:<span class="string">@"QQLoginOut"</span> body:@&#123;<span class="string">@"result"</span>:@<span class="number">1</span>&#125;];</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><code>js</code>与<code>iOS</code>通信的基本步骤是：</p>
<ol>
<li>使用宏<code>RCT_EXPORT_MODULE()</code>导出当前类</li>
<li>使用宏<code>RCT_EXPORT_METHOD()</code>或者<code>RCT_REMAP_METHOD()</code>导出方法</li>
<li>使用一系列的<code>block</code>进行回调</li>
<li>在<code>js</code>中注册事件监听，使用<code>sendEventWithName</code>方法发送事件</li>
</ol>
<p>关于<code>iOS</code>的原生我们已经说完，接下来看<code>Android</code>的。</p>
<h3 id="Android通信实现"><a href="#Android通信实现" class="headerlink" title="Android通信实现"></a>Android通信实现</h3><p>相对于<code>iOS</code>，<code>Android</code>会更简单。</p>
<h5 id="导出类-1"><a href="#导出类-1" class="headerlink" title="导出类"></a>导出类</h5><p>首先，导出的类必须继承<code>ReactContextBaseJavaModule</code>，并且重新构造方法和返回模块的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalModuleAndroid</span> <span class="keyword">extends</span> <span class="title">ReactContextBaseJavaModule</span>   </span>&#123;</div><div class="line">	 <span class="comment">//这里记录下当前的Context </span></div><div class="line">    <span class="keyword">private</span> ReactApplicationContext mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LocalModuleAndroid</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(reactContext);</div><div class="line">        mContext= reactContext;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"LocalModuleAndroid"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后你还需要新建一个类，并且实现<code>ReactPackage</code>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalModulePackage</span> <span class="keyword">implements</span> <span class="title">ReactPackage</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;NativeModule&gt; <span class="title">createNativeModules</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        List&lt;NativeModule&gt; modules = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="comment">//返回需要注册的类</span></div><div class="line">        modules.add(<span class="keyword">new</span> LocalModuleAndroid(reactContext));</div><div class="line">        <span class="keyword">return</span> modules;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;</div><div class="line">        <span class="keyword">return</span> Collections.emptyList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;ViewManager&gt; <span class="title">createViewManagers</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在<code>MainApplication</code>的<code>getPackages</code>方法中加入<code>LocalModulePackage</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">          <span class="keyword">new</span> MainReactPackage(),</div><div class="line">              <span class="keyword">new</span> LocalModulePackage()<span class="comment">//自己的本地导出类管理器</span></div><div class="line">      );</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这样，就可以把<code>LocalModuleAndroid</code>导出来了。</p>
<h5 id="导出方法-1"><a href="#导出方法-1" class="headerlink" title="导出方法"></a>导出方法</h5><p>导出方法更简单，只需要声明<code>@ReactMethod</code>就可以了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">//使用回调函数回调结果</span></div><div class="line"><span class="meta">@ReactMethod</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginWithqq</span><span class="params">(String appkey, Callback callback)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//模拟登陆操作</span></div><div class="line">        String code = appkey+<span class="string">"---qq登陆成功--Android"</span>;</div><div class="line">        <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</div><div class="line">            WritableMap result = Arguments.createMap();</div><div class="line">            result.putString(<span class="string">"result"</span>,code);</div><div class="line">            callback.invoke(result);</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//使用Promise回调数据</span></div><div class="line"><span class="meta">@ReactMethod</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncLoginWithqq</span><span class="params">(String appkey, Promise promise)</span> </span>&#123;</div><div class="line">    <span class="comment">//模拟登陆操作</span></div><div class="line">    String code = appkey+<span class="string">"---qq登陆成功--Android"</span>;</div><div class="line">    WritableMap result = Arguments.createMap();</div><div class="line">    result.putString(<span class="string">"result"</span>,code);</div><div class="line">    promise.resolve(result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里提供了两种回调方法，你可以任意的选择。</p>
<h5 id="RCTDeviceEventEmitter"><a href="#RCTDeviceEventEmitter" class="headerlink" title="RCTDeviceEventEmitter"></a>RCTDeviceEventEmitter</h5><p>如果我们想向<code>js</code>发送事件，直接使用<code>RCTDeviceEventEmitter</code>来发送就行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">    ((ViewGroup)layout.getParent()).removeView(layout);</div><div class="line">    WritableMap result = Arguments.createMap();</div><div class="line">    result.putInt(<span class="string">"result"</span>,<span class="number">1</span>);</div><div class="line">    getCurrentActivity().getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(<span class="string">"QQLoginOut"</span>,result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于上面的例子，全部的代码如下：</p>
<p>LocalModuleAndroid类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalModuleAndroid</span> <span class="keyword">extends</span> <span class="title">ReactContextBaseJavaModule</span>   </span>&#123;</div><div class="line">	 <span class="comment">//这里记录下当前的Context</span></div><div class="line">    <span class="keyword">private</span> ReactApplicationContext mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LocalModuleAndroid</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(reactContext);</div><div class="line">        mContext= reactContext;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"LocalModuleAndroid"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ReactMethod</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginWithqq</span><span class="params">(String appkey, Callback callback)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//模拟登陆操作</span></div><div class="line">            String code = appkey+<span class="string">"---qq登陆成功--Android"</span>;</div><div class="line">            addButton();</div><div class="line">            <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</div><div class="line">                WritableMap result = Arguments.createMap();</div><div class="line">                result.putString(<span class="string">"result"</span>,code);</div><div class="line">                callback.invoke(result);</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@ReactMethod</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncLoginWithqq</span><span class="params">(String appkey, Promise promise)</span> </span>&#123;</div><div class="line">        addButton();</div><div class="line">        <span class="comment">//模拟登陆操作</span></div><div class="line">        String code = appkey+<span class="string">"---qq登陆成功--Android"</span>;</div><div class="line">        WritableMap result = Arguments.createMap();</div><div class="line">        result.putString(<span class="string">"result"</span>,code);</div><div class="line">        promise.resolve(result);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	 <span class="comment">//使用原生代码添加按钮</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addButton</span><span class="params">()</span> </span>&#123;</div><div class="line">        getCurrentActivity().runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//在主线程中创建UI</span></div><div class="line">                <span class="keyword">final</span> LinearLayout layout = (LinearLayout) LinearLayout.inflate(mContext,R.layout.local_button,<span class="keyword">null</span>);</div><div class="line">                LinearLayout.LayoutParams mLayoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);</div><div class="line">                mLayoutParams.setMargins(<span class="number">400</span>,<span class="number">80</span>,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">                getCurrentActivity().addContentView(layout,mLayoutParams);</div><div class="line"></div><div class="line">                <span class="keyword">final</span> Button button = (Button) layout.findViewById(R.id.loginOut);</div><div class="line">                button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                        ((ViewGroup)layout.getParent()).removeView(layout);</div><div class="line">                        WritableMap result = Arguments.createMap();</div><div class="line">                        result.putInt(<span class="string">"result"</span>,<span class="number">1</span>);</div><div class="line">                        <span class="comment">//向js发送事件</span></div><div class="line">                        mContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(<span class="string">"QQLoginOut"</span>,result);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>js</code>与<code>Android</code>通信的基本步骤：</p>
<ul>
<li>导出类首先要继承<code>ReactContextBaseJavaModule</code>，并重写<code>getName()</code>返回导出模块的名字</li>
<li>新建一个类，实现<code>ReactPackage</code>接口的三个方法，并且在<code>createNativeModules</code>方法中去注册要导出的类，并在<code>MainApplication</code>的<code>getPackages</code>方法中导出<code>package</code>管理器。</li>
<li>使用关键字<code>@ReactMethod</code>导出方法，使用<code>Callback</code>或者<code>Promise</code>进行回调。</li>
<li>在<code>js</code>中注册监听事件，使用<code>RCTDeviceEventEmitter</code>可以直接发送事件到<code>js</code>，</li>
</ul>
<p>好了，现在我们的原生都写完了，接下来我们看看在<code>js</code>中如何调用。</p>
<h3 id="js调用"><a href="#js调用" class="headerlink" title="js调用"></a>js调用</h3><p>为了代码的复用性，一般都会创建一个<code>js</code>文件，单独封装一类功能。所以我创建一个<code>localModule</code>的<code>js</code>文件。如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    Platform,</div><div class="line">    NativeModules,</div><div class="line">    NativeEventEmitter,</div><div class="line">    DeviceEventEmitter</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="comment">//导入iOS原生模块</span></div><div class="line"><span class="keyword">var</span> LocalModuleiOS = NativeModules.LocalModule;</div><div class="line"><span class="comment">//导入Android原生模块</span></div><div class="line"><span class="keyword">var</span> LocalModuleAndroid = NativeModules.LocalModuleAndroid;</div><div class="line"><span class="comment">//iOS事件监听</span></div><div class="line"><span class="keyword">const</span> localModuleEmitter = <span class="keyword">new</span> NativeEventEmitter(LocalModuleiOS);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> LocalModule = &#123;</div><div class="line">    <span class="comment">//添加事件监听</span></div><div class="line">    addLoginOutCallBack(callBack) &#123;</div><div class="line">        <span class="keyword">if</span> (Platform.OS == <span class="string">'ios'</span>) &#123;</div><div class="line">            <span class="comment">//监听iOS的QQLoginOut事件</span></div><div class="line">            localModuleEmitter.addListener(<span class="string">'QQLoginOut'</span>,(result)=&gt;&#123;</div><div class="line">                <span class="keyword">if</span> (callBack) &#123;</div><div class="line">                    callBack(result);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;<span class="keyword">else</span>  &#123;</div><div class="line">            <span class="comment">//监听Android的QQLoginOut事件</span></div><div class="line">            DeviceEventEmitter.addListener(<span class="string">'QQLoginOut'</span>,(result)=&gt;&#123;</div><div class="line">                <span class="keyword">if</span> (callBack) &#123;</div><div class="line">                    callBack(result);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//调用原生QQ登录</span></div><div class="line">    loginWithqq(appkey,callBack) &#123;</div><div class="line">        <span class="keyword">if</span> (Platform.OS == <span class="string">'ios'</span>) &#123;</div><div class="line">            <span class="comment">// LocalModuleiOS.loginWithqq(appkey,(result) =&gt; &#123;</span></div><div class="line">            <span class="comment">//     if (callBack) &#123;</span></div><div class="line">            <span class="comment">//         callBack(result);</span></div><div class="line">            <span class="comment">//     &#125;</span></div><div class="line">            <span class="comment">// &#125;);</span></div><div class="line"></div><div class="line">            <span class="comment">//使用ES7新特性 async/await</span></div><div class="line">            <span class="keyword">return</span> LocalModuleiOS.asyncLoginWithqq(appkey);</div><div class="line">        &#125;<span class="keyword">else</span>  &#123;</div><div class="line">            <span class="comment">//使用Callback回调</span></div><div class="line">            LocalModuleAndroid.loginWithqq(appkey,(result)=&gt;&#123;</div><div class="line">                <span class="keyword">if</span> (callBack) &#123;</div><div class="line">                    callBack(result);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="comment">// return LocalModuleAndroid.asyncLoginWithqq(appkey);</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//导出模块</span></div><div class="line"><span class="built_in">module</span>.exports = LocalModule;</div></pre></td></tr></table></figure>
<p>首先要导入原生模块，这里使用<code>NativeModules</code>直接导入，因为我们在<code>iOS</code>中导出的模块名是类名，在<code>Android</code>中导出的模块名为<code>LocalModuleAndroid</code>，所以这里分别对应<code>iOS</code>和<code>Android</code>写开。然后又注册了<code>iOS</code>的事件监听。</p>
<p>在<code>loginWithqq</code>中，我们即可以使用<code>block</code>回调，也可以使用<code>Promise</code>。<br>这样，一个登陆功能就封装好了。来看看如何用。</p>
<p>为了保证<code>iOS</code>和<code>Android</code>的通用性，这里新定义一个界面<code>home</code>，作为<code>iOS</code>和<code>Android</code>的主页：</p>
<p>index.ios.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./home'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">moduleDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Home</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;/</span>&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: 'center',</div><div class="line">    alignItems: 'center',</div><div class="line">    backgroundColor: '#F5FCFF',</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent('moduleDemo', () =&gt; moduleDemo);</div></pre></td></tr></table></figure>
<p>index.android.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./home'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">moduleDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Home</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;/</span>&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: 'center',</div><div class="line">    alignItems: 'center',</div><div class="line">    backgroundColor: '#F5FCFF',</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent('moduleDemo', () =&gt; moduleDemo);</div></pre></td></tr></table></figure>
<p>现在，我们只需要关注<code>home</code>界面的业务逻辑就行了，看<code>home</code>界面：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> LocalModule <span class="keyword">from</span> <span class="string">'./localModule'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 构造</span></div><div class="line">      <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="comment">// 初始状态</span></div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            text:<span class="string">'hello word'</span>,</div><div class="line">            isLogin:<span class="literal">false</span></div><div class="line">        &#125;;</div><div class="line">      &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">TouchableHighlight</span> <span class="attr">style</span>=<span class="string">&#123;styles.clikeButton&#125;</span> <span class="attr">onPress</span>=<span class="string">&#123;this.onclick.bind(this)&#125;</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.text&#125;</span>&gt;</span>&#123;this.state.isLogin?'已登录':'登录'&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">TouchableHighlight</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.contentText&#125;</span>&gt;</span>&#123;this.state.text&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">async</span> onclick() &#123;</div><div class="line">        <span class="comment">//qq登录</span></div><div class="line">        <span class="comment">// LocalModule.loginWithqq('123456789',(result)=&gt;&#123;</span></div><div class="line">        <span class="comment">//     var code = result['result'];</span></div><div class="line">        <span class="comment">//     this.setState(&#123;</span></div><div class="line">        <span class="comment">//         text:code,</span></div><div class="line">        <span class="comment">//         isLogin:true</span></div><div class="line">        <span class="comment">//     &#125;)</span></div><div class="line">        <span class="comment">// &#125;);</span></div><div class="line">        <span class="comment">//这里使用async/await的方法</span></div><div class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> LocalModule.loginWithqq(<span class="string">'123456789'</span>);</div><div class="line">        <span class="keyword">var</span> code = result[<span class="string">'result'</span>];</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            text:code,</div><div class="line">            isLogin:<span class="literal">true</span></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">//添加退出登录的响应</span></div><div class="line">        LocalModule.addLoginOutCallBack((result)=&gt;&#123;</div><div class="line">            <span class="keyword">var</span> code = result[<span class="string">'result'</span>];</div><div class="line">            <span class="keyword">if</span> (code == <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">this</span>.setState(&#123;</div><div class="line">                    text:<span class="string">'hello word'</span>,</div><div class="line">                    isLogin:<span class="literal">false</span></div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">    clikeButton:&#123;</div><div class="line">        marginLeft:<span class="number">20</span>,</div><div class="line">        marginTop:<span class="number">40</span>,</div><div class="line">        width:<span class="number">60</span>,</div><div class="line">        height:<span class="number">30</span>,</div><div class="line">        backgroundColor:<span class="string">'red'</span>,</div><div class="line">        alignItems:<span class="string">'center'</span>,</div><div class="line">        justifyContent:<span class="string">'center'</span></div><div class="line">    &#125;,</div><div class="line">    text:&#123;</div><div class="line">        color:<span class="string">'white'</span></div><div class="line">    &#125;,</div><div class="line">    contentText:&#123;</div><div class="line">        fontSize:<span class="number">30</span>,</div><div class="line">        alignSelf:<span class="string">'center'</span>,</div><div class="line">        marginTop:<span class="number">30</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>至此，<code>ReactNative</code>与原始通信已经了解的差不多了，当然，还有更多的知识点需要我们去官网查看。推荐一个翻译至官网的中文网站：<a href="http://reactnative.cn/docs/0.43/native-modules-android.html#content" target="_blank" rel="external">点这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在此文章之前&lt;/p&gt;
&lt;p&gt;最近一直在研究&lt;code&gt;Android&lt;/code&gt;，我开始学习&lt;code&gt;Android&lt;/code&gt;是有原因的，前段时间写过一个类似于一元夺宝的跨平台APP，里面的好多功能是&lt;code&gt;ReactNative&lt;/code&gt;没有提供的，好在现在&lt;code&gt;ReactNative&lt;/code&gt;开源社区里面已经有好多优秀的开源库了，就直接拿来用了，但是，这并不能满足开发中一些特殊的需求，这个时候就要写js和原生之间的桥接了，因为我的老本就是&lt;code&gt;iOS&lt;/code&gt;，所以写&lt;code&gt;iOS&lt;/code&gt;的桥接很容易。但是写&lt;code&gt;Adnroid&lt;/code&gt;就有点费力了，因为我对&lt;code&gt;Android&lt;/code&gt;一窍不通。但是想学好&lt;code&gt;ReactNative&lt;/code&gt;，只会&lt;code&gt;iOS&lt;/code&gt;是不行的，所以我就开始了我的&lt;code&gt;Android&lt;/code&gt;之旅。还有，假如&lt;code&gt;ReactNative&lt;/code&gt;在以后死掉了，我也新郑了&lt;code&gt;Android&lt;/code&gt;开发这一新技能，一本万利。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Android&lt;/code&gt;的博客也写了几篇了，我要回过头来说一些&lt;code&gt;ReactNative&lt;/code&gt;的东西，所以，如果你看到我今天在说&lt;code&gt;Android&lt;/code&gt;，明天又说&lt;code&gt;ReactNative&lt;/code&gt;，你不要奇怪，这很正常。&lt;/p&gt;
&lt;p&gt;那今天就先来说说关于js和原生的桥接。&lt;/p&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="http://www.guiyongdong.com/categories/ReactNative/"/>
    
    
      <category term="reactnative" scheme="http://www.guiyongdong.com/tags/reactnative/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之Fragment</title>
    <link href="http://www.guiyongdong.com/2017/04/01/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BFragment/"/>
    <id>http://www.guiyongdong.com/2017/04/01/一天一Android之Fragment/</id>
    <published>2017-04-01T03:31:37.000Z</published>
    <updated>2017-04-02T01:17:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天愚人节，先祝大家愚人节快乐!</p>
<p>今天来说一下Android开发中经常使用到的一个类：<code>Fragment</code>。由于<code>Android</code>屏幕的碎片化，<code>Android</code>为我们提供了一个和方便的类来使我们的APP可以适应各种屏幕的手机和平板，当然，<code>Fragment</code>的功能远不止是为适应屏幕而生。你可以把<code>Fragment</code>当成<code>Activity</code>的一个界面的一个组成部分，甚至<code>Activity</code>的界面可以由完全不同的<code>Fragment</code>组成，更神奇的是<code>Fragment</code>拥有自己的生命周期和接收、处理用户的事件，这样就不必再<code>Activity</code>写一堆控件的事件处理的代码了，更重要的是，你可以动态的添加、替换和移除某个<code>Fragment</code>。</p>
<a id="more"></a>
<h3 id="Fragment的生命周期"><a href="#Fragment的生命周期" class="headerlink" title="Fragment的生命周期"></a>Fragment的生命周期</h3><p><code>Fragment</code>必须依赖与<code>Activity</code>而存在的，因此<code>Activity</code>的生命周期会直接影响到<code>Fragment</code>的生命周期，我们来看看官网的这张关于两者的生命周期图:</p>
<div align="center"><br><img src="http://img.blog.csdn.net/20140719225005356?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbG1qNjIzNTY1Nzkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><br></div>

<p>可以看到，<code>Fragment</code>的生命周期方法中的大部分我们还是很熟悉的，只比<code>Activity</code>多了几个方法：</p>
<ul>
<li><strong>onAttach(Activity)</strong><br>  当<code>Fragment</code>与<code>Activity</code>发生关联时调用</li>
<li><strong>onCreateView(LayoutInflater,ViewGroup,Bundle)</strong><br>  创建该<code>Fragment</code>的视图，会在这个方法中加载布局文件，返回视图。</li>
<li><strong>onActivityCreated(Bundle)</strong><br>  当<code>Activity</code>的<code>onCreate</code>方法返回时调用</li>
<li><strong>onDestoryView()</strong><br>  与<code>onCreateView</code>相对应，当该<code>Fragment</code>的视图被移除时调用</li>
<li><strong>onDetach()</strong><br>  与<code>onAttach</code>相对应，当该<code>Fragment</code>与<code>Activity</code>关联被取消时调用。</li>
</ul>
<p><strong>注意：</strong>除了<code>onCreateView</code>方法，其他的所有方法如果你重写了，必须调用父类的方法。</p>
<h3 id="静态使用Fragment"><a href="#静态使用Fragment" class="headerlink" title="静态使用Fragment"></a>静态使用Fragment</h3><p>首先需要继承<code>Fragment</code>类，重写<code>onCreateView</code>方法。注意，我们即可用使用<code>Android Studio</code>为我们提供的创建方式，也可以直接创建<code>java</code>类继承<code>Fragment</code>，我们这里使用第二种方式，因为使用<code>Android Studio</code>创建的<code>Fragment</code>会我们生成很多无用的代码。另外，当你选择继承<code>Fragment</code>的时候，会有两个不同的包，一个是系统内置的<code>android.app.Fragment</code>，一个是<code>support-v4</code>库中的<code>android.support.v4.app.Fragment</code>。这里建议使用<code>support-v4</code>库中的。</p>
<p>下面展示一个例子，使用两个<code>Fragment</code>作为<code>Activity</code>的布局，一个<code>Fragment</code>用于标题布局，一个<code>Fragment</code>用于内容布局：</p>
<h4 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h4><p><strong>TitleFragment</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"44dp"</span></div><div class="line">              <span class="attr">android:background</span>=<span class="string">"#963"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/title_button"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"按钮"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/title_text"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"你猜我是谁"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#fff"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"22sp"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>ContentFragment</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"content主页"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"25sp"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="两个Fragment类文件"><a href="#两个Fragment类文件" class="headerlink" title="两个Fragment类文件"></a>两个Fragment类文件</h4><p><strong>TitleFragment</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TitleFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line">    </div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.title_fragment,container,<span class="keyword">false</span>);</div><div class="line">        mButton = (Button) view.findViewById(R.id.title_button);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Toast.makeText(getActivity(),<span class="string">"我是一个按钮"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>ContentFragment</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.content_fragment,container,<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实<code>Fragment</code>的创建很简单，我们只需要在<code>onCreateView</code>方法中加载布局就行。</p>
<p>再来看看如何在<code>Activity</code>中使用：</p>
<p><strong>MainActivity的布局</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.fragmentdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"44dp"</span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.fragmentdemo.TitleFragment"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fragment_title"</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.fragmentdemo.ContentFragment"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fragment_content"</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在<code>MainActivity</code>类的代码中我们什么都不用添加，运行结果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android16.png?raw=true" width="375"><br></div>


<h3 id="动态使用Fragment"><a href="#动态使用Fragment" class="headerlink" title="动态使用Fragment"></a>动态使用Fragment</h3><p>先来修改一下<code>MainActivity</code>的布局文件，当我们点击<code>TitleFragment</code>上的按钮的时候，动态添加<code>ContentFragment</code>到视图中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.fragmentdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"44dp"</span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.fragmentdemo.TitleFragment"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fragment_title"</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fragment_content"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.title_button);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                FragmentManager manager = getSupportFragmentManager();</div><div class="line">                <span class="comment">//开启Fragment事务</span></div><div class="line">                FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">                ContentFragment contentFragment = <span class="keyword">new</span> ContentFragment();</div><div class="line">                <span class="comment">//替换布局</span></div><div class="line">                transaction.replace(R.id.fragment_content,contentFragment);</div><div class="line">                <span class="comment">//事务提交</span></div><div class="line">                transaction.commit();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行起来，点击按钮，显示的效果和刚才静态添加的运行效果一模一样。可以看到，我们这里使用了<code>FragmentManager</code>，我们来具体了解一下这个类。</p>
<h3 id="Fragment家族常用的类"><a href="#Fragment家族常用的类" class="headerlink" title="Fragment家族常用的类"></a>Fragment家族常用的类</h3><p><code>Fragment</code>常用的三个类：</p>
<ul>
<li><code>android.support.v4.app.Fragment</code>：主要用于定义<code>Fragment</code></li>
<li><code>android.support.v4.app.FragmentManager</code>：主要用于在<code>Activity</code>中操作<code>Fragment</code></li>
<li><code>android.support.v4.app.FragmentTransaction</code>：保证一系列<code>Fragment</code>操作的原子性，如果你熟悉事务的话一定能明白</li>
</ul>
<p>首先，通过<code>getSupportFragmentManager()</code>获取<code>FragmentManager</code></p>
<p>然后获取一个事务对象，通过<code>manager.beginTransaction()</code>来开启一个事务</p>
<p>接下来，就可以操作<code>Fragment</code>了，例如：</p>
<p><strong>transaction.add()</strong>： 往Activity中添加一个Fragment<br><strong>transaction.remove()</strong>：从Activity中移除一个Fragment<br><strong>transaction.replace()</strong>：使用另一个Fragment替换当前的，实际上就是remove()然后add()的合体~<br><strong>transaction.hide()</strong>：隐藏当前的Fragment，仅仅是设为不可见，并不会销毁<br><strong>transaction.show()</strong>：显示之前隐藏的Fragment<br><strong>transaction.detach()</strong>：会将view从UI中移除,和remove()不同,此时fragment的状态依然由FragmentManager维护<br><strong>transaction.attach()</strong>：重建view视图，附加到UI上并显示<br><strong>transatcion.commit()</strong>：提交事务</p>
<p>上述，基本是操作Fragment的所有的方式了，在一个事务开启到提交可以进行多个的添加、移除、替换等操作。</p>
<p>这里有几个需要注意的：</p>
<p>比如：我在FragmentA中的EditText填了一些数据，当切换到FragmentB时，如果希望会到A还能看到数据，则适合你的就是hide和show；也就是说，希望保留用户操作的面板，你可以使用hide和show，当然了不要使劲在那new实例，进行下非null判断。</p>
<p>再比如：我不希望保留用户操作，你可以使用remove()，然后add()；或者使用replace()这个和remove,add是相同的效果。</p>
<p>remove和detach有一点细微的区别，在不考虑回退栈的情况下，remove会销毁整个Fragment实例，而detach则只是销毁其视图结构，实例并不会被销毁。那么二者怎么取舍使用呢？如果你的当前Activity一直存在，那么在不希望保留用户操作的时候，你可以优先使用detach。</p>
<h3 id="管理Fragment回退栈"><a href="#管理Fragment回退栈" class="headerlink" title="管理Fragment回退栈"></a>管理Fragment回退栈</h3><p>类似与<code>Android</code>系统为<code>Activity</code>维护一个任务栈，我们也可以通过<code>Activity</code>维护一个回退栈来保存每次<code>Fragment</code>事务发生的变化。如果你将<code>Fragment</code>任务添加到回退栈，当用户点击后退按钮时，将看到上一次的保存的<code>Fragment</code>。一旦<code>Fragment</code>完全从回退栈中弹出，用户再次点击后退键，则退出当前<code>Activity</code>。</p>
<p>我们先来看一个效果图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android17.gif?raw=true" width="375"><br></div>

<p>点击第一个按钮，切换到第二个界面，并在输入框内输入内容,点击第二个按钮，切换到第三个界面，然后点击Back键依次回退。这里是<code>Fragment</code>实现的，用户点击<code>Back</code>，实际是<code>Fragment</code>回退栈不断的弹栈。</p>
<p>如何添加一个<code>Fragment</code>事务到回退栈：FragmentTransaction.addToBackStack(String)。</p>
<p>我们来个例子，在<code>MainActivity</code>中依次添加三个<code>Fragment</code>，利用返回栈再依次显示三个<code>Fragment</code>。</p>
<p>先看<code>MainActivity</code>的布局文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.fragmentdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_content"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>不同的<code>Fragment</code>就在这个<code>FrameLayout</code>中显示。</p>
<p><code>MainActivity.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">//添加第一个Fragment</span></div><div class="line">        FragmentManager manager = getSupportFragmentManager();</div><div class="line">        FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">        FragmentOne one = <span class="keyword">new</span> FragmentOne();</div><div class="line">        transaction.add(R.id.id_content,one,<span class="string">"ONE"</span>);</div><div class="line">        transaction.commit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很简答，直接将<code>FragmentOne</code>添加到布局文件的<code>FrameLayout</code>中，因为这里是第一个<code>Fragment</code>，所以并没有添加到返回栈中。</p>
<p>来看<code>FragmentOne.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentOne</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line">    </div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_one,container,<span class="keyword">false</span>);</div><div class="line">        mButton = (Button) view.findViewById(R.id.one_button);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        FragmentTwo two = <span class="keyword">new</span> FragmentTwo();</div><div class="line">        FragmentManager manager = getActivity().getSupportFragmentManager();</div><div class="line">        FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">        transaction.replace(R.id.id_content,two,<span class="string">"TWO"</span>);</div><div class="line">        transaction.addToBackStack(<span class="keyword">null</span>);</div><div class="line">        transaction.commit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在点击<code>FragmentOne</code>中的按钮时，使用了<code>replace</code>方法，如果不添加事务到回退栈中，前一个<code>Fragment</code>，也就是<code>FragmentOne</code>实例会被销毁，所以，我们调用<code>transaction.addToBackStack(null)</code>，将当前的事务添加到回退栈，所以<code>FragmentOne</code>实例不会被销毁，但是视图层依然会被销毁，即会调用<code>onDestoryView</code>方法。</p>
<p>接下来看<code>FragmentTwo.java</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentTwo</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_two,container,<span class="keyword">false</span>);</div><div class="line">        mButton = (Button) view.findViewById(R.id.two_button);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        FragmentThree three = <span class="keyword">new</span> FragmentThree();</div><div class="line">        FragmentManager manager = getActivity().getSupportFragmentManager();</div><div class="line">        FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">        transaction.hide(<span class="keyword">this</span>);</div><div class="line">        transaction.add(R.id.id_content,three,<span class="string">"THREE"</span>);</div><div class="line">        transaction.addToBackStack(<span class="keyword">null</span>);</div><div class="line">        transaction.commit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里点击时，我们没有使用<code>replace</code>，而是先隐藏了当前的<code>Fragment</code>，然后添加了<code>FragmentThree</code>的实例，最后将事务添加到回退栈。这样做的目的是为了给大家提供一种方案：如果不希望视图重绘该怎么做，请再次仔细看效果图，我们在<code>FragmentTwo</code>的<code>EditText</code>填写的内容，用户<code>Back</code>回来时，数据还在~~~</p>
<p>最后<code>FragmentThree</code>很简单，这里就不说了。</p>
<p>经过上面的介绍，应该已经知道Fragment回退栈是怎么一回事了，以及<code>hide</code>，<code>replace</code>等各自的应用的场景。</p>
<h3 id="Fragment与Activity通信"><a href="#Fragment与Activity通信" class="headerlink" title="Fragment与Activity通信"></a>Fragment与Activity通信</h3><p>因为<code>Fragmnet</code>都是依赖与<code>Activity</code>的，所以通信起来并不复杂，大概归为：</p>
<ul>
<li>如果你<code>Activity</code>中包含自己管理的<code>Fragment</code>的引用，可以通过引用直接访问所有的<code>Fragment</code>的<code>public</code>方法</li>
<li>如果<code>Activity</code>中未保存任何<code>Fragment</code>的引用，那么没关系，每个<code>Fragment</code>都有一个唯一的<code>TAG</code>或者<code>ID</code>,可以通过<code>getSupportFragmentManager().findFragmentByTag()</code>或者<code>findFragmentById()</code>获得任何Fragment实例，然后进行操作。</li>
<li>在<code>Fragment</code>中可以通过<code>getActivity()</code>得到当前绑定的<code>Activity</code>的实例，然后进行操作</li>
</ul>
<h3 id="Fragment与Activity通信的最佳实现"><a href="#Fragment与Activity通信的最佳实现" class="headerlink" title="Fragment与Activity通信的最佳实现"></a>Fragment与Activity通信的最佳实现</h3><p>因为要考虑<code>Fragment</code>的重复使用，所以必须降低<code>Fragment</code>与<code>Activity</code>的耦合，而且<code>Fragment</code>更不应该直接操作别的<code>Fragment</code>，毕竟<code>Fragment</code>操作应该由它的管理者<code>Activity</code>来决定。通常情况下，我们可以使用接口来解决这一问题。</p>
<p>下面通过两种方式，分别重构<code>FragmentOne</code>和<code>FragmentTwo</code>的点击事件，以及<code>Activity</code>对点击事件的响应：</p>
<p>先看<code>FragmentOne</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentOne</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line">    </div><div class="line">    <span class="comment">//设置按钮点击回调接口</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OneCallBack</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onOneBtnClick</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_one,container,<span class="keyword">false</span>);</div><div class="line">        mButton = (Button) view.findViewById(R.id.one_button);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">//交给Activity处理 </span></div><div class="line">        <span class="keyword">if</span> (getActivity() <span class="keyword">instanceof</span>  OneCallBack) &#123;</div><div class="line">            ((OneCallBack) getActivity()).onOneBtnClick();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到现在的<code>FragmentOne</code>不和任何<code>Activity</code>耦合，任何<code>Activity</code>都可以使用；并且我们声明了一个接口，来回调其点击事件，想要管理其点击事件的<code>Activity</code>实现此接口就即可。可以看到我们在<code>onClick</code>中首先判断了当前绑定的<code>Activity</code>是否实现了该接口，如果实现了则调用。</p>
<p>再来看<code>FragmentTwo</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentTwo</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TwoCallBack mTwoCallBack;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TwoCallBack</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onTwoBtnClick</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//设置回调接口</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTwoCallBack</span><span class="params">(TwoCallBack twoCallBack)</span> </span>&#123;</div><div class="line">        mTwoCallBack = twoCallBack;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_two,container,<span class="keyword">false</span>);</div><div class="line">        mButton = (Button) view.findViewById(R.id.two_button);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mTwoCallBack != <span class="keyword">null</span>) &#123;</div><div class="line">            mTwoCallBack.onTwoBtnClick();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与<code>FragmentOne</code>极其类似，但是我们提供了<code>setTwoCallBack</code>这样的方法，意味着<code>Activity</code>不仅需要实现该接口，还必须显示调用<code>two.setTwoCallBack(this)</code>。</p>
<p>最后看<code>MainActivity</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">FragmentOne</span>.<span class="title">OneCallBack</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">//添加第一个Fragment</span></div><div class="line">        FragmentManager manager = getSupportFragmentManager();</div><div class="line">        FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">        FragmentOne one = <span class="keyword">new</span> FragmentOne();</div><div class="line">        transaction.add(R.id.id_content,one,<span class="string">"ONE"</span>);</div><div class="line">        transaction.commit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    * FragmentOne 按钮点击时的回调</div><div class="line">    * */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOneBtnClick</span><span class="params">()</span> </span>&#123;</div><div class="line">        FragmentTwo two = <span class="keyword">new</span> FragmentTwo();</div><div class="line">        FragmentManager manager = getSupportFragmentManager();</div><div class="line">        FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">        transaction.replace(R.id.id_content,two,<span class="string">"TWO"</span>);</div><div class="line">        transaction.addToBackStack(<span class="keyword">null</span>);</div><div class="line">        transaction.commit();</div><div class="line"></div><div class="line">        two.setTwoCallBack(<span class="keyword">new</span> FragmentTwo.TwoCallBack() &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * FragmentTwo 按钮点击时的回调 </div><div class="line">            * */</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTwoBtnClick</span><span class="params">()</span> </span>&#123;</div><div class="line">                FragmentThree three = <span class="keyword">new</span> FragmentThree();</div><div class="line">                FragmentManager manager = getSupportFragmentManager();</div><div class="line">                FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">                transaction.hide(manager.findFragmentByTag(<span class="string">"TWO"</span>));</div><div class="line">                transaction.add(R.id.id_content,three,<span class="string">"THREE"</span>);</div><div class="line">                transaction.addToBackStack(<span class="keyword">null</span>);</div><div class="line">                transaction.commit();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码重构结束，与开始的效果一模一样。上面两种通信方式都是值得推荐的，随便选择一种自己喜欢的。</p>
<h3 id="如何处理运行时配置发生变化"><a href="#如何处理运行时配置发生变化" class="headerlink" title="如何处理运行时配置发生变化"></a>如何处理运行时配置发生变化</h3><p>运行时配置发生变化，最常见的就是屏幕发生选择，就那我们刚才的例子来说，先看下面的效果图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android18.gif?raw=true" width="375"><br></div>

<p>本来<code>MainActivity</code>这时候显示的是<code>FragmentTwo</code>界面，但是当我们旋转屏幕的时候，这时候按钮又变成了<code>FragmentOne</code>的按钮，并且我们之前输入的内容也不见了。这是为什么呢？</p>
<p>这是因为当运行时配置发生变化时，<code>Activity</code>要重新启动，默认的<code>Activity</code>中的<code>Fragment</code>也会跟着<code>Activity</code>重新创建，这样造成当旋转的时候，本身存在的<code>Fragment</code>会重新启动，然后当执行<code>Activity</code>的<code>onCreate</code>时，又会再次实例化一个新的<code>Fragment</code>，这就是出现的原因。</p>
<p>其实通过检查<code>onCreate</code>的参数<code>savedInstanceState</code>就可以判断，当前是否发生<code>Activity</code>的重新创建，默认的<code>savedInstanceState</code>会存储一些数据，包括<code>Fragment</code>的实例，通过打印可以看出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="number">04</span>-<span class="number">01</span> <span class="number">05</span>:<span class="number">29</span>:<span class="number">03.645</span> <span class="number">9330</span>-<span class="number">9330</span>/com.guiyongdong.fragmentdemo D/dd: onCreate: Bundle[&#123;android:viewHierarchyState=Bundle[&#123;android:views=&#123;<span class="number">16908290</span>=android.view.AbsSavedState$<span class="number">1</span>@<span class="number">5</span>ddcbb8, <span class="number">2131427404</span>=android.view.AbsSavedState$<span class="number">1</span>@<span class="number">5</span>ddcbb8, <span class="number">2131427405</span>=android.view.AbsSavedState$<span class="number">1</span>@<span class="number">5</span>ddcbb8, <span class="number">2131427406</span>=android.support.v7.widget.Toolbar$SavedState<span class="meta">@bd</span>1fd91, <span class="number">2131427407</span>=android.view.AbsSavedState$<span class="number">1</span>@<span class="number">5</span>ddcbb8, <span class="number">2131427421</span>=android.view.AbsSavedState$<span class="number">1</span>@<span class="number">5</span>ddcbb8&#125;, android:Panels=&#123;<span class="number">0</span>=com.android.internal.policy.PhoneWindow$PanelFeatureState$SavedState@<span class="number">2</span>d154f6&#125;&#125;], android:support:fragments=android.support.v4.app.FragmentManagerState@<span class="number">74850f</span>7&#125;]</div></pre></td></tr></table></figure>
<p>所以，我们简单改一下代码，只有在<code>savedInstanceState==null</code>时，才进行创建<code>Fragment</code>实例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">FragmentOne</span>.<span class="title">OneCallBack</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (savedInstanceState == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//添加第一个Fragment</span></div><div class="line">            FragmentManager manager = getSupportFragmentManager();</div><div class="line">            FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">            FragmentOne one = <span class="keyword">new</span> FragmentOne();</div><div class="line">            transaction.add(R.id.id_content,one,<span class="string">"ONE"</span>);</div><div class="line">            transaction.commit();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">            Log.d(<span class="string">"dd"</span>, <span class="string">"onCreate: "</span>+savedInstanceState.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在无论进行多次旋转都只会有一个<code>Fragment</code>实例在<code>Activity</code>中。<br>现在还存在一个问题，就是重新绘制时，Fragment发生重建，原本的数据如何保持？<br>其实和<code>Activity</code>类似，<code>Fragment</code>也有<code>onSaveInstanceState</code>的方法，在此方法中进行保存数据，然后在<code>onCreate</code>或者<code>onCreateView</code>或者<code>onActivityCreated</code>进行恢复都可以。</p>
<p>改造后的<code>FragmentTwo</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentTwo</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> EditText mEditText;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_two,container,<span class="keyword">false</span>);</div><div class="line">        mButton = (Button) view.findViewById(R.id.two_button);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">if</span> (mEditText == <span class="keyword">null</span>) &#123;</div><div class="line">            mEditText = (EditText) view.findViewById(R.id.editView);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//恢复数据</span></div><div class="line">            String str = savedInstanceState.getString(<span class="string">"editText"</span>);</div><div class="line">            mEditText.setText(str);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">        String str = mEditText.getText().toString();</div><div class="line">        outState.putString(<span class="string">"editText"</span>,str);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就不怕数据消失了。</p>
<p>好了，终于把Fragment相关的联系到一起了，上述基本包含了Fragment所有的用法，相信大家如果能够看完，一定有不少的收获。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天愚人节，先祝大家愚人节快乐!&lt;/p&gt;
&lt;p&gt;今天来说一下Android开发中经常使用到的一个类：&lt;code&gt;Fragment&lt;/code&gt;。由于&lt;code&gt;Android&lt;/code&gt;屏幕的碎片化，&lt;code&gt;Android&lt;/code&gt;为我们提供了一个和方便的类来使我们的APP可以适应各种屏幕的手机和平板，当然，&lt;code&gt;Fragment&lt;/code&gt;的功能远不止是为适应屏幕而生。你可以把&lt;code&gt;Fragment&lt;/code&gt;当成&lt;code&gt;Activity&lt;/code&gt;的一个界面的一个组成部分，甚至&lt;code&gt;Activity&lt;/code&gt;的界面可以由完全不同的&lt;code&gt;Fragment&lt;/code&gt;组成，更神奇的是&lt;code&gt;Fragment&lt;/code&gt;拥有自己的生命周期和接收、处理用户的事件，这样就不必再&lt;code&gt;Activity&lt;/code&gt;写一堆控件的事件处理的代码了，更重要的是，你可以动态的添加、替换和移除某个&lt;code&gt;Fragment&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之异步消息处理机制</title>
    <link href="http://www.guiyongdong.com/2017/03/27/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8B%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.guiyongdong.com/2017/03/27/一天一Android之异步消息处理机制/</id>
    <published>2017-03-27T09:37:50.000Z</published>
    <updated>2017-03-31T09:02:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>无论是<code>Android</code>还是<code>iOS</code>，关于UI的操作都是线程不安全的，所有的UI操作只能在主线程中执行。有时候我们会在子线程中做一些耗时的操作，比如网络资源的请求，当这些耗时操作结束时，我们又希望拿这些请求下来的资源去更新UI，但是当前线程为子线程，而更新UI由必须在主线程中，这就涉及到了线程间的通信问题。</p>
<p>学过iOS的同学都知道，我们可以使用<code>GCD</code>或者<code>performSelectorOnMainThread:</code>等技术来达到我们的需求。而在Android中，我们就要使用到异步消息处理机制了。</p>
<p>这篇文章就来详细说一下异步消息处理机制。</p>
<a id="more"></a>
<h3 id="线程间通信常用的解决方案"><a href="#线程间通信常用的解决方案" class="headerlink" title="线程间通信常用的解决方案"></a>线程间通信常用的解决方案</h3><h5 id="runOnUiThread"><a href="#runOnUiThread" class="headerlink" title="runOnUiThread"></a>runOnUiThread</h5><p>通常情况下，使用<code>runOnUiThread</code>这种方式回到主线程是最为方便，代码量也比较少，具体的使用方式为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//子线程模拟耗时操作</span></div><div class="line">                Thread.sleep(<span class="number">3000</span>);</div><div class="line">                runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        <span class="comment">//主线程更新UI</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为这种方式使用简单，这里我们不再细说。</p>
<h5 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h5><p>我们先来看看如何使用Handler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Handler mHandler;</div><div class="line">    <span class="keyword">private</span> TextView mTextView;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        mTextView = (TextView) findViewById(R.id.textView);</div><div class="line"></div><div class="line">        Button onUIButton = (Button) findViewById(R.id.button);</div><div class="line">        onUIButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                requestData();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//在主线程中创建Handler</span></div><div class="line">        mHandler = <span class="keyword">new</span> Handler(<span class="keyword">new</span> Handler.Callback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">                <span class="comment">//接受到消息</span></div><div class="line">                String str = (String) msg.obj;</div><div class="line">                mTextView.setText(str);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">//子线程模拟耗时操作</span></div><div class="line">                    Thread.sleep(<span class="number">3000</span>);</div><div class="line">                    Message message = <span class="keyword">new</span> Message();</div><div class="line">                    message.obj = <span class="string">"消息"</span>;</div><div class="line">                    <span class="comment">//handler发送消息</span></div><div class="line">                    mHandler.sendMessage(message);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先在主线程中创建<code>Handler</code>，在<code>requestData</code>方法中，开启一个子线程，子线程中模拟耗时操作，操作结束后，使用<code>Handler</code>发送消息，在主线程中接收到消息，更新UI。</p>
<p>这种方式在开发中使用的最频繁，至于其中的原理，我们慢慢来探究。</p>
<h3 id="Handler原理剖析"><a href="#Handler原理剖析" class="headerlink" title="Handler原理剖析"></a>Handler原理剖析</h3><p>上面的例子中，我们创建Handler是在主线程中创建，可能你会想了，我在子线程中创建行么？我们来用代码实验一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> Handler handler1;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> Handler handler2;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        handler1 = <span class="keyword">new</span> Handler();  </div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">                handler2 = <span class="keyword">new</span> Handler();  </div><div class="line">            &#125;  </div><div class="line">        &#125;).start();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上段代码中，我们在主线程中创建<code>handler1</code>，在子线程中创建<code>handler2</code>。当是，当我们允许程序的时候，程序竟然崩溃了，错误提示信息是Can’t create handler inside thread that has not called Looper.prepare()。说是不能再没有调用<code>Looper.prepare()</code>的线程中创建<code>Handler</code>。那系统既然这么说了，那么我们就在子线程中添加这句代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        Looper.prepare();  </div><div class="line">        handler2 = <span class="keyword">new</span> Handler();  </div><div class="line">    &#125;  </div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p>果然不会崩溃了，为什么呢？</p>
<h5 id="Handler与Looper的关系"><a href="#Handler与Looper的关系" class="headerlink" title="Handler与Looper的关系"></a>Handler与Looper的关系</h5><p>为什么在子线程中创建Handler会崩溃呢？</p>
<p>我们先来看看<code>Handler</code>的有参和无参构造方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(callback, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现他们都调用了<code>public Handler(Callback callback, boolean async)</code>这个方法，来看看这个方法的具体实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class="line">        <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class="line">        <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class="line">                (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</div><div class="line">            Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</div><div class="line">                klass.getCanonicalName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mLooper = Looper.myLooper();</div><div class="line">    <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">            <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">    &#125;</div><div class="line">    mQueue = mLooper.mQueue;</div><div class="line">    mCallback = callback;</div><div class="line">    mAsynchronous = async;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们发现这段代码抛出了异常，并且这个异常正好是刚才我们没有创建<code>Handler</code>的时候所出现的。</p>
<p>我们看到，这段代码中，调用了<code>Looper.myLooper()</code>方法获取一个Looper对象，如果Looper对象为空，就会抛异常，那什么时候Looper对象为空呢？我们再来看看<code>Looper.myLooper()</code>中的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sThreadLocal.get();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法很简单，就是从<code>sThreadLocal</code>对象中取出<code>Looper</code>，如果<code>sThreadLocal</code>中有<code>Looper</code>存在就返回<code>Looper</code>，否则返回空。那么我们在什么时候给<code>sThreadLocal</code>设置<code>Looper</code>呢？经验得出，肯定是<code>Looper.prepare()</code>，因为我们没有调用这个方法的时候，程序会崩溃。😄</p>
<p>我们来看<code>Looper.prepare()</code>方法的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line">    prepare(<span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">    &#125;</div><div class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，<code>prepare</code>方法又调用了<code>prepare(boolean quitAllowed)</code>方法，我们直接看<code>prepare(boolean quitAllowed)</code>方法。</p>
<p>首先判断<code>sThreadLocal</code>中是否已经存在<code>Looper</code>了，如果不存在，创建一个新的额<code>Looper</code>并设置给<code>sThreadLocal</code>。这就解释了，我们创建<code>Handler</code>的时候，为什么必须先调用<code>Looper.prepare()</code>方法。如果已经存在，会抛异常。由此得出，一个线程中只能存在一个<code>Looper</code>。</p>
<p>可能你还会疑惑，我们在主线程创建<code>Handler</code>到时候并没有去调用<code>Looper.prepare()</code>方法，程序也没有崩溃啊。这是因为在程序启动的时候，系统已经帮我们自动调用了<code>Looper.prepare()</code>方法。看<code>ActivityThread</code>中的<code>main()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">    SamplingProfilerIntegration.start();  </div><div class="line">    CloseGuard.setEnabled(<span class="keyword">false</span>);  </div><div class="line">    Environment.initForCurrentUser();  </div><div class="line">    EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());  </div><div class="line">    Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);  </div><div class="line">    Looper.prepareMainLooper();  </div><div class="line">    ActivityThread thread = <span class="keyword">new</span> ActivityThread();  </div><div class="line">    thread.attach(<span class="keyword">false</span>);  </div><div class="line">    <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;  </div><div class="line">        sMainThreadHandler = thread.getHandler();  </div><div class="line">    &#125;  </div><div class="line">    AsyncTask.init();  </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;  </div><div class="line">        Looper.myLooper().setMessageLogging(<span class="keyword">new</span> LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));  </div><div class="line">    &#125;  </div><div class="line">    Looper.loop();  </div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，系统帮我们调用了<code>Looper.prepareMainLooper()</code>方法，而这个方法又会再去调用<code>Looper.prepare()</code>，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">    prepare(<span class="keyword">false</span>);</div><div class="line">    <span class="keyword">synchronized</span> (Looper.class) &#123;</div><div class="line">        <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</div><div class="line">        &#125;</div><div class="line">        sMainLooper = myLooper();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因此我们的应用程序的主线程中始终存在一个<code>Looper</code>对象，从而不需要再动手去调用<code>Looper.prepare()</code>。</p>
<p>这样关于<code>Handler</code>和<code>Looper</code>的关系就很明确了，<code>Handler</code>的创建依赖与<code>Looper</code>。一个线程中至多有一个<code>Handler</code>。</p>
<h5 id="Handler、Message、Looper的消息机制"><a href="#Handler、Message、Looper的消息机制" class="headerlink" title="Handler、Message、Looper的消息机制"></a>Handler、Message、Looper的消息机制</h5><p>我们已经明白了<code>Handler</code>和<code>Looper</code>之间的大概关系，那么这三者之间的具体是如何协同操作的呢？</p>
<p>我们先来看看<code>Handler</code>是如何发送消息的:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        Message message = <span class="keyword">new</span> Message();  </div><div class="line">        message.arg1 = <span class="number">1</span>;  </div><div class="line">        Bundle bundle = <span class="keyword">new</span> Bundle();  </div><div class="line">        bundle.putString(<span class="string">"data"</span>, <span class="string">"data"</span>);  </div><div class="line">        message.setData(bundle);  </div><div class="line">        handler.sendMessage(message);  </div><div class="line">    &#125;  </div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p>其实Message只是一个载体，它可以使用<code>setData()</code>或<code>arg</code>参数等方法来携带一些数据，然后通过<code>Handler</code>将消息发送出去。</p>
<p>那么<code>Handler</code>把<code>Message</code>发送到哪里了呢？而且我们又可以在<code>Handler</code>的<code>handleMessage()</code>方法中重新得到这条<code>Message</code>呢？我们来看<code>Handler</code>的<code>sendMessage</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(Message msg, <span class="keyword">long</span> delayMillis)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</div><div class="line">        delayMillis = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">    MessageQueue queue = mQueue;</div><div class="line">    <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">        RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">        Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们看到，辗转反则最后调用了<code>sendMessageAtTime</code>，在此方法的内部，又调用了<code>enqueueMessage</code>方法，此方法接收三个参数：第一个参数<code>queue</code>就是一个消息队列，它将所有收到的消息以队列的形式进行排列，并提供入队和出队的操作，其实当前<code>Handler</code>中的<code>queue</code>是由<code>Looper</code>创建的，<code>Handler</code>只是引用了此<code>queue</code>，我们查看<code>Handler</code>的构造方法，里面会有这样两句代码:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">	...</div><div class="line">	mLooper = Looper.myLooper();</div><div class="line">	...</div><div class="line">	mQueue = mLooper.mQueue;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因此，一个Looper也就只有一个<code>MessageQueue</code>。第二个参数msg就是我们所要发送的消息<code>Message</code>，第三个参数<code>uptimeMillis</code>则表示发送消息的时间，它的值等于系统开机到当前时间的毫秒数再加上延迟时间，如果我们调用的不是<code>endMessageDelayed()</code>方法，延迟时间就是0。然后我们再来看调用的<code>enqueueMessage</code>方法的实现：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">    msg.target = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">        msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此方法会把当前<code>Handler</code>设置为<code>msg</code>的<code>target</code>，这个<code>target</code>的作用我们等会再说。然后就是调用消息队列的<code>enqueueMessage</code>方法，毫无疑问，就是把消息入队了。我们看源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (msg.isInUse()) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (mQuitting) &#123;</div><div class="line">            IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</div><div class="line">                    msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</div><div class="line">            Log.w(TAG, e.getMessage(), e);</div><div class="line">            msg.recycle();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.markInUse();</div><div class="line">        msg.when = when;</div><div class="line">        Message p = mMessages;</div><div class="line">        <span class="keyword">boolean</span> needWake;</div><div class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</div><div class="line">            <span class="comment">// New head, wake up the event queue if blocked.</span></div><div class="line">            msg.next = p;</div><div class="line">            mMessages = msg;</div><div class="line">            needWake = mBlocked;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</div><div class="line">            Message prev;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                prev = p;</div><div class="line">                p = p.next;</div><div class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                    needWake = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            msg.next = p; <span class="comment">// invariant: p == prev.next</span></div><div class="line">            prev.next = msg;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class="line">        <span class="keyword">if</span> (needWake) &#123;</div><div class="line">            nativeWake(mPtr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先判断<code>msg</code>的<code>target</code>是否为空，如果为空抛异常，由此我们看出<code>target</code>在后面会有大作用。其次判断此消息是否已经加入到队列中去。然后设置<code>msg</code>为已加入标记，<code>msg</code>触发时间，这里会取出之前的消息，首先你要知道，<code>MessageQueue</code>并没有使用一个集合把所有的消息都保存起来，它只使用了一个<code>Messages</code>对象表示当前待处理的消息，而且每个<code>Messages</code>对象都会有一个<code>next</code>字段，它也是一个<code>Messages</code>对象，由此可以组成类似于链表一样的数据结构。而且这里会判断当前<code>msg</code>的触发时间是不是0，如果是0直接加入到链表的头部。如果<code>msg</code>的触发时间不是0，会一直循环遍历当前<code>MessageQueue</code>对象中的消息链表，并比较触发时间，重新排列消息链表。如此，当前消息已经被插入到整个消息队列中。</p>
<p>我们会疑惑，代码到这里已经没有了，但是<code>Handler</code>又是如何接收到消息的呢？</p>
<p>不知道大家注意没，我们在看<code>ActivityThread</code>中的<code>main()</code>方法中，有没有还看到这样一句代码：<code>Looper.loop()</code>，这句代码会不会和我们的消息队列有关系呢？我们先来做个试验：我们在子线程中创建一个<code>Handler</code>，并且发送一条消息，但是我们只调用<code>Looper.prepare()</code>方法，我们是否能接收到消息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Looper.prepare();</div><div class="line">                Handler handler = <span class="keyword">new</span> Handler(<span class="keyword">new</span> Handler.Callback() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">                    	<span class="comment">//标记一下接受到消息</span></div><div class="line">                        Log.d(<span class="string">"msg"</span>,<span class="string">"接收到消息"</span>);</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">                <span class="comment">//子线程模拟耗时操作</span></div><div class="line">                Thread.sleep(<span class="number">3000</span>);</div><div class="line">				   <span class="comment">//发送消息</span></div><div class="line">                handler.sendMessage(<span class="keyword">new</span> Message());</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行程序以后，在控制台并没有看到打印的信息，然后我们在<code>handler.sendMessage(new Message())</code>后面添加<code>Looper.loop()</code>代码，再次运行，我们可以看到控制台有信息打印，注意，<code>Looper.loop()</code>会造成代码阻塞，必须放在代码的最后面。 由此我们可以确信，消息的发送确实和<code>Looper.loop()</code>方法有很大关系，我们看源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">	 <span class="comment">//获取当前线程的Looper</span></div><div class="line">    <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">//如果当前线程没有Looper 抛出异常    </span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//拿到当前Looper的消息队列</span></div><div class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line">	</div><div class="line">    Binder.clearCallingIdentity();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line">    </div><div class="line">	 <span class="comment">//死循环当前消息队列</span></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">        	<span class="comment">//没有消息返回</span></div><div class="line">           <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></div><div class="line">        <span class="keyword">final</span> Printer logging = me.mLogging;</div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                    msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> traceTag = me.mTraceTag;</div><div class="line">        <span class="keyword">if</span> (traceTag != <span class="number">0</span> &amp;&amp; Trace.isTagEnabled(traceTag)) &#123;</div><div class="line">            Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">        	  <span class="comment">//拿到消息之前存储的target也就是Handler 发送消息</span></div><div class="line">            msg.target.dispatchMessage(msg);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</div><div class="line">                Trace.traceEnd(traceTag);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Make sure that during the course of dispatching the</span></div><div class="line">        <span class="comment">// identity of the thread wasn't corrupted.</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">        <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">            Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                    + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                    + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                    + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                    + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.recycleUnchecked();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，首先会判断当前线程是否有Looper，如果没有抛出异常，所以<code>Looper.loop()</code>一定要在<code>Looper.prepare()</code>方法之后，然后拿到当前<code>Looper</code>的消息队列<code>mQueue</code>，之后进入无限循环，取出第一条消息，如果没有消息则阻塞，如果我们使用<code>Handler</code>发送消息，这个时候则能通过循环取到消息，之后调用消息的<code>target</code>的<code>dispatchMessage()</code>方法来回调消息信息。其实消息的target就是<code>Handler</code>。</p>
<p>再来看看<code>Handler</code>的<code>dispatchMessage()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123; </div><div class="line">    	 <span class="comment">//使用Handler的post方法发送消息会走这里 </span></div><div class="line">        handleCallback(msg);  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;  </div><div class="line">        	  <span class="comment">//使用Handler的sendMessage方法会走这里</span></div><div class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;  </div><div class="line">                <span class="keyword">return</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        handleMessage(msg);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在使用<code>Handler</code>的有参构造函数的时候，会传一个<code>Callback</code>对象，他是一个接口，只有一个方法<code>handleMessage()</code>，所以会再次走我们的回调函数，传递消息。</p>
<p>至此，关于<code>Looper</code>、<code>Handler</code>、<code>Message</code>这三者关系我们已经非常清楚了，来张图解释一下：</p>
<div align="center"><br><img src="http://img.blog.csdn.net/20140805002935859?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbG1qNjIzNTY1Nzkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><br></div>


<p>另外除了还有一种发送消息的方法：<code>Handler</code>的<code>post()</code>方法。</p>
<p>先来看看<code>post()</code>方法的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable r)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">return</span>  sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原来这里还是调用了sendMessageDelayed()方法去发送一条消息啊，并且还使用了getPostMessage()方法将Runnable对象转换成了一条消息，我们来看下这个方法的源码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Message <span class="title">getPostMessage</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">    Message m = Message.obtain();</div><div class="line">    m.callback = r;</div><div class="line">    <span class="keyword">return</span> m;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这个方法中将消息的callback字段的值指定为传入的Runnable对象。咦？这个callback字段看起来有些眼熟啊，喔！在Handler的dispatchMessage()方法中原来有做一个检查，如果Message的callback等于null才会去调用handleMessage()方法，否则就调用handleCallback()方法。那我们快来看下handleCallback()方法中的代码吧：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">    message.callback.run();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也太简单了！竟然就是直接调用了一开始传入的Runnable对象的run()方法。因此在子线程中通过Handler的post()方法进行UI操作就可以这么写：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Handler handler;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        handler = <span class="keyword">new</span> Handler();  </div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">                handler.post(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">                    <span class="meta">@Override</span>  </div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">                        <span class="comment">// 在这里进行UI操作  </span></div><div class="line">                    &#125;  </div><div class="line">                &#125;);  </div><div class="line">            &#125;  </div><div class="line">        &#125;).start();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>虽然写法上相差很多，但是原理是完全一样的，我们在Runnable对象的run()方法里更新UI，效果完全等同于在handleMessage()方法中更新UI。</p>
<p>通过以上所有源码的分析，我们已经发现了，不管是使用哪种方法在子线程中更新UI，其实背后的原理都是相同的，必须都要借助异步消息处理的机制来实现，而我们又已经将这个机制的流程完全搞明白了。真好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无论是&lt;code&gt;Android&lt;/code&gt;还是&lt;code&gt;iOS&lt;/code&gt;，关于UI的操作都是线程不安全的，所有的UI操作只能在主线程中执行。有时候我们会在子线程中做一些耗时的操作，比如网络资源的请求，当这些耗时操作结束时，我们又希望拿这些请求下来的资源去更新UI，但是当前线程为子线程，而更新UI由必须在主线程中，这就涉及到了线程间的通信问题。&lt;/p&gt;
&lt;p&gt;学过iOS的同学都知道，我们可以使用&lt;code&gt;GCD&lt;/code&gt;或者&lt;code&gt;performSelectorOnMainThread:&lt;/code&gt;等技术来达到我们的需求。而在Android中，我们就要使用到异步消息处理机制了。&lt;/p&gt;
&lt;p&gt;这篇文章就来详细说一下异步消息处理机制。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一天一Android之数据持久化技术</title>
    <link href="http://www.guiyongdong.com/2017/03/24/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    <id>http://www.guiyongdong.com/2017/03/24/一天一Android之数据持久化技术/</id>
    <published>2017-03-24T03:21:30.000Z</published>
    <updated>2017-03-25T07:39:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>任何一个应用程序，说白了都是在不停的和数据打交道，通过网络获取的数据，一般为瞬时数据，当我们关闭APP的时候，这些数据就会消失。但有时候我们却希望在APP关闭的时候，保存这些数据，以期待在下次APP启动的时候能用到这些数据。那么，这里我们就需要用到数据持久化技术了。</p>
<p>其实数据持久化已经被广泛应用于各种程序设计的领域了，后台就不说了，iOS有<code>plist</code>、<code>归档</code>、<code>数据库</code>等。当然，Android也有类似与iOS的存储方式：<code>文件存储</code>、<code>SharedPreference</code>以及<code>数据库</code>等，对了，Android还有SD卡。</p>
<a id="more"></a>
<h3 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h3><h5 id="写数据"><a href="#写数据" class="headerlink" title="写数据"></a>写数据</h5><p>文件存储是Android中最基本的存储方式，它不对存储的内容进行格式化处理，所有的数据原封不动地保存到文件中，因而它适合存储一些简单的文本数据或者二进制数据。其实问价存储是最简单的，你只需要了解java流的使用就可以了。Android提供了一个<code>openFileOutput()</code>方法，可以将数据存储到指定的文件中。这个方法接收两个参数，第一个参数是文件名，注意这里的文件不需要包含路径，因为所有的文件都是默认存储到<code>/data/data/&lt;packagename&gt;/files</code>目录下的，第二个参数是文件的操作模式，主要有两种，一种是<code>MODE_PTIVATE</code>，它也是默认的模式，表示当我们写入的数据会覆盖之前的数据。另一种是<code>MODE_APPEND</code>，表示会追加数据。而且<code>openFileOutput()</code>方法会返回一个<code>FileOutputStream</code>对象，然后就可以以java流的方式写数据了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveData</span><span class="params">(String data)</span> </span>&#123;</div><div class="line">    <span class="comment">//直接使用文件存储</span></div><div class="line">    FileOutputStream fileOutputStream = <span class="keyword">null</span>;</div><div class="line">    BufferedWriter bufferedWriter = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        fileOutputStream = openFileOutput(<span class="string">"str.txt"</span>,MODE_APPEND);</div><div class="line">        bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(fileOutputStream));</div><div class="line">        bufferedWriter.write(data);</div><div class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;<span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (bufferedWriter != <span class="keyword">null</span>)&#123;</div><div class="line">                bufferedWriter.close();</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h5><p>有写就有读，<code>Context</code>类还提供了一个<code>openFileInput()</code>方法，用于读取数据，这个方法只接收一个参数文件名，系统会自动到<code>/data/data/&lt;packagename&gt;/files</code>目录下读取这个文件的数据，并返回一个FileInputStream对象，然后通过java流的方式读取数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    FileInputStream inputStream = <span class="keyword">null</span>;</div><div class="line">    BufferedReader bufferedReader = <span class="keyword">null</span>;</div><div class="line">    StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        inputStream = openFileInput(<span class="string">"str.txt"</span>);</div><div class="line">        bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</div><div class="line">        String line = <span class="string">""</span>;</div><div class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>)&#123;</div><div class="line">            stringBuffer.append(line);</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;<span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (bufferedReader != <span class="keyword">null</span>)&#123;</div><div class="line">                bufferedReader.close();</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> bufferedReader.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SharedPreferences"><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a>SharedPreferences</h3><p>说起这个，我想到了iOS的偏好设置，它也是一种轻量级的数据存储方式，和iOS不同的是，SharedPreferences却可以创建任意的偏好设置。iOS中的偏好设置本质是plist，Android中的偏好设置本质是XML。</p>
<h5 id="写数据-1"><a href="#写数据-1" class="headerlink" title="写数据"></a>写数据</h5><p>要想写数据，首先需要获取<code>SharedPreferences</code>对象，Android提供了三种方式获取。</p>
<p><strong>Context类中的getSharedPreferences()方法</strong><br>此方法接收两个参数，第一个参数用于指定<code>SharedPreferences</code>文件的名称，如果指定的文件不存在则会创建，<code>SharedPreferences</code>文件都是存放在<code>/data/data/&lt;package name&gt;/shared</code>目录下的。第二个参数用于指定操作模式，目前只有MODE_PRIVATE这一种模式可选，表示只有本应用程序才可以对这个<code>SharedPreferences</code>文件进行读写。</p>
<p><strong>Activity类中的getPreferences()方法</strong><br>这个方法直接收一个操作参数，因为使用这个方法时会自动将当前活动的类名作为文件名。</p>
<p><strong>PreferenceManager类中的getDefaultSharedPreferences()方法</strong><br>这是一个静态方法，它接收一个Context参数，并自动使用当前应用程序的包名作为前缀来命名<code>SharedPreferences</code>文件，得到<code>SharedPreferences</code>对象后，就可以实现数据的存储了，主要有3步：</p>
<ul>
<li>调用<code>SharedPreferences</code>对象的edit()方法获取一个<code>SharedPreferences.Editor</code>对象</li>
<li>向<code>SharedPreferences.Editor</code>对象中添加数据</li>
<li>调用<code>apply()</code>方法将数据提交</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">//使用SharedPreferences 存储数据</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveData</span><span class="params">(String data)</span> </span>&#123;</div><div class="line">	SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(<span class="keyword">this</span>);</div><div class="line">	<span class="comment">//sharedPreferences = getSharedPreferences("share",MODE_PRIVATE);</span></div><div class="line">	<span class="comment">//sharedPreferences = getPreferences(MODE_PRIVATE);</span></div><div class="line">	SharedPreferences.Editor editor = sharedPreferences.edit();</div><div class="line">	editor.putString(data,<span class="string">"aaa"</span>);<span class="comment">//以key-value的形式存储</span></div><div class="line">	editor.apply();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="读数据-1"><a href="#读数据-1" class="headerlink" title="读数据"></a>读数据</h5><p>使用<code>SharedPreferences</code>读数据更加的简单，<code>SharedPreferences</code>有一系列的get方法来读取不同类型的数据。get方法的第一个参数是key，第二个参数是如果取不到这个key对应的值，返回的默认值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">	SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(<span class="keyword">this</span>);</div><div class="line">	<span class="comment">//sharedPreferences = getSharedPreferences("share",MODE_PRIVATE);</span></div><div class="line">	<span class="comment">//sharedPreferences = getPreferences(MODE_PRIVATE);</span></div><div class="line">	String string = sharedPreferences.getString(key, <span class="string">"default"</span>);</div><div class="line">	Toast.makeText(<span class="keyword">this</span>,string,Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="数据库存储"><a href="#数据库存储" class="headerlink" title="数据库存储"></a>数据库存储</h3><p>说到数据库存储，不得不了解的就是SQL语句，其实我的数据库了解的很少，SQL语句也只会一些简单的，如果想存储一些有复杂依赖关系的数据是需要数据库功底的。</p>
<p>无论Android还是iOS，系统都内置了名为sqlite数据库，我们可以使用标准的SQL语句来操作它。</p>
<h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><p>Android专门提供一个叫<code>SQLiteOpenHelper</code>的抽象类，它有两个抽象方法<code>onCreate</code>和<code>onUpgrade</code>，顾名思义，一个创建，一个更新。</p>
<p><code>SQLiteOpenHelper</code>中还有两个方法，<code>getReadableDatabase()</code>和<code>getWritableDatabase()</code>。这两个方法都可以创建或打开一个数据库，并返回一个数据库操作对象。不同的是当数据库不可写入时（如磁盘空间已满），<code>getReadableDatabase()</code>方法返回的对象将以只读的方式去打开数据库，而<code>getWritableDatabase()</code>方法则抛异常。</p>
<p><code>SQLiteOpenHelper</code>中有两个构造方法可供重写，一般使用参数少的，第一个参数是Context，第二个参数是数据库名，第三个参数允许我们在查询数据的时候返回一个自定义的Cursor，一般都传null，第四个参数表示当前数据库的版本号，可用于对数据库升级操作。数据库存放的位置在<code>/data/data/&lt;package name&gt;/database/</code>目录下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataBaseHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_BOOK = <span class="string">"create table Book ("</span></div><div class="line">            +<span class="string">"id integer primary key autoincrement,"</span></div><div class="line">            +<span class="string">"author text,"</span></div><div class="line">            +<span class="string">"price real,"</span></div><div class="line">            +<span class="string">"pages integer,"</span></div><div class="line">            +<span class="string">"name text)"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_CATEGORY = <span class="string">"create table Category ("</span></div><div class="line">            +<span class="string">"id integer primary key autoincrement,"</span></div><div class="line">            +<span class="string">"author text,"</span></div><div class="line">            +<span class="string">"price real,"</span></div><div class="line">            +<span class="string">"pages integer,"</span></div><div class="line">            +<span class="string">"name text)"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span>  Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDataBaseHelper</span><span class="params">(Context context, String name, SQLiteDatabase.CursorFactory factory, <span class="keyword">int</span> version)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, name, factory, version);</div><div class="line">        mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">        <span class="comment">//在此方法中创建数据库</span></div><div class="line">        db.execSQL(CREATE_BOOK);</div><div class="line">        Toast.makeText(mContext,<span class="string">"创建数据库"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">        <span class="comment">//如果版本号升级 则在此方法中对数据库进行升级</span></div><div class="line">        Toast.makeText(mContext,<span class="string">"更新数据库"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">        <span class="keyword">if</span> (newVersion == <span class="number">2</span>)&#123;</div><div class="line">            db.execSQL(CREATE_CATEGORY);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MyDataBaseHelper mMyDataBaseHelper;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_data_base);</div><div class="line">        </div><div class="line">        <span class="comment">//等到下次需要升级数据库时，需要修改这里的版本号</span></div><div class="line">        mMyDataBaseHelper = <span class="keyword">new</span> MyDataBaseHelper(<span class="keyword">this</span>,<span class="string">"BookStore.db"</span>,<span class="keyword">null</span>,<span class="number">1</span>);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.button2);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="comment">//会创建数据库</span></div><div class="line">                mMyDataBaseHelper.getWritableDatabase();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有数据库的地方就有增删改查</p>
<h5 id="增"><a href="#增" class="headerlink" title="增"></a>增</h5><p><code>SQLiteOpenHelper</code>提供了一个<code>insert()</code>方法，它接收三个参数，第一个是表名，第二个参数用于在未指定添加数据的情况下给某些可为空的列自动赋值为NULL，一般我们直接传null，第三个是ContentValues对象，它提供了一系列的put（）方法，用于添加数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">	Button addButton = (Button) findViewById(R.id.addButton);</div><div class="line">	addButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">	    <span class="meta">@Override</span></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">	        SQLiteDatabase database = mMyDataBaseHelper.getWritableDatabase();</div><div class="line">	        ContentValues contentValues = <span class="keyword">new</span> ContentValues();</div><div class="line">	        contentValues.put(<span class="string">"name"</span>,<span class="string">"android"</span>);</div><div class="line">	        contentValues.put(<span class="string">"author"</span>,<span class="string">"125"</span>);</div><div class="line">	        contentValues.put(<span class="string">"pages"</span>,<span class="number">40</span>);</div><div class="line">	        contentValues.put(<span class="string">"price"</span>,<span class="number">16.50</span>);</div><div class="line">	        database.insert(<span class="string">"Book"</span>,<span class="keyword">null</span>,contentValues);</div><div class="line">	    &#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="删"><a href="#删" class="headerlink" title="删"></a>删</h5><p><code>SQLiteOpenHelper</code>提供一个<code>delete()</code>方法，第一个参数表名，第二，三个参用于约束删除某一行或某几行的数据，不指定的话默认删除所有行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</div><div class="line">	Button deleteButton = (Button) findViewById(R.id.deleteButton);</div><div class="line">	deleteButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">	    <span class="meta">@Override</span></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">	        SQLiteDatabase database = mMyDataBaseHelper.getWritableDatabase();</div><div class="line">	        database.delete(<span class="string">"Book"</span>,<span class="string">"name = ?"</span>,<span class="keyword">new</span> String[]&#123;<span class="string">"android"</span>&#125;);</div><div class="line">	    &#125;</div><div class="line">	&#125;);	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="改"><a href="#改" class="headerlink" title="改"></a>改</h5><p><code>SQLiteOpenHelper</code>提供了一个<code>update()</code>方法，用于对数据的更新。这个方法接收4个参数，第一个为表名，第二个为ContentValues对象，把要更新数据在这里组装，第三，四个用于约束更新某一行或某几行中的数据，不指定的话更新所有行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</div><div class="line">	Button updateButton = (Button) findViewById(R.id.updateButton);</div><div class="line">    updateButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            SQLiteDatabase database = mMyDataBaseHelper.getWritableDatabase();</div><div class="line">            ContentValues contentValues = <span class="keyword">new</span> ContentValues();</div><div class="line">            contentValues.put(<span class="string">"price"</span>,<span class="number">4545.9</span>);</div><div class="line">            database.update(<span class="string">"Book"</span>,contentValues,<span class="string">"name = ?"</span>,<span class="keyword">new</span> String[]&#123;<span class="string">"android"</span>&#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="查"><a href="#查" class="headerlink" title="查"></a>查</h5><p>通常情况下，数据库中的查是最复杂的。<code>SQLiteOpenHelper</code>提供了一系列<code>query()</code>方法，最短的方法也有7个参数。第一个参数是表名。第二个参数用于指定去查询哪几行，如果不指定默认查询所有行。第三，四个用于约束查询某一行或某几行的数据，不指定则默认查询所有行。第五个参数参数表示指定需要group by的列，不指定则表示不对查询结果进行group by操作。第六个参数用于对group by的进一步过滤。第七个参数用于对查询的结果排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function">pubic <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</div><div class="line">	Button checkButton = (Button) findViewById(R.id.checkButton);</div><div class="line">	checkButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">	    <span class="meta">@Override</span></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">	        SQLiteDatabase database = mMyDataBaseHelper.getWritableDatabase();</div><div class="line">	        Cursor cursor = database.query(<span class="string">"Book"</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</div><div class="line">	        <span class="keyword">if</span> (cursor.moveToFirst())&#123;</div><div class="line">	            do &#123;</div><div class="line">	                String name = cursor.getString(cursor.getColumnIndex(<span class="string">"name"</span>));</div><div class="line">                        <span class="keyword">double</span> price = cursor.getDouble(cursor.getColumnIndex(<span class="string">"price"</span>))</div><div class="line">                        Toast.makeText(DataBaseActivity.<span class="keyword">this</span>,name+price,Toast.LENGTH_SHORT).show();</div><div class="line">	        &#125;</div><div class="line">	        cursor.close();</div><div class="line">	    &#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们看到，调用<code>query()</code>方法会返回一个<code>Cursor</code>对象，调用<code>moveToFirst()</code>可将查询指针指向第一行的位置，调用<code>moveToNext()</code>可将查询指针向下一行移动，如果没有下一行返回false，结束查询。然后我们就可以循环遍历查询数据。通过<code>Cursor</code>的<code>getColumnIndex()</code>方法获取到某一列在表中对应的位置索引，通过这个索引就可以得到索引对应的数据，</p>
<p>当然，关于数据库的操作你完全可以不适用以上方法，如果你对SQL语句足够数量，你可以直接使用SQL语句进行操作，添加、更新、删除等操作都可以直接使用<code>SQLiteDatabase</code>的<code>execSQL()</code>方法操作，第一个参数为SQL语句，第二个参数为值。查询操作可以使用<code>SQLiteDatabase</code>的<code>rawQuery()</code>方法，第一个参数为SQL语句，第二个参数为值。</p>
<p>这里推荐一个库，<strong>LitePal</strong>，简化了数据库的操作，可以直接对JavaBean进行操作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;任何一个应用程序，说白了都是在不停的和数据打交道，通过网络获取的数据，一般为瞬时数据，当我们关闭APP的时候，这些数据就会消失。但有时候我们却希望在APP关闭的时候，保存这些数据，以期待在下次APP启动的时候能用到这些数据。那么，这里我们就需要用到数据持久化技术了。&lt;/p&gt;
&lt;p&gt;其实数据持久化已经被广泛应用于各种程序设计的领域了，后台就不说了，iOS有&lt;code&gt;plist&lt;/code&gt;、&lt;code&gt;归档&lt;/code&gt;、&lt;code&gt;数据库&lt;/code&gt;等。当然，Android也有类似与iOS的存储方式：&lt;code&gt;文件存储&lt;/code&gt;、&lt;code&gt;SharedPreference&lt;/code&gt;以及&lt;code&gt;数据库&lt;/code&gt;等，对了，Android还有SD卡。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之广播</title>
    <link href="http://www.guiyongdong.com/2017/03/23/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8B%E5%B9%BF%E6%92%AD/"/>
    <id>http://www.guiyongdong.com/2017/03/23/一天一Android之广播/</id>
    <published>2017-03-23T06:06:15.000Z</published>
    <updated>2017-03-23T09:08:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>提到广播，因为我是农村的，首先想到的就是我们村大队的喇叭，如果平常有交电费，或者重要的事情，这个喇叭就会响起，全村的都能听见，可能有时候邻村的也能听见，足见广播的推送面积之大。</p>
<p>提到广播这种机制，学过iOS的都知道通知，我想这两种机制应该都是类似的。在iOS中，我们如果想监听系统的某些事件，比如APP退到后台，我们只需要在把监听对象添加到系统的通知中心中，并且关注APP退到后台的事件，就可以随时监听了。通知还有个好处就是，我们可以夸线程，夸界面的处理事件。</p>
<p>那么，在Android中，广播又是怎么回事呢，这篇文章就来详细分析一下广播在Android中的应用。(ps:广播还有另外一个名字——全局大喇叭~~)</p>
<a id="more"></a>
<h3 id="广播机制简介"><a href="#广播机制简介" class="headerlink" title="广播机制简介"></a>广播机制简介</h3><p>在广播机制中，存在两种角色：<strong>广播发送者</strong>和<strong>广播接收者</strong>。</p>
<p>我们来看看广播的使用场景：</p>
<ul>
<li>同一APP内部的同一组件内部的消息通信（单个或多个线程之间）</li>
<li>同一APP内部的不同组件之间的消息通信（单个进程）</li>
<li>同一APP具有多个进程的不同组件之间的消息通信</li>
<li>不同APP之间的组件之间消息通信</li>
<li>Android系统在特定情况下与APP之间的消息通信</li>
</ul>
<p>另外，Android中的广播主要可以分为两种类型：<strong>标准广播</strong>和<strong>有序广播</strong>。</p>
<h5 id="标准广播"><a href="#标准广播" class="headerlink" title="标准广播"></a>标准广播</h5><p>标准广播是一种完全异步执行的广播，在广播发出之后，所有的广播接收器几乎会在同一时刻接收到这条广播消息，因此它们之间没有任何先后顺序可言。这种广播的效率会比较高，但是却不能被截断。标准广播的工作流程是：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1917079-00a6b9ddd0a874a8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>


<h5 id="有序广播"><a href="#有序广播" class="headerlink" title="有序广播"></a>有序广播</h5><p>有序广播是一种同步执行的广播，在广播发出之后，同一时刻只会有一个广播接收器能够收到这条广播消息，当这个广播接收器中的逻辑处理执行完毕后，广播才会继续传播，而且优先级高的广播接收器可以优先接收到广播。并且前面的广播接收器还可以截断正在传递的广播，这样后面的广播接收器就无法收到广播消息了。有序广播的工作流程是：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1917079-31f3a8f2a27d905f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<h3 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h3><p>Android内置了很多系统级别的广播，如果我们想要监听系统的这些广播，就需要用到广播接收器（BroadcastReceiver）。注册广播的方式一般有两种，在代码中注册和在AndroidManifest.xml中注册，其中前者也被称为动态注册，后者也被称为静态注册。</p>
<h5 id="动态注册监听网络变化"><a href="#动态注册监听网络变化" class="headerlink" title="动态注册监听网络变化"></a>动态注册监听网络变化</h5><p>凡是广播接收者都必须继承自<code>BroadcastReceiver</code>，并重写抽象方法<code>onReceive()</code>，当有广播到来时，<code>onReceive()</code>方法就会得到执行。</p>
<p>我们使用动态注册的方式去监听网络的变化。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> NetworkChangeReceiver mNetworkChangeReceiver;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">//添加网络状态的监听</span></div><div class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">        intentFilter.addAction(<span class="string">"android.net.conn.CONNECTIVITY_CHANGE"</span>);</div><div class="line">        mNetworkChangeReceiver = <span class="keyword">new</span> NetworkChangeReceiver();</div><div class="line">        registerReceiver(mNetworkChangeReceiver,intentFilter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        unregisterReceiver(mNetworkChangeReceiver);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NetworkChangeReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">        <span class="comment">//实现接收的方法</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">            ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);</div><div class="line">            NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();</div><div class="line">            <span class="keyword">if</span> (networkInfo != <span class="keyword">null</span> &amp;&amp; networkInfo.isAvailable())&#123;</div><div class="line">                Toast.makeText(context,<span class="string">"有网了！"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                Toast.makeText(context,<span class="string">"没网了！"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不要忘了，要在AndroidManifest.xml中添加网络权限<br><code>&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;</code></p>
<p>可以看到，我在MainActivity中定义了一个内部类<code>NetworkChangeReceiver</code>并继承<code>BroadcastReceiver</code>，重写了父类的<code>onReceive()</code>方法。每当网络发生变化的时候，<code>onReceive()</code>方法就会得到执行。</p>
<p>在<code>onCreate()</code>方法中，我创建了一个IntentFilter的实例，并给它添加了一个值为<code>android.net.conn.CONNECTIVITY_CHANGE</code>的action，因外当网络状态发生变化时，系统会发出一条值为<code>android.net.conn.CONNECTIVITY_CHANGE</code>的广播。因为我们是动态注册广播，所以一定要在<code>onDestroy()</code>方法中调用<code>unregisterReceiver()</code>注销广播的监听。</p>
<h5 id="静态注册实现开机启动"><a href="#静态注册实现开机启动" class="headerlink" title="静态注册实现开机启动"></a>静态注册实现开机启动</h5><p>动态注册的广播接收器可以自由的控制注册与注销，在灵活性方面有很大的优势，但是它存在着一个缺点，即必须要在程序启动之后才能接收到广播，因为注册的逻辑是写在<code>onCreate()</code>方法里的。如果我们想在程序未启动的时候，就能接收到广播，那就要用到静态注册了。</p>
<p>首先我们需要创建一个广播接收器类，创建方式为：选择新建-&gt;Other-&gt;Broadcast Receiver。Android Studio会让我们选择谢谢东西，<code>Exported</code>表示是否允许这个广播接收器接收本程序以外的广播，<code>Enabled</code>表示是否启用这个广播接收器，这里我们都勾选。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootCompleteReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        Toast.makeText(context,<span class="string">"手机开机了"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，<code>BootCompleteReceiver</code>类里面的代码很简单。</p>
<p>另外，静态的广播接收器一定要在AndroidManifest.xml文件中注册才可以使用，但是注册这一步已经被Android Studio自动完成了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.broadreceiverdemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--广播接收者--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">receiver</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".BootCompleteReceiver"</span></div><div class="line">            <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>目前，我们还不能接收到开机广播，因为我们还没有为它添加响应的action。添加代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.broadreceiverdemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--添加权限--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECEIVE_BOOT_COMPLETED"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--广播接收者--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">receiver</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".BootCompleteReceiver"</span></div><div class="line">            <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--添加开机广播的监听--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.BOOT_COMPLETED"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>由于Android系统自动完成后会发送一条值为<code>android.intent.action.BOOT_COMPLETED</code>的广播，因此需要在<code>&lt;intent-filter&gt;</code>标签中添加相应的action，当然，监听系统开机广播的权限也是需要声明的。如此，我们的APP便可监听手机的开机了。</p>
<h3 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h3><p>说了这么多，一直都是系统在发广播，但是有时候我们根据业务需求要想发送自己的广播该这么办呢？前面说了，发广播的形式有两种，标准广播和有序广播，那就来看看这两种广播如何发送。</p>
<h5 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h5><p>在发送广播之前，我先定义一个广播接收器，这里约定action为<code>com.guiyongdong.MY_BROADCAST</code>，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.broadreceiverdemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 添加权限 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECEIVE_BOOT_COMPLETED"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        ...</div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">receiver</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".MyBroadcastReceiver"</span></div><div class="line">            <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--添加自定义的广播接收器--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.MY_BROADCAST"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>MyBroadcastReceiver</code>广播接收器的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        Toast.makeText(context,<span class="string">"接收到自定义的广播"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我在MainActivity中添加了一个按钮，按钮添加点击事件，会发送名为<code>com.guiyongdong.MY_BROADCAST</code>的广播，代码如下：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> NetworkChangeReceiver mNetworkChangeReceiver;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.sendButton);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.guiyongdong.MY_BROADCAST"</span>);</div><div class="line">                sendBroadcast(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重新运行，并点击按钮，效果图如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android15.png?raw=true" width="375"><br></div>

<h5 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h5><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> NetworkChangeReceiver mNetworkChangeReceiver;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.sendButton);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.guiyongdong.MY_BROADCAST"</span>);</div><div class="line">                sendOrderedBroadcast(intent,<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，发送有序广播只需要改动一行代码，即<code>sendBroadcast()</code>方法改成<code>sendOrderedBroadcast()</code>方法。<code>sendOrderedBroadcast()</code>方法接收两个参数，第一个参数任然是Intent，第二个参数是一个与权限相关的字符串，这里传null就行了。</p>
<p>如何定义有序广播的接收者的优先级呢？通过<code>android:priority</code>可以设置优先级。需要修改AndroidManifest.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.broadreceiverdemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 添加权限 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECEIVE_BOOT_COMPLETED"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        ...</div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">receiver</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".MyBroadcastReceiver"</span></div><div class="line">            <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</div><div class="line">            <span class="comment">&lt;!--修改优先级--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--添加自定义的广播接收器--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.MY_BROADCAST"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>那么，当接收者接到广播，也已经处理好逻辑后，如果接收者不想让广播继续传递了呢？这时候，需要调用<code>abdortBroadcast()</code>方法，来中断传播。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        Toast.makeText(context,<span class="string">"接收到自定义的广播"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">        <span class="comment">//中断传输</span></div><div class="line">        abortBroadcast();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="本地广播"><a href="#本地广播" class="headerlink" title="本地广播"></a>本地广播</h3><p>前面我所说的发送的广播都是全局广播，这些广播可以被其他任何应用程序接收到，并且我们也可以接收来自其他应用的广播，这样容易引起安全问题。</p>
<p>当然，Android已经为我们想到了这点，利用本地广播就可以解决广播的安全问题，而且这类广播只能在应用程序内部进行传递，并且广播接收者只能接收来自本应用程序发出的广播。</p>
<p>本地广播并不复杂，它主要使用<code>LocalBroadcastManager</code>来管理广播，并且提供了发送广播和注册广播接收器的方法，我们来看如何使用:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LocalBroadcastManager mLocalBroadcastManager;</div><div class="line">    <span class="keyword">private</span> LocalReceiver mLocalReceiver;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="comment">//创建本地广播管理实例</span></div><div class="line">        mLocalBroadcastManager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>);</div><div class="line">        Button sendLocalButton = (Button) findViewById(R.id.sendLocalButton);</div><div class="line">        sendLocalButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.guiyongdong.LOCAL_BROADCAST"</span>);</div><div class="line">                <span class="comment">//发送本地广播</span></div><div class="line">                mLocalBroadcastManager.sendBroadcast(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//注册广播</span></div><div class="line">        IntentFilter intentFilter1 = <span class="keyword">new</span> IntentFilter();</div><div class="line">        intentFilter.addAction(<span class="string">"com.guiyongdong.LOCAL_BROADCAST"</span>);</div><div class="line">        mLocalReceiver = <span class="keyword">new</span> LocalReceiver();</div><div class="line">        mLocalBroadcastManager.registerReceiver(mLocalReceiver,intentFilter);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LocalReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">            Toast.makeText(context,<span class="string">"接收到本地广播"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        mLocalBroadcastManager.unregisterReceiver(mLocalReceiver);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：本地广播是无法通过静态注册的方式来接收的。</p>
<p>总结一下本地广播的几点优势：</p>
<ul>
<li>可以明确知道正在发送的广播不会离开我们的程序，因此不用担心数据泄露。</li>
<li>其他的程序无法将广播发送到我们程序内部，因此不用担心会有安全漏洞的隐患。</li>
<li>发送本地广播比全局广播更加高效。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提到广播，因为我是农村的，首先想到的就是我们村大队的喇叭，如果平常有交电费，或者重要的事情，这个喇叭就会响起，全村的都能听见，可能有时候邻村的也能听见，足见广播的推送面积之大。&lt;/p&gt;
&lt;p&gt;提到广播这种机制，学过iOS的都知道通知，我想这两种机制应该都是类似的。在iOS中，我们如果想监听系统的某些事件，比如APP退到后台，我们只需要在把监听对象添加到系统的通知中心中，并且关注APP退到后台的事件，就可以随时监听了。通知还有个好处就是，我们可以夸线程，夸界面的处理事件。&lt;/p&gt;
&lt;p&gt;那么，在Android中，广播又是怎么回事呢，这篇文章就来详细分析一下广播在Android中的应用。(ps:广播还有另外一个名字——全局大喇叭~~)&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之RecyclerView</title>
    <link href="http://www.guiyongdong.com/2017/03/22/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BRecyclerView/"/>
    <id>http://www.guiyongdong.com/2017/03/22/一天一Android之RecyclerView/</id>
    <published>2017-03-22T09:29:15.000Z</published>
    <updated>2017-03-23T03:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>ListView由于其强大的功能，已经能满足我们绝大功能的开发，但是，当我们的数据比较复杂，条目也比较复杂的时候，如果我们优化的不好，那么ListView的性能就会非常差。还有，ListView只能实现数据纵向滚动的效果，如果我们想实现横向滚动的话，ListView做不到。</p>
<p>为此，Android提供了一个更强大的滚动控件——RecyclerView。它可以说是一个增强版的ListView，不仅可以轻松实现和ListView同样的效果，还优化了ListView中存在的各种不足之处，目前Android官方更加推荐我们使用RecyclerView。</p>
<a id="more"></a>
<h3 id="RecyclerView的基本用法"><a href="#RecyclerView的基本用法" class="headerlink" title="RecyclerView的基本用法"></a>RecyclerView的基本用法</h3><p>和约束布局一样，RecyclerView也属于新增的控件，所以我们需要添加在build.gradle中相应的依赖库。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile <span class="string">'com.android.support:recyclerview-v7:25.3.0'</span></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="纵向滚动"><a href="#纵向滚动" class="headerlink" title="纵向滚动"></a>纵向滚动</h5><p>我们先来模拟一下ListView的纵向滚动</p>
<p>创建RecyclerView的布局：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.recyclerviewdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/recyclerView"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>同样的，我们创建和上一篇ListView一样的dog_item布局和Dog实体类，这里就不再贴出代码。</p>
<p>创建适配器DogAdapter:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">DogAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Dog&gt; mDogList;</div><div class="line">    </div><div class="line">    <span class="comment">//定义一个内部类ViewHolder，它继承于RecyclerView.ViewHolder</span></div><div class="line">    <span class="keyword">static</span>  <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        ImageView dogImage;</div><div class="line">        TextView dogName;</div><div class="line">        <span class="comment">//构造函数，需要传入一个View</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(view);</div><div class="line">            dogImage = (ImageView) view.findViewById(R.id.dogImage);</div><div class="line">            dogName = (TextView) view.findViewById(R.id.dogName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//构造函数，需要知道数据源</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">DogAdapter</span><span class="params">(List&lt;Dog&gt; dogList)</span></span>&#123;</div><div class="line">        mDogList = dogList;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写父类方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.dog_item,parent,<span class="keyword">false</span>);</div><div class="line">        ViewHolder viewHolder = <span class="keyword">new</span> ViewHolder(view);</div><div class="line">        <span class="keyword">return</span> viewHolder;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写父类方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDogList.size();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写父类方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        Dog dog = mDogList.get(position);</div><div class="line">        holder.dogName.setText(dog.getName());</div><div class="line">        holder.dogImage.setImageResource(dog.getImage());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>是不是看上去和我们之前写的ListView的适配器不一样，感觉好复杂啊。</p>
<ul>
<li>首先我们定义了一个内部类ViewHolder，ViewHolder继承于RecyclerView.ViewHolder。然后ViewHolder的构造函数中需要传入一个View参数，通常这个View就是我们的item条目，我们就可以使用<code>findViewById()</code>方法来获取布局中的ImageView和TextView的实例了。</li>
<li>在DogAdapter中也定义了一个构造函数，需要传入一个Dog的list集合，因为Adapter需要知道现实哪些数据。</li>
<li>由于DogAdapter是继承于RecyclerView.ViewHolder，所以我们需要重新父类的三个方法：<code>onCreateViewHolder()</code>、<code>OnBindViewHolder()</code>和<code>getItemCount()</code>。</li>
<li><code>onCreateViewHolder()</code> 这个方法是用于创建ViewHolder实例，我们在这个方法中会加载item条目布局，并创建ViewHolder实例对象，并将条目View传入到ViewHolder的构造函数中，最后返回ViewHolder。</li>
<li><code>OnBindViewHolder()</code> 这个方法是用于对item条目的数据进行赋值，这个方法会在每个条目滚动到屏幕内的时候执行，这里我们根据position获取到Dog实例，并将数据设置给ViewHolder的dogImage和dogName。</li>
<li><code>getItemCount()</code> 这个方法是告诉RecyclerView一共有多少行的item，我们这里直接返回<code>mDogList</code>的长度。</li>
</ul>
<p>我们看看在<code>MainActivity</code>中如何使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Dog&gt; mDogArrayList;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initDogList();</div><div class="line">        mRecyclerView = (RecyclerView) findViewById(R.id.recyclerView);</div><div class="line">        <span class="comment">//创建一个布局管理类</span></div><div class="line">        LinearLayoutManager linearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">        mRecyclerView.setLayoutManager(linearLayoutManager);</div><div class="line">        <span class="comment">//创建Adapter</span></div><div class="line">        DogAdapter dogAdapter = <span class="keyword">new</span> DogAdapter(mDogArrayList);</div><div class="line">        mRecyclerView.setAdapter(dogAdapter);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initDogList</span><span class="params">()</span> </span>&#123;</div><div class="line">        mDogArrayList = <span class="keyword">new</span> ArrayList&lt;Dog&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">30</span>; i++)&#123;</div><div class="line">            Dog dog = <span class="keyword">new</span> Dog();</div><div class="line">            dog.setName(<span class="string">"小狗"</span>+i);</div><div class="line">            dog.setImage(R.drawable.dog);</div><div class="line">            mDogArrayList.add(dog);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里和ListView有些不同，我们在这里创建了一个<code>LinearLayoutManager</code>实例对象，<code>LinearLayoutManager</code>是线性布局的意思，可以实现和ListView类似的效果。</p>
<p>最终运行效果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android12.png?raw=true" width="375"><br></div>


<h5 id="横向滚动"><a href="#横向滚动" class="headerlink" title="横向滚动"></a>横向滚动</h5><p>我们知道ListView不能实现横向滚动，那么RecyclerView如何实现的呢？</p>
<p>这里我们需要先修改一下dog_item中的布局:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/dogImage"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/dog"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/dogName"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们把布局方式改为垂直方向，并把宽度设置为根据内容的宽度调整，由于我把TextView的宽度设置为match_parent，所以item的宽度会根据图片的宽度缩放。</p>
<p>这里我们只在<code>MainActivity</code>中加入一行代码<code>linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL)</code>就可实现横向滚动。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Dog&gt; mDogArrayList;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initDogList();</div><div class="line">        mRecyclerView = (RecyclerView) findViewById(R.id.recyclerView);</div><div class="line">        <span class="comment">//创建一个布局管理类</span></div><div class="line">        LinearLayoutManager linearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">        linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);</div><div class="line">        mRecyclerView.setLayoutManager(linearLayoutManager);</div><div class="line">        <span class="comment">//创建Adapter</span></div><div class="line">        DogAdapter dogAdapter = <span class="keyword">new</span> DogAdapter(mDogArrayList);</div><div class="line">        mRecyclerView.setAdapter(dogAdapter);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initDogList</span><span class="params">()</span> </span>&#123;</div><div class="line">        mDogArrayList = <span class="keyword">new</span> ArrayList&lt;Dog&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">30</span>; i++)&#123;</div><div class="line">            Dog dog = <span class="keyword">new</span> Dog();</div><div class="line">            dog.setName(<span class="string">"小狗"</span>+i);</div><div class="line">            dog.setImage(R.drawable.dog);</div><div class="line">            mDogArrayList.add(dog);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>LinearLayoutManager</code>的滚动方向默认是垂直方向，我们只需要调用它的<code>setOrientation</code>方法来设置布局的排列方向即可，<code>LinearLayoutManager.HORIZONTAL</code>表示横向排列，<code>LinearLayoutManager.VERTICAL</code>表示纵向排列。</p>
<p>效果图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android13.png?raw=true" width="375"><br></div>


<p>除了<code>LinearLayoutManager</code>外，RecyclerView还为我们提供了<code>GridLayoutManager</code>和<code>StaggeredGridLayoutManager</code>这两种内置的布局排列方式。<code>GridLayoutManager</code>可以用于实现网格布局，<code>StaggeredGridLayoutManager</code>可以用于实现瀑布流布局。</p>
<h3 id="瀑布流"><a href="#瀑布流" class="headerlink" title="瀑布流"></a>瀑布流</h3><p>说起瀑布流，学过iOS的都知道，实现瀑布流是多么复杂的事，需要自己实现布局类，并计算坐标。好在Android不一样，它早就给我们提供了瀑布流布局类<code>StaggeredGridLayoutManager</code>，我们来看看它是如何使用的。</p>
<p>我们在创造数据源的时候，需要把文字的多少设置为5-50的随机数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Dog&gt; mDogArrayList;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initDogList();</div><div class="line">        mRecyclerView = (RecyclerView) findViewById(R.id.recyclerView);</div><div class="line">        <span class="comment">//创建一个布局管理类</span></div><div class="line">        StaggeredGridLayoutManager staggeredGridLayoutManager = <span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">3</span>,StaggeredGridLayoutManager.VERTICAL);</div><div class="line">        mRecyclerView.setLayoutManager(staggeredGridLayoutManager);</div><div class="line">        <span class="comment">//创建Adapter</span></div><div class="line">        DogAdapter dogAdapter = <span class="keyword">new</span> DogAdapter(mDogArrayList);</div><div class="line">        mRecyclerView.setAdapter(dogAdapter);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initDogList</span><span class="params">()</span> </span>&#123;</div><div class="line">        mDogArrayList = <span class="keyword">new</span> ArrayList&lt;Dog&gt;();</div><div class="line">        Random random = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">30</span>; i++)&#123;</div><div class="line">            Dog dog = <span class="keyword">new</span> Dog();</div><div class="line">            StringBuffer name = <span class="keyword">new</span> StringBuffer(<span class="string">"小狗"</span>);</div><div class="line">            <span class="keyword">int</span> len = random.nextInt(<span class="number">50</span>)+<span class="number">5</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;len; j++)&#123;</div><div class="line">                name.append(<span class="string">"小狗"</span>);</div><div class="line">            &#125;</div><div class="line">            dog.setName(name.toString());</div><div class="line">            dog.setImage(R.drawable.dog);</div><div class="line">            mDogArrayList.add(dog);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先我创建了一个<code>StaggeredGridLayoutManager</code>的实例，<code>StaggeredGridLayoutManager</code>的构造函数需要接收两个参数，第一个参数用于指定布局的列数，传入3表示会把布局分为3列，第二个参数用于指定布局的排列方式，<code>StaggeredGridLayoutManager.VERTICAL</code>表示纵向排列，<code>StaggeredGridLayoutManager.HORIZONTAL</code>表示横向排列。</p>
<p>效果图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android14.png?raw=true" width="375"><br></div>


<p>想不到，Android的瀑布流实现如此的简单，我们只需要更改布局类就能实现，好方便啊，真的希望iOS也能借鉴Android的这种方式。</p>
<h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><p>RecyclerView并没有提供类似于<code>setOnItemClickListener()</code>这样的注册监听器方法，我们需要自己动手实现点击事件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">DogAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Dog&gt; mDogList;</div><div class="line"></div><div class="line">    <span class="comment">//定义一个内部类ViewHolder，它继承于RecyclerView.ViewHolder</span></div><div class="line">    <span class="keyword">static</span>  <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        ImageView dogImage;</div><div class="line">        TextView dogName;</div><div class="line">        <span class="comment">//新增一个成员变量 来保存当前item</span></div><div class="line">        View dogView;</div><div class="line">        <span class="comment">//构造函数，需要传入一个View</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(view);</div><div class="line">            dogView = view;</div><div class="line">            dogImage = (ImageView) view.findViewById(R.id.dogImage);</div><div class="line">            dogName = (TextView) view.findViewById(R.id.dogName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//构造函数，需要知道数据源</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">DogAdapter</span><span class="params">(List&lt;Dog&gt; dogList)</span></span>&#123;</div><div class="line">        mDogList = dogList;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写父类方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.dog_item,parent,<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">final</span> ViewHolder viewHolder = <span class="keyword">new</span> ViewHolder(view);</div><div class="line">        <span class="comment">//注册item点击事件</span></div><div class="line">        viewHolder.dogView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> position = viewHolder.getAdapterPosition();</div><div class="line">                Dog dog = mDogList.get(position);</div><div class="line">                Toast.makeText(v.getContext(),dog.getName(),Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//注册图片点击事件</span></div><div class="line">        viewHolder.dogImage.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> position = viewHolder.getAdapterPosition();</div><div class="line">                Dog dog = mDogList.get(position);</div><div class="line">                Toast.makeText(v.getContext(),<span class="string">"第"</span>+position+<span class="string">"个狗的头像被点击"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> viewHolder;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写父类方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDogList.size();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写父类方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        Dog dog = mDogList.get(position);</div><div class="line">        holder.dogName.setText(dog.getName());</div><div class="line">        holder.dogImage.setImageResource(dog.getImage());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我先是在ViewHolder中心增一个成员变量<code>dogView</code>来保存当前的item，然后在<code>onCreateViewHolder</code>方法中添加事件监听。通过<code>ViewHolder</code>拿到点击的position，然后就可以获取Dog实例，接下来就可以更加业务来处理了，我们这里只是简单的吐司。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>说了这么多，也只是说了RecyclerView的基本用法，关于RecyclerView的更多用法，还是去查看Android API，好了，今天的总结就到这里。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ListView由于其强大的功能，已经能满足我们绝大功能的开发，但是，当我们的数据比较复杂，条目也比较复杂的时候，如果我们优化的不好，那么ListView的性能就会非常差。还有，ListView只能实现数据纵向滚动的效果，如果我们想实现横向滚动的话，ListView做不到。&lt;/p&gt;
&lt;p&gt;为此，Android提供了一个更强大的滚动控件——RecyclerView。它可以说是一个增强版的ListView，不仅可以轻松实现和ListView同样的效果，还优化了ListView中存在的各种不足之处，目前Android官方更加推荐我们使用RecyclerView。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之ListView</title>
    <link href="http://www.guiyongdong.com/2017/03/20/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BListView/"/>
    <id>http://www.guiyongdong.com/2017/03/20/一天一Android之ListView/</id>
    <published>2017-03-20T09:31:13.000Z</published>
    <updated>2017-03-22T09:28:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>说起<code>ListView</code>，就不得不说iOS的<code>UITableView</code>，毫不夸张的说的，放在3年前，如果你去面试的时候，你说你会用<code>UITableView</code>，知道<code>UITableView</code>的代理方法，不用说了，你可以直接来上班了。</p>
<p><code>ListView</code>在Android中开发的重要性不言而喻，学好<code>ListView</code>，我想在以后的列表开发中就不用发愁了。什么是列表开发？这么说吧，在你使用的APP中，80%的都会用到列表开发，比如微信的聊天页，QQ的个人空间页。为何要用列表开发，列表开发的优越在哪里？我今天来一探究竟。</p>
<a id="more"></a>
<h3 id="ListView初体验"><a href="#ListView初体验" class="headerlink" title="ListView初体验"></a>ListView初体验</h3><p>我们先来写个小例子，根据这个小例子我们再做进一步的介绍。我们先在xml中创建一个ListView，这里我直接使用<code>ConstraintLayout</code>约束布局。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.listviewdemo2.MainActivity"</span>&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"368dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"495dp"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/listView"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>MainActivity的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ListView mListView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mListView = (ListView) findViewById(R.id.listView);</div><div class="line">        String[] data = &#123;<span class="string">"A"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"A"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"A"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"A"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"A"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"A"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>&#125;;</div><div class="line"></div><div class="line">        ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(MainActivity.<span class="keyword">this</span>,android.R.layout.simple_list_item_1,data);</div><div class="line">        mListView.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android9.png?raw=true" width="375"><br></div>


<h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><p>在Android所有常用的原生控件当中，用法最复杂的应该就是ListView了，它专门用于处理那种内容元素很多，手机屏幕无法展示出所有内容的情况。ListView可以使用列表的形式来展示内容，超出屏幕部分的内容只需要通过手指滑动就可以移动到屏幕内了。</p>
<p>我们先看看ListView的继承体系：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/3278692-0d4f5b5f237acbd6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ul>
<li><code>android:divider</code> 在列表条目之间显示的图片或者颜色(drawable或color)</li>
<li><code>android:dividerHeight</code> 用来指定divider的高度</li>
<li><code>android:scrollbars</code> 设置滚动条状态，不需要滚动条时，设置为none</li>
<li><code>android:listSelector</code> 设置条目选中后的颜色，可设置为#00000000或者@android:color/transparent 取消选中色</li>
<li><code>android:footerDividersEnabled</code> 当设置为false时，ListView将不会在各个footer之间绘制divider，默认为true</li>
<li><code>android:headerDividersEnabled</code> 当设为false时，ListView将不会在各个header之间绘制divider，默认为true</li>
</ul>
<p>其他继承父类的属性就不说了。</p>
<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul>
<li><code>void addFooterView(View v)</code> 添加一个固定在列表底部的View</li>
<li><code>boolean removeFooterView(View v)</code> 删除一个之前添加的FooterView，参数为欲删除的视图，返回是否删除成功</li>
<li><code>void addHeaderView(View v)</code> 添加一个固定在列表顶部的View</li>
<li><code>boolean removeHeaderView(View v)</code> 删除一个之前添加的HeaderView，参数为欲删除的视图，返回是否删除成功</li>
<li><code>void setAdapter(ListAdapter adapter)</code> 为ListView绑定Adapter</li>
<li><code>ListAdapter getAdapter()</code> 返回ListView正在使用的Adapter</li>
<li><code>void setEmptyView(View emptyView)</code> 当数据的个数为0的时候显示一个提示视图</li>
</ul>
<p>通过上面一个简单的例子我们可以看出，ListView如果想要显示数据，必须需要一个Adapter来适配。Android为什么这么设计呢？如果学习过iOS的同学都知道，我们在使用UITableView的时候，一定会实现它的数据源代理方法，在代理方法中我们会返回条目数和条目View。这种设计方法有效的分离了UITableView和数据源的直接打交道，让数据源的显示交于用户来选择。Android也是如此。</p>
<p>ListView只承担交互和展示工作，至于这些数据来源于哪里，ListView并不关心。于是就有了Adapter这样一个机制的出现。Adapter是适配器的意思，它在ListView和数据源之间起到了一个桥梁的作用，ListView会借助Adapter这个桥梁去访问真正的数据源，因为Adapter的接口都是统一的，因此我们可以通过实现接口来定制各种类型的Adapter。另外系统也为我们实现了一些常用的Adapter，比如我们上面用到的ArrayAdapter等。</p>
<h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><p>我们先来看看继承体系：</p>
<div align="center"><br><img src="http://img.blog.csdn.net/20150626100341626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGl0Z2FveGluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"><br></div>

<p>Adapter定义的抽象函数主要包括：</p>
<ul>
<li><code>void registerDataSetObserver(DataSetObserver observer)</code> 添加数据源变化的observer，如增加、删除等将会执行</li>
<li><code>void unregisterDataSetObserver(DataSetObserver observer)</code>  取消注册的observer</li>
<li><code>int getCount()</code> 显示有多少个数据项 即adapter有多少个条目</li>
<li><code>Object getItem(int position)</code> 返回数据集中position位置所对应的数据项</li>
<li><code>long getItemId(int position)</code> 返回position位置所对应的ID号，通常即为position</li>
<li><code>View getView(int position, View convertView, ViewGroup parent)</code> 核心函数，返回position数据项对应的条目View</li>
</ul>
<p>上个示例我们使用的ArrayAdapter，他只能用来显示TextView，如果我们想显示更多的不同种类的条目，我们需要继承<code>BaseAdapter</code>，并重写相关方法，我们现在来看看如何重写。</p>
<p>先上示例图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android10.png?raw=true"><br></div>


<p>我们新建一个Dog类，有<code>name</code>和<code>imageId</code>两个成员变量，分别表示狗的名字和图片资源（这里使用本地图片）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> imageId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> imageId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.imageId = imageId;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">getImageId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> imageId;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在新建一个DogAdapter继承于ArrayAdapter<dog>，因为我们这里的数据不复杂，直接继承ArrayAdapter，如果我们的数据是一个更复杂的嵌套很深的模型，我们可以直接继承BaseAdapter。</dog></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogAdapter</span> <span class="keyword">extends</span> <span class="title">ArrayAdapter</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> resourceId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DogAdapter</span><span class="params">(Context context, <span class="keyword">int</span> resourceId, List&lt;Dog&gt; dogList)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, resourceId, dogList);</div><div class="line">        <span class="comment">// 记录当前布局资源</span></div><div class="line">        <span class="keyword">this</span>.resourceId = resourceId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, @Nullable View convertView, @NonNull ViewGroup parent)</span> </span>&#123;</div><div class="line">        Dog dog = getItem(position);<span class="comment">//获取当前Dog实例</span></div><div class="line">        View view;</div><div class="line">        ViewHolder viewHolder;<span class="comment">//tag缓存</span></div><div class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>)&#123;</div><div class="line">            view = LayoutInflater.from(getContext()).inflate(resourceId,parent,<span class="keyword">false</span>);</div><div class="line">            viewHolder = <span class="keyword">new</span> ViewHolder();</div><div class="line">            viewHolder.mImageView = (ImageView) view.findViewById(R.id.dogImage);</div><div class="line">            viewHolder.mTextView = (TextView) view.findViewById(R.id.dogName);</div><div class="line">            view.setTag(viewHolder);<span class="comment">//设置tag绑定</span></div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            view = convertView;</div><div class="line">            viewHolder = (ViewHolder) view.getTag();</div><div class="line">        &#125;</div><div class="line">        ImageView imageView = viewHolder.mImageView;</div><div class="line">        TextView textView = viewHolder.mTextView;</div><div class="line">        imageView.setImageResource(dog.getImageId());</div><div class="line">        textView.setText(dog.getName());</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        ImageView mImageView;</div><div class="line">        TextView mTextView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：我们都知道ListView的强大，它强大就强大在无论我们设置多少条数据源，ListView都不会完全的把这些条目都创建，而是通过复用已经消失在屏幕的条目来展示新的条目。<br>在<code>getView</code>函数中，有个<code>convertView</code>参数，如果它不为空，就表示ListView的缓存池中有可复用的条目，我们直接取来用就行。而且我们还创建了一个内部类<code>ViewHolder</code>，声明了两个属性<code>mImageView</code>和<code>mTextView</code>，我们可以给View设置tag，方便下次给View赋值的时候，不需要再次调用<code>findViewById</code>方法来重新查找属性。</p>
<p>再来看我们如何使用DogAdapter:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ListView mListView;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Dog&gt; mDogArrayList;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">//初始化数据源</span></div><div class="line">        initDogArrayList();</div><div class="line">        mListView = (ListView) findViewById(R.id.listView);</div><div class="line">        DogAdapter dogAdapter = <span class="keyword">new</span> DogAdapter(<span class="keyword">this</span>,R.layout.dog_item,mDogArrayList);</div><div class="line">        mListView.setAdapter(dogAdapter);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="comment">//模拟数据 </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDogArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">        mDogArrayList = <span class="keyword">new</span> ArrayList&lt;Dog&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">30</span>; i++)&#123;</div><div class="line">            Dog dog = <span class="keyword">new</span> Dog(<span class="string">"小狗"</span>+i,R.drawable.dog);</div><div class="line">            mDogArrayList.add(dog);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><h5 id="触摸监听-OnTouchListener"><a href="#触摸监听-OnTouchListener" class="headerlink" title="触摸监听 OnTouchListener"></a>触摸监听 OnTouchListener</h5><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line">mListView.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (event.getAction())&#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                <span class="comment">//触摸时操作</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                <span class="comment">//移动是操作</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                <span class="comment">//手指离开时操作</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="滑动监听-OnScrollListener"><a href="#滑动监听-OnScrollListener" class="headerlink" title="滑动监听 OnScrollListener"></a>滑动监听 OnScrollListener</h5><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//滑动监听</span></div><div class="line">mListView.setOnScrollListener(<span class="keyword">new</span> AbsListView.OnScrollListener() &#123;</div><div class="line">    <span class="comment">//滚动状态发生改变</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span> </span>&#123;</div><div class="line">       <span class="keyword">switch</span> (scrollState)&#123;</div><div class="line">           <span class="keyword">case</span> SCROLL_STATE_IDLE:</div><div class="line">               <span class="comment">//停止滑动</span></div><div class="line">               Log.d(<span class="string">"gg"</span>,<span class="string">"停止滑动了"</span>);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> SCROLL_STATE_TOUCH_SCROLL:</div><div class="line">               <span class="comment">//正在滚动</span></div><div class="line">               Log.d(<span class="string">"gg"</span>,<span class="string">"正在滑动了"</span>);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> SCROLL_STATE_FLING:</div><div class="line">               <span class="comment">//手指快速滑动，手指离开屏幕后由于惯性继续滑动</span></div><div class="line">               Log.d(<span class="string">"gg"</span>,<span class="string">"惯性滑动了"</span>);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">default</span>:</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//滚动时一直调用</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScroll</span><span class="params">(AbsListView view, <span class="keyword">int</span> firstVisibleItem, <span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"gg"</span>,<span class="string">"混动了"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="条目点击-OnItemClickListener"><a href="#条目点击-OnItemClickListener" class="headerlink" title="条目点击 OnItemClickListener"></a>条目点击 OnItemClickListener</h5><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line">mListView.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"gg"</span>,<span class="string">"点击了第"</span>+position+<span class="string">"条目"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="仿微信聊天界面"><a href="#仿微信聊天界面" class="headerlink" title="仿微信聊天界面"></a>仿微信聊天界面</h3><p>说了这么多，再来做一个例子，仿一下微信的聊天界面。</p>
<p>先看布局，这里依旧使用约束布局：</p>
<h5 id="ListView布局"><a href="#ListView布局" class="headerlink" title="ListView布局"></a>ListView布局</h5><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.listviewdemo2.WXChatActivity"</span>&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/wx_listView"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toTopOf</span>=<span class="string">"@+id/wx_send"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/wx_send"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"44dp"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"发送"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/wx_editText"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"44dp"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.501"</span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toLeftOf</span>=<span class="string">"@+id/wx_send"</span></div><div class="line">        <span class="attr">android:hint</span>=<span class="string">"说些什么吧"</span></div><div class="line">        <span class="attr">android:maxLines</span>=<span class="string">"1"</span>/&gt;</div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="item布局"><a href="#item布局" class="headerlink" title="item布局"></a>item布局</h5><p>这里我们把两种布局都定义在一个xml文件中，稍后会根据代码来决定隐藏哪种类型。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:padding</span>=<span class="string">"10dp"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--好友的信息--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/wx_item_left"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"60dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/left_item_image"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"你打我试试"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@drawable/message_left"</span></div><div class="line">            <span class="attr">android:layout_marginLeft</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"left|center"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/wx_item_left_textView"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--我的消息--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/wx_item_right"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"60dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/right_item_imgae"</span></div><div class="line">            <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/wx_item_right_image"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/wx_item_right_textView"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"打你就打你"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@drawable/message_right"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center|left"</span></div><div class="line">            <span class="attr">android:paddingLeft</span>=<span class="string">"8dp"</span></div><div class="line">            <span class="attr">android:paddingRight</span>=<span class="string">"25dp"</span></div><div class="line">            <span class="attr">android:layout_toLeftOf</span>=<span class="string">"@+id/wx_item_right_image"</span></div><div class="line">            /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="消息实体-MSG类"><a href="#消息实体-MSG类" class="headerlink" title="消息实体 MSG类"></a>消息实体 MSG类</h5><p>我们再创建一个消息实体，来存储消息信息。这里我们定义了两种消息类型，<code>TYPE_RECEIVED</code>表示接收的消息，<code>TYPE_SENT</code>表示发送的消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WXMsg</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_RECEIVED = <span class="number">0</span>; <span class="comment">//接收类型</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_SENT = <span class="number">1</span>; <span class="comment">//发送类型</span></div><div class="line">    <span class="keyword">private</span> String content;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WXMsg</span><span class="params">(String content, <span class="keyword">int</span> type)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.content = content;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> content;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="消息适配器-WXMsgAdapter"><a href="#消息适配器-WXMsgAdapter" class="headerlink" title="消息适配器 WXMsgAdapter"></a>消息适配器 WXMsgAdapter</h5><p>重点来了，我们会根据消息的类型来决定显示哪种布局方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WXAdapter</span> <span class="keyword">extends</span> <span class="title">ArrayAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> resourceId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WXAdapter</span><span class="params">(Context context, <span class="keyword">int</span> resourceId, List&lt;WXMsg&gt; msgArrayList)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, resourceId, msgArrayList);</div><div class="line">        <span class="keyword">this</span>.resourceId = resourceId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, @Nullable View convertView, @NonNull ViewGroup parent)</span> </span>&#123;</div><div class="line">        View view;</div><div class="line">        WXViewHolder wxViewHolder;</div><div class="line">        WXMsg msg = (WXMsg) getItem(position);</div><div class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>)&#123;</div><div class="line">            view = LayoutInflater.from(getContext()).inflate(resourceId,<span class="keyword">null</span>);</div><div class="line">            wxViewHolder = <span class="keyword">new</span> WXViewHolder(view);</div><div class="line">            view.setTag(wxViewHolder);</div><div class="line">        &#125;<span class="keyword">else</span>  &#123;</div><div class="line">            view = convertView;</div><div class="line">            wxViewHolder = (WXViewHolder) view.getTag();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (msg.getType() == WXMsg.TYPE_RECEIVED) &#123;</div><div class="line">            <span class="comment">//如果是收到的消息  显示左边的消息布局，隐藏右边的消息布局</span></div><div class="line">            wxViewHolder.rightLinearLayout.setVisibility(View.GONE);</div><div class="line">            wxViewHolder.leftLinearLayout.setVisibility(View.VISIBLE);</div><div class="line">            wxViewHolder.leftMsg.setText(msg.getContent());</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (msg.getType() == WXMsg.TYPE_SENT) &#123;</div><div class="line">            <span class="comment">//如果是发送的消息  显示右边的消息布局，隐藏左边的消息布局</span></div><div class="line">            wxViewHolder.rightLinearLayout.setVisibility(View.VISIBLE);</div><div class="line">            wxViewHolder.leftLinearLayout.setVisibility(View.GONE);</div><div class="line">            wxViewHolder.rightMsg.setText(msg.getContent());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WXViewHolder</span> </span>&#123;</div><div class="line">        LinearLayout leftLinearLayout;</div><div class="line">        RelativeLayout rightLinearLayout;</div><div class="line">        TextView leftMsg;</div><div class="line">        TextView rightMsg;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WXViewHolder</span><span class="params">(View view)</span></span>&#123;</div><div class="line">            leftLinearLayout = (LinearLayout) view.findViewById(R.id.wx_item_left);</div><div class="line">            rightLinearLayout = (RelativeLayout) view.findViewById(R.id.wx_item_right);</div><div class="line">            leftMsg = (TextView) view.findViewById(R.id.wx_item_left_textView);</div><div class="line">            rightMsg = (TextView) view.findViewById(R.id.wx_item_right_textView);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在WXChatActivity中这样用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WXChatActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ListView mListView;</div><div class="line">    <span class="keyword">private</span> Button mSendButton;</div><div class="line">    <span class="keyword">private</span> EditText mEditText;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;WXMsg&gt; mWXMsgArrayList;</div><div class="line">    <span class="keyword">private</span> WXAdapter mWXAdapter;</div><div class="line">    </div><div class="line">    <span class="comment">//模拟一个回复消息池</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span>  String[] allmsgArray = &#123;<span class="string">"你信不信我打你！"</span>,<span class="string">"现在的年轻人一言不合就斗图~"</span>,<span class="string">"看过一千多部岛国成人片，从人到动物，大妈到熟妇，御姐到萝莉，会一千多种姿势，上百种插法，告诉你，不要惹我，不然你怎么怀孕的都不知道"</span></div><div class="line">                                            ,<span class="string">"你放学别走！"</span>,<span class="string">"不服是不是 不服来打我啊!"</span>&#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_wxchat);</div><div class="line"></div><div class="line">        mListView = (ListView) findViewById(R.id.wx_listView);</div><div class="line">        mSendButton = (Button) findViewById(R.id.wx_send);</div><div class="line">        mEditText = (EditText) findViewById(R.id.wx_editText);</div><div class="line"></div><div class="line">        mWXMsgArrayList = <span class="keyword">new</span> ArrayList&lt;WXMsg&gt;();</div><div class="line">        <span class="comment">//先随机添加一条接收的消息</span></div><div class="line">        addReceivedMsg();</div><div class="line">        mWXAdapter = <span class="keyword">new</span> WXAdapter(<span class="keyword">this</span>,R.layout.wx_item,mWXMsgArrayList);</div><div class="line">        mListView.setAdapter(mWXAdapter);</div><div class="line"></div><div class="line">        <span class="comment">//监听按钮点击</span></div><div class="line">        mSendButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                String content = mEditText.getText().toString();</div><div class="line">                <span class="keyword">if</span> (!<span class="string">""</span>.equals(content))&#123;</div><div class="line">                    <span class="comment">//添加发送信息</span></div><div class="line">                    WXMsg msg = <span class="keyword">new</span> WXMsg(content,WXMsg.TYPE_SENT);</div><div class="line">                    mWXMsgArrayList.add(msg);</div><div class="line">                    <span class="comment">//添加接收信息</span></div><div class="line">                    addReceivedMsg();</div><div class="line">                    <span class="comment">//有消息更新 刷新界面</span></div><div class="line">                    mWXAdapter.notifyDataSetChanged();</div><div class="line">                    <span class="comment">//ListView滚动到最后一行</span></div><div class="line">                    mListView.smoothScrollToPosition(mWXMsgArrayList.size()-<span class="number">1</span>);</div><div class="line">                    <span class="comment">//清空输入框</span></div><div class="line">                    mEditText.setText(<span class="string">""</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//随机添加接收消息</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addReceivedMsg</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> index = <span class="keyword">new</span> Random().nextInt(allmsgArray.length);</div><div class="line">        String content = allmsgArray[index];</div><div class="line">        WXMsg msg = <span class="keyword">new</span> WXMsg(content,WXMsg.TYPE_RECEIVED);</div><div class="line">        mWXMsgArrayList.add(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android11.png?raw=true"><br></div>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>写完微信的小例子，心里的成就感还是很强的，ListView的强大还远不止如此，因为我知道iOS的UITableView的重要性，相信在以后的开发中我会经常和ListView打交道的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说起&lt;code&gt;ListView&lt;/code&gt;，就不得不说iOS的&lt;code&gt;UITableView&lt;/code&gt;，毫不夸张的说的，放在3年前，如果你去面试的时候，你说你会用&lt;code&gt;UITableView&lt;/code&gt;，知道&lt;code&gt;UITableView&lt;/code&gt;的代理方法，不用说了，你可以直接来上班了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ListView&lt;/code&gt;在Android中开发的重要性不言而喻，学好&lt;code&gt;ListView&lt;/code&gt;，我想在以后的列表开发中就不用发愁了。什么是列表开发？这么说吧，在你使用的APP中，80%的都会用到列表开发，比如微信的聊天页，QQ的个人空间页。为何要用列表开发，列表开发的优越在哪里？我今天来一探究竟。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之布局</title>
    <link href="http://www.guiyongdong.com/2017/03/18/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8B%E5%B8%83%E5%B1%80/"/>
    <id>http://www.guiyongdong.com/2017/03/18/一天一Android之布局/</id>
    <published>2017-03-18T07:40:40.000Z</published>
    <updated>2017-03-20T10:36:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天主要说说布局。我在看Android的任何内容的时候，心中总要和iOS进行一番比较，就说布局吧，在iOS中，我们一般直接使用<code>frame</code>计算、AutoLayout约束布局。在Android的世界中，一般使用xml布局文件来进行布局，用到的布局方式有四种：线性布局、相对布局、帧布局、百分比布局。还有一种是直接使用图形化添加约束：ConstraintLayout。为何Android的布局方式如此的多，主要是因为Android屏幕的碎片化，不像苹果就那几款手机。</p>
<a id="more"></a>
<h3 id="线性布局-LinearLayout"><a href="#线性布局-LinearLayout" class="headerlink" title="线性布局-LinearLayout"></a>线性布局-LinearLayout</h3><p>LinearLayout又称作线性布局，正如它的名字所描述的一样，这个布局会将它所包含的控件在线性方向上依次排列。线性布局的两种排法:</p>
<ul>
<li><p>从左到右 <code>android:orientation=&quot;horizontal&quot;</code></p>
</li>
<li><p>从上到下 <code>android:orientation=&quot;vertical&quot;</code></p>
</li>
</ul>
<p>默认的布局方向为：horizontal，这里需要注意，如果LinearLayout的排列方向是<code>horizontal</code>，内部的控件就绝不能将宽度指定为<code>match_parent</code>，因为这个控件会把整个水平方向占满。同理，如果排列方向为<code>vertical</code>，就不能将控件的高度设置为<code>match_parent</code>。</p>
<p><strong>layout_gravity</strong></p>
<p><code>layout_gravity</code>用于指定控件在布局中的对齐方式，当LinearLayout的排列方向是<code>vertical</code>时，只有水平方向上(center_horizontal)的对其方式才会生效，同理，当LinearLayout的排列方向是<code>horizontal</code>时，只有垂直方向上(center_vertical)的对其方式才会生效。</p>
<p><strong>layout_weight</strong></p>
<p>layout_weight这个属性允许我们使用比例的方式来指定控件的大小，例如如下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"hahahaha"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"heihei"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>/&gt;</div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>实现的效果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android6.png?raw=true" width="375"><br></div>

<p>我们看到两个按钮平分了屏幕的水平空间，当然在开发的过程中，我们可以灵活的使用此属性。</p>
<h3 id="相对布局-RelativeLayout"><a href="#相对布局-RelativeLayout" class="headerlink" title="相对布局-RelativeLayout"></a>相对布局-RelativeLayout</h3><p>RelativeLayout又称为相对布局，也是一种常用的布局，能通过相对定位的方式让控件出现在布局的任何位置，所以相对布局的属性非常的多，我们看看：</p>
<ul>
<li><p>属性值是true或false</p>
<ul>
<li><code>android:layout_centerHrizontal</code> 水平居中</li>
<li><code>android:layout_centerVertical</code> 垂直居中</li>
<li><code>android:layout_centerInparent</code> 相对于父元素完全居中</li>
<li><code>android:layout_alignParentBottom</code> 位于父元素的下边缘</li>
<li><code>android:layout_alignParentTop</code> 位于父元素的上边缘</li>
<li><code>android:layout_alignParentLeft</code> 位于父元素的左边缘</li>
<li><code>android:layout_alignParentRight</code> 位于父元素的右边缘</li>
</ul>
</li>
<li><p>属性值是<code>@id/*</code></p>
<ul>
<li><code>android:layout_below</code> 在某元素的下方</li>
<li><code>android:layout_above</code> 在某元素的上方</li>
<li><code>andorid:layout_toRightOf</code> 在某元素的右方</li>
<li><code>android:layout_toLeftOf</code> 在某元素的左方</li>
<li><code>android:layout_alignBottom</code> 和某元素下方对齐</li>
<li><code>android:layout_alignTop</code> 和某元素上方对齐</li>
<li><code>android:layout_alignRight</code> 和某元素右方对齐</li>
<li><code>android:layout_alignLeft</code> 和某元素左方对齐</li>
</ul>
</li>
<li><p>属性值是数值</p>
<ul>
<li><code>android:layout_marginLeft</code> 离某元素左边缘的距离</li>
<li><code>android:layout_marginRight</code> 离某元素右边缘的距离</li>
<li><code>android:layout_marginTop</code> 离某元素上边缘的距离</li>
<li><code>android:layout_marginBottom</code> 离某元素下边缘的距离</li>
</ul>
</li>
</ul>
<p>我写了一个简单的小例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"1"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"2"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"3"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button3"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"4"</span></div><div class="line">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"5"</span></div><div class="line">        <span class="attr">android:layout_below</span>=<span class="string">"@id/button3"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"6"</span></div><div class="line">        <span class="attr">android:layout_alignBottom</span>=<span class="string">"@id/button3"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"7"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"150dp"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"8"</span></div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_toRightOf</span>=<span class="string">"@id/button3"</span>/&gt;</div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行实例如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android7.png?raw=true" width="375"><br></div>

<p><strong>注意：</strong></p>
<ul>
<li>如果没有定义左右，那么默认在左边，如果没有定义上下，默认在上边。</li>
<li>相同位置，新定义的元素会覆盖旧的元素。例：1被2覆盖了。</li>
<li>4只定义了在父元素的下部，左右没定义，于是默认就在左边了。</li>
<li><code>android:layout_below</code>，在某元素的下部并不意味着就一定是紧随某元素，只是在下部默位置。例如：5是在3的下部，但是是在下部的默认左边。</li>
<li>6为下边缘对其3，7位marginLeft=150dp。</li>
<li>8为多个属性共同定义的结果。首先是在3的右部，然后是垂直居中，然后marginLeft=100dp得到最后位置。</li>
</ul>
<h3 id="帧布局-FrameLayout"><a href="#帧布局-FrameLayout" class="headerlink" title="帧布局-FrameLayout"></a>帧布局-FrameLayout</h3><p>FrameLayout称为帧布局，它相较于前面两种布局就简单多了，这种布局没有方便的定位方式，所有的控件都会默认摆放在布局的左上角。我们可以使用<code>layout_gravity</code>属性来指定控件在布局中的对齐方式，和LinearLayout中的用法是相似的，由于这种布局用到的很少，这里就不说了。</p>
<h3 id="百分比布局"><a href="#百分比布局" class="headerlink" title="百分比布局"></a>百分比布局</h3><p>通过学习上面的三种布局，我们会发现，只有LinearLayout支持使用<code>layout_weight</code>属性来实现按比例指定控大小的功能，其他两种布局都不支持。为此，Android引入了一种全新的布局方式——百分比布局。</p>
<p>由于LinearLayout本身已经支持按比例指定控件的大小了，因此百分比布局只为FrameLayout和RelativeLayout进行了功能的扩展，提供了<strong>PercentFrameLayout</strong>和<strong>PercentRelativeLayout</strong>。</p>
<p>不同于上面的三种布局，Android团队将百分比布局定义在了support库中，我们需要在build.gradle中添加百分比布局库的依赖。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'com.android.support:percent:25.0.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在导入百分比布局的时候，我们需要把完整的包名路径写出来，然后还必须定义一个app的命名空间，这样才能使用百分比布局的自定义属性。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.percent.PercentFrameLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.layoutdemo.SecondActivity"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"button1"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"left|right"</span></div><div class="line">        <span class="attr">app:layout_widthPercent</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">app:layout_heightPercent</span>=<span class="string">"50%"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"button2"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"right|top"</span></div><div class="line">        <span class="attr">app:layout_widthPercent</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">app:layout_heightPercent</span>=<span class="string">"50%"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"button3"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"left|bottom"</span></div><div class="line">        <span class="attr">app:layout_widthPercent</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">app:layout_heightPercent</span>=<span class="string">"50%"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"button4"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"right|bottom"</span></div><div class="line">        <span class="attr">app:layout_widthPercent</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">app:layout_heightPercent</span>=<span class="string">"50%"</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.percent.PercentFrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意，我在写这段代码的时候，IDE不会自动提示~</p>
<p>效果图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android8.png?raw=true" width="375"><br></div>



<hr>
<h3 id="约束布局-ConstraintLayout"><a href="#约束布局-ConstraintLayout" class="headerlink" title="约束布局-ConstraintLayout"></a>约束布局-ConstraintLayout</h3><p>看到这个布局我就想到了iOS的AutoLayout，他的用法和iOS的xib添加约束一样，用着也是很方便的。</p>
<p>ConstraintLayout是Android Studio2.2新添加的功能，虽然传统布局也可以使用可视化界面拖动空间布局，但是因为不够灵活，我们还是会选择xml代码来布局。而ConstraintLayout的出现将我们带入可视化布局编程的新纪元，通过建立空间之间的约束，实现布局的构建。这样做有一个很大的优点，就是减少了布局的嵌套，减少了布局渲染的层数，降低了CPU的消耗，提高了程序的性能。总之就是优点很多。</p>
<h5 id="建立依赖"><a href="#建立依赖" class="headerlink" title="建立依赖"></a>建立依赖</h5><p>在使用ConstraintLayout布局之前，我们需要在build.gradle添加依赖，但是，通常情况下不需要我们手动添加，IDE已经为我们自动添加好了。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'com.android.support.constraint:constraint-layout:1.0.0-beta4'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="切换视图"><a href="#切换视图" class="headerlink" title="切换视图"></a>切换视图</h5><p>点击菜单栏的中的<code>Show Design</code>、<code>Show Blueprint</code>和<code>Show Design + Blueprint</code>按钮可以对操作视图进行切换，如下图所示：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-bef33c37ccb1d63f.gif?imageMogr2/auto-orient/strip" width="375"><br></div>


<h5 id="添加约束"><a href="#添加约束" class="headerlink" title="添加约束"></a>添加约束</h5><p>我们创建一个按钮，并为它添加约束：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-de183f8df27f879d.gif?imageMogr2/auto-orient/strip" width="375"><br></div>

<p>可以看到，按钮控件有四个方向的约束，如下图所示，按钮的上、下、左、右边上各有一个小圆圈，鼠标可拖动小圆圈到<code>ConstraintLayout</code>，与其添加约束。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-85ab8f622faca3a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<p>如将按钮下边圆圈拖至<code>ConstraintLayout</code>底部，则按钮移动至底部；再将按钮上边圆圈拖动至<code>ConstraintLayout</code>顶部，垂直方向上有两个约束的按钮控件就会实现垂直居中。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-4de51c14488859f3.gif?imageMogr2/auto-orient/strip"><br></div>

<h5 id="约束位置比例调整"><a href="#约束位置比例调整" class="headerlink" title="约束位置比例调整"></a>约束位置比例调整</h5><p>当然如果<code>ConstraintLayout</code>添加约束仅仅能实现水平、垂直居中，那么它在功能上与RelativeLayout就没有差别了。除了居中，约束还可以设置控件两边到边界之间的距离比例，通过在右侧属性面板中，拖动水平和垂直方向的进度条来调整两边距离的比例。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-5d4d3177e87d6c22.gif?imageMogr2/auto-orient/strip" width="375"><br></div>

<h5 id="控件之间添加约束"><a href="#控件之间添加约束" class="headerlink" title="控件之间添加约束"></a>控件之间添加约束</h5><p>除了与<code>ConstraintLayout</code>添加约束，控件与控件之间同样可以添加约束。如下图所示，在调整按钮宽度后，将两个按钮的左右两边添加约束，然后将下方按钮的上边与上方按钮的下边添加约束，拖动下方的按钮，可设置两个按钮之间的外边距。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-e814c547622d896e.gif?imageMogr2/auto-orient/strip" width="375"><br></div>

<p>通过控件之间添加约束和调整约束距离比例，开发者可实现较为复杂的约束。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-506a4d7ea3a560b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>


<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-02e85c6fcedd4a17.gif?imageMogr2/auto-orient/strip" width="375"><br></div>


<h5 id="调整控件外边距及尺寸"><a href="#调整控件外边距及尺寸" class="headerlink" title="调整控件外边距及尺寸"></a>调整控件外边距及尺寸</h5><p>你可能会发现，在调整控件位置的比例的时候，当进度条滑动至100时，控件未能完全贴上布局的右边界，这是因为控件存在外边距。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-6b0c81f425c3360f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600"><br></div>

<p>这时候可以修改属性面板中的数值来调整控件的外边距大小，如下图所示：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-c32ddd5ce43f0ed1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<p>在控件尺寸调整上，ConstraintLayout提供了三种模式，在属性面板中点击下图红色框框区域实现模式的切换。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-e1c6a34a875c7d14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<p>这三种分别为：</p>
<ul>
<li><strong>wrap content</strong></li>
</ul>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-b3b5528ebb36940b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<p>wrap content模式就是平时常用的根据内容来设定控件尺寸。</p>
<ul>
<li><strong>固定值</strong></li>
</ul>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-4314b554f154e21b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<p>固定值模式也是平时常用的，通过设定具体数值来确定控件的大小。如下图所示，切换为固定模式后，在下方的layout_width一栏填写具体的宽度数值。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-cac0c176f4f4f49f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<ul>
<li><strong>any size</strong></li>
</ul>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-94472c2f856e43c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<p>any size与match parent类似，都是充满整个范围，但是不同点在于match parent充满相对于父容器，而any size是相对于约束条件，即在约束条件下，能填充的范围全部充满，如下图所示：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-38cc760addcdd58b.gif?imageMogr2/auto-orient/strip"><br></div>

<p>这里说明一下，ConstraintLayout其实也有match parent模式，但是因为ConstraintLayout不存在多层嵌套关系，所以match parent这种相对于父容器的模式在ConstraintLayout中很少会使用。</p>
<h5 id="删除约束"><a href="#删除约束" class="headerlink" title="删除约束"></a>删除约束</h5><p>删除约束有三种方式：</p>
<ul>
<li><strong>删除单个约束</strong></li>
</ul>
<p>将鼠标移动到要删除的约束对应的小圆圈，待小圆圈出现闪烁的红色圈圈时，点击小圆圈即可删除约束。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-fdd60ed653b1dbaa.gif?imageMogr2/auto-orient/strip"><br></div>

<p>除了上面这种删除方法，也可以在属性面板中，将鼠标移动到下图红色框框标记的位置，待出现叉叉图标，点击可删除该约束。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-d604aedaef646425.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>


<ul>
<li><strong>删除单个控件的所有约束</strong></li>
</ul>
<p>用鼠标点击控件，在其左下方会出现一个小叉叉图标，点击小图标即可删除当前控件的所有约束。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-914f40e162960b10.gif?imageMogr2/auto-orient/strip"><br></div>

<ul>
<li><strong>删除当前界面的所有约束</strong></li>
</ul>
<p>点击工具栏中<code>删除所有约束</code>图标的按钮，即可删除当前界面所有的约束。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-99411797db6acd15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>


<h5 id="Guidelines"><a href="#Guidelines" class="headerlink" title="Guidelines"></a>Guidelines</h5><p>学完基本的依赖操作，来看一下ConstraintLayout的进阶用法。这里有一个需求，要求将两个控件合在一起，实现水平居中。如果不使用ConstraintLayout，我们或许会想到用RelativeLayout嵌套LinearLayout来实现。那么在ConstraintLayout这样不存在多布局嵌套的情况下该怎么实现呢？</p>
<p>这时候就提出了Guidelines，GuideLines就如同Photoshop中参考线的概念一样。如下图，创建一个垂直方向的参考线，将其切换至百分比模式，拖动到50%的位置，再将两个控件在左右两侧分别与Guidelines添加约束，然后两个控件的底边相互添加约束即可实现合并居中的效果。此时ConstraintLayout展现了其强大的优势，通过其特性优雅地完成需求。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-a6737f34ac5ad74d.gif?imageMogr2/auto-orient/strip"><br></div>

<p>我们不仅可以创建垂直方向的引导线，还可以创建水平方向上的引导线。</p>
<h5 id="Autoconnect"><a href="#Autoconnect" class="headerlink" title="Autoconnect"></a>Autoconnect</h5><p>或许因为我们是第一次接触ConstraintLayout，所以感觉添加约束的操作很有趣，但是在项目中，当控件数量比较多时，每个控件的每条边都要一个一个添加约束，这样就会拖慢开发效率，所以ConstraintLayout提出了Autoconnect的用法。</p>
<p>如下图所示，单击打开工具栏中Autoconnect功能按钮，将控件拖至屏幕中心，然后约束就会自动添加了。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-1ced9132a90a8aa3.gif?imageMogr2/auto-orient/strip"><br></div>


<p>Autoconnect会根据我们的意图来判断是否添加相应的约束，当然自动添加的约束不一定全是想要的效果，这时候可以关闭Autoconnect，然后手动修改约束。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-f73b47f9987ff980.gif?imageMogr2/auto-orient/strip"><br></div>


<h5 id="Inference"><a href="#Inference" class="headerlink" title="Inference"></a>Inference</h5><p>Inference与Autoconnect功能相同，都是用于自动添加约束的，但是Inference更加强大。Inference是手动添加约束后，对当前界面所有控件的位置关系添加整体约束关系，感觉和Photoshop里面不同布局中的图像调整好位置后合并可见图层很像。Inference操作如下图所示：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-72db88ec184210fa.gif?imageMogr2/auto-orient/strip"><br></div>



<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Android的布局差不多就这么多，学会这些布局，我想足够能让我在以后的开发中顺利的进行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天主要说说布局。我在看Android的任何内容的时候，心中总要和iOS进行一番比较，就说布局吧，在iOS中，我们一般直接使用&lt;code&gt;frame&lt;/code&gt;计算、AutoLayout约束布局。在Android的世界中，一般使用xml布局文件来进行布局，用到的布局方式有四种：线性布局、相对布局、帧布局、百分比布局。还有一种是直接使用图形化添加约束：ConstraintLayout。为何Android的布局方式如此的多，主要是因为Android屏幕的碎片化，不像苹果就那几款手机。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之Activity</title>
    <link href="http://www.guiyongdong.com/2017/03/17/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BActivity/"/>
    <id>http://www.guiyongdong.com/2017/03/17/一天一Android之Activity/</id>
    <published>2017-03-17T09:30:01.000Z</published>
    <updated>2017-03-18T07:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天来说一说Android四大组件之一的<code>Activity</code>，类似于iOS的<code>UIViewController</code>。当我们新建一个Android项目时，Android Studio默认会为我们创建一个主活动:<code>MainActivity</code>和一个默认的主布局:<code>activity_main.xml</code>。一个活动想要显示在屏幕上，就必须在<code>AndroidManifest.xml</code>中注册。但是这些工作都有IDE帮我们自动完成了。我们来看<code>AndroidManifest.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.activitydemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!--MainActivity--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Activity声明"><a href="#Activity声明" class="headerlink" title="Activity声明"></a>Activity声明</h3><p>我们首先声明了程序的包名<code>package=&quot;com.guiyongdong.listviewdemo&quot;</code>。</p>
<h5 id="lt-application-gt"><a href="#lt-application-gt" class="headerlink" title="&lt;application&gt;"></a><code>&lt;application&gt;</code></h5><p>接下来我们又声明了<code>&lt;application&gt;</code>标签，这个标签标示当前程序的配置，例如我们配置了icon（程序的图标）、label（程序的名称）等。</p>
<h5 id="lt-activity-gt"><a href="#lt-activity-gt" class="headerlink" title="&lt;activity&gt;"></a><code>&lt;activity&gt;</code></h5><p>然后我们又在<code>&lt;application&gt;</code>标签内添加了一个<code>&lt;activity&gt;</code>标签，这个标签就是声明一个活动（Avtivity）。记住，所有的活动都必须声明在<code>&lt;application&gt;</code>标签内。<code>name</code>属性表示声明的是哪个Activity，因为我们之前已经声明过了当前的包名， 所有以后声明的Activity只要在这个包中，我们只需要声明<code>.MainActivity</code>就可以了。其实它的全称还是<code>com.guiyongdong.listviewdemo. MainActivity</code>。 我们又看到在<code>&lt;activity&gt;</code>标签内，我们有声明了一个标签<code>&lt;intent-filter&gt;</code>，来看看它们是什么。</p>
<h5 id="lt-intent-filter-gt"><a href="#lt-intent-filter-gt" class="headerlink" title="&lt;intent-filter&gt;"></a><code>&lt;intent-filter&gt;</code></h5><p><code>&lt;intent-filter&gt;</code>这个标签表示intent过滤器，至于intent是什么，我们待会再说。先来看看它声明了什么类型的过滤器。<br>在<code>&lt;intent-filter&gt;</code>标签内，我们可以声明三种标签，分别是:<code>&lt;action&gt;</code>、<code>&lt;category&gt;</code>和<code>&lt;data&gt;</code>，这三个标签都是可以作为活动的过滤器。这里我们声明了一个<code>&lt;action&gt;</code>：<code>android.intent.action.MAIN</code>和一个<code>&lt;category&gt;</code>：<code>android.intent.category.LAUNCHER</code>，这两个值都是Android SDK提供给我们的，它表示当前活动为主活动，另一个表示当前活动为启动活动，注意着两种类型的过滤器必须放在一起，不让运行不起来~。当然，我们也可以自定义其他过滤器的值，这个在我们说到隐式Intent时会自定义。</p>
<h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>Intent是Android程序中各组件之间进行交互的一种重要方式，它不仅可以指明当前组件想要执行的动作，还可以在不同组件之间传递数据。Intent一般可被用于启动活动，启动服务以及发送广播等场景，当前我们主要讲解Activity,所以我们主要看Intent在活动中的应用。</p>
<p>Intent大致可以分为两种：<strong>显式Intent</strong>和<strong>隐式Intent</strong>。</p>
<p>上面我们说到了，如果一个Activity想要作为程序启动时的主Activity，必须声明声明<code>&lt;intent-filter&gt;</code>标签，而且必须在此标签下声明两个值为固定值的<code>&lt;action&gt;</code>和<code>&lt;category&gt;</code>。一般情况下我们的程序不可能只有一个活动，如果我们想要再开启一个活动时，该怎么办呢？</p>
<h5 id="显式Intent"><a href="#显式Intent" class="headerlink" title="显式Intent"></a>显式Intent</h5><p>开启另一个Activity的最简单的方式就是使用显式Intent，我本人没有开发过Android，也不知道这种方式在项目中的使用率，但我感觉它的使用率应该不低，因为它太简单了。</p>
<p>例如我又新建了一个Avtivity(SecondActivity)，系统默认为我们在<code>AndroidManifest.xml</code>中注册，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.activitydemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!--MainActivity--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!--SecondActivity--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然，这时候我可以在<code>SecondActivity</code>的标签下声明任何的filter标签，不过现在我不需要声明，因为我现在使用的是显式Intent。我们在<code>MainActivity</code>的布局文件中添加一个按钮，并且添加按钮的点击事件，事件是去打开<code>SecondActivity</code>活动，至于如何布局，以后再说。 代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        Button button = (Button) findViewById(R.id.button);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            		<span class="comment">//显式启动SecondActivity</span></div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,SecondActivity.class);</div><div class="line">                startActivity(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至于为何这么写，刚开始我也不明白，好在我有一点java基础，这里奉劝想学习Android的同学，必须打好java基础。</p>
<p>大家可以看到，我在Intent的构造函数中传了两个值，一个是<code>MainActivity.this</code>，一个是<code>SecondActivity.class</code>，它的构造函数为:<code>Intent(Context context, Class&lt;?&gt; cls)</code>，第一个参数是表示启动活动的上下文，第二个参数Class表示指定想要启动的目标活动，通过这个构造函数，我们就能构建出Intent的<code>意图</code>（就是我要去干什么）。然后我们调用<code>startActivity</code>方法，把这个明显的意图传递过去就行了。</p>
<h5 id="隐式Intent"><a href="#隐式Intent" class="headerlink" title="隐式Intent"></a>隐式Intent</h5><p>相比于显式Intent，隐式Intent则含蓄很多了，它并不明确指出我们想要启动哪一个活动，而是指定了一系列更为抽象的<code>action</code>和<code>category</code>等信息，让系统去分析这个Intent，并找出合适的活动去启动。</p>
<p>什么叫合适的活动？我们来想一个问题，系统为什么会启动<code>MainActivity</code>作为程序的主界面，是因为我们声明了如下代码:<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在<code>&lt;action&gt;</code>标签中我们指明了当前活动可以响应<code>android.intent.action.MAIN</code>这个action,而<code>&lt;category&gt;</code>标签则包含了一些附加信息，指明当前活动可以响应<code>android.intent.category.LAUNCHER</code>这个category，只有这两个配置同时匹配，这个活动才是合适的活动。</p>
<p>例如我们为<code>SecondActivity</code>添加如下filter：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.activitydemo.second"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后我修改MainActivity中按钮的点击方法：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Button button = (Button) findViewById(R.id.button);</div><div class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">    		<span class="comment">//隐式启动Intent</span></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.guiyongdong.activitydemo.second"</span>);</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们看到，我直接将action的字符串传了过去，表明想要启动能响应<code>com.guiyongdong.activitydemo.second</code>这个action的活动，我们之前说过，只有action和category同时匹配才能响应，但是这里我们并没有指定category，那是因为<code>android.intent.category.DEFAULT</code>是一种默认的category，在我们调用<code>startActivity</code>方法的时候，会自动的添加这个默认的category到Intent中。</p>
<p>当然，现在我们也可以添加任意自定义的category：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.activitydemo.second"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.category.my_second"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在MainActivity中添加如下代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Button button = (Button) findViewById(R.id.button);</div><div class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.guiyongdong.activitydemo.second"</span>);</div><div class="line">        intent.addCategory(<span class="string">"com.guiyongdong.category.my_second"</span>);</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们依然能够启动<code>SecondActivity</code>。</p>
<p>当然，我们前面也说到了<code>&lt;data&gt;</code>这个标签，它用于更精确地指定当前活动能响应什么类型的数据，<code>&lt;data&gt;</code>标签中主要可以匹配一下内容：</p>
<ul>
<li>android:scheme 用于指定数据协议部分，如http</li>
<li>android:host 用于指定数据的主机名部分，如www.baidu.com</li>
<li>android:port 用于指定数据的端口部分</li>
<li>android:path 用于指定主机名和端口之后的部分</li>
<li>android:mimeType 用于指定可以处理的数据类型</li>
</ul>
<p>至于详细的该怎么用，大家可以去试试。这里列一下打电话的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Button button = (Button) findViewById(R.id.button);</div><div class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_CALL);</div><div class="line">        intent.setData(Uri.parse(<span class="string">"tel:10086"</span>));</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>当然，前提是我们在<code>AndroidManifest.xml</code>添加打电话的权限<br><code>&lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot;/&gt;</code></p>
<h3 id="Activity生命周期"><a href="#Activity生命周期" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h3><p>当我们启动一个新的Activity的时候，它覆盖在了原来的Activity上，我们想一想，Android是通过上面来管理这些Activity的呢？</p>
<p>这里要说明一种数据结构：栈，栈是一种先进后出的数据结构。我们发现，当我们点击返回键时，最先消失的活动是我们最新添加显示的活动。</p>
<p>Android是使用任务（Task）来管理活动的，一个任务就是一组存放在栈里的活动的集合，这个栈也被称为返回栈(Back Stack)。</p>
<h5 id="活动状态"><a href="#活动状态" class="headerlink" title="活动状态"></a>活动状态</h5><ul>
<li><p>运行状态<br>  当一个活动位于返回栈的栈顶时，这时活动就处于运行状态。系统最不愿意回收的就是处于运行状态的活动。</p>
</li>
<li><p>暂停状态<br>  当一个活动不再处于栈顶位置，但仍是可见的，这时活动就进入了暂停状态，因为有时候开启一个新的活动，这个活动并不是占满整个屏幕的。处于暂停状态的活动仍然是完全活着的，系统也不愿意去回收这种活动，只有在内存极低的情况下，系统才会去考虑回收这种活动。</p>
</li>
<li><p>停止状态<br>  当一个活动不再处于栈顶位置，并且完全不可见时，活动就进入了暂停状态，系统仍然会为此活动保存相应的状态和成员变量，但是，这并不是完全可靠，当内存不足，处于停止状态的活动有可能被系统回收。</p>
</li>
<li><p>销毁状态<br>  当一个活动从返回栈中移除后就成了销毁状态。系统最倾向于回收处于这种状态的活动。</p>
</li>
</ul>
<h5 id="活动的生存期"><a href="#活动的生存期" class="headerlink" title="活动的生存期"></a>活动的生存期</h5><p>Activity类中定义了7个回调方法，覆盖了活动生命周期的每一个环节。</p>
<ul>
<li><p>onCreate()<br>  这个方法我们已经见过很多次了，每个活动中我们都重写了这个方法，它会在活动第一次被创建的时候调用。我们应该在这个方法中完成活动的初始化操作，比如加载布局，绑定事件等。</p>
</li>
<li><p>onStart()<br>  这个方法在活动由不可见变为可见的时候调用。</p>
</li>
<li><p>onResume()<br>  这个方法在活动准备好喝用户交互的时候调用。此时活动一定位于返回栈的栈顶，并且处于运行状态。</p>
</li>
<li><p>onPause()<br>  这个方法在系统准备去启动或者恢复另外一个活动的时候调用。通常会在这个方法中奖一些消耗CPU的资源释放掉，但是这个方法的执行速度一定要快，不然会影响到新的活动的使用。</p>
</li>
<li><p>onStop()<br>  这个方法在活动完全不可见的时候调用。它和onPause()方法的区别主要在于，如果启动的新活动是一个对话框式的活动，那么OnPause()方法会得到执行，而onStop()方法并不会执行。</p>
</li>
<li><p>onDestory()<br>  这个方法在活动被销毁之前调用，之后活动的状态将变为销毁状态。</p>
</li>
<li><p>onRestart()<br>  这个方法在活动由停止状态变为运行状态之前调用，也就是活动被重新启动了。</p>
</li>
</ul>
<p>看完以上的7个方法（发现这些方法和iOS好相似啊），可以将活动分为3种生存期。</p>
<ul>
<li><p>完整生存期。活动在onCreate()方法和onDestroy()方法之间所经历的，就是完整生存期。一般情况下，都是在onCreate()中完成各种初始化，在onDestroy()中完成释放内存的操作。</p>
</li>
<li><p>可见生存期。活动在onStart()方法和onStop()方法之间所经历的，就是可见生存期。我们可以通过这两个方法，合理的管理那些对用户可见的资源。</p>
</li>
<li><p>前台生存期。活动在onResume()方法和onPause()方法之间所经历的就是前台生存期。</p>
</li>
</ul>
<p>如图，完整的描述了Activity的整个生命周期：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android5.jpg?raw=true"><br></div>

<h3 id="活动的启动模式"><a href="#活动的启动模式" class="headerlink" title="活动的启动模式"></a>活动的启动模式</h3><p>活动的启动模式一共有4种，分别是standard、singleTop、singleTask和singleInstance。可以在<code>AndroidManifest.xml</code>通过给<code>&lt;activity&gt;</code>标签指定<code>android:launchMode</code>属性来选择启动模式。</p>
<h5 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h5><p>standard是活动的默认启动模式，每当启动一个新的活动，它都会在返回栈中如栈，每次启动都会创建该活动的一个新的实例。</p>
<h5 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h5><p>加入我们在<code>SecondActivity</code>活动中再启动一个<code>SecondActivity</code>，这时候系统是不会再去创建一个新的<code>SecondActivity</code>活动的。singleTop模式下，当启动活动时如果发现返回栈的栈顶已经是该类型的活动，则认为可以直接使用它，不会再去创建新的活动实例。</p>
<h5 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h5><p>使用singleTask可以很好的解决重复创建栈顶活动的问题，每次启动该活动时系统首先会在返回栈中检查是否有存在该活动的实例，如果发现已经存在则直接使用该实例，并把这个活动之上的所有活动统统出栈，如果没有发现，就会创建一个新的活动实例。</p>
<h5 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h5><p>singleInstance不同于上面的三种模式，它表示活动会启用一个新的返回栈来管理这个活动，因为程序中可以存在多个返回栈。一般情况下，我们希望几个程序共享某个活动时会使用到此模式。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>关于Activity的知识还有很多，只有在开发中才能遇到各种问题，继续吧，骚年~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来说一说Android四大组件之一的&lt;code&gt;Activity&lt;/code&gt;，类似于iOS的&lt;code&gt;UIViewController&lt;/code&gt;。当我们新建一个Android项目时，Android Studio默认会为我们创建一个主活动:&lt;code&gt;MainActivity&lt;/code&gt;和一个默认的主布局:&lt;code&gt;activity_main.xml&lt;/code&gt;。一个活动想要显示在屏幕上，就必须在&lt;code&gt;AndroidManifest.xml&lt;/code&gt;中注册。但是这些工作都有IDE帮我们自动完成了。我们来看&lt;code&gt;AndroidManifest.xml&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;manifest&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;package&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.guiyongdong.activitydemo&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;application&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:allowBackup&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:icon&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@mipmap/ic_launcher&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:label&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/app_name&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:roundIcon&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@mipmap/ic_launcher_round&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:supportsRtl&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:theme&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@style/AppTheme&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;&amp;lt;!--MainActivity--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.action.MAIN&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.category.LAUNCHER&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;application&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;manifest&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之Android系统初窥</title>
    <link href="http://www.guiyongdong.com/2017/03/15/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BAndroid%E7%B3%BB%E7%BB%9F%E5%88%9D%E7%AA%A5/"/>
    <id>http://www.guiyongdong.com/2017/03/15/一天一Android之Android系统初窥/</id>
    <published>2017-03-15T09:08:17.000Z</published>
    <updated>2017-03-17T09:35:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于前段时间使用ReactNative开发过一个项目，在开发的过程中，会使用到大量的非ReactNative提供的组件和功能。这时候就必须写原生桥接，iOS还好说，毕竟是靠这个吃饭的，可是android就捉襟见肘了。为了向大前端的目标更进一步，我计划开始学习android，为期6个月，我的目标是6个月内起码自己公司的android项目可以上手，当然，如果想成为真正的android开发者，光靠这6个月是不行。还需要大量的实际项目才能锻炼。</p>
<p>值得庆幸的是我在大学主攻的就是java(哈哈，现在也基本上忘的差不多了)。为了打好基础，我买了两本书，一本是《java编程思想》，一本是京东上销量很好的《第二行代码Android》，希望这两本书能够帮到我。另外我也会专门开一个专栏，讲解我学习java的过程。可能在接下来的博客中，我总结的都是基础知识，大神莫嘲笑。</p>
<a id="more"></a>
<h3 id="Android系统架构"><a href="#Android系统架构" class="headerlink" title="Android系统架构"></a>Android系统架构</h3><p>Android大概可以分为四层架构：Linux内核层、系统运行库层、应用框架层和应用层。</p>
<p><strong>Linux内核层</strong></p>
<p>Android系统是基于Linux内核的，这一层为Android设备的各种硬件提供了底层的驱动，如显示驱动、音频驱动、照相机驱动、蓝牙驱动、Wi-Fi驱动、电源管理等。</p>
<p><strong>系统运行时库层</strong></p>
<p>这一层通过一些C/C++库来为Android系统提供了主要的特性支持。如SQLite库提供了数据库的支持，OpenGL|ES库提供了3D绘图的支持，Webkit库提供了浏览器内核的支持等。</p>
<p>同样在这一层还要Android运行时库，主要提供了一些核心库，能是开发者可以使用java来编写Android应用。另外，Android运行时库还包含了Dalvik虚拟机（5.0系统之后改为ART运行环境），它能让每一个Android应用都能运行在独立的进程中，并且拥有一个自己的Dalvik虚拟机实例。</p>
<p><strong>应用框架层</strong></p>
<p>这一层主要提供了构建应用程序时可能用到的各种API，Android自带的一些核心应用就是使用这些API完成的，我们也是通过这些API来完成我们的应用。</p>
<p><strong>应用层</strong></p>
<p>普通用户主要就是和这一层打交道，我们自己开发的应用都是属于这一层的，当然，系统自带的应用也是这一层的。</p>
<p>系统架构图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android1.jpg?raw=true"><br></div>


<h3 id="Android版本"><a href="#Android版本" class="headerlink" title="Android版本"></a>Android版本</h3><p>可能现在应用最低的适配都是从4.0版本开始，目前最高版本是7.1.1，而且谷歌对Android版本的命名都是以甜点命名的。什么牛轧糖、棒棒糖。</p>
<h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><p>在我没接触Android之前，我的同学都是使用MyEclipse开发的，至于是如何开发的，我不知道，因为当我开始学Android的时候，已经普及了另一个开发工具：<strong>Android Studio</strong>。当然，只有IDE是不行的，还得有<strong>JDK</strong>、<strong>Android SDK</strong>。</p>
<p>如果使用Android Studio，你也可以使用studio自带的工具进行下载各个版本的SDK。如图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android2.png?raw=true"><br></div>

<p>当然，SDK的目录你可以随便选。</p>
<h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><p>至于该如何创建项目，我就不说了。创建完项目以后切换到Project模式下，就是项目的真实目录了。</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android3.png?raw=true"><br></div>

<p>下面来看看这些目录或者文件都是干什么的：</p>
<p><strong>.gradle和.idea</strong> </p>
<p>这两个目录下放置的都是Android Studio自动生成的一些文件，我们无须关心，也不要去编辑。</p>
<p><strong>app</strong></p>
<p>这个目录才是我们以后经常使用和编辑的，一会再说它。</p>
<p><strong>build</strong></p>
<p>这个目录也不需要关心，它主要包含了一些在编译时自动生成的文件。</p>
<p><strong>gradle</strong></p>
<p>这个目录下包含了gradle wrapper的配置文件，使用gradle wrapper的方式不需要提前将gradle下载好，而是会自动根据本地的缓存情况决定是否需要联网下载gradle。Android Studio默认没有启动gradle wrapper的方式，如果需要打开，可以点击 File-&gt;Other Settings-&gt;Build,Execution,Deployment-&gt;Build Tools-&gt;Gradle 进行配置。</p>
<p><strong>.gitignore</strong></p>
<p>设置git忽略哪些文件</p>
<p><strong>build.gradle</strong></p>
<p>这个文件时全局的gradle构建脚本，通常这个文件中的内容是不需要修改的，我只知道gradle是构建工具，至于gradle更多的信息，我还得再研究一下。</p>
<p><strong>gradle.properties</strong></p>
<p>这个文件时全局的gradle配置文件，在这里配置的属性将会影响到项目中所有的gradle编译脚本。</p>
<p><strong>gradlew和gradlew.bat</strong></p>
<p>这两个文件时用来在命令行界面中执行gradle命令的，其中gradlew是在Linux或Mac系统中使用，gradlew.bat是在Windows系统中使用的。</p>
<p><strong>ListViewDemo.iml</strong></p>
<p>这个文件的名字和我们的项目名字是一样的，不固定。一般不用动。</p>
<p><strong>local.properties</strong></p>
<p>这个文件用于指定Android SDK路径，一般我们不动，除非你的SDK本地路径改变了。</p>
<p><strong>settings.gradle</strong></p>
<p>这个文件用于指定项目中所引入的模块，因为当前项目就一个模块：app，在以后可能我们还会引入其他模块，一般IDE帮我们自动导入。</p>
<h4 id="app"><a href="#app" class="headerlink" title="app"></a>app</h4><p>看了整个工程的目录，感觉有用的不是很多，好多都是和gradle或者配置有关。其实，真正需要我们关心的只有app这个目录。</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android4.png?raw=true"><br></div>

<p><strong>build</strong></p>
<p>这个目录和外层的build目录类似，主要也是包含了一些在编译时生成的文件，不过它里面的内容更复杂，也不需要管。</p>
<p><strong>libs</strong></p>
<p>如果项目中使用到了第三方的jar包，就需要把这些jar包都放在libs录下，放在这个目录下的jar包都会被自动添加到构建路径中去。</p>
<p><strong>androidTest</strong></p>
<p>这个一看就是用来编写测试用例的，一些小公司可能也不写测试代码的。</p>
<p><strong>java</strong></p>
<p>毫无疑问，java目录是放置我们所有java代码的地方，以后所有的代码都在里面。</p>
<p><strong>res</strong></p>
<p>这个目录下的内容比较多，简单所，就是放各种资源的，图片，布局，字符串等资源。图片放到drawable文件下，布局放置layout下，字符串放在values下。</p>
<p><strong>AndroidMainfest.xml</strong></p>
<p>这个文件很重要，是整个Android的配置文件，包括程序中使用到的所有四大组件都需要在这个文件注册，另外还有权限声明等。</p>
<p><strong>test</strong></p>
<p>它是用来编写Unit Test测试用例的，是对项目进行自动化测试的另一种方式。</p>
<p><strong>.gitignore</strong></p>
<p>忽略文件</p>
<p><strong>app.iml</strong></p>
<p>不需要关心</p>
<p><strong>build.gradle</strong></p>
<p>这个文件也很重要，是app模块的gradle构建脚本，里面会有好多的配置，以后研究到了再说。</p>
<p><strong>proguard-rules.pro</strong></p>
<p>代码混淆规则，主要混淆代码，放在人家破解你的项目。</p>
<p>好了， android项目的大概工程目录就是这样，其实我们会发现，重要的没几个，而且重要的好多都和gradle有关，看来真得好好研究下gradle是什么了。</p>
<h3 id="build-gradle文件"><a href="#build-gradle文件" class="headerlink" title="build.gradle文件"></a>build.gradle文件</h3><p>在整个项目中，一共有连个build.gradle文件。我们先来看看最外层的build.gradle文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.3.0'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些代码都是自动生成的，我们发现在两个闭包中都声明了<code>jcenter()</code>，它是一个代码托管仓库，很多android开源项目都会托管到jcenter上。只要声明它，就可以引用jcenter上的托管的项目。</p>
<p>在<code>dependencies</code>闭包中，还声明了<code>classpath</code>，这个主要是声明gradle插件的，因为gradle不仅仅为android工作，还为java等项目工作，所有我们要声明使用哪个包中的gradle工具。例如我们声明了<code>com.android.tools.build:gradle:2.3.0</code>，2.3.0是此插件的版本号。</p>
<p>再来看看app下的<code>build.gradle</code>文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">25</span></div><div class="line">    buildToolsVersion <span class="string">"25.0.1"</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.guiyongdong.listviewdemo"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">25</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></div><div class="line">    <span class="title">androidTestCompile</span><span class="params">(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span></div><div class="line">        exclude group: <span class="string">'com.android.support'</span>, <span class="keyword">module</span>: <span class="string">'support-annotations'</span></div><div class="line">    &#125;)</div><div class="line">    compile 'com.android.support:appcompat-v7:25.0.1'</div><div class="line">    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'</div><div class="line">    compile 'com.android.support:recyclerview-v7:25.0.1'</div><div class="line">    testCompile 'junit:junit:4.12'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>咋一看，这个文件好复杂啊，别急，我们一行一行的看。</p>
<p><code>com.android.application</code> 表示这是一个应用程序模块，<code>com.android.library</code> 表示这是一个库模块，他俩最大的区别就是，一个可以直接运行，一个只能作为代码库依附于别的应用程序模块来运行。</p>
<p>接下来是一个大的android闭包，我们看看它都代表什么。</p>
<p><code>compileSdkVersion</code>: 用于指定项目的编译版本，我们这里指定25，表示使用Android 7.1.1来编译，如果你不知道具体使用哪个版本来编译，你可以直接看此文章的第一张图，或者你也可以在Android Studio-&gt;Preferences 直接搜索Android SDK 来查看版本情况。</p>
<p><code>buildToolsVersion</code>: 用来指定项目构建工具的版本，如果有新版本时，Android Studio会进行提升。</p>
<p><code>applicationId</code>: 当前项目的包名</p>
<p><code>minSdkVersion</code>: 最低支持的Android系统版本</p>
<p><code>targetSdkVersion</code>: 这个表示你在该目标版本上已经做过充分的测试，系统将会为你的应用程序启用一些最新的功能和特性，比如你设置成23或者更高，系统会为你的应用程序启用运行时权限，如果你设置成22，那么Android 6.0的功能你就用不了。</p>
<p><code>versionCode</code>: 当前版本号</p>
<p><code>versionName</code>: 当前项目的版本名 </p>
<p><code>testInstrumentationRunner</code>: 测试的一些东西</p>
<p>我们再来看看<code>buildTypes</code>闭包，buildTypes闭包用于指定生成安装文件的相关配置，通常他包含两个子包：<code>release</code>和<code>debug</code>。一个表示生成环境，一个表示测试环境，debug默认可以不写。我们看看<code>release</code>包下的具体内容</p>
<p><code>minifyEnabled</code>: 用于指定是否对代码进行混淆<br><code>proguardFiles</code>: 混淆时使用的文件</p>
<p>我们再来看看<code>dependencies</code>包，它表示当前项目所有的依赖关系，通常Android Studio项目一共有3种依赖方式：<strong>本地依赖</strong>、<strong>库依赖</strong>、<strong>远程依赖</strong>。本地依赖就是jar包依赖，库依赖是在项目中添加模块，远程依赖是对jcenter库上开源项目的依赖。</p>
<p><code>compile fileTree</code>: 它就是一个本地依赖声明，表示将libs目录下的所有的.jar后缀的文件都添加到构建路径中去。</p>
<p><code>compile</code>: 这个则是远程依赖，</p>
<p>还有一种库依赖，写法为<code>compile project(&#39;:helper&#39;)</code>，它表示添加一个名叫helper库的依赖，当然，前提是这个库已经添加到你的项目中。</p>
<p>关于build.gradle的配置还有很多，我想在以后项目复杂了，会遇到的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于前段时间使用ReactNative开发过一个项目，在开发的过程中，会使用到大量的非ReactNative提供的组件和功能。这时候就必须写原生桥接，iOS还好说，毕竟是靠这个吃饭的，可是android就捉襟见肘了。为了向大前端的目标更进一步，我计划开始学习android，为期6个月，我的目标是6个月内起码自己公司的android项目可以上手，当然，如果想成为真正的android开发者，光靠这6个月是不行。还需要大量的实际项目才能锻炼。&lt;/p&gt;
&lt;p&gt;值得庆幸的是我在大学主攻的就是java(哈哈，现在也基本上忘的差不多了)。为了打好基础，我买了两本书，一本是《java编程思想》，一本是京东上销量很好的《第二行代码Android》，希望这两本书能够帮到我。另外我也会专门开一个专栏，讲解我学习java的过程。可能在接下来的博客中，我总结的都是基础知识，大神莫嘲笑。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>转场动画详解</title>
    <link href="http://www.guiyongdong.com/2017/03/06/%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.guiyongdong.com/2017/03/06/转场动画详解/</id>
    <published>2017-03-06T02:02:31.000Z</published>
    <updated>2017-03-09T07:02:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS开发中，页面之间的跳转无外乎由<code>UINavigationController</code>管理的<code>push</code>或者<code>pop</code>操作、以及由<code>UIViewController</code>管理的<code>present</code>和<code>dismiss</code>操作，无论何种操作，iOS原生系统都为我们提供了页面之间的基础跳转动画。但是往往在开发中，由于各种功能需求，iOS原生系统提供的跳转动画并不能满足我们的需求，好在iOS早就给我们提供了一套自定义转场动画的解决方案，这篇文章就来详细了解一下转场动画。在了解这篇文章之前，先看看iOS提供的整个转场框架</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/transition.png?raw=true"><br></div>

<a id="more"></a>
<h2 id="present-dismiss"><a href="#present-dismiss" class="headerlink" title="present/dismiss"></a>present/dismiss</h2><p>首先，我们先来了解一下<code>模态跳转</code>。开发中，假如在A界面需要模态跳转到B界面，通常会这么写：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    PresentBViewController *bVC = [[PresentBViewController alloc] init];</div><div class="line">    [<span class="keyword">self</span> presentViewController:bVC animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>模态消失当前界面则是这么写：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    [<span class="keyword">self</span> dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="UIViewControllerTransitioningDelegate"><a href="#UIViewControllerTransitioningDelegate" class="headerlink" title="UIViewControllerTransitioningDelegate"></a>UIViewControllerTransitioningDelegate</h4><p>使用模态跳转时，系统已经为我们写好的跳转的动画，而要想自定义模态跳转动画，则需要一个实现<code>UIViewControllerTransitioningDelegate</code>协议、并实现协议部分方法的对象。在<code>UIViewController.h</code>头文件中，我们可以发现如下定义：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">UIViewControllerTransitioningDelegate</span>;</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIViewController</span>(<span class="title">UIViewControllerTransitioning</span>)</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerTransitioningDelegate</span>&gt; transitioningDelegate <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>如此，我们则需要定义一个对象，并实现<code>UIViewControllerTransitioningDelegate</code>协议方法，赋值给将要模态跳转的控制器(<code>PresentBViewController</code>)，如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PresentAViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) PresentManager *presentManager;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PresentAViewController</span></span></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> blueColor];</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    PresentBViewController *bVC = [[PresentBViewController alloc] init];</div><div class="line">    <span class="keyword">self</span>.presentManager = [[PresentManager alloc] init];</div><div class="line">    bVC.transitioningDelegate = <span class="keyword">self</span>.presentManager;</div><div class="line">    [<span class="keyword">self</span> presentViewController:bVC animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<p>我们先来看看<code>UIViewControllerTransitioningDelegate</code>有哪些协议方法:<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//当使用模态弹出时 会调用此方法 返回一个实现 UIViewControllerAnimatedTransitioning 协议的对象 </span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForPresentedController:(<span class="built_in">UIViewController</span> *)presented</div><div class="line">                                                                            presentingController:(<span class="built_in">UIViewController</span> *)presenting</div><div class="line">                                                                                sourceController:(<span class="built_in">UIViewController</span> *)source;</div><div class="line"><span class="comment">//当使用模态消失时 会调用此方法 返回一个实现 UIViewControllerAnimatedTransitioning 协议的对象</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForDismissedController:(<span class="built_in">UIViewController</span> *)dismissed;</div><div class="line"><span class="comment">// 当使用模态弹出时 会调用此方法 返回一个实现 UIViewControllerInteractiveTransitioning协议的对象</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerInteractiveTransitioning</span>&gt;)interactionControllerForPresentation:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animator;</div><div class="line"><span class="comment">// 当使用模态消失时 会调用此方法 返回一个实现 UIViewControllerInteractiveTransitioning协议的对象</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerInteractiveTransitioning</span>&gt;)interactionControllerForDismissal:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animator;</div><div class="line"></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIPresentationController</span> *)presentationControllerForPresentedViewController:(<span class="built_in">UIViewController</span> *)presented</div><div class="line">                                                               presentingViewController:(<span class="keyword">nullable</span> <span class="built_in">UIViewController</span> *)presenting</div><div class="line">                                                                   sourceViewController:(<span class="built_in">UIViewController</span> *)source;</div></pre></td></tr></table></figure></p>
<p>先来看这两个代理方法：<code>animationControllerForPresentedController:presentingController:sourceController:(UIViewController *)source</code>和<code>animationControllerForDismissedController:(UIViewController *)dismissed</code>他们都返回了一个实现<code>UIViewControllerAnimatedTransitioning</code>协议的对象。<code>UIViewControllerAnimatedTransitioning</code>协议的方法就是我们实现动画的地方。关于此协议我们等会再说。</p>
<p>再来看如下两个方法:<br><code>interactionControllerForPresentation:(id &lt;UIViewControllerAnimatedTransitioning&gt;)animator</code>和<code>interactionControllerForDismissal:(id &lt;UIViewControllerAnimatedTransitioning&gt;)animator</code>，他们都返回了一个实现<code>UIViewControllerInteractiveTransitioning</code>协议的对象，而此协议主要用于交互式转场动画。关于此协议我们等会再说。</p>
<h2 id="push-pop"><a href="#push-pop" class="headerlink" title="push/pop"></a>push/pop</h2><p>在使用<code>UINavigationController</code>进行页面之间的导航管理时，系统也是默认为我们实现了<code>push</code>和<code>pop</code>动画的，而如果想自定义<code>push/pop</code>动画，则需要一个实现<code>UINavigationControllerDelegate</code>协议的对象。如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PushAViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) PushManager *pushManager;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PushAViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    PushBViewController *bVC = [[PushBViewController alloc] init];</div><div class="line">    <span class="keyword">self</span>.pushManager = [[PushManager alloc] init];</div><div class="line">    bVC.navigationController.delegate = <span class="keyword">self</span>.pushManager;</div><div class="line">    [<span class="keyword">self</span>.navigationController pushViewController:bVC animated:<span class="literal">YES</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<h4 id="UINavigationControllerDelegate"><a href="#UINavigationControllerDelegate" class="headerlink" title="UINavigationControllerDelegate"></a>UINavigationControllerDelegate</h4><p>我们再来看看<code>UINavigationControllerDelegate</code>协议的相关方法：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//返回真正执行交互式动画的对象</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerInteractiveTransitioning</span>&gt;)navigationController:(<span class="built_in">UINavigationController</span> *)navigationController</div><div class="line">                                   interactionControllerForAnimationController:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;) animationController;</div><div class="line"></div><div class="line"><span class="comment">//返回由谁去执行动画的对象</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)navigationController:(<span class="built_in">UINavigationController</span> *)navigationController</div><div class="line">                                            animationControllerForOperation:(<span class="built_in">UINavigationControllerOperation</span>)operation</div><div class="line">                                                         fromViewController:(<span class="built_in">UIViewController</span> *)fromVC</div><div class="line">                                                           toViewController:(<span class="built_in">UIViewController</span> *)toVC;</div></pre></td></tr></table></figure></p>
<p>我们会发现 此两种方法分别返回了实现了<code>UIViewControllerInteractiveTransitioning</code>协议的对象和实现了<code>UIViewControllerAnimatedTransitioning</code>协议的对象。我们不难发现，无论是<code>push/pop</code>还是<code>present/dismiss</code>真正的执行动画都是一个实现了<code>UIViewControllerAnimatedTransitioning</code>协议的对象，而真正执行交互式动画的都是一个实现了<code>UIViewControllerInteractiveTransitioning</code>协议的对象。既然如此，那我们就来研究一下<code>UIViewControllerAnimatedTransitioning</code>和<code>UIViewControllerInteractiveTransitioning</code>协议</p>
<h2 id="UIViewControllerAnimatedTransitioning"><a href="#UIViewControllerAnimatedTransitioning" class="headerlink" title="UIViewControllerAnimatedTransitioning"></a>UIViewControllerAnimatedTransitioning</h2><p>先来看此协议的方法:<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//动画执行的时间</span></div><div class="line">- (<span class="built_in">NSTimeInterval</span>)transitionDuration:(<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext;</div><div class="line"><span class="comment">//执行动画</span></div><div class="line">- (<span class="keyword">void</span>)animateTransition:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext;</div></pre></td></tr></table></figure></p>
<p>此协议的两个方法必须实现。<code>transitionDuration:</code>方法返回动画执行的时间。通常情况下，系统执行<code>present/dismiss</code>和<code>push/pop</code>动画的时间为0.5秒左右。<code>animateTransition</code>方法就是真正执行动画的地方。这个方法系统会给我们传过来一个实现了<code>UIViewControllerContextTransitioning</code>协议的对象（转场上下文），在执行动画之前，我们先来了解一下<code>UIViewControllerContextTransitioning</code>协议。</p>
<p>先来看<code>UIViewControllerContextTransitioning</code>协议的定义<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//上下文的view 对做动画的view需要添加到此上下文的view中</span></div><div class="line">- (<span class="built_in">UIView</span> *)containerView;</div><div class="line"><span class="comment">//是否动画正在进行</span></div><div class="line">- (<span class="built_in">BOOL</span>)isAnimated;</div><div class="line"><span class="comment">//是否是交互式动画</span></div><div class="line">- (<span class="built_in">BOOL</span>)isInteractive; </div><div class="line"><span class="comment">//是否取消</span></div><div class="line">- (<span class="built_in">BOOL</span>)transitionWasCancelled;</div><div class="line"><span class="comment">//获取当前模态跳转的方式</span></div><div class="line">- (<span class="built_in">UIModalPresentationStyle</span>)presentationStyle;</div><div class="line"><span class="comment">//根据系数来更新交互式动画 0~1</span></div><div class="line">- (<span class="keyword">void</span>)updateInteractiveTransition:(<span class="built_in">CGFloat</span>)percentComplete;</div><div class="line"><span class="comment">//完成交互式动画</span></div><div class="line">- (<span class="keyword">void</span>)finishInteractiveTransition;</div><div class="line"><span class="comment">//取消交互式动画</span></div><div class="line">- (<span class="keyword">void</span>)cancelInteractiveTransition;</div><div class="line"><span class="comment">//iOS10新加入的方法 暂停交互式动画</span></div><div class="line">- (<span class="keyword">void</span>)pauseInteractiveTransition <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">10</span>_0);</div><div class="line"><span class="comment">//当动画结束时 要调用此方法告诉上下文</span></div><div class="line">- (<span class="keyword">void</span>)completeTransition:(<span class="built_in">BOOL</span>)didComplete;</div><div class="line"><span class="comment">//获取当前上下文的控制器，使用UITransitionContextFromViewControllerKey获取fromVC 使用UITransitionContextToViewControllerKey获取toVC</span></div><div class="line">- (<span class="keyword">nullable</span> __kindof <span class="built_in">UIViewController</span> *)viewControllerForKey:(<span class="built_in">UITransitionContextViewControllerKey</span>)key;</div><div class="line"><span class="comment">//iOS8之后的方法 返回此上下文控制器的view ，通常情况下，尽可能不直接使用controller的view属性，因为有时候我们直接使用controller的view并不是我们真正要做动画的view。我们应该直接使用UITransitionContextFromViewKey来获取fromView，使用UITransitionContextToViewKey来获取toView。</span></div><div class="line">- (<span class="keyword">nullable</span> __kindof <span class="built_in">UIView</span> *)viewForKey:(<span class="built_in">UITransitionContextViewKey</span>)key <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">8</span>_0);</div><div class="line"><span class="comment">//目标view的transform</span></div><div class="line">- (<span class="built_in">CGAffineTransform</span>)targetTransform <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">8</span>_0);</div><div class="line"><span class="comment">//返回初始位置的frame 即fromView的frame</span></div><div class="line">- (<span class="built_in">CGRect</span>)initialFrameForViewController:(<span class="built_in">UIViewController</span> *)vc;</div><div class="line"><span class="comment">//返回动画结束位置的frame 即toView得frame</span></div><div class="line">- (<span class="built_in">CGRect</span>)finalFrameForViewController:(<span class="built_in">UIViewController</span> *)vc;</div></pre></td></tr></table></figure></p>
<p>了解完<code>UIViewControllerContextTransitioning</code>协议后，我们就可以实现自定义转场动画了。</p>
<p>第一节中，我们定义了类<code>PresentManager</code>并实现了<code>UIViewControllerAnimatedTransitioning</code>和<code>UIViewControllerTransitioningDelegate</code>,我们先来看<code>UIViewControllerTransitioningDelegate</code>协议的具体实现</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForPresentedController:(<span class="built_in">UIViewController</span> *)presented</div><div class="line">                                                                            presentingController:(<span class="built_in">UIViewController</span> *)presenting</div><div class="line">                                                                                sourceController:(<span class="built_in">UIViewController</span> *)source &#123;</div><div class="line">    <span class="comment">//标记此动画为Present 并使用自身为动画的最终执行者</span></div><div class="line">    <span class="keyword">self</span>.transitionStyle = TransitionStylePresent;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForDismissedController:(<span class="built_in">UIViewController</span> *)dismissed &#123;</div><div class="line">    <span class="comment">//标记此动画为Dismiss 并使用自身为动画的最终执行者</span></div><div class="line">    <span class="keyword">self</span>.transitionStyle = TransitionStyleDismiss;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再来看看<code>UIViewControllerAnimatedTransitioning</code>协议的具体实现：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">NSTimeInterval</span>)transitionDuration:(<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext &#123;</div><div class="line">	<span class="comment">//返回动画的执行时间</span></div><div class="line">    <span class="keyword">return</span> <span class="number">1.0</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)animateTransition:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext &#123;</div><div class="line">    <span class="comment">//1. 首先获取上下文的view</span></div><div class="line">    <span class="built_in">UIView</span>  *containerView = [transitionContext containerView];</div><div class="line">    <span class="keyword">if</span> (!containerView) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.transitionStyle == TransitionStylePresent) &#123;</div><div class="line">        <span class="comment">//present 动画</span></div><div class="line">        </div><div class="line">        <span class="comment">//2. 获取 fromViewController 和 toViewController</span></div><div class="line">        <span class="built_in">UIViewController</span> *fromViewController = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextFromViewControllerKey</span>];</div><div class="line">        <span class="built_in">UIViewController</span> *toViewController = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextToViewControllerKey</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//3. 获取fromView和toView</span></div><div class="line">        <span class="built_in">UIView</span> *fromView, *toView;</div><div class="line">        <span class="keyword">if</span> ([transitionContext respondsToSelector:<span class="keyword">@selector</span>(viewForKey:)]) &#123;</div><div class="line">            fromView = [transitionContext viewForKey:<span class="built_in">UITransitionContextFromViewKey</span>];</div><div class="line">            toView = [transitionContext viewForKey:<span class="built_in">UITransitionContextToViewKey</span>];</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            fromView = fromViewController.view;</div><div class="line">            toView = toViewController.view;</div><div class="line">        &#125;</div><div class="line">        fromView.frame = [transitionContext initialFrameForViewController:fromViewController];</div><div class="line">        toView.frame = [transitionContext finalFrameForViewController:toViewController];</div><div class="line">        </div><div class="line">        <span class="comment">//4. 设置toView动画初始frame 这里 模仿一下从屏幕左边模态跳转</span></div><div class="line">        toView.frame = <span class="built_in">CGRectMake</span>(-toView.frame.size.width, toView.frame.origin.y, toView.frame.size.width, toView.frame.size.height);</div><div class="line">        </div><div class="line">        <span class="comment">//5. 添加到上下文的view上</span></div><div class="line">        [containerView addSubview:fromView];</div><div class="line">        [containerView addSubview:toView];</div><div class="line">        </div><div class="line">        <span class="comment">//6. 执行动画</span></div><div class="line">        [<span class="built_in">UIView</span> animateWithDuration:[<span class="keyword">self</span> transitionDuration:transitionContext] animations:^&#123;</div><div class="line">            toView.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, toView.frame.origin.y, toView.frame.size.width, toView.frame.size.height);</div><div class="line">        &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">            <span class="comment">//7. 一定要告诉上下文 动画执行结束</span></div><div class="line">            [transitionContext completeTransition:![transitionContext transitionWasCancelled]];</div><div class="line">        &#125;];</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// pop动画</span></div><div class="line">        <span class="comment">//2. 获取 fromViewController 和 toViewController</span></div><div class="line">        <span class="built_in">UIViewController</span> *fromViewController = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextFromViewControllerKey</span>];</div><div class="line">        <span class="built_in">UIViewController</span> *toViewController = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextToViewControllerKey</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//3. 获取fromView和toView</span></div><div class="line">        <span class="built_in">UIView</span> *fromView, *toView;</div><div class="line">        <span class="keyword">if</span> ([transitionContext respondsToSelector:<span class="keyword">@selector</span>(viewForKey:)]) &#123;</div><div class="line">            fromView = [transitionContext viewForKey:<span class="built_in">UITransitionContextFromViewKey</span>];</div><div class="line">            toView = [transitionContext viewForKey:<span class="built_in">UITransitionContextToViewKey</span>];</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            fromView = fromViewController.view;</div><div class="line">            toView = toViewController.view;</div><div class="line">        &#125;</div><div class="line">        fromView.frame = [transitionContext initialFrameForViewController:fromViewController];</div><div class="line">        toView.frame = [transitionContext finalFrameForViewController:toViewController];</div><div class="line">        </div><div class="line">        <span class="comment">//4. 添加到上下文的view上</span></div><div class="line">        [containerView addSubview:toView];</div><div class="line">        [containerView addSubview:fromView];</div><div class="line">        </div><div class="line">        <span class="comment">//5. 执行动画</span></div><div class="line">        [<span class="built_in">UIView</span> animateWithDuration:[<span class="keyword">self</span> transitionDuration:transitionContext] animations:^&#123;</div><div class="line">            fromView.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, -fromView.frame.size.height, fromView.frame.size.width, fromView.frame.size.height);</div><div class="line">        &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">            <span class="comment">//7. 一定要告诉上下文 动画执行结束</span></div><div class="line">            [transitionContext completeTransition:![transitionContext transitionWasCancelled]];</div><div class="line">        &#125;];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我这里只是做一个简单的动画，至于该如何做更复杂的动画，那就开动大家的大脑吧。</p>
<p>同样的，自定义<code>push/pop</code>动画也是如此，这里不再详解。</p>
<h2 id="交互式动画"><a href="#交互式动画" class="headerlink" title="交互式动画"></a>交互式动画</h2><p>在前面，我们一直提到一个协议<code>UIViewControllerInteractiveTransitioning</code>，实现此协议，我们就能使用交互式转场动画。iOS7为我们提供了已经实现好此协议的类<code>UIPercentDrivenInteractiveTransition</code>，我们只需继承此类，便可实现交互式动画。为了方便，下面的例子依旧在<code>present/dismiss</code>转场基础上讲解，我们让<code>PresentManager</code>继承<code>UIPercentDrivenInteractiveTransition</code>，并且在<code>PresentBViewController</code>上添加<code>pan</code>手势，具体代码如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//这里为了方便  当A控制器present B控制器的时候 直接在B控制器上添加pan手势，并且强引用B控制器。</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForPresentedController:(<span class="built_in">UIViewController</span> *)presented</div><div class="line">                                                                            presentingController:(<span class="built_in">UIViewController</span> *)presenting</div><div class="line">                                                                                sourceController:(<span class="built_in">UIViewController</span> *)source &#123;</div><div class="line">    <span class="comment">//标记此动画为Present 并使用自身为动画的最终执行者</span></div><div class="line">    <span class="keyword">self</span>.transitionStyle = TransitionStylePresent;</div><div class="line">    <span class="comment">//添加手势</span></div><div class="line">    [<span class="keyword">self</span> addGesture:presented];</div><div class="line">    <span class="keyword">self</span>.presentingVC = presented;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//在代理方法中返回`PresentManager`自己作为交互式代理</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerInteractiveTransitioning</span>&gt;)interactionControllerForDismissal:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animator &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.interacting) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//添加手势</span></div><div class="line">- (<span class="keyword">void</span>)addGesture:(<span class="built_in">UIViewController</span> *)viewController &#123;</div><div class="line">    <span class="built_in">UIPanGestureRecognizer</span> *pan = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(panGesture:)];</div><div class="line">    [viewController.view addGestureRecognizer:pan];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//监听手势变化</span></div><div class="line">- (<span class="keyword">void</span>)panGesture:(<span class="built_in">UIPanGestureRecognizer</span> *)gesture &#123;</div><div class="line">    <span class="built_in">CGPoint</span> translation = [gesture translationInView:gesture.view];</div><div class="line">    <span class="keyword">switch</span> (gesture.state) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateBegan</span>:</div><div class="line">        		<span class="comment">//标记当前模态消失为手势调用</span></div><div class="line">            <span class="keyword">self</span>.interacting = <span class="literal">YES</span>;</div><div class="line">            [<span class="keyword">self</span>.presentingVC dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateChanged</span>: &#123;</div><div class="line">        		<span class="comment">//根据手势的滑动距离 更新状态</span></div><div class="line">            <span class="built_in">CGFloat</span> fraction = translation.x / gesture.view.frame.size.width;</div><div class="line">            [<span class="keyword">self</span> updateInteractiveTransition:fraction];</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateEnded</span>:</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateCancelled</span>: &#123;</div><div class="line">        		<span class="comment">//如果划过50% dismiss掉 否则恢复</span></div><div class="line">            <span class="keyword">self</span>.interacting = <span class="literal">NO</span>;</div><div class="line">            <span class="built_in">CGFloat</span> fraction = translation.x / gesture.view.frame.size.width;</div><div class="line">            <span class="keyword">if</span> (fraction&lt;<span class="number">0.5</span> || gesture.state == <span class="built_in">UIGestureRecognizerStateCancelled</span>) &#123;</div><div class="line">                [<span class="keyword">self</span> cancelInteractiveTransition];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                [<span class="keyword">self</span> finishInteractiveTransition];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样的，<code>push/pop</code>亦是如此。</p>
<h2 id="UIPresentationController"><a href="#UIPresentationController" class="headerlink" title="UIPresentationController"></a>UIPresentationController</h2><p>在第一节，我们说到<code>UIViewControllerTransitioningDelegate</code>协议的时候，还有个方法没有说，它是iOS8以后才有的，此方法为：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIPresentationController</span> *)presentationControllerForPresentedViewController:(<span class="built_in">UIViewController</span> *)presented</div><div class="line">                                                               presentingViewController:(<span class="keyword">nullable</span> <span class="built_in">UIViewController</span> *)presenting</div><div class="line">                                                                   sourceViewController:(<span class="built_in">UIViewController</span> *)source</div></pre></td></tr></table></figure></p>
<p>此方法返回一个<code>UIPresentationController</code>对象，这个对象是做什么的呢？</p>
<p><code>UIViewController</code>有一个属性<code>modalPresentationStyle</code>，我们来看看它有哪些值：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIModalPresentationStyle</span>) &#123;</div><div class="line">        <span class="built_in">UIModalPresentationFullScreen</span> = <span class="number">0</span>,</div><div class="line">        <span class="built_in">UIModalPresentationPageSheet</span> <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">3</span>_2) __TVOS_PROHIBITED,</div><div class="line">        <span class="built_in">UIModalPresentationFormSheet</span> <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">3</span>_2) __TVOS_PROHIBITED,</div><div class="line">        <span class="built_in">UIModalPresentationCurrentContext</span> <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">3</span>_2),</div><div class="line">        <span class="built_in">UIModalPresentationCustom</span> <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">7</span>_0),</div><div class="line">        <span class="built_in">UIModalPresentationOverFullScreen</span> <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">8</span>_0),</div><div class="line">        <span class="built_in">UIModalPresentationOverCurrentContext</span> <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">8</span>_0),</div><div class="line">        <span class="built_in">UIModalPresentationPopover</span> <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">8</span>_0) __TVOS_PROHIBITED,</div><div class="line">        <span class="built_in">UIModalPresentationNone</span> <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">7</span>_0) = <span class="number">-1</span>,         </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>平常开发中，我们使用最多的就是<code>UIModalPresentationCustom</code>，如果我们不使用<code>UIModalPresentationCustom</code>，默认的系统会在我们调用“上下文”的<code>completeTransition</code>方法后会把fromVC移除掉。</p>
<p>如果我们想在<code>present/pop</code>执行动画的生命周期过程中，任意的在上下文中插入视图或者更改最终视图的大小等，使用<code>UIPresentationController</code>便可实现。我们来看<code>UIPresentationController</code>类的定义：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//上下文的view</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *containerView;</div><div class="line"></div><div class="line"><span class="comment">//即将布局</span></div><div class="line">- (<span class="keyword">void</span>)containerViewWillLayoutSubviews;</div><div class="line"><span class="comment">//正在布局</span></div><div class="line">- (<span class="keyword">void</span>)containerViewDidLayoutSubviews;</div><div class="line"></div><div class="line"><span class="comment">//返回模态跳转后的view（B控制器View）的最终frame  通常情况下要重写此方法</span></div><div class="line">- (<span class="built_in">CGRect</span>)frameOfPresentedViewInContainerView;</div><div class="line"></div><div class="line"><span class="comment">//周期方法</span></div><div class="line">- (<span class="keyword">void</span>)presentationTransitionWillBegin;</div><div class="line">- (<span class="keyword">void</span>)presentationTransitionDidEnd:(<span class="built_in">BOOL</span>)completed;</div><div class="line">- (<span class="keyword">void</span>)dismissalTransitionWillBegin;</div><div class="line">- (<span class="keyword">void</span>)dismissalTransitionDidEnd:(<span class="built_in">BOOL</span>)completed;</div></pre></td></tr></table></figure></p>
<p>如此，我们便可在视图周期方法中任意的添加和删除视图，以满足我们的需求。也可以在布局过程中，改变弹出视图的frame。切记，视图的添加和删除都是在上下文的view中进行的。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>了解完整个转场动画的框架，我们合理的使用框架中的协议和类，便能尽可能的满足我们的开发需求。至于该如何实现，大家可以动脑了~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS开发中，页面之间的跳转无外乎由&lt;code&gt;UINavigationController&lt;/code&gt;管理的&lt;code&gt;push&lt;/code&gt;或者&lt;code&gt;pop&lt;/code&gt;操作、以及由&lt;code&gt;UIViewController&lt;/code&gt;管理的&lt;code&gt;present&lt;/code&gt;和&lt;code&gt;dismiss&lt;/code&gt;操作，无论何种操作，iOS原生系统都为我们提供了页面之间的基础跳转动画。但是往往在开发中，由于各种功能需求，iOS原生系统提供的跳转动画并不能满足我们的需求，好在iOS早就给我们提供了一套自定义转场动画的解决方案，这篇文章就来详细了解一下转场动画。在了解这篇文章之前，先看看iOS提供的整个转场框架&lt;/p&gt;
&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/guiyongdong/Resource/blob/master/hexoImage/transition.png?raw=true&quot;/&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="http://www.guiyongdong.com/categories/Objective-C/"/>
    
    
      <category term="动画" scheme="http://www.guiyongdong.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>AFNetworking源码解析</title>
    <link href="http://www.guiyongdong.com/2017/02/15/AFNetworking%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.guiyongdong.com/2017/02/15/AFNetworking源码解析/</id>
    <published>2017-02-15T06:15:04.000Z</published>
    <updated>2017-03-01T02:52:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>网络是APP开发中非常重要的一部分，除非这个APP是本地自玩，否则就离不开网络。在iOS开发中，我们一般都会去使用别人造好的轮子，其中最有名也最常用的非<code>AFNetworking</code>莫属。这篇文章就深入探讨一下<code>AFNetworking</code>是如何工作的。</p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><hr>
<p>我们先来看看<code>AFNetworking</code>整个架构体系：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/af2.png?raw=true"><br></div>

<p>首先，我们有两个问题需要了解：</p>
<ul>
<li>如何使用NSURLSession发出HTTP请求</li>
<li>如何使用AFNetworking发出HTTP请求</li>
</ul>
<a id="more"></a>
<h4 id="NSURLSession"><a href="#NSURLSession" class="headerlink" title="NSURLSession"></a>NSURLSession</h4><hr>
<p><code>NSURLSession</code>以及与它相关的类为我们提供了下载内容的API，这个API提供了一系列的代理方法来支持身份认证，并且支持后台下载。</p>
<p>使用<code>NSURLSession</code>来运行HTTP请求并且获得数据总共有五个步骤：</p>
<ol>
<li>实例化一个<code>NSURLRequest/NSMutableURLRequest</code>,设置URL</li>
<li>通过<code>- shareSession</code>方法获取<code>NSURLSession</code></li>
<li>在session上调用<code>- dataTaskWithRequest:completionHandler:</code>方法返回一个<code>NSURLSessionDataTask</code></li>
<li>调用dataTask的<code>- resume</code>,开始执行任务</li>
<li>在completionHandler中将数据编码，返回字符串</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSMutableURLRequest</span> *request = [[<span class="built_in">NSMutableURLRequest</span> alloc] initWithURL:[[<span class="built_in">NSURL</span> alloc] initWithString:<span class="string">@"https://github.com"</span>]];</div><div class="line"><span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sharedSession];</div><div class="line"><span class="built_in">NSURLSessionDataTask</span> *task = [session dataTaskWithRequest:request</div><div class="line">                                       completionHandler:^(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">                                           <span class="built_in">NSString</span> *dataStr = [[<span class="built_in">NSString</span> alloc] initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">                                           <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, dataStr);</div><div class="line">                                       &#125;];</div><div class="line">[task resume];</div></pre></td></tr></table></figure>
<p>这一段代码可以说是使用<code>NSURLSession</code>发送请求最简单的一段代码了，当你运行这段代码会在控制台看到github首页的html</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang="en" class=""&gt;</div><div class="line">  &lt;head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# object: http://ogp.me/ns/object# article: http://ogp.me/ns/article# profile: http://ogp.me/ns/profile#"&gt;</div><div class="line">    &lt;meta charset='utf-8'&gt;</div><div class="line">        ...</div><div class="line">    &lt;/head&gt;</div><div class="line">    ...</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>想对<code>NSURLSession</code>有更深的了解，<a href="http://www.guiyongdong.com/2016/11/18/NSURLSession%E4%B8%8ENSURLConnection%E5%8C%BA%E5%88%AB/">请点这里</a></p>
<h4 id="AFNetworking"><a href="#AFNetworking" class="headerlink" title="AFNetworking"></a>AFNetworking</h4><hr>
<p>AFNetworking的使用也比较简单的，使用它来发送HTTP请求有两个步骤</p>
<ol>
<li>以服务器的主机地址或者域名生成一个<code>AFHTTPSessionManager</code>的实例</li>
<li>调用<code>- GET:parameters:progress:success:failure:</code>方法</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">AFHTTPSessionManager *manager = [[AFHTTPSessionManager alloc] initWithBaseURL:[[<span class="built_in">NSURL</span> alloc] initWithString:<span class="string">@"hostname"</span>]];</div><div class="line">[manager GET:<span class="string">@"relative_url"</span> parameters:<span class="literal">nil</span> progress:<span class="literal">nil</span></div><div class="line">    success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span> ,responseObject);</div><div class="line">    &#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, error);</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：在iOS9中，苹果默认全局HTTPS，如果你要发送不安全的HTTP请求，需要在info.plist中加入如下键值对才能发出不安全的HTTP请求<br><span></span><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/af3.jpeg?raw=true"><br>还有一件事情是要注意的是，AFNetworking默认接收json格式的响应（因为这是在iOS平台上的框架，一般不需要text/html）,如果想要返回html,需要设置<code>acceptableContentTypes</code>。</p>
</blockquote>
<h4 id="AFNetworking的调用栈"><a href="#AFNetworking的调用栈" class="headerlink" title="AFNetworking的调用栈"></a>AFNetworking的调用栈</h4><hr>
<p>刚才我们写了一个简单的网络请求，接下来，我们来看看<code>AFHTTPSessionManager</code>的初始化方法<code>- initWithBaseURL:</code>的调用栈：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- [AFHTTPSessionManager initWithBaseURL:]</div><div class="line">    - [AFHTTPSessionManager initWithBaseURL:sessionConfiguration:]</div><div class="line">        - [AFURLSessionManager initWithSessionConfiguration:]</div><div class="line">            - [<span class="built_in">NSURLSession</span> sessionWithConfiguration:delegate:delegateQueue:]</div><div class="line">            - [AFJSONResponseSerializer serializer] <span class="comment">// 负责序列化响应</span></div><div class="line">            - [AFSecurityPolicy defaultPolicy] <span class="comment">// 负责身份认证</span></div><div class="line">            - [AFNetworkReachabilityManager sharedManager] <span class="comment">// 查看网络连接情况</span></div><div class="line">        - [AFHTTPRequestSerializer serializer] <span class="comment">// 负责序列化请求</span></div><div class="line">        - [AFJSONResponseSerializer serializer] <span class="comment">// 负责序列化响应</span></div></pre></td></tr></table></figure>
<p>从这个初始化方法的调用栈，我们可以非常清晰地了解这个架构的结构：</p>
<ul>
<li>其中<code>AFURLSessionManager</code>是<code>AFHTTPSessionManager</code>的父类</li>
<li><code>AFURLSessionManager</code>负责生成<code>NSURLSession</code>的实例，管理<code>AFSecurityPolicy</code>和<code>AFNetworkReachabilityManager</code>,来保证请求的安全和查看网络连接情况，它有一个<code>AFJSONResponseSerializer</code>的实例来序列化HTTP响应</li>
<li><code>AFHTTPSessionManager</code>有着自己的<code>AFHTTPRequestSerialier</code>和<code>AFJSONResponseSerializer</code>来管理请求和响应的序列化，同时依赖父类提供的接口保证安全、监控网络状态，实现发出HTTP请求这一核心功能</li>
</ul>
<p>初始化方法很好地揭示了AFNetworking整个框架的架构，接下来我们要通过分析另一个方法<code>- GET:parameters:process:success:failure:</code>的调用栈，看一下HTTP请求是如何发出的：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- [AFHTTPSessionManager GET:parameters:process:success:failure:]</div><div class="line">    - [AFHTTPSessionManager dataTaskWithHTTPMethod:parameters:uploadProgress:downloadProgress:success:failure:] <span class="comment">// 返回 NSURLSessionDataTask #1</span></div><div class="line">        - [AFHTTPRequestSerializer requestWithMethod:URLString:parameters:error:] <span class="comment">// 返回 NSMutableURLRequest</span></div><div class="line">        - [AFURLSessionManager dataTaskWithRequest:uploadProgress:downloadProgress:completionHandler:] <span class="comment">// 返回 NSURLSessionDataTask #2</span></div><div class="line">            - [<span class="built_in">NSURLSession</span> dataTaskWithRequest:] <span class="comment">// 返回 NSURLSessionDataTask #3</span></div><div class="line">            - [AFURLSessionManager addDelegateForDataTask:uploadProgress:downloadProgress:completionHandler:]</div><div class="line">                - [AFURLSessionManagerTaskDelegate init]</div><div class="line">                - [AFURLSessionManager setDelegate:forTask:]</div><div class="line">    - [<span class="built_in">NSURLSessionDataTask</span> resume]</div></pre></td></tr></table></figure>
<p>在这里 <code>#1</code> <code>#2</code> <code>#3</code>处返回的是同一个dataTask，我们可以看到，在<code>#3</code>出调用的方法<code>- [NSURLSession dataTaskWithRequest:]</code>和只使用<code>NSURLSession</code>发出HTTP请求时调用的方法<code>- [NSURLSession dataTaskWithRequest:completionHandler:]</code>差不多。在这个地方返回dataTask之后，我们再调用<code>- resume</code>方法执行请求，并在某些事件执行时通知代理<code>AFURLSessionManagerTaskDelegate</code></p>
<h3 id="AFNetworking的核心AFURLSessionManager"><a href="#AFNetworking的核心AFURLSessionManager" class="headerlink" title="AFNetworking的核心AFURLSessionManager"></a>AFNetworking的核心AFURLSessionManager</h3><hr>
<p><code>AFURLSessionManager</code>绝对可以称得上是AFNetworking的核心</p>
<ul>
<li>负责创建和管理NSURLSession</li>
<li>管理NSURLSessionTask</li>
<li>实现NSURLSessionDelegate等协议中的代理方法</li>
<li>使用_AFURLSessionTaskSwizzling调剂方法</li>
<li>引入AFSecurityPolicy保证请求的安全</li>
<li>引入AFNetworkingReachabilityManager监控网络状态</li>
</ul>
<p>这一节将会着重介绍上面七个功能中的前五个，分析它是如何包装<code>NSURLSession</code>以及众多代理方法的。</p>
<h4 id="创建和管理NSURLSession"><a href="#创建和管理NSURLSession" class="headerlink" title="创建和管理NSURLSession"></a>创建和管理NSURLSession</h4><hr>
<p>使用<code>AFURLSessionManager</code>时，第一件要做的事情一定是初始化：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)initWithSessionConfiguration:(<span class="built_in">NSURLSessionConfiguration</span> *)configuration &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!configuration) &#123;</div><div class="line">        configuration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.sessionConfiguration = configuration;</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.operationQueue = [[<span class="built_in">NSOperationQueue</span> alloc] init];</div><div class="line">    <span class="keyword">self</span>.operationQueue.maxConcurrentOperationCount = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:<span class="keyword">self</span>.sessionConfiguration delegate:<span class="keyword">self</span> delegateQueue:<span class="keyword">self</span>.operationQueue];</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.responseSerializer = [AFJSONResponseSerializer serializer];</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.securityPolicy = [AFSecurityPolicy defaultPolicy];</div><div class="line"></div><div class="line"><span class="meta">#if !TARGET_OS_WATCH</span></div><div class="line">    <span class="keyword">self</span>.reachabilityManager = [AFNetworkReachabilityManager sharedManager];</div><div class="line"><span class="meta">#endif</span></div><div class="line"></div><div class="line">    <span class="keyword">self</span>.mutableTaskDelegatesKeyedByTaskIdentifier = [[<span class="built_in">NSMutableDictionary</span> alloc] init];</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.lock = [[<span class="built_in">NSLock</span> alloc] init];</div><div class="line">    <span class="keyword">self</span>.lock.name = AFURLSessionManagerLockName;</div><div class="line">    <span class="comment">//为已有的task设置代理</span></div><div class="line">    [<span class="keyword">self</span>.session getTasksWithCompletionHandler:^(<span class="built_in">NSArray</span> *dataTasks, <span class="built_in">NSArray</span> *uploadTasks, <span class="built_in">NSArray</span> *downloadTasks) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSURLSessionDataTask</span> *task <span class="keyword">in</span> dataTasks) &#123;</div><div class="line">            [<span class="keyword">self</span> addDelegateForDataTask:task uploadProgress:<span class="literal">nil</span> downloadProgress:<span class="literal">nil</span> completionHandler:<span class="literal">nil</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSURLSessionUploadTask</span> *uploadTask <span class="keyword">in</span> uploadTasks) &#123;</div><div class="line">            [<span class="keyword">self</span> addDelegateForUploadTask:uploadTask progress:<span class="literal">nil</span> completionHandler:<span class="literal">nil</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSURLSessionDownloadTask</span> *downloadTask <span class="keyword">in</span> downloadTasks) &#123;</div><div class="line">            [<span class="keyword">self</span> addDelegateForDownloadTask:downloadTask progress:<span class="literal">nil</span> destination:<span class="literal">nil</span> completionHandler:<span class="literal">nil</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在初始化方法中，需要完成初始化一些自己持有的特例：</p>
<ol>
<li>初始化 <strong>会话配置</strong> (NSURLSessionConfiguration)，默认为<code>defaultSessionConfiguration</code></li>
<li>初始化 <strong>会话</strong> (session)，并设置会话的代理以及代理列队</li>
<li>初始化管理 <strong>响应序列化</strong> (AFJSONResponseSerializer)，<strong>安全认证</strong> (AFSecurityPolicy) 以及 <strong>监控网络状态</strong> (AFNetworkReachabilityManager) 的实例</li>
<li>初始化保存data task的字典(mutableTaskDelegatesKeysByTaskIdentifier)</li>
</ol>
<h4 id="管理NSURLSessionTask"><a href="#管理NSURLSessionTask" class="headerlink" title="管理NSURLSessionTask"></a>管理NSURLSessionTask</h4><hr>
<p>接下来，在获得了<code>AFURLSessionManager</code>的实例之后，我们可以通过以下方法创建<code>NSURLSessionDataTask</code>的实例：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">NSURLSessionDataTask</span> *)dataTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request</div><div class="line">                               uploadProgress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *uploadProgress)) uploadProgressBlock</div><div class="line">                             downloadProgress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *downloadProgress)) downloadProgressBlock</div><div class="line">                            completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> _Nullable responseObject,  <span class="built_in">NSError</span> * _Nullable error))completionHandler;</div><div class="line"></div><div class="line">- (<span class="built_in">NSURLSessionUploadTask</span> *)uploadTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request</div><div class="line">                                         fromFile:(<span class="built_in">NSURL</span> *)fileURL</div><div class="line">                                         progress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *uploadProgress)) uploadProgressBlock</div><div class="line">                                completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> _Nullable responseObject, <span class="built_in">NSError</span>  * _Nullable error))completionHandler;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">- (<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request</div><div class="line">                                             progress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *downloadProgress)) downloadProgressBlock</div><div class="line">                                          destination:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> * (^)(<span class="built_in">NSURL</span> *targetPath, <span class="built_in">NSURLResponse</span> *response))destination</div><div class="line">                                    completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSURL</span> * _Nullable filePath, <span class="built_in">NSError</span> * _Nullable error))completionHandler;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>这里省略了一些返回NSURLSessionTask的方法，因为这些接口的形式都是差不多的。</p>
<p>我们将以 <code>[AFURLSessionManager dataTaskWithRequest:uploadProgress:downloadProgress:completionHandler:]</code>方法的实现为例，分析它是如何实例化并返回一个<code>NSURLSessionTask</code>的实例的：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">NSURLSessionDataTask</span> *)dataTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request</div><div class="line">                               uploadProgress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *uploadProgress)) uploadProgressBlock</div><div class="line">                             downloadProgress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *downloadProgress)) downloadProgressBlock</div><div class="line">                            completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> _Nullable responseObject,  <span class="built_in">NSError</span> * _Nullable error))completionHandler &#123;</div><div class="line"></div><div class="line">    __block <span class="built_in">NSURLSessionDataTask</span> *dataTask = <span class="literal">nil</span>;</div><div class="line">    url_session_manager_create_task_safely(^&#123;</div><div class="line">        dataTask = [<span class="keyword">self</span>.session dataTaskWithRequest:request];</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    [<span class="keyword">self</span> addDelegateForDataTask:dataTask uploadProgress:uploadProgressBlock downloadProgress:downloadProgressBlock completionHandler:completionHandler];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> dataTask;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>调用<code>- [NSURLSession dataTaskWithRequest:]</code>方法传入<code>NSURLRequest</code></li>
<li>调用<code>- [AFURLSessionManager addDelegateForDataTask:uploadProgress:downloadProgress:completionHandler:]</code>方法返回一个<code>AFURLSessionManagerTaskDelegate</code>对象</li>
<li>将<code>completionHandler</code> <code>uploadProgressBlock</code>和<code>downloadProgressBlock</code>传入该对象并在相应事件发生时进行回调</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addDelegateForDataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</div><div class="line">                uploadProgress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *uploadProgress)) uploadProgressBlock</div><div class="line">              downloadProgress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *downloadProgress)) downloadProgressBlock</div><div class="line">             completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> responseObject, <span class="built_in">NSError</span> *error))completionHandler</div><div class="line">&#123;</div><div class="line">    AFURLSessionManagerTaskDelegate *delegate = [[AFURLSessionManagerTaskDelegate alloc] init];</div><div class="line">    delegate.manager = <span class="keyword">self</span>;</div><div class="line">    delegate.completionHandler = completionHandler;</div><div class="line"></div><div class="line">    dataTask.taskDescription = <span class="keyword">self</span>.taskDescriptionForSessionTasks;</div><div class="line">    [<span class="keyword">self</span> setDelegate:delegate forTask:dataTask];</div><div class="line"></div><div class="line">    delegate.uploadProgressBlock = uploadProgressBlock;</div><div class="line">    delegate.downloadProgressBlock = downloadProgressBlock;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个方法中同时调用了另一个方法<code>- [AFURLSessionManager setDelegate:forTask:]</code>来设置代理：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setDelegate:(AFURLSessionManagerTaskDelegate *)delegate</div><div class="line">            forTask:(<span class="built_in">NSURLSessionTask</span> *)task</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSParameterAssert</span>(task);</div><div class="line">    <span class="built_in">NSParameterAssert</span>(delegate);</div><div class="line"></div><div class="line">    [<span class="keyword">self</span>.lock lock];</div><div class="line">    <span class="keyword">self</span>.mutableTaskDelegatesKeyedByTaskIdentifier[@(task.taskIdentifier)] = delegate;</div><div class="line">    [delegate setupProgressForTask:task];</div><div class="line">    [<span class="keyword">self</span> addNotificationObserverForTask:task];</div><div class="line">    [<span class="keyword">self</span>.lock unlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正如上面所提到的，<code>AFURLSessionManager</code>就是通过字典<code>mutableTaskDelegatesKeyedByTaskIdentifier</code>来存储并管理每一个<code>NSURLSessionTask</code>，它以<code>taskIdentifier</code>为键存储task。</p>
<p>该方法使用<code>NSLock</code>来保证不同线程使用<code>mutableTaskDelegatesKeyedByTaskIdentifier</code>时，不会出现线程竞争的问题。</p>
<p>同时调用<code>-setupProgressForTask</code>，我们会在下面具体介绍这个方法。</p>
<h4 id="实现NSURLSessionDelegate等协议中的代理方法"><a href="#实现NSURLSessionDelegate等协议中的代理方法" class="headerlink" title="实现NSURLSessionDelegate等协议中的代理方法"></a>实现NSURLSessionDelegate等协议中的代理方法</h4><hr>
<p>在<code>AFURLSessionManager</code>的头文件中可以看到，它遵循了多个协议，其中包括：</p>
<ul>
<li>NSURLSessionDelegate</li>
<li>NSURLSessionTaskDelegate</li>
<li>NSURLSessionDataDelegate</li>
<li>NSURLSessionDownloadDelegate</li>
</ul>
<p>它的初始化方法<code>- [AFURLSessionManager initWithSessionConfiguration:]</code>将<code>NSURLSession</code>的代理指向self，然后实现这些方法，提供更简洁的block的接口：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setSessionDidBecomeInvalidBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSError</span> *error))block;</div><div class="line">- (<span class="keyword">void</span>)setSessionDidReceiveAuthenticationChallengeBlock:(<span class="keyword">nullable</span> <span class="built_in">NSURLSessionAuthChallengeDisposition</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLAuthenticationChallenge</span> *challenge, <span class="built_in">NSURLCredential</span> * _Nullable __autoreleasing * _Nullable credential))block;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>它为所有的代理协议都提供了对应的block接口，方法实现的思路都是相似的，我们以<code>- [AFNRLSessionManager setSessionDidBecomeInvalidBlock:]</code>为例。</p>
<p>首先调用setter方法，将block存入<code>sessionDidBecomeInvalid</code>属性中：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setSessionDidBecomeInvalidBlock:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSError</span> *error))block &#123;</div><div class="line">    <span class="keyword">self</span>.sessionDidBecomeInvalid = block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当代理方法调用时，如果存在对应的block，会执行对应的block:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session</div><div class="line">didBecomeInvalidWithError:(<span class="built_in">NSError</span> *)error  </div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.sessionDidBecomeInvalid) &#123;</div><div class="line">        <span class="keyword">self</span>.sessionDidBecomeInvalid(session, error);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:AFURLSessionDidInvalidateNotification object:session];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他相似的接口实现也都差不多，这里直接跳过了。</p>
<h4 id="使用AFURLSessionManagerTaskDelegate管理进度"><a href="#使用AFURLSessionManagerTaskDelegate管理进度" class="headerlink" title="使用AFURLSessionManagerTaskDelegate管理进度"></a>使用AFURLSessionManagerTaskDelegate管理进度</h4><hr>
<p>在上面我们提到过<code>AFURLSessionManagerTaskDelegate</code>类，它主要为task提供进度管理功能，并在task结束时回调，也就是调用在<code>- [AFURLSessionManager dataTaskWithRequest:uploadProgress:downloadProgress:completionHandler:]</code>等方法中传入的<code>completionHandler</code>。</p>
<p>我们首先分析一下<code>AFURLSessionManagerTaskDelegate</code>是如何对进度进行跟踪的：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setupProgressForTask:(<span class="built_in">NSURLSessionTask</span> *)task &#123;</div><div class="line"></div><div class="line">    <span class="meta">#1：设置在上传进度或者下载进度状态改变时的回调</span></div><div class="line"></div><div class="line">    <span class="meta">#2：KVO</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法的实现有两个部分，一部分是对代理持有的两个属性<code>uploadProgress</code>和<code>downloadProgress</code>设置回调</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">__<span class="keyword">weak</span> __typeof__(task) weakTask = task;</div><div class="line"></div><div class="line"><span class="keyword">self</span>.uploadProgress.totalUnitCount = task.countOfBytesExpectedToSend;  </div><div class="line">[<span class="keyword">self</span>.uploadProgress setCancellable:<span class="literal">YES</span>];</div><div class="line">[<span class="keyword">self</span>.uploadProgress setCancellationHandler:^&#123;</div><div class="line">   __typeof__(weakTask) strongTask = weakTask;</div><div class="line">   [strongTask cancel];</div><div class="line">&#125;];</div><div class="line">[<span class="keyword">self</span>.uploadProgress setPausable:<span class="literal">YES</span>];</div><div class="line">[<span class="keyword">self</span>.uploadProgress setPausingHandler:^&#123;</div><div class="line">   __typeof__(weakTask) strongTask = weakTask;</div><div class="line">   [strongTask suspend];</div><div class="line">&#125;];</div><div class="line"><span class="keyword">if</span> ([<span class="keyword">self</span>.uploadProgress respondsToSelector:<span class="keyword">@selector</span>(setResumingHandler:)]) &#123;  </div><div class="line">   [<span class="keyword">self</span>.uploadProgress setResumingHandler:^&#123;</div><div class="line">       __typeof__(weakTask) strongTask = weakTask;</div><div class="line">       [strongTask resume];</div><div class="line">   &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里只有对<code>uploadProgress</code>设置回调的代码，设置<code>downloadProgress</code>与这里完全相同</p>
<blockquote>
<p>主要目的是在对应<code>NSProgress</code>的状态改变时，调用<code>resume</code> <code>suspend</code>等方法改变task的状态。</p>
</blockquote>
<p>第二部分是对task和<code>NSProgress</code>属性进行键值观测：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[task addObserver:<span class="keyword">self</span></div><div class="line">      forKeyPath:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(countOfBytesReceived))</div><div class="line">         options:<span class="built_in">NSKeyValueObservingOptionNew</span></div><div class="line">         context:<span class="literal">NULL</span>];</div><div class="line">[task addObserver:<span class="keyword">self</span></div><div class="line">      forKeyPath:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(countOfBytesExpectedToReceive))</div><div class="line">         options:<span class="built_in">NSKeyValueObservingOptionNew</span></div><div class="line">         context:<span class="literal">NULL</span>];</div><div class="line"></div><div class="line">[task addObserver:<span class="keyword">self</span></div><div class="line">      forKeyPath:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(countOfBytesSent))</div><div class="line">         options:<span class="built_in">NSKeyValueObservingOptionNew</span></div><div class="line">         context:<span class="literal">NULL</span>];</div><div class="line">[task addObserver:<span class="keyword">self</span></div><div class="line">      forKeyPath:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(countOfBytesExpectedToSend))</div><div class="line">         options:<span class="built_in">NSKeyValueObservingOptionNew</span></div><div class="line">         context:<span class="literal">NULL</span>];</div><div class="line"></div><div class="line">[<span class="keyword">self</span>.downloadProgress addObserver:<span class="keyword">self</span></div><div class="line">                       forKeyPath:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(fractionCompleted))</div><div class="line">                          options:<span class="built_in">NSKeyValueObservingOptionNew</span></div><div class="line">                          context:<span class="literal">NULL</span>];</div><div class="line">[<span class="keyword">self</span>.uploadProgress addObserver:<span class="keyword">self</span></div><div class="line">                     forKeyPath:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(fractionCompleted))</div><div class="line">                        options:<span class="built_in">NSKeyValueObservingOptionNew</span></div><div class="line">                        context:<span class="literal">NULL</span>];</div></pre></td></tr></table></figure>
<p>在<code>observeValueForKeypath:ofObject:change:context:</code>方法中改变进度，并调用block</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *,<span class="keyword">id</span>&gt; *)change context:(<span class="keyword">void</span> *)context &#123;</div><div class="line">    <span class="keyword">if</span> ([object isKindOfClass:[<span class="built_in">NSURLSessionTask</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">        <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(countOfBytesReceived))]) &#123;</div><div class="line">            <span class="keyword">self</span>.downloadProgress.completedUnitCount = [change[<span class="string">@"new"</span>] longLongValue];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(countOfBytesExpectedToReceive))]) &#123;</div><div class="line">            <span class="keyword">self</span>.downloadProgress.totalUnitCount = [change[<span class="string">@"new"</span>] longLongValue];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(countOfBytesSent))]) &#123;</div><div class="line">            <span class="keyword">self</span>.uploadProgress.completedUnitCount = [change[<span class="string">@"new"</span>] longLongValue];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(countOfBytesExpectedToSend))]) &#123;</div><div class="line">            <span class="keyword">self</span>.uploadProgress.totalUnitCount = [change[<span class="string">@"new"</span>] longLongValue];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ([object isEqual:<span class="keyword">self</span>.downloadProgress]) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.downloadProgressBlock) &#123;</div><div class="line">            <span class="keyword">self</span>.downloadProgressBlock(object);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ([object isEqual:<span class="keyword">self</span>.uploadProgress]) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.uploadProgressBlock) &#123;</div><div class="line">            <span class="keyword">self</span>.uploadProgressBlock(object);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对象的某些属性改变时更新<code>NSProgress</code>对象或使用block传递<code>NSProgress</code>对象<br><code>self.uploadProgressBlock(object)</code>。</p>
<h4 id="代理方法-URLSession-task-didCompleteWithError"><a href="#代理方法-URLSession-task-didCompleteWithError" class="headerlink" title="代理方法 URLSession:task:didCompleteWithError:"></a>代理方法 URLSession:task:didCompleteWithError:</h4><hr>
<p>在每一个<code>NSURLSessionTask</code>结束时，都会在代理方法<code>URLSession:task:didCompleteWithError:</code>中：</p>
<ol>
<li>调用传入的<code>completionHander</code>block</li>
<li>发出<code>AFNetworkingTaskDidCompleteNotification</code>通知</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)URLSession:(__unused <span class="built_in">NSURLSession</span> *)session</div><div class="line">              task:(<span class="built_in">NSURLSessionTask</span> *)task</div><div class="line">didCompleteWithError:(<span class="built_in">NSError</span> *)error  </div><div class="line">&#123;</div><div class="line">    <span class="meta">#1：获取数据, 存储 `responseSerializer` 和 `downloadFileURL`</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (error) &#123;</div><div class="line">        <span class="meta">#2：在存在错误时调用 `completionHandler`</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="meta">#3：调用 `completionHandler`</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是整个代理方法的骨架，先看一下最简单的第一部分代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">__block <span class="built_in">NSMutableDictionary</span> *userInfo = [<span class="built_in">NSMutableDictionary</span> dictionary];  </div><div class="line">userInfo[AFNetworkingTaskDidCompleteResponseSerializerKey] = manager.responseSerializer;</div><div class="line"></div><div class="line"><span class="comment">//Performance Improvement from #2672</span></div><div class="line"><span class="built_in">NSData</span> *data = <span class="literal">nil</span>;  </div><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.mutableData) &#123;  </div><div class="line">   data = [<span class="keyword">self</span>.mutableData <span class="keyword">copy</span>];</div><div class="line">   <span class="comment">//We no longer need the reference, so nil it out to gain back some memory.</span></div><div class="line">   <span class="keyword">self</span>.mutableData = <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.downloadFileURL) &#123;  </div><div class="line">   userInfo[AFNetworkingTaskDidCompleteAssetPathKey] = <span class="keyword">self</span>.downloadFileURL;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (data) &#123;</div><div class="line">   userInfo[AFNetworkingTaskDidCompleteResponseDataKey] = data;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这部分代码从<code>mutableData</code>中取出数据，设置了<code>userInfo</code>。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">userInfo[AFNetworkingTaskDidCompleteErrorKey] = error;</div><div class="line"></div><div class="line">dispatch_group_async(manager.completionGroup ?: url_session_manager_completion_group(), manager.completionQueue ?: dispatch_get_main_queue(), ^&#123;  </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.completionHandler) &#123;</div><div class="line">        <span class="keyword">self</span>.completionHandler(task.response, responseObject, error);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:AFNetworkingTaskDidCompleteNotification object:task userInfo:userInfo];</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果当前manager持有<code>completionGroup</code>或者<code>completionQueue</code>就是用它们。否则会创建一个<code>dispatch_group_t</code>并在主线程中调用<code>completionHandler</code>并发送通知（在主线程中）。</p>
<p>如果在执行当前task时没有遇到错误，那么先对数据进行序列化，然后同样调用block并发送通知。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">dispatch_async</span>(url_session_manager_processing_queue(), ^&#123;  </div><div class="line">    <span class="built_in">NSError</span> *serializationError = <span class="literal">nil</span>;</div><div class="line">    responseObject = [manager.responseSerializer responseObjectForResponse:task.response data:data error:&amp;serializationError];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.downloadFileURL) &#123;</div><div class="line">        responseObject = <span class="keyword">self</span>.downloadFileURL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (responseObject) &#123;</div><div class="line">        userInfo[AFNetworkingTaskDidCompleteSerializedResponseKey] = responseObject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (serializationError) &#123;</div><div class="line">        userInfo[AFNetworkingTaskDidCompleteErrorKey] = serializationError;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dispatch_group_async(manager.completionGroup ?: url_session_manager_completion_group(), manager.completionQueue ?: dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.completionHandler) &#123;</div><div class="line">            <span class="keyword">self</span>.completionHandler(task.response, responseObject, serializationError);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">            [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:AFNetworkingTaskDidCompleteNotification object:task userInfo:userInfo];</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="代理方法URLSession-dataTask-didReceiveData-和URLSession-downloadTask-didFinishDownloadingToURL-这两个代理方法分别会在收到数据或者完成下载对应文件时调用，作用分别是为mutableData追加数据和处理下载的文件："><a href="#代理方法URLSession-dataTask-didReceiveData-和URLSession-downloadTask-didFinishDownloadingToURL-这两个代理方法分别会在收到数据或者完成下载对应文件时调用，作用分别是为mutableData追加数据和处理下载的文件：" class="headerlink" title="代理方法URLSession:dataTask:didReceiveData:和URLSession:downloadTask:didFinishDownloadingToURL: 这两个代理方法分别会在收到数据或者完成下载对应文件时调用，作用分别是为mutableData追加数据和处理下载的文件："></a>代理方法URLSession:dataTask:didReceiveData:和URLSession:downloadTask:didFinishDownloadingToURL: 这两个代理方法分别会在收到数据或者完成下载对应文件时调用，作用分别是为mutableData追加数据和处理下载的文件：</h4><hr>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)URLSession:(__unused <span class="built_in">NSURLSession</span> *)session</div><div class="line">          dataTask:(__unused <span class="built_in">NSURLSessionDataTask</span> *)dataTask</div><div class="line">    didReceiveData:(<span class="built_in">NSData</span> *)data</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span>.mutableData appendData:data];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session</div><div class="line">      downloadTask:(<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTask</div><div class="line">didFinishDownloadingToURL:(<span class="built_in">NSURL</span> *)location  </div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSError</span> *fileManagerError = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">self</span>.downloadFileURL = <span class="literal">nil</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.downloadTaskDidFinishDownloading) &#123;</div><div class="line">        <span class="keyword">self</span>.downloadFileURL = <span class="keyword">self</span>.downloadTaskDidFinishDownloading(session, downloadTask, location);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.downloadFileURL) &#123;</div><div class="line">            [[<span class="built_in">NSFileManager</span> defaultManager] moveItemAtURL:location toURL:<span class="keyword">self</span>.downloadFileURL error:&amp;fileManagerError];</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (fileManagerError) &#123;</div><div class="line">                [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:AFURLSessionDownloadTaskDidFailToMoveFileNotification object:downloadTask userInfo:fileManagerError.userInfo];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用-AFURLSessionTaskSwizzling-调剂方法"><a href="#使用-AFURLSessionTaskSwizzling-调剂方法" class="headerlink" title="使用 _AFURLSessionTaskSwizzling 调剂方法"></a>使用 _AFURLSessionTaskSwizzling 调剂方法</h4><hr>
<p><code>_AFURLSessionTaskSwizzling</code>的唯一功能就是修改<code>NSURLSessionTask</code>的<code>resume</code>和<code>suspend</code>方法，使用下面的方法替换原有的实现</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)af_resume &#123;</div><div class="line">    <span class="built_in">NSAssert</span>([<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(state)], <span class="string">@"Does not respond to state"</span>);</div><div class="line">    <span class="built_in">NSURLSessionTaskState</span> state = [<span class="keyword">self</span> state];</div><div class="line">    [<span class="keyword">self</span> af_resume];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (state != <span class="built_in">NSURLSessionTaskStateRunning</span>) &#123;</div><div class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:AFNSURLSessionTaskDidResumeNotification object:<span class="keyword">self</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)af_suspend &#123;</div><div class="line">    <span class="built_in">NSAssert</span>([<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(state)], <span class="string">@"Does not respond to state"</span>);</div><div class="line">    <span class="built_in">NSURLSessionTaskState</span> state = [<span class="keyword">self</span> state];</div><div class="line">    [<span class="keyword">self</span> af_suspend];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (state != <span class="built_in">NSURLSessionTaskStateSuspended</span>) &#123;</div><div class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:AFNSURLSessionTaskDidSuspendNotification object:<span class="keyword">self</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样做的目的是为了在方法<code>resume</code>或者<code>suspend</code>被调用时发送通知。</p>
<p>具体方法调剂的过程是在<code>+load</code>方法中进行的</p>
<p><code>load</code>方法只会在整个文件被引入时调用一次</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">NSClassFromString</span>(<span class="string">@"NSURLSessionTask"</span>)) &#123;</div><div class="line">        <span class="built_in">NSURLSessionConfiguration</span> *configuration = [<span class="built_in">NSURLSessionConfiguration</span> ephemeralSessionConfiguration];</div><div class="line">        <span class="built_in">NSURLSession</span> * session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:configuration];</div><div class="line"><span class="meta">#pragma GCC diagnostic push</span></div><div class="line"><span class="meta">#pragma GCC diagnostic ignored <span class="meta-string">"-Wnonnull"</span></span></div><div class="line">        <span class="built_in">NSURLSessionDataTask</span> *localDataTask = [session dataTaskWithURL:<span class="literal">nil</span>];</div><div class="line"><span class="meta">#pragma clang diagnostic pop</span></div><div class="line">        IMP originalAFResumeIMP = method_getImplementation(class_getInstanceMethod([<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(af_resume)));</div><div class="line">        Class currentClass = [localDataTask <span class="keyword">class</span>];</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (class_getInstanceMethod(currentClass, <span class="keyword">@selector</span>(resume))) &#123;</div><div class="line">            Class superClass = [currentClass superclass];</div><div class="line">            IMP classResumeIMP = method_getImplementation(class_getInstanceMethod(currentClass, <span class="keyword">@selector</span>(resume)));</div><div class="line">            IMP superclassResumeIMP = method_getImplementation(class_getInstanceMethod(superClass, <span class="keyword">@selector</span>(resume)));</div><div class="line">            <span class="keyword">if</span> (classResumeIMP != superclassResumeIMP &amp;&amp;</div><div class="line">                originalAFResumeIMP != classResumeIMP) &#123;</div><div class="line">                [<span class="keyword">self</span> swizzleResumeAndSuspendMethodForClass:currentClass];</div><div class="line">            &#125;</div><div class="line">            currentClass = [currentClass superclass];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        [localDataTask cancel];</div><div class="line">        [session finishTasksAndInvalidate];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>首先用<code>NSClassFromString(@&quot;NSURLSessionTask&quot;)</code>判断当前部署的iOS版本是否含有类<code>NSURLSessionTask</code></li>
<li>因为iOS7和iOS8上对于<code>NSURLSesionTask</code>的实现不同，所以会通过<code>- [NSURLSession dataTaskWithURL:]</code>方法返回一个<code>NSURLSessionTask</code>实例</li>
<li>取得当前类<code>_AFURLSessionTaskSwizzling</code>中的实现<code>af_resume</code></li>
<li>判断当前类<code>currentClass</code>有<code>resume</code>方法</li>
<li>使用<code>swizzleResumeAndSuspendMethodForClass:</code>调剂该类的<code>resume</code>和<code>suspend</code>方法</li>
<li>currentClass = [currentClass superclass]</li>
</ol>
<h4 id="引入AFSecurityPolicy保证请求的安全"><a href="#引入AFSecurityPolicy保证请求的安全" class="headerlink" title="引入AFSecurityPolicy保证请求的安全"></a>引入AFSecurityPolicy保证请求的安全</h4><hr>
<p><code>AFSecurityPolicy</code>是<code>AFNetworking</code>用来保证HTTP请求安全的类，它被<code>AFURLSessionManager</code>持有，如果你在<code>AFURLSessionManager</code>的实现文件中搜索self.securityPolicy，你只会得到三条结果：</p>
<ol>
<li>初始化<code>self.securityPolicy = [AFSecurityPolicy defaultPolicy]</code></li>
<li>收到连接层的验证请求时</li>
<li>任务接收到验证请求时</li>
</ol>
<p>在API调用上，后两者都调用了<code>- [AFSecurityPolicy evaluateServerTrust:forDomain:]</code>方法来判断当前服务器是否被信任，我们会在接下来的文章中具体介绍这个方法的实现的作用。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session</div><div class="line">didReceiveChallenge:(<span class="built_in">NSURLAuthenticationChallenge</span> *)challenge</div><div class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionAuthChallengeDisposition</span> disposition, <span class="built_in">NSURLCredential</span> *credential))completionHandler</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSURLSessionAuthChallengeDisposition</span> disposition = <span class="built_in">NSURLSessionAuthChallengePerformDefaultHandling</span>;</div><div class="line">    __block <span class="built_in">NSURLCredential</span> *credential = <span class="literal">nil</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.sessionDidReceiveAuthenticationChallenge) &#123;</div><div class="line">        disposition = <span class="keyword">self</span>.sessionDidReceiveAuthenticationChallenge(session, challenge, &amp;credential);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> ([challenge.protectionSpace.authenticationMethod isEqualToString:<span class="built_in">NSURLAuthenticationMethodServerTrust</span>]) &#123;</div><div class="line">            <span class="keyword">if</span> ([<span class="keyword">self</span>.securityPolicy evaluateServerTrust:challenge.protectionSpace.serverTrust forDomain:challenge.protectionSpace.host]) &#123;</div><div class="line">                credential = [<span class="built_in">NSURLCredential</span> credentialForTrust:challenge.protectionSpace.serverTrust];</div><div class="line">                <span class="keyword">if</span> (credential) &#123;</div><div class="line">                    disposition = <span class="built_in">NSURLSessionAuthChallengeUseCredential</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    disposition = <span class="built_in">NSURLSessionAuthChallengePerformDefaultHandling</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                disposition = <span class="built_in">NSURLSessionAuthChallengeCancelAuthenticationChallenge</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            disposition = <span class="built_in">NSURLSessionAuthChallengePerformDefaultHandling</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (completionHandler) &#123;</div><div class="line">        completionHandler(disposition, credential);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果没有传入<code>taskDidReceiveAuthenticationChallenge</code> block，只有在上述方法返回YES时，才会获得认证凭证<code>credential</code>。</p>
<h4 id="引入AFNetworkingReachabilityManager监控网络状态"><a href="#引入AFNetworkingReachabilityManager监控网络状态" class="headerlink" title="引入AFNetworkingReachabilityManager监控网络状态"></a>引入AFNetworkingReachabilityManager监控网络状态</h4><hr>
<p>与<code>AFSecurityPolicy</code>相同，<code>AFURLSessionManager</code>对网络状态的监控是由<code>AFNetworkReachabilityManager</code>来负责的，它仅仅是持有一个<code>AFNetworkReachabilityManager</code>的对象。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr>
<ul>
<li><code>AFURLSessionManager</code>是对<code>NSURLSession</code>的封装</li>
<li>它通过<code>- [AFURLSessionManager dataTaskWithRequest:completionHandler:]</code>等接口创建<code>NSURLSessionDataTask</code>的实例</li>
<li>持有一个字典<code>mutableTaskDelegatesKeyedByTaskIdentifier</code>管理这些data task 实例</li>
<li>引入<code>AFURLSessionManagerTaskDelegate</code>来对传入的<code>uploadProgressBlock</code>        <code>downloadProgressBlock</code> <code>completionHandler</code> 在合适的时间进行调用</li>
<li>实现了全部的代理方法来提供block接口</li>
<li>通过方法调剂在data task 状态改变时，发出通知</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网络是APP开发中非常重要的一部分，除非这个APP是本地自玩，否则就离不开网络。在iOS开发中，我们一般都会去使用别人造好的轮子，其中最有名也最常用的非&lt;code&gt;AFNetworking&lt;/code&gt;莫属。这篇文章就深入探讨一下&lt;code&gt;AFNetworking&lt;/code&gt;是如何工作的。&lt;/p&gt;
&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;我们先来看看&lt;code&gt;AFNetworking&lt;/code&gt;整个架构体系：&lt;/p&gt;
&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/guiyongdong/Resource/blob/master/hexoImage/af2.png?raw=true&quot;/&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;首先，我们有两个问题需要了解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何使用NSURLSession发出HTTP请求&lt;/li&gt;
&lt;li&gt;如何使用AFNetworking发出HTTP请求&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="源码分析" scheme="http://www.guiyongdong.com/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="源码分析" scheme="http://www.guiyongdong.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>SDWebImage源码分析</title>
    <link href="http://www.guiyongdong.com/2017/01/15/SDWebImage%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://www.guiyongdong.com/2017/01/15/SDWebImage源码分析/</id>
    <published>2017-01-15T07:14:25.000Z</published>
    <updated>2017-02-05T11:34:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>SDWebImage是一个开源的第三方库，它提供了UIImageView的一个分类，以支持从远程服务器下载并缓存图片的功能。它具有以下功能：</p>
<ol>
<li>提供UIImageView的一个分类，以支持网络图片的加载与缓存管理</li>
<li>一个异步的图片加载器</li>
<li>一个异步的内存+磁盘图片缓存</li>
<li>支持GIF图片</li>
<li>支持WebP图片</li>
<li>后台图片解压缩处理</li>
<li>确保同一个URL不会被反复加载</li>
<li>确保下载及缓存时，主线程不被堵塞</li>
</ol>
<p>从github上对SDWebImage使用情况可以看出，SDWebImage在图片下载及缓存的处理还是被认可的。在本文中，我们主要从源码的角度来分析一下SDWebImage的实现机制。讨论的内容将主要集中在图片的下载及缓存，而不包含对GIF图片及WebP图片的支持操作。不过在3.8.2版本以后，SDWebImage将会使用NSURLSession代替原来的NSURLConnection，主要是更新的是下载功能部分。具体变化可以看:<a href="https://github.com/rs/SDWebImage/blob/master/Docs/SDWebImage-4.0-Migration-guide.md" target="_blank" rel="external">点这里</a>。目前截止到当前时间，最新的版本为4.0.0-beta2,这篇文章是在4.0.0-beta2基础上进行剖析。</p>
<a id="more"></a>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>在下载的过程中，程序会根据设置的不同的下载选项，执行不同的操作。下载选项由枚举<code>SDWebImageDownloaderOptions</code>定义，具体如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, SDWebImageDownloaderOptions) &#123;</div><div class="line">    SDWebImageDownloaderLowPriority = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</div><div class="line">    SDWebImageDownloaderProgressiveDownload = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 默认情况下请求不使用NSURLCache，如果设置该选项，则以默认的缓存策略来使用NSURLCache</span></div><div class="line">    SDWebImageDownloaderUseNSURLCache = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 如果从NSURLCache缓存中读取图片，则使用nil作为参数来调用完成block</span></div><div class="line">    SDWebImageDownloaderIgnoreCachedResponse = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</div><div class="line">    </div><div class="line">	<span class="comment">// 在iOS 4+系统上，允许程序进入后台后继续下载图片。该操作通过向系统申请额外的时间来完成后台下载。如果后台任务终止，则操作会被取消</span></div><div class="line">    SDWebImageDownloaderContinueInBackground = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 通过设置NSMutableURLRequest.HTTPShouldHandleCookies = YES来处理存储在NSHTTPCookieStore中的cookie</span></div><div class="line">    SDWebImageDownloaderHandleCookies = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 允许不受信任的SSL证书。主要用于测试目的。</span></div><div class="line">    SDWebImageDownloaderAllowInvalidSSLCertificates = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 将图片下载放到高优先级队列中</span></div><div class="line">    SDWebImageDownloaderHighPriority = <span class="number">1</span> &lt;&lt; <span class="number">7</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>可以看出，这些选项主要涉及到下载的优先级、缓存、后台任务执行、cookie处理以及认证几个方面.</p>
<h4 id="下载顺序"><a href="#下载顺序" class="headerlink" title="下载顺序"></a>下载顺序</h4><p>SDWebImage的下载操作是按一定顺序来处理的，它定义了两种下载顺序，如下所示：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, SDWebImageDownloaderExecutionOrder) &#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 以队列的方式，按照先进先出的顺序下载。这是默认的下载顺序</span></div><div class="line">    SDWebImageDownloaderFIFOExecutionOrder,</div><div class="line">    </div><div class="line">    <span class="comment">// 以栈的方式，按照后进先出的顺序下载。</span></div><div class="line">    SDWebImageDownloaderLIFOExecutionOrder</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="下载管理器"><a href="#下载管理器" class="headerlink" title="下载管理器"></a>下载管理器</h4><p>SDWebImageDownloader下载管理器是一个单例5类，它主要负责图片的下载操作的管理。图片的下载是放在一个NSOperationQueue操作队列中来完成的，其声明如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSOperationQueue</span> *downloadQueue;</div></pre></td></tr></table></figure>
<p>默认情况下，队列最大并发数是6.如果需要的话，我们可以通过SDWebImageDownloader类的<code>maxConcurrentDownloads</code>属性来修改。</p>
<p>所有下载操作的网络响应序列化处理是放在一个自定义的并行调度队列中来处理的，其声明及定义如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (SDDispatchQueueSetterSementics, <span class="keyword">nonatomic</span>) <span class="built_in">dispatch_queue_t</span> barrierQueue;</div><div class="line">- (<span class="keyword">id</span>)init &#123;</div><div class="line">    <span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</div><div class="line">        ...</div><div class="line">        _barrierQueue = dispatch_queue_create(<span class="string">"com.hackemist.SDWebImageDownloaderBarrierQueue"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">		...</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每一个图片的下载都会对应一些回调操作，如下载进度回调，下载完成回调等，这些回调操作是以block形式来呈现，为此在<code>SDWebImageDownloader.h</code>中定义了几个block，如下所示：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 下载进度</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^SDWebImageDownloaderProgressBlock)(<span class="built_in">NSInteger</span> receivedSize, <span class="built_in">NSInteger</span> expectedSize);</div><div class="line"><span class="comment">// 下载完成</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^SDWebImageDownloaderCompletedBlock)(<span class="built_in">UIImage</span> *image, <span class="built_in">NSData</span> *data, <span class="built_in">NSError</span> *error, <span class="built_in">BOOL</span> finished);</div><div class="line"><span class="comment">// Header过滤</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NSDictionary</span> *(^SDWebImageDownloaderHeadersFilterBlock)(<span class="built_in">NSURL</span> *url, <span class="built_in">NSDictionary</span> *headers);</div></pre></td></tr></table></figure>
<p>图片下载的这些回调信息存储在SDWebImageDownloader类的<code>URLOperations</code>属性中，该属性是一个字典，key是图片的URL地址，value则是一个<code>SDWebImageDownloaderOperation</code>对象，包含每个图片的多组回调信息。由于我们允许多个图片同时下载，因此可能会有多个线程同时操作<code>URLOperations</code>属性。为了保证<code>URLOperations</code>操作（添加、删除）的线程安全性，SDWebImageDownloader将这些操作作为一个个任务放到barrierQueue队列中，并设置屏障来确保同一时间只有一个线程操作<code>URLOperations</code>属性，我们以添加操作为例，如下代码所示：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> SDWebImageDownloadToken *)addProgressCallback:(SDWebImageDownloaderProgressBlock)progressBlock</div><div class="line">                                           completedBlock:(SDWebImageDownloaderCompletedBlock)completedBlock</div><div class="line">                                                   forURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</div><div class="line">                                           createCallback:(SDWebImageDownloaderOperation *(^)())createCallback &#123;</div><div class="line">    </div><div class="line">	...</div><div class="line">	</div><div class="line">    <span class="comment">// 1. 以dispatch_barrier_sync操作来保证同一时间只有一个线程能对URLOperations进行操作</span></div><div class="line">    dispatch_barrier_sync(<span class="keyword">self</span>.barrierQueue, ^&#123;</div><div class="line">        SDWebImageDownloaderOperation *operation = <span class="keyword">self</span>.URLOperations[url];</div><div class="line">        <span class="keyword">if</span> (!operation) &#123;</div><div class="line">        	<span class="comment">//2. 处理第一次URL的下载</span></div><div class="line">            operation = createCallback();</div><div class="line">            <span class="keyword">self</span>.URLOperations[url] = operation;</div><div class="line"></div><div class="line">            __<span class="keyword">weak</span> SDWebImageDownloaderOperation *woperation = operation;</div><div class="line">            operation.completionBlock = ^&#123;</div><div class="line">              SDWebImageDownloaderOperation *soperation = woperation;</div><div class="line">              <span class="keyword">if</span> (!soperation) <span class="keyword">return</span>;</div><div class="line">              <span class="keyword">if</span> (<span class="keyword">self</span>.URLOperations[url] == soperation) &#123;</div><div class="line">                  [<span class="keyword">self</span>.URLOperations removeObjectForKey:url];</div><div class="line">              &#125;;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 3. 处理同一URL的同步下载请求的单个下载</span></div><div class="line">        <span class="keyword">id</span> downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock];</div><div class="line"></div><div class="line">        token = [SDWebImageDownloadToken new];</div><div class="line">        token.url = url;</div><div class="line">        token.downloadOperationCancelToken = downloadOperationCancelToken;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> token;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>整个下载管理器对于下载请求的管理都是放在<code>downloadImageWithURL:options:progress:completed:</code>方法里面来处理的，该方法调用了上面所提到的<code>addProgressCallback:andCompletedBlock:forURL:createCallback:</code>方法来将请求的信息存入管理器中，同时在创建回调的block中创建新的操作，配置之后将其放入<code>downloadQueue</code>操作队列中，最后方法返回新创建的操作。其具体实现如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> SDWebImageDownloadToken *)downloadImageWithURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</div><div class="line">                                                   options:(SDWebImageDownloaderOptions)options</div><div class="line">                                                  progress:(<span class="keyword">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</div><div class="line">                                                 completed:(<span class="keyword">nullable</span> SDWebImageDownloaderCompletedBlock)completedBlock &#123;</div><div class="line">    __<span class="keyword">weak</span> SDWebImageDownloader *wself = <span class="keyword">self</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> addProgressCallback:progressBlock completedBlock:completedBlock forURL:url createCallback:^SDWebImageDownloaderOperation *&#123;</div><div class="line">        __<span class="keyword">strong</span> __<span class="keyword">typeof</span> (wself) sself = wself;</div><div class="line">        <span class="comment">//超时时间</span></div><div class="line">        <span class="built_in">NSTimeInterval</span> timeoutInterval = sself.downloadTimeout;</div><div class="line">        <span class="keyword">if</span> (timeoutInterval == <span class="number">0.0</span>) &#123;</div><div class="line">            timeoutInterval = <span class="number">15.0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 1. 创建请求对象，并根据options参数设置其属性</span></div><div class="line">        <span class="comment">// 为了避免潜在的重复缓存(NSURLCache + SDImageCache)，如果没有明确告知需要缓存，则禁用图片请求的缓存操作</span></div><div class="line">        <span class="built_in">NSMutableURLRequest</span> *request = [[<span class="built_in">NSMutableURLRequest</span> alloc] initWithURL:url cachePolicy:(options &amp; SDWebImageDownloaderUseNSURLCache ? <span class="built_in">NSURLRequestUseProtocolCachePolicy</span> : <span class="built_in">NSURLRequestReloadIgnoringLocalCacheData</span>) timeoutInterval:timeoutInterval];</div><div class="line">        request.HTTPShouldHandleCookies = (options &amp; SDWebImageDownloaderHandleCookies);</div><div class="line">        request.HTTPShouldUsePipelining = <span class="literal">YES</span>;</div><div class="line">        <span class="keyword">if</span> (sself.headersFilter) &#123;</div><div class="line">            request.allHTTPHeaderFields = sself.headersFilter(url, [sself.HTTPHeaders <span class="keyword">copy</span>]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            request.allHTTPHeaderFields = sself.HTTPHeaders;</div><div class="line">        &#125;</div><div class="line">        SDWebImageDownloaderOperation *operation = [[sself.operationClass alloc] initWithRequest:request inSession:sself.session options:options];</div><div class="line">        operation.shouldDecompressImages = sself.shouldDecompressImages;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (sself.urlCredential) &#123;</div><div class="line">            operation.credential = sself.urlCredential;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sself.username &amp;&amp; sself.password) &#123;</div><div class="line">            operation.credential = [<span class="built_in">NSURLCredential</span> credentialWithUser:sself.username password:sself.password persistence:<span class="built_in">NSURLCredentialPersistenceForSession</span>];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (options &amp; SDWebImageDownloaderHighPriority) &#123;</div><div class="line">            operation.queuePriority = <span class="built_in">NSOperationQueuePriorityHigh</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options &amp; SDWebImageDownloaderLowPriority) &#123;</div><div class="line">            operation.queuePriority = <span class="built_in">NSOperationQueuePriorityLow</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 2. 将操作加入到操作队列downloadQueue中</span></div><div class="line">        <span class="comment">// 如果是LIFO顺序，则将新的操作作为原队列中最后一个操作的依赖，然后将新操作设置为最后一个操作</span></div><div class="line">        [sself.downloadQueue addOperation:operation];</div><div class="line">        <span class="keyword">if</span> (sself.executionOrder == SDWebImageDownloaderLIFOExecutionOrder) &#123;</div><div class="line">            <span class="comment">// Emulate LIFO execution order by systematically adding new operations as last operation's dependency</span></div><div class="line">            [sself.lastAddedOperation addDependency:operation];</div><div class="line">            sself.lastAddedOperation = operation;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> operation;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外，每个下载操作的超时时间可以通过downloadTimeout属性来设置，默认值为15秒。</p>
<h4 id="下载操作"><a href="#下载操作" class="headerlink" title="下载操作"></a>下载操作</h4><p>每个图片的下载操作都是一个Operation操作。。我们在上面分析过这个操作的创建及加入操作队列的过程。现在我们来看看单个操作的具体实现。</p>
<p>SDWebImage定义了一个协议，即SDWebImageOperation作为图片下载操作的基础协议。它只声明了一个cancel方法，用于取消操作。协议的具体声明如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">SDWebImageOperation</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line">- (<span class="keyword">void</span>)cancel;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>SDWebImage还定义了一个下载协议，即SDWebImageDownloaderOperationInterface，它允许用户自定义下载操作，当然，SDWebImage也提供了自己的下载类，即<code>SDWebImageDownloaderOperation</code>，它继承自NSOperation，并采用了<code>SDWebImageOperation</code>和<code>SDWebImageDownloaderOperationInterface</code>协议。并且实现他们的代理方法。</p>
<p>对于图片的下载，SDWebImageDownloaderOperation完全依赖于URL加载系统中的NSURLSession类。我们先来分析一下SDWebImageDownloaderOperation类中对于图片实际数据的下载处理，即NSURLSessionDataDelegate和NSURLSessionDataDelegate各个代理方法的实现。(ps 有关NSURLSession类的具体介绍<a href="http://www.guiyongdong.com/2016/11/18/NSURLSession%E4%B8%8ENSURLConnection%E5%8C%BA%E5%88%AB/">请戳这里</a>)</p>
<p>我们前面说过SDWebImageDownloaderOperation类是继承自NSOperation类。它没有简单的实现main方法，而是采用更加灵活的start方法，以便自己管理下载的状态。</p>
<p>在start方法中，创建了我们下载所使用的NSURLSession对象，开启了图片的下载，同时抛出一个下载开始的通知。当然，如果我们期望下载在后台处理，则只需要配置我们的下载选项，使其包含SDWebImageDownloaderContinueInBackground选项。start方法的具体实现如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)start &#123;</div><div class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</div><div class="line">    	<span class="comment">// 管理下载状态，如果已取消，则重置当前下载并设置完成状态为YES</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.isCancelled) &#123;</div><div class="line">            <span class="keyword">self</span>.finished = <span class="literal">YES</span>;</div><div class="line">            [<span class="keyword">self</span> reset];</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">		...</div><div class="line"></div><div class="line">        <span class="built_in">NSURLSession</span> *session = <span class="keyword">self</span>.unownedSession;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">self</span>.unownedSession) &#123;</div><div class="line">        		<span class="comment">//如果session为空，创建session</span></div><div class="line">            <span class="built_in">NSURLSessionConfiguration</span> *sessionConfig = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</div><div class="line">            sessionConfig.timeoutIntervalForRequest = <span class="number">15</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">self</span>.ownedSession = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:sessionConfig</div><div class="line">                                                              delegate:<span class="keyword">self</span></div><div class="line">                                                         delegateQueue:<span class="literal">nil</span>];</div><div class="line">            session = <span class="keyword">self</span>.ownedSession;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//创建下载任务</span></div><div class="line">        <span class="keyword">self</span>.dataTask = [session dataTaskWithRequest:<span class="keyword">self</span>.request];</div><div class="line">        <span class="keyword">self</span>.executing = <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//开启下载任务</span></div><div class="line">    [<span class="keyword">self</span>.dataTask resume];</div><div class="line">	</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.dataTask) &#123;</div><div class="line">        <span class="keyword">for</span> (SDWebImageDownloaderProgressBlock progressBlock <span class="keyword">in</span> [<span class="keyword">self</span> callbacksForKey:kProgressCallbackKey]) &#123;</div><div class="line">            progressBlock(<span class="number">0</span>, <span class="built_in">NSURLResponseUnknownLength</span>, <span class="keyword">self</span>.request.URL);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 2. 在主线程抛出下载开始通知</span></div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">            [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadStartNotification object:<span class="keyword">self</span>];</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [<span class="keyword">self</span> callCompletionBlocksWithError:[<span class="built_in">NSError</span> errorWithDomain:<span class="built_in">NSURLErrorDomain</span> code:<span class="number">0</span> userInfo:@&#123;<span class="built_in">NSLocalizedDescriptionKey</span> : <span class="string">@"Connection can't be initialized"</span>&#125;]];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们先看看NSURLSessionDataDelegate代理的具体实现：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session</div><div class="line">          dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</div><div class="line">didReceiveResponse:(<span class="built_in">NSURLResponse</span> *)response</div><div class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionResponseDisposition</span> disposition))completionHandler &#123;</div><div class="line">    <span class="comment">//接收到服务器响应</span></div><div class="line">    <span class="keyword">if</span> (![response respondsToSelector:<span class="keyword">@selector</span>(statusCode)] || (((<span class="built_in">NSHTTPURLResponse</span> *)response).statusCode &lt; <span class="number">400</span> &amp;&amp; ((<span class="built_in">NSHTTPURLResponse</span> *)response).statusCode != <span class="number">304</span>)) &#123;</div><div class="line">    	<span class="comment">//如果服务器状态码正常，并且不是304，(因为304表示远程图片并没有改变，当前缓存的图片就可以使用)拿到图片的大小。并进度回调</span></div><div class="line">        <span class="built_in">NSInteger</span> expected = response.expectedContentLength &gt; <span class="number">0</span> ? (<span class="built_in">NSInteger</span>)response.expectedContentLength : <span class="number">0</span>;</div><div class="line">        <span class="keyword">self</span>.expectedSize = expected;</div><div class="line">        <span class="keyword">for</span> (SDWebImageDownloaderProgressBlock progressBlock <span class="keyword">in</span> [<span class="keyword">self</span> callbacksForKey:kProgressCallbackKey]) &#123;</div><div class="line">            progressBlock(<span class="number">0</span>, expected, <span class="keyword">self</span>.request.URL);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//根据返回数据大小创建一个数据Data容器</span></div><div class="line">        <span class="keyword">self</span>.imageData = [[<span class="built_in">NSMutableData</span> alloc] initWithCapacity:expected];</div><div class="line">        <span class="keyword">self</span>.response = response;</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">        		<span class="comment">//发送接收到服务器响应通知</span></div><div class="line">            [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadReceiveResponseNotification object:<span class="keyword">self</span>];</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">    	<span class="comment">//状态码错误</span></div><div class="line">        <span class="built_in">NSUInteger</span> code = ((<span class="built_in">NSHTTPURLResponse</span> *)response).statusCode;</div><div class="line">        </div><div class="line">        <span class="comment">//判断是不是304</span></div><div class="line">        <span class="keyword">if</span> (code == <span class="number">304</span>) &#123;</div><div class="line">            [<span class="keyword">self</span> cancelInternal];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            [<span class="keyword">self</span>.dataTask cancel];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">        		<span class="comment">//发出停止下载通知</span></div><div class="line">            [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadStopNotification object:<span class="keyword">self</span>];</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//错误回调</span></div><div class="line">        [<span class="keyword">self</span> callCompletionBlocksWithError:[<span class="built_in">NSError</span> errorWithDomain:<span class="built_in">NSURLErrorDomain</span> code:((<span class="built_in">NSHTTPURLResponse</span> *)response).statusCode userInfo:<span class="literal">nil</span>]];</div><div class="line">			<span class="comment">//重置</span></div><div class="line">        [<span class="keyword">self</span> done];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (completionHandler) &#123;</div><div class="line">        completionHandler(<span class="built_in">NSURLSessionResponseAllow</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask didReceiveData:(<span class="built_in">NSData</span> *)data &#123;</div><div class="line">    <span class="comment">//1. 接收服务器返回数据 往容器中追加数据</span></div><div class="line">    [<span class="keyword">self</span>.imageData appendData:data];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ((<span class="keyword">self</span>.options &amp; SDWebImageDownloaderProgressiveDownload) &amp;&amp; <span class="keyword">self</span>.expectedSize &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//2. 获取已下载数据总大小</span></div><div class="line">        <span class="keyword">const</span> <span class="built_in">NSInteger</span> totalSize = <span class="keyword">self</span>.imageData.length;</div><div class="line"></div><div class="line">        <span class="comment">// 3. 更新数据源，我们需要传入所有数据，而不仅仅是新数据</span></div><div class="line">        <span class="built_in">CGImageSourceRef</span> imageSource = <span class="built_in">CGImageSourceCreateWithData</span>((__bridge <span class="built_in">CFDataRef</span>)<span class="keyword">self</span>.imageData, <span class="literal">NULL</span>);</div><div class="line">        <span class="comment">// 4. 首次获取到数据时，从这些数据中获取图片的长、宽、方向属性值</span></div><div class="line">        <span class="keyword">if</span> (width + height == <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">CFDictionaryRef</span> properties = <span class="built_in">CGImageSourceCopyPropertiesAtIndex</span>(imageSource, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">            <span class="keyword">if</span> (properties) &#123;</div><div class="line">                <span class="built_in">NSInteger</span> orientationValue = <span class="number">-1</span>;</div><div class="line">                <span class="built_in">CFTypeRef</span> val = <span class="built_in">CFDictionaryGetValue</span>(properties, kCGImagePropertyPixelHeight);</div><div class="line">                <span class="keyword">if</span> (val) <span class="built_in">CFNumberGetValue</span>(val, kCFNumberLongType, &amp;height);</div><div class="line">                val = <span class="built_in">CFDictionaryGetValue</span>(properties, kCGImagePropertyPixelWidth);</div><div class="line">                <span class="keyword">if</span> (val) <span class="built_in">CFNumberGetValue</span>(val, kCFNumberLongType, &amp;width);</div><div class="line">                val = <span class="built_in">CFDictionaryGetValue</span>(properties, kCGImagePropertyOrientation);</div><div class="line">                <span class="keyword">if</span> (val) <span class="built_in">CFNumberGetValue</span>(val, kCFNumberNSIntegerType, &amp;orientationValue);</div><div class="line">                <span class="built_in">CFRelease</span>(properties);</div><div class="line"></div><div class="line">                <span class="comment">// 5. 当绘制到Core Graphics时，我们会丢失方向信息，这意味着有时候由initWithCGIImage创建的图片</span></div><div class="line">                <span class="comment">//    的方向会不对，所以在这边我们先保存这个信息并在后面使用。</span></div><div class="line"><span class="meta">#if SD_UIKIT || SD_WATCH</span></div><div class="line">                orientation = [[<span class="keyword">self</span> <span class="keyword">class</span>] orientationFromPropertyValue:(orientationValue == <span class="number">-1</span> ? <span class="number">1</span> : orientationValue)];</div><div class="line"><span class="meta">#endif</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 6. 图片还未下载完成</span></div><div class="line">        <span class="keyword">if</span> (width + height &gt; <span class="number">0</span> &amp;&amp; totalSize &lt; <span class="keyword">self</span>.expectedSize) &#123;</div><div class="line">            <span class="comment">// 7. 使用现有的数据创建图片对象，如果数据中存有多张图片，则取第一张</span></div><div class="line">            <span class="built_in">CGImageRef</span> partialImageRef = <span class="built_in">CGImageSourceCreateImageAtIndex</span>(imageSource, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="meta">#if SD_UIKIT || SD_WATCH</span></div><div class="line">            <span class="comment">// 8. 适用于iOS变形图像的解决方案。我的理解是由于iOS只支持RGB颜色空间，所以在此对下载下来的图片做个颜色空间转换处理。</span></div><div class="line">            <span class="keyword">if</span> (partialImageRef) &#123;</div><div class="line">                <span class="keyword">const</span> size_t partialHeight = <span class="built_in">CGImageGetHeight</span>(partialImageRef);</div><div class="line">                <span class="built_in">CGColorSpaceRef</span> colorSpace = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();</div><div class="line">                <span class="built_in">CGContextRef</span> bmContext = <span class="built_in">CGBitmapContextCreate</span>(<span class="literal">NULL</span>, width, height, <span class="number">8</span>, width * <span class="number">4</span>, colorSpace, kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);</div><div class="line">                <span class="built_in">CGColorSpaceRelease</span>(colorSpace);</div><div class="line">                <span class="keyword">if</span> (bmContext) &#123;</div><div class="line">                    <span class="built_in">CGContextDrawImage</span>(bmContext, (<span class="built_in">CGRect</span>)&#123;.origin.x = <span class="number">0.0</span>f, .origin.y = <span class="number">0.0</span>f, .size.width = width, .size.height = partialHeight&#125;, partialImageRef);</div><div class="line">                    <span class="built_in">CGImageRelease</span>(partialImageRef);</div><div class="line">                    partialImageRef = <span class="built_in">CGBitmapContextCreateImage</span>(bmContext);</div><div class="line">                    <span class="built_in">CGContextRelease</span>(bmContext);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="built_in">CGImageRelease</span>(partialImageRef);</div><div class="line">                    partialImageRef = <span class="literal">nil</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"><span class="meta">#endif</span></div><div class="line">            <span class="comment">// 9. 对图片进行缩放、解码操作</span></div><div class="line">            <span class="keyword">if</span> (partialImageRef) &#123;</div><div class="line"><span class="meta">#if SD_UIKIT || SD_WATCH</span></div><div class="line">                <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithCGImage:partialImageRef scale:<span class="number">1</span> orientation:orientation];</div><div class="line"><span class="meta">#elif SD_MAC</span></div><div class="line">                <span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> alloc] initWithCGImage:partialImageRef size:<span class="built_in">NSZeroSize</span>];</div><div class="line"><span class="meta">#endif</span></div><div class="line">                <span class="built_in">NSString</span> *key = [[SDWebImageManager sharedManager] cacheKeyForURL:<span class="keyword">self</span>.request.URL];</div><div class="line">                <span class="built_in">UIImage</span> *scaledImage = [<span class="keyword">self</span> scaledImageForKey:key image:image];</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">self</span>.shouldDecompressImages) &#123;</div><div class="line">                    image = [<span class="built_in">UIImage</span> decodedImageWithImage:scaledImage];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    image = scaledImage;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">CGImageRelease</span>(partialImageRef);</div><div class="line">                </div><div class="line">                [<span class="keyword">self</span> callCompletionBlocksWithImage:image imageData:<span class="literal">nil</span> error:<span class="literal">nil</span> finished:<span class="literal">NO</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">CFRelease</span>(imageSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (SDWebImageDownloaderProgressBlock progressBlock <span class="keyword">in</span> [<span class="keyword">self</span> callbacksForKey:kProgressCallbackKey]) &#123;</div><div class="line">        progressBlock(<span class="keyword">self</span>.imageData.length, <span class="keyword">self</span>.expectedSize, <span class="keyword">self</span>.request.URL);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当然，在下载完成或下载失败后，会调用NSURLSessionTaskDelegate的<code>- (void)URLSession: task: didCompleteWithError:</code>代理方法，并清除连接，并抛出下载停止的通知。如果下载成功，则会处理完整的图片数据，对其进行适当的缩放与解压缩操作，以提供给完成回调使用。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>下载的核心其实就是利用NSURLSession对象来加载数据。每个图片的下载都由一个Operation操作来完成，并将这些操作放到一个操作队列中。这样可以实现图片的并发下载。</p>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>为了减少网络流量的消耗，我们都希望下载下来的图片缓存到本地，下次再去获取同一张图片时，可以直接从本地获取，而不再从远程服务器获取。这样做的一个好处是提升了用户体验，用户第二次查看同一幅图片时，能快速从本地获取图片直接呈现给用户。</p>
<p>SDWebImage提供了对图片缓存的支持，而该功能是由SDImageCache类完成的。该类负责处理内存缓存及一个可选的磁盘缓存。其中磁盘缓存的写操作是异步的，这样就不会对UI操作造成影响。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>另外说明，在4.0以后新添加一个缓存配置类<code>SDImageCacheConfig</code> ,主要是一些缓存策略的配置。其头文件定义如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">是否在缓存的时候解压缩，默认是YES 可以提高性能 但是会耗内存。 当使用SDWebImage 因为内存而崩溃 可以将其设置为NO</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> shouldDecompressImages;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否禁用 iCloud 备份 默认YES</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> shouldDisableiCloud;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 内存缓存  默认YES</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> shouldCacheImagesInMemory;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 最大磁盘缓存时间 默认一周 单位秒</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSInteger</span> maxCacheAge;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 最大缓存容量 0 表示无限缓存  单位字节</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSUInteger</span> maxCacheSize;</div></pre></td></tr></table></figure>
<h4 id="内存缓存及磁盘缓存"><a href="#内存缓存及磁盘缓存" class="headerlink" title="内存缓存及磁盘缓存"></a>内存缓存及磁盘缓存</h4><p>内存缓存的处理使用NSCache对象来实现的。NSCache是一个类似与集合的容器。它存储key-value对，这一点类似于NSDictionary类。我们通常使用缓存来临时存储短时间使用但创建昂贵的对象。重用这些对象可以优化性能，因为它们的值不需要重新计算。另外一方面，这些对象对于程序员来说不是紧要的，在内存紧张时会被丢弃。</p>
<p>磁盘缓存的处理则是使用NSFileManager对象来实现的。图片存储的位置是位于Caches文件夹中的default文件夹下。另外，SDImageCache还定义了一个串行队列，来异步存储图片。</p>
<p>内存缓存与磁盘缓存相关变量的声明及定义如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SDImageCache</span> ()</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Properties</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nonnull</span>) <span class="built_in">NSCache</span> *memCache;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nonnull</span>) <span class="built_in">NSString</span> *diskCachePath;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) <span class="built_in">NSMutableArray</span>&lt;<span class="built_in">NSString</span> *&gt; *customPaths;</div><div class="line"><span class="keyword">@property</span> (SDDispatchQueueSetterSementics, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) <span class="built_in">dispatch_queue_t</span> ioQueue;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SDImageCache</span> </span>&#123;</div><div class="line">    <span class="built_in">NSFileManager</span> *_fileManager;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">nonnull</span> <span class="keyword">instancetype</span>)initWithNamespace:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span> *)ns</div><div class="line">                       diskCacheDirectory:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span> *)directory &#123;</div><div class="line">    <span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</div><div class="line">        <span class="built_in">NSString</span> *fullNamespace = [<span class="string">@"com.hackemist.SDWebImageCache."</span> stringByAppendingString:ns];</div><div class="line">        </div><div class="line">        <span class="comment">// 队列</span></div><div class="line">        _ioQueue = dispatch_queue_create(<span class="string">"com.hackemist.SDWebImageCache"</span>, DISPATCH_QUEUE_SERIAL);</div><div class="line">        <span class="comment">//缓存配置</span></div><div class="line">        _config = [[SDImageCacheConfig alloc] init];</div><div class="line">        </div><div class="line">        <span class="comment">// 内存缓存</span></div><div class="line">        _memCache = [[AutoPurgeCache alloc] init];</div><div class="line">        _memCache.name = fullNamespace;</div><div class="line"></div><div class="line">        <span class="comment">// 初始化磁盘缓存路径</span></div><div class="line">        <span class="keyword">if</span> (directory != <span class="literal">nil</span>) &#123;</div><div class="line">            _diskCachePath = [directory stringByAppendingPathComponent:fullNamespace];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">NSString</span> *path = [<span class="keyword">self</span> makeDiskCachePath:ns];</div><div class="line">            _diskCachePath = path;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">dispatch_sync</span>(_ioQueue, ^&#123;</div><div class="line">            _fileManager = [<span class="built_in">NSFileManager</span> new];</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>SDImageCache提供了大量方法来缓存、获取、移除、及清空图片。而对于每一个图片，为了方便地在内存或磁盘中对它进行这些操作，我们需要一个key值来索引它。在内存中，我们将其作为NSCache的key值，而在磁盘中，我们用作这个key作为图片的文件名。对于一个远程服务器下载的图片，其url实作为这个key的最佳选择了。我们在后面会看到这个key值得重要性。</p>
<h4 id="存储图片"><a href="#存储图片" class="headerlink" title="存储图片"></a>存储图片</h4><p>我们先来看看图片的缓存操作，该操作会在内存中放置一份缓存，而如果确定需要缓存到磁盘，则将磁盘缓存操作作为一个task放到串行队列中处理。在iOS中，会先检测图片是PNG还是JPEG，并将其转换为相应的图片数据，最后将数据写入到磁盘中(文件名是对key值做MD5摘要后的串)。缓存操作的基础方法是：<code>-storeImage:imageData:forKey:toDisk:completion:</code>,它的具体实现如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)storeImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image</div><div class="line">         imageData:(<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)imageData</div><div class="line">            forKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key</div><div class="line">            toDisk:(<span class="built_in">BOOL</span>)toDisk</div><div class="line">        completion:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</div><div class="line">    <span class="keyword">if</span> (!image || !key) &#123;</div><div class="line">        <span class="keyword">if</span> (completionBlock) &#123;</div><div class="line">            completionBlock();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 内存缓存 将其存入NSCache中，同时传入图片的消耗值</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.config.shouldCacheImagesInMemory) &#123;</div><div class="line">        <span class="built_in">NSUInteger</span> cost = SDCacheCostForImage(image);</div><div class="line">        [<span class="keyword">self</span>.memCache setObject:image forKey:key cost:cost];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果确定需要磁盘缓存，则将缓存操作作为一个任务放入ioQueue中</span></div><div class="line">    <span class="keyword">if</span> (toDisk) &#123;</div><div class="line">        <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</div><div class="line">            <span class="built_in">NSData</span> *data = imageData;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (!data &amp;&amp; image) &#123;</div><div class="line">            		<span class="comment">//如果imageData为nil 需要确定图片是PNG还是JPEG。PNG图片容易检测，因为有一个唯一签名。PNG图像的前8个字节总是包含以下值：137 80 78 71 13 10 26 10	</span></div><div class="line">            		<span class="comment">//判断 图片是何种类型 使用 sd_imageFormatForImageData 来判断</span></div><div class="line">            		<span class="comment">// SDImageFormat 是一个枚举  其定义如下：</span></div><div class="line"><span class="comment">//                typedef NS_ENUM(NSInteger, SDImageFormat) &#123;</span></div><div class="line"><span class="comment">//                    SDImageFormatUndefined = -1,</span></div><div class="line"><span class="comment">//                    SDImageFormatJPEG = 0,</span></div><div class="line"><span class="comment">//                    SDImageFormatPNG,</span></div><div class="line"><span class="comment">//                    SDImageFormatGIF,</span></div><div class="line"><span class="comment">//                    SDImageFormatTIFF,</span></div><div class="line"><span class="comment">//                    SDImageFormatWebP</span></div><div class="line"><span class="comment">//                &#125;;</span></div><div class="line">                SDImageFormat imageFormatFromData = [<span class="built_in">NSData</span> sd_imageFormatForImageData:data];</div><div class="line">                <span class="comment">//根据图片类型 转成data</span></div><div class="line">                data = [image sd_imageDataAsFormat:imageFormatFromData];</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 4. 创建缓存文件并存储图片</span></div><div class="line">            [<span class="keyword">self</span> storeImageDataToDisk:data forKey:key];</div><div class="line">            <span class="keyword">if</span> (completionBlock) &#123;</div><div class="line">                <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">                    completionBlock();</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (completionBlock) &#123;</div><div class="line">            completionBlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="查询图片"><a href="#查询图片" class="headerlink" title="查询图片"></a>查询图片</h4><p>如果我们想在内存或磁盘中查询是否有key指定的图片，则可以分别使用以下方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//快速查询图片是否已经磁盘缓存 不返回图片 只做快速查询 异步操作</span></div><div class="line">- (<span class="keyword">void</span>)diskImageExistsWithKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key completion:(<span class="keyword">nullable</span> SDWebImageCheckCacheCompletionBlock)completionBlock;</div><div class="line"><span class="comment">//异步查询图片 不管是内存缓存还是磁盘缓存</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSOperation</span> *)queryCacheOperationForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key done:(<span class="keyword">nullable</span> SDCacheQueryCompletedBlock)doneBlock;</div><div class="line"><span class="comment">//从内存中查询图片</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)imageFromMemoryCacheForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key;</div><div class="line"><span class="comment">//从磁盘中查询图片</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)imageFromDiskCacheForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key;</div><div class="line"><span class="comment">//同步查询图片，不管是内存缓存还是磁盘缓存</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)imageFromCacheForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key;</div></pre></td></tr></table></figure>
<p>其实<code>- (nullable UIImage *)imageFromCacheForKey:(nullable NSString *)key</code>内部实现是调用了<code>- (nullable UIImage *)imageFromMemoryCacheForKey:(nullable NSString *)key</code>和<code>- (nullable UIImage *)imageFromDiskCacheForKey:(nullable NSString *)key</code>方法，如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)imageFromCacheForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key &#123;</div><div class="line">    <span class="comment">// 从缓存中查找图片</span></div><div class="line">    <span class="built_in">UIImage</span> *image = [<span class="keyword">self</span> imageFromMemoryCacheForKey:key];</div><div class="line">    <span class="keyword">if</span> (image) &#123;</div><div class="line">        <span class="keyword">return</span> image;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 从磁盘中查找图片</span></div><div class="line">    image = [<span class="keyword">self</span> imageFromDiskCacheForKey:key];</div><div class="line">    <span class="keyword">return</span> image;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们再来看看异步查询图片的具体实现：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSOperation</span> *)queryCacheOperationForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key done:(<span class="keyword">nullable</span> SDCacheQueryCompletedBlock)doneBlock &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">// 1. 首先查看内存缓存，如果查找到，则直接回调doneBlock并返回</span></div><div class="line">    <span class="built_in">UIImage</span> *image = [<span class="keyword">self</span> imageFromMemoryCacheForKey:key];</div><div class="line">    <span class="keyword">if</span> (image) &#123;</div><div class="line">        <span class="built_in">NSData</span> *diskData = <span class="literal">nil</span>;</div><div class="line">        <span class="comment">//进行了是否是GIF的判断</span></div><div class="line">        <span class="keyword">if</span> ([image isGIF]) &#123;</div><div class="line">            diskData = [<span class="keyword">self</span> diskImageDataBySearchingAllPathsForKey:key];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (doneBlock) &#123;</div><div class="line">            doneBlock(image, diskData, SDImageCacheTypeMemory);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 2. 如果内存中没有，则在磁盘中查找。如果找到，则将其放到内存缓存，并调用doneBlock回调</span></div><div class="line">    <span class="built_in">NSOperation</span> *operation = [<span class="built_in">NSOperation</span> new];</div><div class="line">    <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</div><div class="line">        <span class="keyword">if</span> (operation.isCancelled) &#123;</div><div class="line">            <span class="comment">// do not call the completion if cancelled</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">            <span class="built_in">NSData</span> *diskData = [<span class="keyword">self</span> diskImageDataBySearchingAllPathsForKey:key];</div><div class="line">            <span class="built_in">UIImage</span> *diskImage = [<span class="keyword">self</span> diskImageForKey:key];</div><div class="line">            <span class="keyword">if</span> (diskImage &amp;&amp; <span class="keyword">self</span>.config.shouldCacheImagesInMemory) &#123;</div><div class="line">                <span class="comment">//进行内存缓存</span></div><div class="line">                <span class="built_in">NSUInteger</span> cost = SDCacheCostForImage(diskImage);</div><div class="line">                [<span class="keyword">self</span>.memCache setObject:diskImage forKey:key cost:cost];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (doneBlock) &#123;</div><div class="line">                <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">                    doneBlock(diskImage, diskData, SDImageCacheTypeDisk);</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> operation;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="移除图片"><a href="#移除图片" class="headerlink" title="移除图片"></a>移除图片</h4><p>图片的移除操作则可以使用以下方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//从内存和磁盘中移除图片</span></div><div class="line">- (<span class="keyword">void</span>)removeImageForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key withCompletion:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)completion;</div><div class="line"><span class="comment">//从内存 或 可选磁盘中移除图片</span></div><div class="line">- (<span class="keyword">void</span>)removeImageForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key fromDisk:(<span class="built_in">BOOL</span>)fromDisk withCompletion:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)completion;</div></pre></td></tr></table></figure>
<p>我们可以选择同时移除内存及磁盘上的图片,或者只移除内存中的图片。</p>
<h4 id="清理图片"><a href="#清理图片" class="headerlink" title="清理图片"></a>清理图片</h4><p>磁盘缓存图片的操作可以分为完全清空和部分清理。完全清空操作是直接把缓存的文件夹移除，部分清理是清理掉过时的旧图片，清空操作有以下方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//清除内存缓存</span></div><div class="line">- (<span class="keyword">void</span>)clearMemory;</div><div class="line"></div><div class="line"><span class="comment">//完全清空磁盘缓存</span></div><div class="line">- (<span class="keyword">void</span>)clearDiskOnCompletion:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)completion;</div><div class="line"></div><div class="line"><span class="comment">//清空旧图片</span></div><div class="line">- (<span class="keyword">void</span>)deleteOldFilesWithCompletionBlock:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)completionBlock;</div></pre></td></tr></table></figure>
<p>而部分清理则是根据我们设定的一些参数来移除一些文件，这里主要有两个指标：文件的缓存有效期及最大缓存空间大小。文件的缓存有效期可以通过<code>SDImageCacheConfig</code>类的<code>maxCacheAge</code>属性来设置，默认是1周的时间。如果文件的缓存时间超过这个时间值，则将其移除。而最大缓存空间大小是通过<code>maxCacheSize</code>属性来设置的，如果所有缓存文件的总大小超过这一大小，则会按照文件最后修改时间的逆序，以每次一半的递归来移除那些过早的文件，直到缓存的实际大小小于我们设置的最大使用空间。清理的操作在<code>-deleteOldFilesWithCompletionBlock:</code>方法中，其实现如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)deleteOldFilesWithCompletionBlock:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</div><div class="line">    <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</div><div class="line">        <span class="built_in">NSURL</span> *diskCacheURL = [<span class="built_in">NSURL</span> fileURLWithPath:<span class="keyword">self</span>.diskCachePath isDirectory:<span class="literal">YES</span>];</div><div class="line">        <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *resourceKeys = @[<span class="built_in">NSURLIsDirectoryKey</span>, <span class="built_in">NSURLContentModificationDateKey</span>, <span class="built_in">NSURLTotalFileAllocatedSizeKey</span>];</div><div class="line"></div><div class="line">        <span class="comment">// 1. 该枚举器预先获取缓存文件的有用的属性</span></div><div class="line">        <span class="built_in">NSDirectoryEnumerator</span> *fileEnumerator = [_fileManager enumeratorAtURL:diskCacheURL</div><div class="line">                                                   includingPropertiesForKeys:resourceKeys</div><div class="line">                                                                      options:<span class="built_in">NSDirectoryEnumerationSkipsHiddenFiles</span></div><div class="line">                                                                 errorHandler:<span class="literal">NULL</span>];</div><div class="line"></div><div class="line">        <span class="built_in">NSDate</span> *expirationDate = [<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:-<span class="keyword">self</span>.config.maxCacheAge];</div><div class="line">        <span class="built_in">NSMutableDictionary</span>&lt;<span class="built_in">NSURL</span> *, <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *&gt; *cacheFiles = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">        <span class="built_in">NSUInteger</span> currentCacheSize = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 2. 枚举缓存文件夹中所有文件，该迭代有两个目的：移除比过期日期更老的文件；存储文件属性以备后面执行基于缓存大小的清理操作</span></div><div class="line">        <span class="built_in">NSMutableArray</span>&lt;<span class="built_in">NSURL</span> *&gt; *urlsToDelete = [[<span class="built_in">NSMutableArray</span> alloc] init];</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSURL</span> *fileURL <span class="keyword">in</span> fileEnumerator) &#123;</div><div class="line">            <span class="built_in">NSError</span> *error;</div><div class="line">            <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *resourceValues = [fileURL resourceValuesForKeys:resourceKeys error:&amp;error];</div><div class="line"></div><div class="line">            <span class="comment">// 3. 跳过文件夹</span></div><div class="line">            <span class="keyword">if</span> (error || !resourceValues || [resourceValues[<span class="built_in">NSURLIsDirectoryKey</span>] boolValue]) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 4. 移除早于有效期的老文件</span></div><div class="line">            <span class="built_in">NSDate</span> *modificationDate = resourceValues[<span class="built_in">NSURLContentModificationDateKey</span>];</div><div class="line">            <span class="keyword">if</span> ([[modificationDate laterDate:expirationDate] isEqualToDate:expirationDate]) &#123;</div><div class="line">                [urlsToDelete addObject:fileURL];</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 5. 存储文件的引用并计算所有文件的总大小，以备后用</span></div><div class="line">            <span class="built_in">NSNumber</span> *totalAllocatedSize = resourceValues[<span class="built_in">NSURLTotalFileAllocatedSizeKey</span>];</div><div class="line">            currentCacheSize += totalAllocatedSize.unsignedIntegerValue;</div><div class="line">            cacheFiles[fileURL] = resourceValues;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSURL</span> *fileURL <span class="keyword">in</span> urlsToDelete) &#123;</div><div class="line">            [_fileManager removeItemAtURL:fileURL error:<span class="literal">nil</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//6.如果磁盘缓存的大小大于我们配置的最大大小，则执行基于文件大小的清理，我们首先删除最老的文件</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.config.maxCacheSize &gt; <span class="number">0</span> &amp;&amp; currentCacheSize &gt; <span class="keyword">self</span>.config.maxCacheSize) &#123;</div><div class="line">            <span class="comment">// 7. 以设置的最大缓存大小的一半作为清理目标</span></div><div class="line">            <span class="keyword">const</span> <span class="built_in">NSUInteger</span> desiredCacheSize = <span class="keyword">self</span>.config.maxCacheSize / <span class="number">2</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 8. 按照最后修改时间来排序剩下的缓存文件</span></div><div class="line">            <span class="built_in">NSArray</span>&lt;<span class="built_in">NSURL</span> *&gt; *sortedFiles = [cacheFiles keysSortedByValueWithOptions:<span class="built_in">NSSortConcurrent</span></div><div class="line">                                                                     usingComparator:^<span class="built_in">NSComparisonResult</span>(<span class="keyword">id</span> obj1, <span class="keyword">id</span> obj2) &#123;</div><div class="line">                                                                         <span class="keyword">return</span> [obj1[<span class="built_in">NSURLContentModificationDateKey</span>] compare:obj2[<span class="built_in">NSURLContentModificationDateKey</span>]];</div><div class="line">                                                                     &#125;];</div><div class="line"></div><div class="line">            <span class="comment">// 9. 删除文件，直到缓存总大小降到我们期望的大小</span></div><div class="line">            <span class="keyword">for</span> (<span class="built_in">NSURL</span> *fileURL <span class="keyword">in</span> sortedFiles) &#123;</div><div class="line">                <span class="keyword">if</span> ([_fileManager removeItemAtURL:fileURL error:<span class="literal">nil</span>]) &#123;</div><div class="line">                    <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *resourceValues = cacheFiles[fileURL];</div><div class="line">                    <span class="built_in">NSNumber</span> *totalAllocatedSize = resourceValues[<span class="built_in">NSURLTotalFileAllocatedSizeKey</span>];</div><div class="line">                    currentCacheSize -= totalAllocatedSize.unsignedIntegerValue;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (currentCacheSize &lt; desiredCacheSize) &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (completionBlock) &#123;</div><div class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">                completionBlock();</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>以上分析了图片缓存操作，当然，除了上面讲的几个操作，SDWebImage类还提供了一些辅助方法。如获取缓存大小、缓存中图片的数量、判断缓存中是否存在某个key指定的图片。另外，SDWebImage类提供了一个单例方法的实现，所以我们可以将其当做单例对象来处理。</p>
<h3 id="SDWebImageManager"><a href="#SDWebImageManager" class="headerlink" title="SDWebImageManager"></a>SDWebImageManager</h3><p>在实际的运用中，我们并不直接使用SDWebImageDownloader类及SDImageCache类来执行图片的下载及缓存。为了方便用户的使用，SDWebImage提供了SDWebImageManager对象来管理图片的下载与缓存。而我们经常用到的诸如<code>UIImageView+WebCache</code>等控件的分类都是基于SDWebImageManager对象的，该对象将一个下载器和一个图片缓存绑定在一起，并对外提供两个只读属性来获取它们，如下代码所示：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SDWebImageManager</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">id</span> &lt;SDWebImageManagerDelegate&gt; delegate;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) SDImageCache *imageCache;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) SDWebImageDownloader *imageDownloader;</div><div class="line">...</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>从上面的代码中我们还可以看到一个delegate属性，它是一个<code>id &lt;SDWebImageManagerDelegate&gt;</code>对象。<code>SDWebImageManagerDelegate</code>声明了两个可选实现的方法，如下所示：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 控制当图片在缓存中没有找到时，应该下载哪个图片</span></div><div class="line">- (<span class="built_in">BOOL</span>)imageManager:(SDWebImageManager *)imageManager shouldDownloadImageForURL:(<span class="built_in">NSURL</span> *)imageURL;</div><div class="line"><span class="comment">// 允许在图片已经被下载完成且被缓存到磁盘或内存前立即转换</span></div><div class="line">- (<span class="built_in">UIImage</span> *)imageManager:(SDWebImageManager *)imageManager transformDownloadedImage:(<span class="built_in">UIImage</span> *)image withURL:(<span class="built_in">NSURL</span> *)imageURL;</div></pre></td></tr></table></figure>
<p>这两个代理方法会在SDWebImageManager的<code>-downloadImageWithURL:options:progress:completed:</code>方法中调用，而这个方法是SDWebImageManager类的核心所在。我们来看看它具体的实现：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">id</span> &lt;SDWebImageOperation&gt;)loadImageWithURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</div><div class="line">                                     options:(SDWebImageOptions)options</div><div class="line">                                    progress:(<span class="keyword">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</div><div class="line">                                   completed:(<span class="keyword">nullable</span> SDInternalCompletionBlock)completedBlock &#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// 前面省略n行。主要作了如下处理：</span></div><div class="line">    <span class="comment">// 1. 判断url的合法性</span></div><div class="line">    <span class="comment">// 2. 创建SDWebImageCombinedOperation对象</span></div><div class="line">    <span class="comment">// 3. 查看url是否是之前下载失败过的</span></div><div class="line">    <span class="comment">// 4. 如果url为nil，或者在不可重试的情况下是一个下载失败过的url，则直接返回操作对象并调用完成回调</span></div><div class="line"></div><div class="line">    operation.cacheOperation = [<span class="keyword">self</span>.imageCache queryCacheOperationForKey:key done:^(<span class="built_in">UIImage</span> *cachedImage, <span class="built_in">NSData</span> *cachedData, SDImageCacheType cacheType) &#123;</div><div class="line">        <span class="keyword">if</span> (operation.isCancelled) &#123;</div><div class="line">            [<span class="keyword">self</span> safelyRemoveOperationFromRunning:operation];</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//先去缓存中查找图片，如果图片不存在  或者 当前图片的下载模式是 SDWebImageRefreshCached 开始下载</span></div><div class="line">        <span class="keyword">if</span> ((!cachedImage || options &amp; SDWebImageRefreshCached) &amp;&amp; (![<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(imageManager:shouldDownloadImageForURL:)] || [<span class="keyword">self</span>.delegate imageManager:<span class="keyword">self</span> shouldDownloadImageForURL:url])) &#123;</div><div class="line">            ...</div><div class="line">            </div><div class="line">            <span class="comment">//下载</span></div><div class="line">            SDWebImageDownloadToken *subOperationToken = [<span class="keyword">self</span>.imageDownloader downloadImageWithURL:url options:downloaderOptions progress:progressBlock completed:^(<span class="built_in">UIImage</span> *downloadedImage, <span class="built_in">NSData</span> *downloadedData, <span class="built_in">NSError</span> *error, <span class="built_in">BOOL</span> finished) &#123;</div><div class="line">                __<span class="keyword">strong</span> __<span class="keyword">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class="line">                <span class="keyword">if</span> (!strongOperation || strongOperation.isCancelled) &#123;</div><div class="line">                    <span class="comment">// 操作被取消，则不做任务事情</span></div><div class="line">                    </div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error) &#123;</div><div class="line">                    <span class="comment">// 如果出错，则调用完成回调，并将url放入下载失败url数组中	</span></div><div class="line">                    ...</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    ...</div><div class="line">                    </div><div class="line">                    <span class="built_in">BOOL</span> cacheOnDisk = !(options &amp; SDWebImageCacheMemoryOnly);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (options &amp; SDWebImageRefreshCached &amp;&amp; cachedImage &amp;&amp; !downloadedImage) &#123;</div><div class="line">                        <span class="comment">// Image refresh hit the NSURLCache cache, do not call the completion block</span></div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (downloadedImage &amp;&amp; (!downloadedImage.images || (options &amp; SDWebImageTransformAnimatedImage)) &amp;&amp; [<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(imageManager:transformDownloadedImage:withURL:)]) &#123;</div><div class="line">                        <span class="comment">// 在全局队列中并行处理图片的缓存</span></div><div class="line">                        <span class="comment">// 首先对图片做个转换操作，该操作是代理对象实现的</span></div><div class="line">                        <span class="comment">// 然后对图片做缓存处理</span></div><div class="line">                        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>), ^&#123;</div><div class="line">                            <span class="built_in">UIImage</span> *transformedImage = [<span class="keyword">self</span>.delegate imageManager:<span class="keyword">self</span> transformDownloadedImage:downloadedImage withURL:url];</div><div class="line"></div><div class="line">                            <span class="keyword">if</span> (transformedImage &amp;&amp; finished) &#123;</div><div class="line">                                <span class="built_in">BOOL</span> imageWasTransformed = ![transformedImage isEqual:downloadedImage];</div><div class="line">                                <span class="comment">// pass nil if the image was transformed, so we can recalculate the data from the image</span></div><div class="line">                                [<span class="keyword">self</span>.imageCache storeImage:transformedImage imageData:(imageWasTransformed ? <span class="literal">nil</span> : downloadedData) forKey:key toDisk:cacheOnDisk completion:<span class="literal">nil</span>];</div><div class="line">                            &#125;</div><div class="line">                            </div><div class="line">                            ...</div><div class="line">                        &#125;);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">if</span> (downloadedImage &amp;&amp; finished) &#123;</div><div class="line">                            [<span class="keyword">self</span>.imageCache storeImage:downloadedImage imageData:downloadedData forKey:key toDisk:cacheOnDisk completion:<span class="literal">nil</span>];</div><div class="line">                        &#125;</div><div class="line">                        ...</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 下载完成并缓存后，将操作从队列中移除</span></div><div class="line">                <span class="keyword">if</span> (finished) &#123;</div><div class="line">                    [<span class="keyword">self</span> safelyRemoveOperationFromRunning:strongOperation];</div><div class="line">                &#125;</div><div class="line">            &#125;];</div><div class="line">            operation.cancelBlock = ^&#123;</div><div class="line">                [<span class="keyword">self</span>.imageDownloader cancel:subOperationToken];</div><div class="line">                __<span class="keyword">strong</span> __<span class="keyword">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class="line">                [<span class="keyword">self</span> safelyRemoveOperationFromRunning:strongOperation];</div><div class="line">            &#125;;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cachedImage) &#123;</div><div class="line">            ...</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> operation;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于这个方法，我们没有做过多的解释。其主要就是下载图片并根据操作选项缓存图片。上面这个下载方法的操作选项参数是由枚举<code>SDWebImageOptions</code>来定义的，这个操作中的一些选项是与<code>SDWebImageDownloaderOptions</code>中的选项对应的，我们来看看这个<code>SDWebImageOptions</code>选项都有哪些：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, SDWebImageOptions) &#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 默认情况下，当URL下载失败时，URL会被列入黑名单，导致库不会再去重试，该标记用于禁用黑名单</span></div><div class="line">    SDWebImageRetryFailed = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 默认情况下，图片下载开始于UI交互，该标记禁用这一特性，这样下载延迟到UIScrollView减速时</span></div><div class="line">    SDWebImageLowPriority = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 该标记禁用磁盘缓存</span></div><div class="line">    SDWebImageCacheMemoryOnly = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 该标记启用渐进式下载，图片在下载过程中是渐渐显示的，如同浏览器一下。</span></div><div class="line">    <span class="comment">// 默认情况下，图像在下载完成后一次性显示</span></div><div class="line">    SDWebImageProgressiveDownload = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 即使图片缓存了，也期望HTTP响应cache control，并在需要的情况下从远程刷新图片。</span></div><div class="line">    <span class="comment">// 磁盘缓存将被NSURLCache处理而不是SDWebImage，因为SDWebImage会导致轻微的性能下载。</span></div><div class="line">    <span class="comment">// 该标记帮助处理在相同请求URL后面改变的图片。如果缓存图片被刷新，则完成block会使用缓存图片调用一次</span></div><div class="line">    <span class="comment">// 然后再用最终图片调用一次</span></div><div class="line">    SDWebImageRefreshCached = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 在iOS 4+系统中，当程序进入后台后继续下载图片。这将要求系统给予额外的时间让请求完成</span></div><div class="line">    <span class="comment">// 如果后台任务超时，则操作被取消</span></div><div class="line">    SDWebImageContinueInBackground = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 通过设置NSMutableURLRequest.HTTPShouldHandleCookies = YES;来处理存储在NSHTTPCookieStore中的cookie</span></div><div class="line">    SDWebImageHandleCookies = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 允许不受信任的SSL认证</span></div><div class="line">    SDWebImageAllowInvalidSSLCertificates = <span class="number">1</span> &lt;&lt; <span class="number">7</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 默认情况下，图片下载按入队的顺序来执行。该标记将其移到队列的前面，</span></div><div class="line">    <span class="comment">// 以便图片能立即下载而不是等到当前队列被加载</span></div><div class="line">    SDWebImageHighPriority = <span class="number">1</span> &lt;&lt; <span class="number">8</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 默认情况下，占位图片在加载图片的同时被加载。该标记延迟占位图片的加载直到图片已以被加载完成</span></div><div class="line">    SDWebImageDelayPlaceholder = <span class="number">1</span> &lt;&lt; <span class="number">9</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 通常我们不调用动画图片的transformDownloadedImage代理方法，因为大多数转换代码可以管理它。</span></div><div class="line">    <span class="comment">// 使用这个票房则不任何情况下都进行转换。</span></div><div class="line">    SDWebImageTransformAnimatedImage = <span class="number">1</span> &lt;&lt; <span class="number">10</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>大家再看<code>-downloadImageWithURL:options:progress:completed:</code>，可以看到两个<code>SDWebImageOptions</code>与<code>SDWebImageDownloaderOptions</code>中的选项是如何对应起来的，在此不多做解释。</p>
<h3 id="视图扩展"><a href="#视图扩展" class="headerlink" title="视图扩展"></a>视图扩展</h3><p>我们在使用SDWebImage的时候，使用最多的是<code>UIImageView+WebCache</code>中的针对<code>UIImageView</code>的扩展方法，这些扩展方法将<code>UIImageView</code>与<code>WebCache</code>集成在一起，来让<code>UIImageView</code>对象拥有异步下载和缓存远程图片的能力。在4.0.0版本以后，给UIView新增了好多方法，其中最之前<code>UIImageView+WebCache</code>最核心的方法<code>-sd_setImageWithURL:placeholderImage:options:progress:completed:</code>，现在使用的是<code>UIView+WebCache</code>中新增的方法<code>sd_internalSetImageWithURL:placeholderImage:options:operationKey:setImageBlock:progress:completed:</code>,其使用<code>SDWebImageManager</code>单例对象下载并缓存图片，完成后将图片赋值给<code>UIImageView</code>对象的image属性，以使图片显示出来，其具体实现如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)sd_internalSetImageWithURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</div><div class="line">                  placeholderImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)placeholder</div><div class="line">                           options:(SDWebImageOptions)options</div><div class="line">                      operationKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)operationKey</div><div class="line">                     setImageBlock:(<span class="keyword">nullable</span> SDSetImageBlock)setImageBlock</div><div class="line">                          progress:(<span class="keyword">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</div><div class="line">                         completed:(<span class="keyword">nullable</span> SDExternalCompletionBlock)completedBlock &#123;</div><div class="line">    </div><div class="line">	...</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (url) &#123;</div><div class="line">        <span class="comment">// check if activityView is enabled or not</span></div><div class="line">        <span class="keyword">if</span> ([<span class="keyword">self</span> sd_showActivityIndicatorView]) &#123;</div><div class="line">            [<span class="keyword">self</span> sd_addActivityIndicator];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        __<span class="keyword">weak</span> __<span class="keyword">typeof</span>(<span class="keyword">self</span>)wself = <span class="keyword">self</span>;</div><div class="line">        <span class="comment">// 使用SDWebImageManager单例对象来下载图片</span></div><div class="line">        <span class="keyword">id</span> &lt;SDWebImageOperation&gt; operation = [SDWebImageManager.sharedManager loadImageWithURL:url options:options progress:progressBlock completed:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSData</span> *data, <span class="built_in">NSError</span> *error, SDImageCacheType cacheType, <span class="built_in">BOOL</span> finished, <span class="built_in">NSURL</span> *imageURL) &#123;</div><div class="line">            __<span class="keyword">strong</span> __<span class="keyword">typeof</span> (wself) sself = wself;</div><div class="line">            [sself sd_removeActivityIndicator];</div><div class="line">            <span class="keyword">if</span> (!sself) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            dispatch_main_async_safe(^&#123;</div><div class="line">                <span class="keyword">if</span> (!sself) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (image &amp;&amp; (options &amp; SDWebImageAvoidAutoSetImage) &amp;&amp; completedBlock) &#123;</div><div class="line">                    completedBlock(image, error, cacheType, url);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (image) &#123;</div><div class="line">                    <span class="comment">// 图片下载完后显示图片</span></div><div class="line">                    [sself sd_setImage:image imageData:data basedOnClassOrViaCustomSetImageBlock:setImageBlock];</div><div class="line">                    [sself sd_setNeedsLayout];</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span> ((options &amp; SDWebImageDelayPlaceholder)) &#123;</div><div class="line">                        [sself sd_setImage:placeholder imageData:<span class="literal">nil</span> basedOnClassOrViaCustomSetImageBlock:setImageBlock];</div><div class="line">                        [sself sd_setNeedsLayout];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (completedBlock &amp;&amp; finished) &#123;</div><div class="line">                    completedBlock(image, error, cacheType, url);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;];</div><div class="line">        [<span class="keyword">self</span> sd_setImageLoadOperation:operation forKey:validOperationKey];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">       ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了扩展<code>UIImageView</code>之外，SDWebImage还扩展了<code>UIView</code>、<code>UIButton</code>、<code>MKAnnotationView</code>等视图类，大家可以参考源码。</p>
<p>当然，如果不想使用这些扩展，则可以直接使用SDWebImageManager来下载图片，这也是很OK的。</p>
<h3 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h3><p>SDWebImage的主要任务就是图片的下载和缓存。为了支持这些操作，它主要使用了以下知识点：</p>
<ul>
<li><code>dispatch_barrier_sync</code>函数：该方法用于对操作设置等待，确保在执行完任务后才会执行后续操作。该方法常用于确保类的线程安全性操作。</li>
<li><code>NSMutableURLRequest</code>：用于创建一个网络请求对象，我们可以根据需要来配置请求报头等信息。</li>
<li><code>NSOperation</code>及<code>NSOperationQueue</code>：操作队列是Objective-C中一种高级的并发处理方法，现在它是基于GCD来实现的。相对于GCD来说，操作队列的优点是可以取消在任务处理队列中的任务，另外在管理操作间的依赖关系方面也容易一些。对SDWebImage中我们就看到了如何使用依赖将下载顺序设置成后进先出的顺序。(有兴趣的同学可以看看我这篇博客-&gt;<a href="http://www.guiyongdong.com/2016/09/18/%E8%81%8A%E4%B8%80%E8%81%8ANSOperation%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/">聊一聊NSOperation的那些事</a>)</li>
<li>NSURLSession：用于网络请求及响应处理。在iOS7.0后，苹果推出了一套新的网络请求接口，即NSURLSession类。(有兴趣的同学可以看看我这篇博客-&gt;<a href="http://www.guiyongdong.com/2016/11/18/NSURLSession%E4%B8%8ENSURLConnection%E5%8C%BA%E5%88%AB/">NSURLSession与NSURLConnection区别</a>)</li>
<li>开启一个后台任务。</li>
<li><code>NSCache</code>类：一个类似于集合的容器。它存储key-value对，这一点类似于NSDictionary类。我们通常用使用缓存来临时存储短时间使用但创建昂贵的对象。重用这些对象可以优化性能，因为它们的值不需要重新计算。另外一方面，这些对象对于程序来说不是紧要的，在内存紧张时会被丢弃。</li>
<li>清理缓存图片的策略：特别是最大缓存空间大小的设置。如果所有缓存文件的总大小超过这一大小，则会按照文件最后修改时间的逆序，以每次一半的递归来移除那些过早的文件，直到缓存的实际大小小于我们设置的最大使用空间。</li>
<li>对图片的解压缩操作：这一操作可以查看<code>SDWebImageDecoder.m</code>中<code>+decodedImageWithImage</code>方法的实现。</li>
<li>对GIF图片的处理</li>
<li>对WebP图片的处理</li>
<li>对cell的重用机制的解决，利用runtime的关联对象，会为imageView对象关联一个下载列表，当tableView滑动时，imageView重设数据源（url）时，会cancel掉下载列表中所有的任务，然后开启一个新的下载任务。这样子就保证了只有当前可见的cell对象的imageView对象关联的下载任务能够回调，不会发生image错乱。</li>
</ul>
<p>感兴趣的同学可以深入研究一下这些知识点。当然，这只是其中一部分，更多的知识还有待大家去发掘。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SDWebImage是一个开源的第三方库，它提供了UIImageView的一个分类，以支持从远程服务器下载并缓存图片的功能。它具有以下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提供UIImageView的一个分类，以支持网络图片的加载与缓存管理&lt;/li&gt;
&lt;li&gt;一个异步的图片加载器&lt;/li&gt;
&lt;li&gt;一个异步的内存+磁盘图片缓存&lt;/li&gt;
&lt;li&gt;支持GIF图片&lt;/li&gt;
&lt;li&gt;支持WebP图片&lt;/li&gt;
&lt;li&gt;后台图片解压缩处理&lt;/li&gt;
&lt;li&gt;确保同一个URL不会被反复加载&lt;/li&gt;
&lt;li&gt;确保下载及缓存时，主线程不被堵塞&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从github上对SDWebImage使用情况可以看出，SDWebImage在图片下载及缓存的处理还是被认可的。在本文中，我们主要从源码的角度来分析一下SDWebImage的实现机制。讨论的内容将主要集中在图片的下载及缓存，而不包含对GIF图片及WebP图片的支持操作。不过在3.8.2版本以后，SDWebImage将会使用NSURLSession代替原来的NSURLConnection，主要是更新的是下载功能部分。具体变化可以看:&lt;a href=&quot;https://github.com/rs/SDWebImage/blob/master/Docs/SDWebImage-4.0-Migration-guide.md&quot;&gt;点这里&lt;/a&gt;。目前截止到当前时间，最新的版本为4.0.0-beta2,这篇文章是在4.0.0-beta2基础上进行剖析。&lt;/p&gt;
    
    </summary>
    
      <category term="源码分析" scheme="http://www.guiyongdong.com/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="源码分析" scheme="http://www.guiyongdong.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C Runtime 运行时之六：拾遗</title>
    <link href="http://www.guiyongdong.com/2017/01/03/Objective-C-Runtime-%E8%BF%90%E8%A1%8C%E6%97%B6%E4%B9%8B%E5%85%AD%EF%BC%9A%E6%8B%BE%E9%81%97/"/>
    <id>http://www.guiyongdong.com/2017/01/03/Objective-C-Runtime-运行时之六：拾遗/</id>
    <published>2017-01-03T07:08:47.000Z</published>
    <updated>2017-03-09T07:03:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面几篇基本介绍了runtime中的大部分功能，包括对类与对象、成员变量与属性、方法与消息、分类与协议的处理。runtime大部分的功能都是围绕这几点来实现的。</p>
<p>本章的内容并不算重点，主要针对前文中对Objective-C Runtime Reference内容遗漏的地方做些补充。当然这并不能包含所有的内容。runtime还有许多内容。</p>
<a id="more"></a>
<h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><p>在Objective-C中，如果我们需要在类的方法中调用父类的方法时，通常都会用到<code>super</code>，如下所示：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyViewController</span>: <span class="title">UIViewController</span></span></div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span>	<span class="title">MyViewController</span></span></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">	[<span class="keyword">super</span> viewDidLoad];</div><div class="line">	<span class="comment">// do something</span></div><div class="line">	...</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>如何使用super我们都知道。现在的问题是，它是如何工作的呢？</p>
<p>首先我们需要知道的是super与self不同。self是类的一个隐藏参数，每个方法的实现的第一个参数即为self。而super并不是隐藏参数，它实际上只是一个”编译器标示符”，它负责告诉编译器，当调用viewDidLoad方法时，去调用父类的方法，而不是本类中的方法。而它实际上与self指向的是相同的消息接收者。为了理解这一点，我们先来看看super的定义</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_super &#123; <span class="keyword">id</span> receiver; Class superClass; &#125;;</div></pre></td></tr></table></figure>
<p>这个结构体有两个成员：</p>
<ul>
<li>receiver：即消息的实际接收者</li>
<li>superClass：指针当前类的父类</li>
</ul>
<p>当我们使用super来接收消息时，编译器会生成一个objc_super结构体。就上面的例子而言，这个结构体的receiver就是MyViewController对象，与self相同；superClass指向MyViewController的父类UIViewController。</p>
<p>接下来，发送消息时，不是调用objc_msgSend函数，而是调用objc_msgSendSuper函数，其声明如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">id</span> objc_msgSendSuper ( <span class="keyword">struct</span> objc_super *<span class="keyword">super</span>, SEL op, ... );</div></pre></td></tr></table></figure>
<p>该函数第一个参数即为前面生成的objc_super结构体，第二个参数是方法的selector。该函数实际的操作是：从objc_super结构体指向的superClass的方法列表开始查找viewDidLoad的selector，找到后以objc-&gt;receiver去调用这个selector，而此时的操作流程就是如下方式了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">objc_msgSend(objc_super-&gt;receiver, <span class="keyword">@selector</span>(viewDidLoad))</div></pre></td></tr></table></figure>
<p>由于objc_super-&gt;receiver就是self本身，所以该方法实际与下面这个调用是相同的：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">objc_msgSend(<span class="keyword">self</span>, <span class="keyword">@selector</span>(viewDidLoad))</div></pre></td></tr></table></figure>
<p>为了便于理解，我们看以下实例：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span></span></div><div class="line">- (<span class="keyword">void</span>)test &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self class: %@"</span>, <span class="keyword">self</span>.class);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"super class: %@"</span>, <span class="keyword">super</span>.class);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>调用MyClass的test方法后，其输出是：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2014</span><span class="number">-11</span><span class="number">-08</span> <span class="number">15</span>:<span class="number">55</span>:<span class="number">03.256</span> [<span class="number">824</span>:<span class="number">209297</span>] <span class="keyword">self</span> <span class="keyword">class</span>: MyClass</div><div class="line"><span class="number">2014</span><span class="number">-11</span><span class="number">-08</span> <span class="number">15</span>:<span class="number">55</span>:<span class="number">03.256</span> [<span class="number">824</span>:<span class="number">209297</span>] <span class="keyword">super</span> <span class="keyword">class</span>: MyClass</div></pre></td></tr></table></figure>
<p>从上例中可以看到，两者的输出都是MyClass。</p>
<h4 id="库相关操作"><a href="#库相关操作" class="headerlink" title="库相关操作"></a>库相关操作</h4><p>库相关的操作主要是用于获取由系统提供的库相关的信息，主要包含以下函数：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 获取所有加载的Objective-C框架和动态库的名称</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> ** objc_copyImageNames ( <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount );</div><div class="line"><span class="comment">// 获取指定类所在动态库</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> * class_getImageName ( Class cls );</div><div class="line"><span class="comment">// 获取指定库或框架中所有类的类名</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> ** objc_copyClassNamesForImage ( <span class="keyword">const</span> <span class="keyword">char</span> *image, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount );</div></pre></td></tr></table></figure>
<p>通过这几个函数，我们可以了解到某个类所有的库，以及某个库中包含哪些类。如下代码所示：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"获取指定类所在动态库"</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"UIView's Framework: %s"</span>, class_getImageName(<span class="built_in">NSClassFromString</span>(<span class="string">@"UIView"</span>)));</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"获取指定库或框架中所有类的类名"</span>);</div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> ** classes = objc_copyClassNamesForImage(class_getImageName(<span class="built_in">NSClassFromString</span>(<span class="string">@"UIView"</span>)), &amp;outCount);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i++) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"class name: %s"</span>, classes[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其输出结果如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">2014-11-08 12:57:32.689 [747:184013] 获取指定类所在动态库</div><div class="line">2014-11-08 12:57:32.690 [747:184013] UIView's Framework: /System/Library/Frameworks/UIKit.framework/UIKit</div><div class="line">2014-11-08 12:57:32.690 [747:184013] 获取指定库或框架中所有类的类名</div><div class="line">2014-11-08 12:57:32.691 [747:184013] class name: UIKeyboardPredictiveSettings</div><div class="line">2014-11-08 12:57:32.691 [747:184013] class name: _UIPickerViewTopFrame</div><div class="line">2014-11-08 12:57:32.691 [747:184013] class name: _UIOnePartImageView</div><div class="line">2014-11-08 12:57:32.692 [747:184013] class name: _UIPickerViewSelectionBar</div><div class="line">2014-11-08 12:57:32.692 [747:184013] class name: _UIPickerWheelView</div><div class="line">2014-11-08 12:57:32.692 [747:184013] class name: _UIPickerViewTestParameters</div><div class="line">......</div></pre></td></tr></table></figure>
<h4 id="块操作"><a href="#块操作" class="headerlink" title="块操作"></a>块操作</h4><p>我们都知道block给我们带到极大的方便，苹果也不断提供一些使用block的新的API。同时，苹果在runtime中也提供了一些函数来支持针对block的操作，这些函数包括：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 创建一个指针函数的指针，该函数调用时会调用特定的block</span></div><div class="line">IMP imp_implementationWithBlock ( <span class="keyword">id</span> block );</div><div class="line"><span class="comment">// 返回与IMP(使用imp_implementationWithBlock创建的)相关的block</span></div><div class="line"><span class="keyword">id</span> imp_getBlock ( IMP anImp );</div><div class="line"><span class="comment">// 解除block与IMP(使用imp_implementationWithBlock创建的)的关联关系，并释放block的拷贝</span></div><div class="line"><span class="built_in">BOOL</span> imp_removeBlock ( IMP anImp );</div></pre></td></tr></table></figure>
<ul>
<li>imp_implementationWithBlock函数：参数block的签名必须是method_return_type ^(id self, method_args …)形式的。该方法能让我们使用block作为IMP。如下代码所示：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyRuntimeBlock</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@end</span>	</div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyRuntimeBlock</span></span></div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="comment">// 测试代码</span></div><div class="line">IMP imp = imp_implementationWithBlock(^(<span class="keyword">id</span> obj, <span class="built_in">NSString</span> *str) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, str);</div><div class="line">&#125;);</div><div class="line">class_addMethod(MyRuntimeBlock.class, <span class="keyword">@selector</span>(testBlock:), imp, <span class="string">"v@:@"</span>);</div><div class="line">MyRuntimeBlock *runtime = [[MyRuntimeBlock alloc] init];</div><div class="line">[runtime performSelector:<span class="keyword">@selector</span>(testBlock:) withObject:<span class="string">@"hello world!"</span>];</div></pre></td></tr></table></figure>
<p>输出结果是</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2014</span><span class="number">-11</span><span class="number">-09</span> <span class="number">14</span>:<span class="number">03</span>:<span class="number">19.779</span> [<span class="number">1172</span>:<span class="number">395446</span>] hello world!</div></pre></td></tr></table></figure>
<h4 id="弱引用操作"><a href="#弱引用操作" class="headerlink" title="弱引用操作"></a>弱引用操作</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 加载弱引用指针引用的对象并返回</span></div><div class="line"><span class="keyword">id</span> objc_loadWeak ( <span class="keyword">id</span> *location );</div><div class="line"><span class="comment">// 存储__weak变量的新值</span></div><div class="line"><span class="keyword">id</span> objc_storeWeak ( <span class="keyword">id</span> *location, <span class="keyword">id</span> obj );</div></pre></td></tr></table></figure>
<ul>
<li>objc_loadWeak函数：该函数加载一个弱指针引用的对象，并在对其做retain和autoreleasing操作后返回它。这样，对象就可以在调用者使用它时保持足够长的生命周期。该函数典型的用法是在任何有使用__weak变量的表达式中使用。</li>
<li>objc_storeWeak函数：该函数的典型用法是用于__weak变量做为赋值对象时。</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>至此，本系列对runtime的整理已完结。当然这只是对runtime的一些基础知识的归纳，力图起个抛砖引玉的作用。还有许多关于runtime有意思东西还需要读者自己去探索发现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面几篇基本介绍了runtime中的大部分功能，包括对类与对象、成员变量与属性、方法与消息、分类与协议的处理。runtime大部分的功能都是围绕这几点来实现的。&lt;/p&gt;
&lt;p&gt;本章的内容并不算重点，主要针对前文中对Objective-C Runtime Reference内容遗漏的地方做些补充。当然这并不能包含所有的内容。runtime还有许多内容。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="http://www.guiyongdong.com/categories/Objective-C/"/>
    
    
      <category term="Runtime" scheme="http://www.guiyongdong.com/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C-Runtime运行时之五：协议与分类</title>
    <link href="http://www.guiyongdong.com/2016/12/18/Objective-C-Runtime%E8%BF%90%E8%A1%8C%E6%97%B6%E4%B9%8B%E4%BA%94%EF%BC%9A%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%88%86%E7%B1%BB/"/>
    <id>http://www.guiyongdong.com/2016/12/18/Objective-C-Runtime运行时之五：协议与分类/</id>
    <published>2016-12-18T06:25:59.000Z</published>
    <updated>2017-03-09T07:03:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Objective-C中的分类允许我们通过一个类添加方法来扩充它（但是通过category不能添加新的实例变量），并且我们不需要访问类中的代码就可以做到。</p>
<p>Objective-C中的协议是普遍存在的接口定义方式，即在一个类中通过<code>@protocol</code>定义接口，在另外类中实现接口，这种接口定义方式也成为“delegation”模式，<code>@protocol</code>声明了可以被其他任何类实现的方法，协议仅仅是定义一个接口，而由其他的类去负责实现。</p>
<p>在本章中，我们来看看runtime对分类与协议的支持。</p>
<a id="more"></a>
<h4 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h4><h5 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h5><p>Category是表示一个指向分类的结构体的指针，其定义如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_category *Category;</div><div class="line"><span class="keyword">struct</span> objc_category &#123;</div><div class="line">    <span class="keyword">char</span> *category_name                          OBJC2_UNAVAILABLE;	<span class="comment">// 分类名</span></div><div class="line">    <span class="keyword">char</span> *class_name                             OBJC2_UNAVAILABLE;	<span class="comment">// 分类所属的类名</span></div><div class="line">    <span class="keyword">struct</span> objc_method_list *instance_methods    OBJC2_UNAVAILABLE;	<span class="comment">// 实例方法列表</span></div><div class="line">    <span class="keyword">struct</span> objc_method_list *class_methods       OBJC2_UNAVAILABLE;	<span class="comment">// 类方法列表</span></div><div class="line">    <span class="keyword">struct</span> objc_protocol_list *protocols         OBJC2_UNAVAILABLE;	<span class="comment">// 分类所实现的协议列表</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个结构体主要包含了分类定义的实例方法与类方法，其中<code>instance_methods</code>列表是元类方法列表的一个子集。</p>
<h5 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h5><p>Protocol的定义如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_object Protocol;</div></pre></td></tr></table></figure>
<p>我们可以看到，Protocol其实就是一个对象结构体。</p>
<h5 id="操作函数"><a href="#操作函数" class="headerlink" title="操作函数"></a>操作函数</h5><p>Runtime并没有在<code>&lt;objc/runtime.h&gt;</code>头文件中提供针对分类的操作函数。因为这些分类中的信息都包含在<code>objc_class</code>中，我们可以通过针对<code>objc_class</code>的操作函数来获取分类的信息。如下里所示：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RuntimeCategoryClass</span> : <span class="title">NSObject</span></span></div><div class="line">- (<span class="keyword">void</span>)method1;</div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RuntimeCategoryClass</span> (<span class="title">Category</span>)</span></div><div class="line">- (<span class="keyword">void</span>)method2;</div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RuntimeCategoryClass</span></span></div><div class="line">- (<span class="keyword">void</span>)method1 &#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RuntimeCategoryClass</span> (<span class="title">Category</span>)</span></div><div class="line">- (<span class="keyword">void</span>)method2 &#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"测试objc_class中的方法列表是否包含分类中的方法"</span>);</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> outCount = <span class="number">0</span>;</div><div class="line">Method *methodList = class_copyMethodList(RuntimeCategoryClass.class, &amp;outCount);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i++) &#123;</div><div class="line">    Method method = methodList[i];</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name = sel_getName(method_getName(method));</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"RuntimeCategoryClass's method: %s"</span>, name);</div><div class="line">    <span class="keyword">if</span> (strcmp(name, sel_getName(<span class="keyword">@selector</span>(method2)))) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"分类方法method2在objc_class的方法列表中"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其输出是：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">2014-11-08 10:36:39.213 [561:151847] 测试objc_class中的方法列表是否包含分类中的方法</div><div class="line">2014-11-08 10:36:39.215 [561:151847] RuntimeCategoryClass's method: method2</div><div class="line">2014-11-08 10:36:39.215 [561:151847] RuntimeCategoryClass's method: method1</div><div class="line">2014-11-08 10:36:39.215 [561:151847] 分类方法method2在objc_class的方法列表中</div></pre></td></tr></table></figure>
<p>而对于Protocol，runtime提供了一系列函数来对其进行操作，这些函数包括：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 返回指定的协议</span></div><div class="line">Protocol * objc_getProtocol ( <span class="keyword">const</span> <span class="keyword">char</span> *name );</div><div class="line"><span class="comment">// 获取运行时所知道的所有协议的数组</span></div><div class="line">Protocol ** objc_copyProtocolList ( <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount );</div><div class="line"><span class="comment">// 创建新的协议实例</span></div><div class="line">Protocol * objc_allocateProtocol ( <span class="keyword">const</span> <span class="keyword">char</span> *name );</div><div class="line"><span class="comment">// 在运行时中注册新创建的协议</span></div><div class="line"><span class="keyword">void</span> objc_registerProtocol ( Protocol *proto );</div><div class="line"><span class="comment">// 为协议添加方法</span></div><div class="line"><span class="keyword">void</span> protocol_addMethodDescription ( Protocol *proto, SEL name, <span class="keyword">const</span> <span class="keyword">char</span> *types, <span class="built_in">BOOL</span> isRequiredMethod, <span class="built_in">BOOL</span> isInstanceMethod );</div><div class="line"><span class="comment">// 添加一个已注册的协议到协议中</span></div><div class="line"><span class="keyword">void</span> protocol_addProtocol ( Protocol *proto, Protocol *addition );</div><div class="line"><span class="comment">// 为协议添加属性</span></div><div class="line"><span class="keyword">void</span> protocol_addProperty ( Protocol *proto, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> objc_property_attribute_t *attributes, <span class="keyword">unsigned</span> <span class="keyword">int</span> attributeCount, <span class="built_in">BOOL</span> isRequiredProperty, <span class="built_in">BOOL</span> isInstanceProperty );</div><div class="line"><span class="comment">// 返回协议名</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> * protocol_getName ( Protocol *p );</div><div class="line"><span class="comment">// 测试两个协议是否相等</span></div><div class="line"><span class="built_in">BOOL</span> protocol_isEqual ( Protocol *proto, Protocol *other );</div><div class="line"><span class="comment">// 获取协议中指定条件的方法的方法描述数组</span></div><div class="line"><span class="keyword">struct</span> objc_method_description * protocol_copyMethodDescriptionList ( Protocol *p, <span class="built_in">BOOL</span> isRequiredMethod, <span class="built_in">BOOL</span> isInstanceMethod, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount );</div><div class="line"><span class="comment">// 获取协议中指定方法的方法描述</span></div><div class="line"><span class="keyword">struct</span> objc_method_description protocol_getMethodDescription ( Protocol *p, SEL aSel, <span class="built_in">BOOL</span> isRequiredMethod, <span class="built_in">BOOL</span> isInstanceMethod );</div><div class="line"><span class="comment">// 获取协议中的属性列表</span></div><div class="line">objc_property_t * protocol_copyPropertyList ( Protocol *proto, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount );</div><div class="line"><span class="comment">// 获取协议的指定属性</span></div><div class="line">objc_property_t protocol_getProperty ( Protocol *proto, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="built_in">BOOL</span> isRequiredProperty, <span class="built_in">BOOL</span> isInstanceProperty );</div><div class="line"><span class="comment">// 获取协议采用的协议</span></div><div class="line">Protocol ** protocol_copyProtocolList ( Protocol *proto, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount );</div><div class="line"><span class="comment">// 查看协议是否采用了另一个协议</span></div><div class="line"><span class="built_in">BOOL</span> protocol_conformsToProtocol ( Protocol *proto, Protocol *other );</div></pre></td></tr></table></figure>
<ul>
<li><code>objc_getProtocol</code>函数，需要注意的是如果仅仅是声明了一个协议，而未在任何类中实现这个协议，则该函数返回的是nil。</li>
<li><code>objc_copyProtocolList</code>函数，获取的数值需要使用free来释放。</li>
<li><code>objc_allcateProtocol</code>函数，如果同名的协议已经存在，则返回nil.</li>
<li><code>objc_registerProtocol</code>函数，创建一个新的协议后，必须调用该函数以在运行时钟注册新的协议。协议注册后便可以使用，但不能再做修改，即注册完后不能再向协议添加方法或协议。</li>
</ul>
<p>需要强调的是，协议一旦注册后就不能修改，即无法再通过调用<code>protocol_addMethodDescription</code>、<code>protocol_addProtocol</code>和<code>protocol_addProperty</code>往协议中添加方法等。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>Runtime并没有提供过多的函数来处理分类。对于协议，我们可以动态地创建协议，并向其添加方法、属性及继承的协议，并在运行时动态地获取这些信息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Objective-C中的分类允许我们通过一个类添加方法来扩充它（但是通过category不能添加新的实例变量），并且我们不需要访问类中的代码就可以做到。&lt;/p&gt;
&lt;p&gt;Objective-C中的协议是普遍存在的接口定义方式，即在一个类中通过&lt;code&gt;@protocol&lt;/code&gt;定义接口，在另外类中实现接口，这种接口定义方式也成为“delegation”模式，&lt;code&gt;@protocol&lt;/code&gt;声明了可以被其他任何类实现的方法，协议仅仅是定义一个接口，而由其他的类去负责实现。&lt;/p&gt;
&lt;p&gt;在本章中，我们来看看runtime对分类与协议的支持。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="http://www.guiyongdong.com/categories/Objective-C/"/>
    
    
      <category term="Runtime" scheme="http://www.guiyongdong.com/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C Runtime 运行时之四：Method Swizzling</title>
    <link href="http://www.guiyongdong.com/2016/12/09/Objective-C-Runtime-%E8%BF%90%E8%A1%8C%E6%97%B6%E4%B9%8B%E5%9B%9B%EF%BC%9AMethod-Swizzling/"/>
    <id>http://www.guiyongdong.com/2016/12/09/Objective-C-Runtime-运行时之四：Method-Swizzling/</id>
    <published>2016-12-09T05:02:51.000Z</published>
    <updated>2017-03-09T07:03:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>理解<code>Method Swizzling</code>是学习Runtime机制的一个很好的机会。<code>Method Swizzling</code>是改变一个<code>selector</code>的实际实现的技术。通过这一技术，我们可以在运行时通过修改类的分发表中<code>selector</code>对应的函数，来修改方法的实现。</p>
<a id="more"></a>
<p>例如，我们想跟踪在程序中每一个ViewController展示给用户的次数：当然，我们可以在每个ViewController的viewDidAppear中添加跟踪代码，但是这太过麻烦，需要在每个ViewController中写重复的代码。创建一个子类可能是一种实现方式，但需要同时创建UIViewController，UITableController，UINavigationController及其他UIKit中ViewController的子类，这样会产生许多重复的代码。</p>
<p>这种情况下，我们就可以使用<code>Method Swizzling</code>，如下代码所示：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> (<span class="title">Tracking</span>)</span></div><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        Class <span class="keyword">class</span> = [<span class="keyword">self</span> <span class="keyword">class</span>];         </div><div class="line">        <span class="comment">// When swizzling a class method, use the following:</span></div><div class="line">        <span class="comment">// Class class = object_getClass((id)self);</span></div><div class="line">        SEL originalSelector = <span class="keyword">@selector</span>(viewWillAppear:);</div><div class="line">        SEL swizzledSelector = <span class="keyword">@selector</span>(xxx_viewWillAppear:);</div><div class="line">        Method originalMethod = class_getInstanceMethod(<span class="keyword">class</span>, originalSelector);</div><div class="line">        Method swizzledMethod = class_getInstanceMethod(<span class="keyword">class</span>, swizzledSelector);</div><div class="line">        <span class="built_in">BOOL</span> didAddMethod = class_addMethod(<span class="keyword">class</span>,</div><div class="line">                originalSelector,</div><div class="line">                method_getImplementation(swizzledMethod),</div><div class="line">                method_getTypeEncoding(swizzledMethod));</div><div class="line">        <span class="keyword">if</span> (didAddMethod) &#123;</div><div class="line">            class_replaceMethod(<span class="keyword">class</span>,</div><div class="line">                swizzledSelector,</div><div class="line">                method_getImplementation(originalMethod),</div><div class="line">                method_getTypeEncoding(originalMethod));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="meta">#pragma mark - Method Swizzling</span></div><div class="line">- (<span class="keyword">void</span>)xxx_viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;</div><div class="line">    [<span class="keyword">self</span> xxx_viewWillAppear:animated];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"viewWillAppear: %@"</span>, <span class="keyword">self</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>在这里，我们通过<code>Method Swizzling</code>修改了UIViewController的<code>@selector(viewWillAppear:)</code>对应的函数指针，使其实现指向了我们自定义的<code>xxx_viewWillAppear</code>的实现。这样，当UIViewController及其子类的对象调用<code>viewWillAppear</code>时，都会打印一条日志信息。</p>
<p>上面的例子很好地展示了使用<code>Method Swizlling</code>来一个类中注入一些我们新的操作。当然，还有许多场景可以使用<code>Mehtod Swizlling</code>，在此不多举例。在此我们说说使用<code>method Swizlling</code>需要注意的一些问题。</p>
<h3 id="Swizzling应该总是在-load中执行"><a href="#Swizzling应该总是在-load中执行" class="headerlink" title="Swizzling应该总是在+load中执行"></a>Swizzling应该总是在+load中执行</h3><p>在Objective-C中，运行时会自动调用每个类的两个方法。<code>+load</code><em>会在类初始加载时调用</em>，<code>+initialize</code><em>会在第一次调用类的类方法或实例方法之前被调用</em>。这两个方法是可选的，且只有在实现了它们时才会被调用。由于method swizzling会影响到类的全局状态，因此要尽量避免在并发处理中出现竞争的情况。+load能保证在类的初始化过程中被加载，并保证这种改变应用级别的行为的一致性。相比之下，+initialize在其执行时不提供这种保证–事实上，如果在应用中没为给这个类发送消息，则它可能永远不会被调用。</p>
<h3 id="Swizzling应该总是在dispatch-once中执行"><a href="#Swizzling应该总是在dispatch-once中执行" class="headerlink" title="Swizzling应该总是在dispatch_once中执行"></a>Swizzling应该总是在dispatch_once中执行</h3><p>与上面相同，因为<code>swizzling</code>会改变全局状态，所以我们需要在运行时采取一些预防措施。原子性就是这样一种措施，它确保代码只被执行一次，不管有多少个线程。GCD的<code>dispatch_once</code>可以确保这种行为，我们应该将其作为<code>method swizzling</code>的最佳实践。</p>
<h3 id="选择器、方法与实现"><a href="#选择器、方法与实现" class="headerlink" title="选择器、方法与实现"></a>选择器、方法与实现</h3><p>在Objective-C中，选择器(<code>selector</code>)、方法(<code>method</code>)和实现(<code>implementation</code>)是运行时中一个特殊点，虽然在一般情况下，这些术语更多的是用在消息发送的过程描述中。</p>
<p>以下是<code>Objective-C Runtime Reference</code>中的对这几个术语一些描述：</p>
<ul>
<li><code>Selector(typedef struct objc_selector *SEL)</code>：用于在运行时中表示一个方法的名称。一个方法选择器是一个C字符串，它是在Objective-C运行时被注册的。选择器由编译器生成，并且在类被加载时由运行时自动做映射操作。</li>
<li><code>Method(typedef struct objc_method *Method)</code>：在类定义中表示方法的类型</li>
<li><code>Implementation(typedef id (*IMP)(id, SEL, ...))</code>：这是一个指针类型，指向方法实现函数的开始位置。这个函数使用为当前CPU架构实现的标准C调用规范。每一个参数是指向对象自身的指针(self)，第二个参数是方法选择器。然后是方法的实际参数。</li>
</ul>
<p>理解这几个术语之间的关系最好的方式是：一个类维护一个运行时可接收的消息分发表；分发表中的每个入口是一个方法(Method)，其中key是一个特定名称，即选择器(SEL)，其对应一个实现(IMP)，即指向底层C函数的指针。</p>
<p>为了swizzle一个方法，我们可以在分发表中将一个方法的现有的选择器映射到不同的实现，而将该选择器对应的原始实现关联到一个新的选择器中。</p>
<h3 id="调用-cmd"><a href="#调用-cmd" class="headerlink" title="调用_cmd"></a>调用_cmd</h3><p>我们回过头来看看前面新的方法的实现代码：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)xxx_viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;</div><div class="line">    [<span class="keyword">self</span> xxx_viewWillAppear:animated];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"viewWillAppear: %@"</span>, <span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>咋看上去是会导致无限循环的。但令人惊奇的是，并没有出现这种情况。在swizzling的过程中，方法中的<code>[self xxx_viewWillAppear:animated]</code>已经被重新指定到UIViewController类的<code>-viewWillAppear:</code>中。在这种情况下，不会产生无限循环。不过如果我们调用的是<code>[self viewWillAppear:animated]</code>，则会产生无限循环，因为这个方法的实现在运行时已经被重新指定为<code>xxx_viewWillAppear:</code>了。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>Swizzling通常被称作是一种黑魔法，容易产生不可预知的行为和无法预见的后果。虽然它不是最安全的，但如果遵从以下几点预防措施的话，还是比较安全的：</p>
<ol>
<li>总是调用方法的原始实现(除非有更好的理由不这么做)：API提供了一个输入与输出约定，但其内部实现是一个黑盒。Swizzle一个方法而不调用原始实现可能会打破私有状态底层操作，从而影响到程序的其它部分。</li>
<li>避免冲突：给自定义的分类方法加前缀，从而使其与所依赖的代码库不会存在命名冲突。</li>
<li>明白是怎么回事：简单地拷贝粘贴swizzle代码而不理解它是如何工作的，不仅危险，而且会浪费学习Objective-C运行时的机会。阅读<code>Objective-C Runtime Reference</code>和查看<code>&lt;objc/runtime.h&gt;</code>头文件以了解事件是如何发生的。</li>
<li>小心操作：无论我们对Foundation, UIKit或其它内建框架执行Swizzle操作抱有多大信心，需要知道在下一版本中许多事可能会不一样。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;理解&lt;code&gt;Method Swizzling&lt;/code&gt;是学习Runtime机制的一个很好的机会。&lt;code&gt;Method Swizzling&lt;/code&gt;是改变一个&lt;code&gt;selector&lt;/code&gt;的实际实现的技术。通过这一技术，我们可以在运行时通过修改类的分发表中&lt;code&gt;selector&lt;/code&gt;对应的函数，来修改方法的实现。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="http://www.guiyongdong.com/categories/Objective-C/"/>
    
    
      <category term="Runtime" scheme="http://www.guiyongdong.com/tags/Runtime/"/>
    
  </entry>
  
</feed>
