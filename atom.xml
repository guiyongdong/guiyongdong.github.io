<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>贵大头的博客</title>
  <subtitle>贵大头的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.guiyongdong.com/"/>
  <updated>2017-05-22T07:22:07.000Z</updated>
  <id>http://www.guiyongdong.com/</id>
  
  <author>
    <name>贵永冬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ReactNative导航新宠儿react-navigation</title>
    <link href="http://www.guiyongdong.com/2017/05/20/ReactNative%E5%AF%BC%E8%88%AA%E6%96%B0%E5%AE%A0%E5%84%BFreact-navigation/"/>
    <id>http://www.guiyongdong.com/2017/05/20/ReactNative导航新宠儿react-navigation/</id>
    <published>2017-05-20T01:24:19.000Z</published>
    <updated>2017-05-22T07:22:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>导航一直是<code>App</code>开发中比较重要的一个组件，<code>ReactNative</code>提供了两种导航组件供我们使用，分别是：<code>NavigatorIOS</code>和<code>Navigator</code>，但是前者只能用于<code>iOS</code>平台，后者在<code>ReactNative</code>0.44版本以后已经被移除了。好在有人提供了更好的导航组件，就是我们今天要讲的<code>react-navigation</code>，并且<code>ReactNative</code>官方更推荐我们使用此组件。</p>
<a id="more"></a>
<p>本篇文章只讲解基础用法，如果你想了解更多，请戳这里-&gt;<a href="https://reactnavigation.org/docs/intro/" target="_blank" rel="external">戳我</a>。</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>react-navigation</code>主要包括导航，底部<code>tab</code>，顶部<code>tab</code>，侧滑等，功能很强大，而且体验接近原生。今天我们介绍的组件分别为：</p>
<p></p><p></p>
<ul>
<li>导航 -&gt; StackNavigator</li>
<li>底部或者顶部<code>tab</code> -&gt; TabNavigator</li>
<li>侧滑 -&gt; DrawerNavigator</li>
</ul>
<h3 id="DrawerNavigator"><a href="#DrawerNavigator" class="headerlink" title="DrawerNavigator"></a>DrawerNavigator</h3><p>先来看看运行效果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android35.gif?raw=true"><br></div>

<p>这里，我们定义三个界面，一个为根界面，一个主界面，一个侧滑界面，分别如下：</p>
<p><strong>侧滑界面DrawerLeftPage.js：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    View,</div><div class="line">    Text,</div><div class="line">    TouchableOpacity,</div><div class="line">    StyleSheet,</div><div class="line">    Image</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawerLeftPage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> navigationOptions = &#123;</div><div class="line">        <span class="comment">//标题</span></div><div class="line">        drawerLabel:<span class="string">'购物车'</span>,</div><div class="line">        <span class="comment">//图标</span></div><div class="line">        drawerIcon:(&#123;tintColor&#125;) =&gt; &#123;</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">Image</span></span></span></div><div class="line">                    <span class="attr">source</span>=<span class="string">&#123;require(</span>'<span class="attr">..</span>/<span class="attr">images</span>/<span class="attr">car</span>@<span class="attr">3x.png</span>')&#125;</div><div class="line">                    <span class="attr">style</span>=<span class="string">&#123;[&#123;width:24,height:24&#125;,&#123;tintColor:tintColor&#125;]&#125;</span></div><div class="line">                /&gt;</div><div class="line">            );</div><div class="line">        &#125;,</div><div class="line">    &#125;;</div><div class="line">    render() &#123;</div><div class="line">        return(</div><div class="line">            <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</div><div class="line">                    //点击关闭侧滑</div><div class="line">                    this.props.navigation.navigate('DrawerClose')</div><div class="line">                &#125;&#125;&gt;</div><div class="line">                    <span class="tag">&lt;<span class="name">Text</span>&gt;</span>关闭侧滑栏<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex:1,</div><div class="line">        justifyContent:'center',</div><div class="line">        alignItems:'center'</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这个界面很简单，我们定义了一个按钮，点击按钮的时候，关闭侧滑页，这里关闭的参数为<code>DrawerClose</code>,通过<code>props</code>属性可以拿到当前<code>navigation</code>。另外我们又定义了一个静态属性，来配置侧滑显示的具体属性。注意，此属性名一定要写成<code>navigationOptions</code>。</p>
<p><code>navigationOptions</code>主要有以下参数：</p>
<p></p><p></p>
<ul>
<li><code>title</code>：通用标题，当你不写<code>drawerLabel</code>时，使用此参数作为侧滑标题，通常都不写</li>
<li><code>drawerLabel</code>：侧滑标题</li>
<li><code>drawerIcon</code>：侧滑的标题图标，这里会回传两个参数，<code>{focused: boolean, tintColor: string}</code>，<code>focused</code>表示是否是选中状态，<code>tintColor</code>表示选中的颜色，这个颜色是我们自己在根视图定义的。当然，你也可以使用其他的组件来作为图标，比如<code>Text</code>。</li>
</ul>
<p><strong>主界面 DrawerHomePage.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    View,</div><div class="line">    Text,</div><div class="line">    TouchableOpacity,</div><div class="line">    StyleSheet,</div><div class="line">    Image</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawerHomePage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> navigationOptions = &#123;</div><div class="line">        drawerLabel:<span class="string">'首页'</span>,</div><div class="line">        drawerIcon:(&#123;tintColor&#125;) =&gt; &#123;</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">Image</span></span></span></div><div class="line">                    <span class="attr">source</span>=<span class="string">&#123;require(</span>'<span class="attr">..</span>/<span class="attr">images</span>/<span class="attr">home</span>@<span class="attr">3x.png</span>')&#125;</div><div class="line">                    <span class="attr">style</span>=<span class="string">&#123;[&#123;width:24,height:24&#125;,&#123;tintColor:tintColor&#125;]&#125;</span></div><div class="line">                /&gt;</div><div class="line">            );</div><div class="line">        &#125;,</div><div class="line">    &#125;;</div><div class="line">    render() &#123;</div><div class="line">        return(</div><div class="line">              <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</div><div class="line">                      //点击打开抽屉</div><div class="line">                      this.props.navigation.navigate('DrawerOpen')</div><div class="line">                  &#125;&#125;&gt;</div><div class="line">                      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>打开侧滑栏<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex:1,</div><div class="line">        justifyContent:'center',</div><div class="line">        alignItems:'center'</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这个界面和上一个界面基本一样，只是这里的点击事件为打开抽屉，传的参数为<code>DrawerOpen</code>。<br>打开侧滑：<code>this.props.navigation.navigate(&#39;DrawerOpen&#39;)</code><br>关闭侧滑：<code>this.props.navigation.navigate(&#39;DrawerClose&#39;)</code></p>
<p><strong>根视图 DrawerPage.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    StyleSheet,</div><div class="line">    View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> DrawerHomePage <span class="keyword">from</span> <span class="string">'./DrawerHomePage'</span>;</div><div class="line"><span class="keyword">import</span> DrawerLeftPage <span class="keyword">from</span> <span class="string">'./DrawerLeftPage'</span>;</div><div class="line"><span class="keyword">import</span> &#123;DrawerNavigator&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Drawer = DrawerNavigator(</div><div class="line">    &#123;</div><div class="line">        Home:&#123;</div><div class="line">            screen:DrawerHomePage,</div><div class="line">        &#125;,</div><div class="line">        Left:&#123;</div><div class="line">            screen:DrawerLeftPage</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        drawerWidth:<span class="number">300</span>,</div><div class="line">        drawerPosition:<span class="string">'left'</span>,</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawerPage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Drawer</span>/&gt;</span></span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex:<span class="number">1</span>,</div><div class="line">        justifyContent:<span class="string">'center'</span>,</div><div class="line">        alignItems:<span class="string">'center'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里我们从<code>react-navigation</code>导入侧滑组件<code>DrawerNavigator</code>，这里我们定义一个常量<code>Drawer</code>，主要来配置侧滑的各种参数。首先，看<code>DrawerNavigator</code>的构造方法：<br><code>DrawerNavigator(RouteConfigs, DrawerNavigatorConfig)</code><br>这里接收两个参数，一个为页面路由配置，一个为显示的配置，我们分别来看，</p>
<p><code>RouteConfigs</code>：</p>
<p>这里你可以配置所有的界面，例如，当前例子配置了两个界面：<code>Home</code>和<code>Left</code>，指定界面分别为<code>DrawerHomePage</code>和<code>DrawerLeftPage</code>。你还可以配置其他界面，这些配置的界面都将显示在侧滑栏上。</p>
<p><code>DrawerNavigatorConfig</code>：</p>
<p></p><p></p>
<ul>
<li><code>drawerWidth</code>: 侧滑栏的宽度，如果你不想写死，可以使用<code>Dimensions</code>获取屏幕的宽度，动态计算</li>
<li><code>drawerPosition</code>: 侧滑的方向，<code>left</code>和<code>right</code>，默认<code>left</code></li>
<li><code>contentComponent</code>: 这个就比较重要了，可以自定义侧滑页，我们等会详细说。</li>
<li><code>contentOptions</code>: 主要配置侧滑栏条目的属性，只对<code>DrawerItems</code>，例如我们刚才写的例子，就可以通过这个属性来配置颜色，背景色等。其主要属性有：<ul>
<li><code>items</code>: 这个我也没弄清是什么意思，不影响</li>
<li><code>activeItemKey</code>: 定义当前选中的页面的key</li>
<li><code>activeTintColor</code>: 选中条目状态的文字颜色</li>
<li><code>activeBackgroundColor</code>: 选中条目的背景色</li>
<li><code>inactiveTintColor</code>: 未选中条目状态的文字颜色</li>
<li><code>inactiveBackgroundColor</code>: 未选中条目的背景色</li>
<li><code>onItemPress</code>: 选中条目的回调，这个参数属性为函数，会将当前路由回调过去</li>
<li><code>style</code>: 定义条目的颜色</li>
<li><code>labelStyle</code>: 定义条目文字的颜色</li>
</ul>
</li>
</ul>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    drawerWidth:<span class="number">300</span>,</div><div class="line">    drawerPosition:<span class="string">'left'</span>,</div><div class="line">    contentOptions:&#123;</div><div class="line">        activeTintColor: <span class="string">'#e91e63'</span>,</div><div class="line">        items:[<span class="string">"Home"</span>],</div><div class="line">        activeItemKey:<span class="string">'abc'</span>,</div><div class="line">        activeBackgroundColor:<span class="string">'yellow'</span>,</div><div class="line">        inactiveTintColor:<span class="string">'blue'</span>,</div><div class="line">        inactiveBackgroundColor:<span class="string">'red'</span>,</div><div class="line">        onItemPress:((route)=&gt;&#123;</div><div class="line">            <span class="built_in">console</span>.log(route);</div><div class="line">        &#125;),</div><div class="line">        labelStyle:&#123;</div><div class="line">            fontSize:<span class="number">30</span></div><div class="line">        &#125;,</div><div class="line">        style:&#123;</div><div class="line">            marginRight:<span class="number">30</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如此，<code>DrawerNavigator</code>的基本用法我们已经搞的差不多了，但是，这还不能满足我们的日常开发，因为我们的侧滑界面可不是这个样子的。</p>
<p>刚才还有个参数没有介绍，就是<code>contentComponent</code>，他就是用来自定义侧滑界面的。</p>
<p>上面的例子有一个问题，加入我们的<code>item</code>比较多，但是侧滑页面并不能滑动，这时，就要使用<code>contentComponent</code>来自定义界面，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">//导入DrawerItems 因为系统的条目就是DrawerItems</span></div><div class="line"><span class="keyword">import</span> &#123;DrawerNavigator,DrawerItems&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    drawerWidth:<span class="number">300</span>,</div><div class="line">    drawerPosition:<span class="string">'left'</span>,</div><div class="line">    <span class="comment">//ScrollView作为我们的侧滑界面，内部依然是DrawerItems</span></div><div class="line">    contentComponent:((props)=&gt;&#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span> &gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">DrawerItems</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></div><div class="line">        )&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行效果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android36.gif?raw=true"><br></div>

<p>当然，我们完全可以自定义侧滑界面，并且不使用<code>DrawerItems</code>条目。如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> DrawerHomePage <span class="keyword">from</span> <span class="string">'./DrawerHomePage'</span>;</div><div class="line"><span class="keyword">import</span> DrawerLeftPage <span class="keyword">from</span> <span class="string">'./DrawerLeftPage'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;DrawerNavigator&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</div><div class="line"></div><div class="line"><span class="comment">//自定义侧滑界面 </span></div><div class="line"><span class="keyword">const</span> CustomDrawerContentComponent = (props)=&gt;&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">DrawerLeftPage</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span></div><div class="line">    );</div><div class="line">&#125;;</div><div class="line">const Drawer = DrawerNavigator(</div><div class="line">    &#123;</div><div class="line">        Home:&#123;</div><div class="line">            screen:DrawerHomePage,</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        drawerWidth:300,</div><div class="line">        drawerPosition:'left',</div><div class="line">        contentComponent:(CustomDrawerContentComponent)</div><div class="line">    &#125;</div><div class="line">);</div><div class="line">export default class DrawerPage extends Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return(</div><div class="line">            <span class="tag">&lt;<span class="name">Drawer</span>/&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex:1</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我们这里定义了一个常量，返回<code>DrawerLeftPage</code>作为我们的侧滑界面，在<code>DrawerLeftPage</code>中就可以随意定制了。注意，一定要将<code>props</code>传递到下一个界面，否则通过<code>props</code>拿不到<code>navigation</code>。最终运行效果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android37.gif?raw=true"><br></div>

<p>好了，<code>DrawerNavigator</code>我们已经了解完了。</p>
<hr>
<h3 id="StackNavigator"><a href="#StackNavigator" class="headerlink" title="StackNavigator"></a>StackNavigator</h3><p>这个组件就比较麻烦了，我们先来看他的构造函数：<br><code>StackNavigator(RouteConfigs, StackNavigatorConfig)</code></p>
<p><strong>RouteConfigs:</strong> </p>
<p>它主要是来配置页面路由的，类似与<code>Android</code>的<code>Manifest.xml</code>，所有的界面都必须配置在里面。如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    First:&#123;</div><div class="line">        screen:FirstNavigation,</div><div class="line">        navigationOptions:(&#123;</div><div class="line">            title:<span class="string">'首页'</span></div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    Second:&#123;</div><div class="line">        screen:SecondNavigation,</div><div class="line">        navigationOptions:(&#123;navigation&#125;) =&gt; (&#123;</div><div class="line">            title: <span class="string">"第二个界面"</span></div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们配置了首页和第二个页面，并且配置了标题参数。当然，如果你不想在路由里面配置页面的参数，你也可以在页面中配置，需要在页面中定义一个静态常量<code>navigationOptions</code>，和<code>DrawerNavigator</code>的使用方法类似。我们来看看<code>navigationOptions</code>有哪些可以配置的参数：</p>
<p></p><p></p>
<ul>
<li><code>title</code>: 这个即可以作为头部标题，也可以作为返回标题和<code>Tab</code>标题</li>
<li><code>header</code>: 自定义导航条，系统的导航条会隐藏</li>
<li><code>headerTitle</code>: 标题</li>
<li><code>headerBackTitle</code>: 回退标题</li>
<li><code>headerTruncatedBackTitle</code>: 当回退标题不能显示的时候显示此属性的标题，比如回退标题太长了</li>
<li><code>headerRight</code>: 定义导航栏右边视图</li>
<li><code>headerLeft</code>: 定义导航栏左边视图</li>
<li><code>headerStyle</code>: 定义导航栏的样式，比如背景色等</li>
<li><code>headerTitleStyle</code>: 定义标题的样式</li>
<li><code>headerBackTitleStyle</code>: 定义返回标题的样式</li>
<li><code>headerTintColor</code>: 定义导航条的tintColor，会覆盖<code>headerTitleStyle</code>中的颜色</li>
<li><code>gesturesEnabled</code>: 定义是否能侧滑返回，<code>iOS</code>默认<code>true</code>，<code>Android</code>默认<code>false</code></li>
</ul>
<p>示例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">static</span> navigationOptions=(&#123;</div><div class="line">    title:<span class="string">'首页'</span>,</div><div class="line">    header:(</div><div class="line">        &lt;View style=&#123;&#123;width:Dimensions.get('window').width,height:64,backgroundColor:'red'&#125;&#125;/&gt;</div><div class="line">    ),</div><div class="line">    headerTitle:(</div><div class="line">        &lt;View style=&#123;&#123;width:60,height:20,backgroundColor:'red'&#125;&#125;/&gt;</div><div class="line">    ),</div><div class="line">    headerBackTitle:'哈哈哈哈哈',</div><div class="line">    headerTruncatedBackTitle:'你好',</div><div class="line">    headerRight:(</div><div class="line">        &lt;View&gt;</div><div class="line">            &lt;Text&gt;right&lt;/Text&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">    ),</div><div class="line">    headerLeft:(</div><div class="line">        &lt;View&gt;</div><div class="line">            &lt;Text&gt;left&lt;/Text&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">    ),</div><div class="line">    headerStyle: &#123;</div><div class="line">        backgroundColor:'yellow'</div><div class="line">    &#125;,</div><div class="line">    headerTitleStyle:&#123;</div><div class="line">        color:'red'</div><div class="line">    &#125;,</div><div class="line">    headerBackTitleStyle:&#123;</div><div class="line">        tintColor:'#789'</div><div class="line">    &#125;,</div><div class="line">    headerTintColor:'#956',</div><div class="line">    gesturesEnabled:false</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>StackNavigatorConfig</strong></p>
<p>这个参数主要是配置整个路由的，包括跳转动画，跳转方式等。先来看看它有哪些参数：</p>
<p></p><p></p>
<ul>
<li><code>initialRouteName</code>: 初始化哪个界面为根界面，如果不配置，默认使用<code>RouteConfigs</code>中的第一个页面当做根界面</li>
<li><code>initialRouteParams</code>: 初始化根界面参数，主要是给根视图传递一些参数，通过<code>this.props.navigation.state.params</code>可以取到</li>
<li><code>navigationOptions</code>: 配置默认的<code>navigationOptions</code></li>
<li><code>paths</code>: 官方意思是覆盖已经配置的路由，可是我没有试出来效果</li>
<li><code>mode</code>: 跳转方式，一种是<code>card</code>，默认的，在<code>iOS</code>上是从右到左跳转，在<code>Android</code>上是从下到上，都是使用原生系统的默认跳转方式。一种是<code>modal</code>，只针对<code>iOS</code>平台，模态跳转。</li>
<li><code>headerMode</code>: 跳转过程中，导航条的动画效果，有三个值，<code>float</code>表示会渐变，类似于<code>iOS</code>的原生效果，<code>screen</code>表示没有渐变。<code>none</code>表示隐藏导航条</li>
<li><code>cardStyle</code>: 可以统一定义界面的颜色，例如背景色</li>
<li><code>transitionConfig</code>：配置页面跳转的动画</li>
<li><code>onTransitionStart</code>: 页面跳转动画即将开始的回调</li>
<li><code>onTransitionEnd</code>: 页面跳转动画结束的回调</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">static</span> stackNavigatorConfig = (&#123;</div><div class="line">    initialRouteName:<span class="string">'First'</span>,</div><div class="line">    initialRouteParams:&#123;</div><div class="line">        data:<span class="string">'haha'</span></div><div class="line">    &#125;,</div><div class="line">    navigationOptions:&#123;</div><div class="line">        headerTintColor:<span class="string">'red'</span></div><div class="line">    &#125;,</div><div class="line">    mode:<span class="string">'card'</span>,</div><div class="line">    headerMode:<span class="string">'screen'</span>,</div><div class="line">    cardStyle:(&#123;backgroundColor:<span class="string">'blue'</span>&#125;),</div><div class="line">    onTransitionStart:((route)=&gt;&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'开始动画'</span>);</div><div class="line">    &#125;),</div><div class="line">    onTransitionEnd:((route)=&gt;&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'结束动画'</span>);</div><div class="line">    &#125;),</div><div class="line">    transitionConfig:(()=&gt;(&#123;</div><div class="line">        <span class="comment">//因为ios 的导航动画默认是从左到右，所以，这里配置一下动画，使用react-navigation已经实现的从左到右的动画，</span></div><div class="line">        <span class="comment">//适配Android，不过，需要导入动画 </span></div><div class="line">        <span class="comment">//import CardStackStyleInterpolator from 'react-navigation/src/views/CardStackStyleInterpolator';</span></div><div class="line">        screenInterpolator:CardStackStyleInterpolator.forHorizontal,</div><div class="line">    &#125;))</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="Navigation-Prop"><a href="#Navigation-Prop" class="headerlink" title="Navigation Prop"></a>Navigation Prop</h4><p>了解完路由配置以后，我们再来看看组件的属性，</p>
<p></p><p></p>
<ul>
<li><code>navigate</code>：路由方法，主要来启动另一个页面</li>
<li><code>state</code>：状态，其实<code>StackNavigator</code>内部维护了两个路由栈，一个名为<code>newState</code>，是当前显示页面之前的所有页面，包括当前界面。一个名为<code>lastState</code>，当然，通过<code>state</code>还能拿到很多参数。</li>
<li><code>setParams</code>: 设置参数，记住，一定不要在<code>render</code>方法中调用此方法。</li>
<li><code>goBack</code>: 返回</li>
<li><code>dispatch</code>: 给当前界面设置action，会替换原来的跳转，回退等事件</li>
</ul>
<p><strong>navigate</strong></p>
<p>此方法可以传三个参数：<code>navigate(routeName, params, action)</code></p>
<p></p><p></p>
<ul>
<li><code>routeName</code>: 页面名称，一定要在路由配置中配置。</li>
<li><code>params</code>: 传递参数到下一个页面</li>
<li><code>action</code>: <code>action</code></li>
</ul>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">this</span>.props.navigation.navigate(<span class="string">'Second'</span>,&#123;<span class="string">'data'</span>:<span class="string">'haha'</span>&#125;);</div></pre></td></tr></table></figure>
<p><strong>state</strong></p>
<p>通过<code>state</code>，我们能拿到传递过来的参数，通过打印<code>state</code>，得到如下结果：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">state: </div><div class="line">   &#123; params: &#123;<span class="string">'data'</span>:<span class="string">'haha'</span>&#125;,</div><div class="line">     key: <span class="string">'id-1495292939049-1'</span>,</div><div class="line">     routeName: <span class="string">'Model'</span> &#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，通过<code>state</code>，我们可以拿到传递过来的<code>params</code></p>
<p><strong>setParams</strong></p>
<p>设置当前页面的参数，记住，调用此方法一定要在<code>componentDidMount</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">componentDidMount() &#123;</div><div class="line">    <span class="keyword">var</span> &#123;setParams&#125; = <span class="keyword">this</span>.props.navigation;</div><div class="line">    setParams(&#123;<span class="string">'haha'</span>:<span class="string">'abc'</span>&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>goBack</strong></p>
<p>回退到指定界面，如果什么都不传，回退到上一个界面，传<code>null</code>，回退到任意界面。传<code>key</code>，可以回退到指定界面。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">this</span>.props.navigation.goBack();</div><div class="line"><span class="keyword">this</span>.props.navigation.goBack(<span class="literal">null</span>);</div><div class="line"><span class="keyword">this</span>.props.navigation.goBack(<span class="string">'Profile'</span>);</div></pre></td></tr></table></figure>
<p>关于<code>react-navigation</code>的基本用法已经了解的差不多了，至于更详细的用法，可以看官方文档。</p>
<p><strong>注意：</strong></p>
<p>全屏侧滑返回手势：系统默认有侧滑返回手势，距离屏幕距离为35，为了使用全屏侧滑，需要修改源码：在<code>react-navigation/src/views/CardStack.js</code>类，修改常量<code>GESTURE_RESPONSE_DISTANCE_HORIZONTAL</code>为<code>Dimensions.get(&#39;window&#39;).width</code>即可。</p>
<p>在<code>iOS</code>上，标题会居中，但是在<code>Android</code>上是居左的，想要<code>Android</code>上也居中，需要修改：<code>react-navigation/src/views/Header.js</code>中的<code>title</code>样式修改为<code>center</code>，并且在方法<code>_renderTitle</code>中注释掉</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (Platform.OS === <span class="string">'android'</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (!options.hasLeftComponent) &#123;</div><div class="line">        style.left = <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (!options.hasRightComponent) &#123;</div><div class="line">        style.right = <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这几句代码。</p>
<hr>
<h3 id="TabNavigator"><a href="#TabNavigator" class="headerlink" title="TabNavigator"></a>TabNavigator</h3><p><code>tab</code>选项卡的功能，在<code>iOS</code>上默认类似于<code>TabBar</code>，在<code>Android</code>中类似于<code>TabLayout</code>，先来看看构造方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">TabNavigator(RouteConfigs, TabNavigatorConfig)</div></pre></td></tr></table></figure>
<p><strong>RouteConfigs</strong></p>
<p>同样的，还是配置路由，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    Home:&#123;</div><div class="line">        screen:HomeTab,</div><div class="line">        <span class="comment">//navigationOptions:&#123;</span></div><div class="line">        <span class="comment">//    ....</span></div><div class="line">        <span class="comment">//&#125;</span></div><div class="line">    &#125;,</div><div class="line">    Car:&#123;</div><div class="line">        screen:CarTab</div><div class="line">    &#125;,</div><div class="line">    Profile:&#123;</div><div class="line">        screen:ProfileTab</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，你也可以配置<code>navigationOptions</code>，但是，在这里配置的优先级比在页面中配置的优先级高，所以，我们一般再单个页面中配置所有的<code>navigationOptions</code>。</p>
<p><strong>TabNavigatorConfig</strong></p>
<p></p><p></p>
<ul>
<li><code>tabBarComponent</code>: 默认两种方式，<code>TabBarBottom</code>和<code>TabBarTop</code>，可以通过如下代码导入：<code>import {TabBarBottom,TabBarTop} from &#39;react-navigation&#39;;</code>，这两者的区别主要是样式和位置的区别，<code>iOS</code>上默认使用<code>TabBarBottom</code>，<code>Android</code>上默认使用<code>TabBarTop</code>。</li>
<li><code>tabBarPosition</code>: 配置<code>tab</code>的位置，<code>top</code>和<code>bottom</code></li>
<li><code>swipeEnabled</code>: 是否可以滑动切换<code>tab</code></li>
<li><code>animationEnabled</code>: 点击选项卡切换界面是否需要动画</li>
<li><code>lazy</code>: 是否懒加载界面，默认一次加载所有的界面，我们最好设置为true</li>
<li><code>tabBarOptions</code>: <code>tab</code>的样式等配置，我们下面详细说</li>
<li><code>initialRouteName</code>，第一次初始化哪个界面，默认初始化第一个。</li>
<li><code>order</code>，<code>tab</code>排序，默认使用配置路由的顺序</li>
<li><code>paths</code>: 配置path</li>
<li><code>backBehavior</code>，当<code>Android</code>点击返回键的时候，做的处理，<code>initialRoute</code>返回到初始化的界面，<code>none</code>退出应用</li>
</ul>
<p>例子如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> Tab = TabNavigator(</div><div class="line">    &#123;</div><div class="line">        Home:&#123;</div><div class="line">            screen:HomeTab</div><div class="line">        &#125;,</div><div class="line">        Car:&#123;</div><div class="line">            screen:CarTab</div><div class="line">        &#125;,</div><div class="line">        Profile:&#123;</div><div class="line">            screen:ProfileTab</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        tabBarComponent:TabBarBottom,</div><div class="line">        tabBarPosition:<span class="string">'bottom'</span>,</div><div class="line">        swipeEnabled:<span class="literal">true</span>,</div><div class="line">        animationEnabled:<span class="literal">false</span>,</div><div class="line">        lazy:<span class="literal">true</span>,</div><div class="line">        initialRouteName:<span class="string">'Profile'</span>,</div><div class="line">        order:([<span class="string">'Profile'</span>,<span class="string">'Home'</span>,<span class="string">'Car'</span>]),</div><div class="line">        backBehavior:<span class="string">'none'</span></div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p><strong>tabBarOptions</strong></p>
<p>这个参数主要配置样式，针对<code>TabBarBottom</code>和<code>TabBarTop</code>。</p>
<p><code>TabBarBottom</code>:</p>
<p></p><p></p>
<ul>
<li><code>activeTintColor</code>: 选中的文字颜色</li>
<li><code>activeBackgroundColor</code>: 选中的背景色</li>
<li><code>inactiveTintColor</code>： 未选中的文字颜色</li>
<li><code>inactiveBackgroundColor</code>: 未选中的背景色</li>
<li><code>showLabel</code>: 是否显示标题，默认显示</li>
<li><code>style</code>: 定义item的样式</li>
<li><code>labelStyle</code>: 标题的样式</li>
</ul>
<p>例如：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">tabBarOptions:&#123;</div><div class="line">    activeTintColor:<span class="string">'red'</span>,</div><div class="line">    activeBackgroundColor:<span class="string">'blue'</span>,</div><div class="line">    inactiveTintColor:<span class="string">'yellow'</span>,</div><div class="line">    inactiveBackgroundColor:<span class="string">'#987'</span>,</div><div class="line">    showLabel:<span class="literal">true</span>,</div><div class="line">    labelStyle:&#123;</div><div class="line">        fontSize:<span class="number">12</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>TabBarTop</code>:</p>
<p></p><p></p>
<ul>
<li><code>activeTintColor</code>: 选中的文字颜色</li>
<li><code>inactiveTintColor</code>： 未选中的文字颜色</li>
<li><code>showIcon</code>: 是否显示图标，默认显示</li>
<li><code>showLabel</code>: 是否显示标题，默认显示</li>
<li><code>upperCaseLabel</code>: 使用大写字母</li>
<li><code>pressColor</code>: 定义颜色，大于<code>Android5.0</code>的一种按压效果</li>
<li><code>pressOpacity</code>: 按压下去的透明度，在<code>iOS</code>或者<code>Android5.0</code>之前</li>
<li><code>scrollEnabled</code>: 是否能够滚动，类似于今日头条的标题头</li>
<li><code>tabStyle</code>: 定义<code>item</code>的样式</li>
<li><code>indicatorStyle</code>: 指示器的颜色</li>
<li><code>labelStyle</code>: 文字的样式</li>
<li><code>iconStyle</code>: 图标的样式</li>
<li><code>style</code>: 定义<code>tab</code>的样式</li>
</ul>
<p>例如：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">tabBarOptions:&#123;</div><div class="line">    activeTintColor:<span class="string">'red'</span>,</div><div class="line">    inactiveTintColor:<span class="string">'yellow'</span>,</div><div class="line">    showIcon:<span class="literal">false</span>,</div><div class="line">    showLabel:<span class="literal">true</span>,</div><div class="line">    upperCaseLabel:<span class="literal">false</span>,</div><div class="line">    labelStyle:&#123;</div><div class="line">        fontSize:<span class="number">12</span></div><div class="line">    &#125;,</div><div class="line">    indicatorStyle:<span class="string">'green'</span>,</div><div class="line">    pressColor:<span class="string">'#823453'</span>,</div><div class="line">    pressOpacity:<span class="number">0.8</span>,</div><div class="line">    scrollEnabled:<span class="literal">true</span>,</div><div class="line">    tabStyle:&#123;</div><div class="line">        height:<span class="number">44</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>NavigationOptions</strong></p>
<p>当然，通过<code>NavigationOptions</code>来配置我们的<code>tabBarItem</code>:</p>
<p>

<ul>
<li><code>title</code>: 标题</li>
<li><code>tabBarVisible</code>: 是否可见</li>
<li><code>tabBarIcon</code>: 配置图片，当然，完全可以不使用图片</li>
<li><code>tabBarLabel</code>: 也是配置标题，只不过<code>title</code>既能配置<code>tab</code>的标题，也能配置<code>navigation</code>的标题</li>
</ul>
</p><p>例如：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">Profile:&#123;</div><div class="line">    screen:ProfileTab,</div><div class="line">    navigationOptions:(&#123;navigation&#125;)=&gt;(&#123;</div><div class="line">        tabBarLabel:<span class="string">'我的'</span>,</div><div class="line">        tabBarIcon:(&#123;focused,tintColor&#125;)=&gt;(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Image</span></span></span></div><div class="line">                <span class="attr">source</span>=<span class="string">&#123;focused?require(</span>'<span class="attr">..</span>/<span class="attr">..</span>/<span class="attr">images</span>/<span class="attr">user_hover</span>@<span class="attr">3x.png</span>')<span class="attr">:require</span>('<span class="attr">..</span>/<span class="attr">..</span>/<span class="attr">images</span>/<span class="attr">user</span>@<span class="attr">3x.png</span>')&#125;</div><div class="line">                <span class="attr">style</span>=<span class="string">&#123;&#123;width:30,height:30,tintColor:tintColor&#125;&#125;</span></div><div class="line">            /&gt;</div><div class="line">        )</div><div class="line">    &#125;),</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好了，<code>TabNavigator</code>也说的差不多了。当然，如果你想在某个界面切换<code>tab</code>，使用如下方法：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">this</span>.props.navigation.navigate(<span class="string">'Home'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="仿QQ主界面"><a href="#仿QQ主界面" class="headerlink" title="仿QQ主界面"></a>仿QQ主界面</h3><p>下面的例子是仿<code>QQ</code>主界面的，当然包括本篇文章的实例代码，请戳这里-&gt;<a href="http://git.oschina.net/guiyongdong/reactnavigationdemo" target="_blank" rel="external">戳我</a>。</p>
<p>运行效果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android38.gif?raw=true"><br></div>











]]></content>
    
    <summary type="html">
    
      &lt;p&gt;导航一直是&lt;code&gt;App&lt;/code&gt;开发中比较重要的一个组件，&lt;code&gt;ReactNative&lt;/code&gt;提供了两种导航组件供我们使用，分别是：&lt;code&gt;NavigatorIOS&lt;/code&gt;和&lt;code&gt;Navigator&lt;/code&gt;，但是前者只能用于&lt;code&gt;iOS&lt;/code&gt;平台，后者在&lt;code&gt;ReactNative&lt;/code&gt;0.44版本以后已经被移除了。好在有人提供了更好的导航组件，就是我们今天要讲的&lt;code&gt;react-navigation&lt;/code&gt;，并且&lt;code&gt;ReactNative&lt;/code&gt;官方更推荐我们使用此组件。&lt;/p&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="http://www.guiyongdong.com/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="http://www.guiyongdong.com/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之Service</title>
    <link href="http://www.guiyongdong.com/2017/05/12/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BService/"/>
    <id>http://www.guiyongdong.com/2017/05/12/一天一Android之Service/</id>
    <published>2017-05-12T04:00:17.000Z</published>
    <updated>2017-05-12T09:23:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>Android</code>系统中，知道为什么有些软件杀不死么？很大的原因就是<code>Service</code>。那<code>Service</code>是什么？</p>
<p><code>Service</code>是<code>Android</code>四大组件之一，开发中会经常用到它，例如当检测到<code>App</code>有新版本的时候，这时候我们一般会开启一个<code>Service</code>去后台下载新包，这时候，无论用户是否清除我们的<code>App</code>，都不会影响下载进度。</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android28.png?raw=true"><br></div>

<a id="more"></a>
<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p><code>Service</code>和<code>Activity</code>一样，都有各自的生命周期，不同的是，由于<code>Service</code>有两种启动方式，其生命周期也不同。</p>
<h5 id="startService"><a href="#startService" class="headerlink" title="startService"></a>startService</h5><p>当应用组件通过<code>startService</code>方法来启动<code>Service</code>时，<code>Service</code>则会处于启动状态，一旦服务启动，它就会在后台无限期的运行，生命周期独立于启动它的组件，即使启动它的组件已经销毁了也不受任何影响，由于启动的服务长期运行在后台，这会大量消耗手机的电量，因此，我们应该在任务执行完成之后调用<code>stopSelf()</code>来停止服务，或者通过其他应用组件调用<code>stopService</code>来停止服务。</p>
<p><code>startService</code>启动服务后，会执行如下生命周期：<code>onCreate()</code>-&gt;<code>onStart()(已经废弃)</code>-&gt;<code>onStartCommand()</code>-&gt;<code>onDestroy</code>。</p>
<p></p><p></p>
<ul>
<li><strong>onCreate():</strong>首次启动服务的时候，系统会调用这个方法，在<code>onStartCommand</code>和<code>onBind</code>方法之前，如果服务已经启动了，再次启动时，则不会调用此方法，因此可以在<code>onCreate</code>方法中做一些初始化的操作。比如要执行耗时的操作，可以在这里创建线程。</li>
<li><strong>onStartCommand():</strong>当通过<code>startService()</code>方法来启动服务的时候，在<code>onCreate</code>方法之后就会调用这个方法，此方法调用后，服务就启动了，将会在后台无限期的运行，直到通过<code>stopService</code>或者<code>stopSelf</code>方法来停止服务。</li>
<li><strong>onDestroy:</strong>当服务不再使用且将被销毁是，系统将调用此方法，服务应该事先此方法来清理所有资源，如线程等。</li>
</ul>
<p>了解完这几个生命周期方法后，我们来写一个简单的<code>Service</code>：</p>
<p>要使用<code>Service</code>就要通过继承<code>Service</code>类来实现，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SimpleService"</span>;</div><div class="line">    </div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onBind..."</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onCreate..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onStart..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onStartCommand..."</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onDestroy..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>切记，<code>Service</code>类写好后，需要在<code>AndroidManifest.xml</code>文件中注册：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".SimpleService"</span></div><div class="line">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后，我们在<code>Activity</code>中放置两个按钮，一个启动<code>Service</code>，一个停止<code>Service</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">        <span class="keyword">case</span> R.id.start_service:</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,SimpleService.class);</div><div class="line">            <span class="comment">// 启动服务</span></div><div class="line">            startService(intent);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> R.id.stop_service:</div><div class="line">            Intent service = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,SimpleService.class);</div><div class="line">            <span class="comment">// 停止服务</span></div><div class="line">            stopService(service);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到如下打印日志：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android30.png?raw=true"><br></div>

<blockquote>
<p>小结：通过startService方法启动的服务，服务会无限期的在后台运行，直到通过stopService或者stopSelf来终止服务。服务独立于启动它的组件，也就是说，当组件启动服务后，组件和服务就再也没有关系了。就算启动它的组件被销毁了，服务照样在后台运行。通过这种方式启动的服务不好与组件之间通信。</p>
</blockquote>
<h5 id="bindService"><a href="#bindService" class="headerlink" title="bindService"></a>bindService</h5><p>除了<code>startService</code>来启动服务之外，另外一种启动服务的方式就是通过<code>bindService</code>方法了，也就是绑定服务，其实通过它的名字就容易理解，绑定即将启动组件和服务绑定在一起。前面讲的通过<code>startService</code>方式启动的服务是与组件相独立的，即使启动服务的组件被销毁了，服务仍然在后台运行不受干扰。但是通过<code>bindSerivce</code>方式绑定的服务就不一样了，它与绑定组件的生命周期是有关的。如下：</p>
<p><strong>多个组件可以绑定到同一个服务上，如果只有一个组件绑定服务，当绑定的组件被销毁时，服务也就会停止了。如果是多个组件绑定到一个服务上，当绑定到该服务的所有组件都被销毁时，服务才会停止。</strong></p>
<p><code>bindService</code>绑定服务和<code>startService</code>的生命周期是不一样，<code>bindServie</code>的生命周期如下:<code>onCreate</code>-&gt;<code>onBind</code>-&gt;<code>onUnbind</code>-&gt;<code>onDestroy</code>。其中重要的就是<code>onBind</code>和<code>onUnbind</code>方法。</p>
<p>

<ul>
<li><strong>onBind():</strong>其他组件想通过<code>bindService</code>与服务绑定时，系统将会回调这个方法，在实现中，你必须返回一个<code>IBinder</code>接口，供客户端与服务进行通信，必须实现此方法，这个方法是<code>Service</code>的一个抽象方法，但是如果你不允许绑定的话，返回<code>null</code>就可以了。</li>
<li><strong>onUnbind():</strong>当所有与服务绑定的组件都解除绑定时，就会调用此方法。</li>
</ul>
</p><p>了解了这2个方法后，我们来看一下怎么绑定一个服务。</p>
<p><strong>1 首先，添加一个类 继承 Binder ,在Binder 类中添加其他组件要与服务交互的方法，并在onBind() 方法中返回IBinder 实例对象：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SimpleService"</span>;</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onBind..."</span>);</div><div class="line">        <span class="comment">//返回IBinder 接口对象</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyBinder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onUnbind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onUnbind..."</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onUnbind(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onCreate..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onStart..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onStartCommand..."</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onDestroy..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 添加一个类继承Binder</span></div><div class="line">    <span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span></span>&#123;</div><div class="line">        <span class="comment">// 添加要与外界交互的方法</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String  <span class="title">getStringInfo</span><span class="params">()</span></span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">"调用了服务中的方法"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2, 绑定服务的时候，需要提供一个ServiceConnection 接口，在接口回调中获取Binder 对象，与服务进行通信。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceDemoActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SimpleService.MyBinder mMyBinder;</div><div class="line">    <span class="comment">// 绑定/解除绑定 Service 回调接口</span></div><div class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            <span class="comment">// 绑定成功后回调</span></div><div class="line">            <span class="comment">//1 ,获取Binder接口对象</span></div><div class="line">            mMyBinder = (SimpleService.MyBinder) service;</div><div class="line">            <span class="comment">//2, 重服务获取数据</span></div><div class="line">            String content = mMyBinder.getStringInfo();</div><div class="line">            <span class="comment">// 3,界面提示</span></div><div class="line">            Toast.makeText(ServiceSimpleActivity.<span class="keyword">this</span>,content,Toast.LENGTH_LONG).show();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">           <span class="comment">// 解除绑定后回调</span></div><div class="line">            mMyBinder = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_service_demo);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//绑定服务</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindServer</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,SimpleService.class);</div><div class="line">        bindService(intent,mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//解除绑定</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unBindServer</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        unbindService(mConnection);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>点击绑定按钮，即绑定服务，并且在<code>onServiceConnected</code>中得到<code>MyBinder</code>对象，就可以通过这个对象和服务通信了，生命周期方法调用如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android31.png?raw=true"><br></div>

<p>可以看到，绑定服务的生命周期内依此调用了<code>onCreate</code>,<code>onBind</code>,<code>onUnbind</code>和 <code>onDestroy</code>方法，只有中间两个生命周期方法与<code>startService</code>启动服务是不同的。一张图就能看清两种方式的生命周期的异同：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android32.png?raw=true"><br></div>

<blockquote>
<p>tips: Service 的生命周期方法不同与Activity ，不需要调用超类的生命周期方法，如：不用调用 super.onCreate（）</p>
</blockquote>
<p><strong>注意，当使用startService方式启动Service的时候，可以通过手机的设置查看到启动的服务，而通过bindService方式启动的则不能。这很好理解，前者跟我们的应用程序的存活周期没有关系，有时候需要手动杀掉Service。</strong></p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android29.png?raw=true"><br></div>


<h3 id="Service通信"><a href="#Service通信" class="headerlink" title="Service通信"></a>Service通信</h3><h4 id="BroadcastReceiver"><a href="#BroadcastReceiver" class="headerlink" title="BroadcastReceiver"></a>BroadcastReceiver</h4><p>通过前文我们知道，<code>startService</code>方式启动的服务在后台，无限期地运行，并且与启动它的组件是独立的，启动<code>Service</code>之后也就与启动它的组件没有任何关系了。因此它是不能与启动它的组件之间相互通信的。虽然<code>Service</code>没有提供这种启动方式的通信方法，我们还是可以通过其他方式来解决的，这就用到了<code>BroadcastReceiver</code>。</p>
<p>场景描述：通过<code>startService</code>启动一个长期在后台运行的下载图片服务，然后在界面上点击下载按钮，通过<code>intent</code>传递一个下载链接给<code>Service</code>，在下载完成后，通过<code>BroadcastReceiver</code>通过<code>Activity</code>界面显示图片。看一下代码实现：</p>
<p><strong>Service:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IMAGE = <span class="string">"iamge_url"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RECEIVER_ACTION = <span class="string">"simpleservice"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"DownloadService"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_START_SERVICER = <span class="string">"startservice"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_DOWNLOAD = <span class="string">"startdownload"</span>;</div><div class="line">    <span class="keyword">private</span> Looper mServiceLooper;</div><div class="line">    <span class="keyword">private</span> ServiceHandler mServiceHandler;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServiceHandler</span><span class="params">(Looper looper)</span></span>&#123;</div><div class="line">            <span class="keyword">super</span>(looper);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="comment">// 工作线程做耗时下载</span></div><div class="line">            String url = (String) msg.obj;</div><div class="line">            Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                bitmap = Picasso.with(getApplicationContext()).load(url).get();</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">                intent.putExtra(<span class="string">"bitmap"</span>,bitmap);</div><div class="line">                intent.setAction(RECEIVER_ACTION);</div><div class="line">                <span class="comment">// 通知显示</span></div><div class="line">                LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//工作完成之后，停止服务</span></div><div class="line">            stopSelf();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 开启一个工作线程做耗时工作</span></div><div class="line">        HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"ServiceHandlerThread"</span>, Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">        thread.start();</div><div class="line">        <span class="comment">// 获取工作线程的Looper</span></div><div class="line">        mServiceLooper = thread.getLooper();</div><div class="line">        <span class="comment">// 创建工作线程的Handler</span></div><div class="line">        mServiceHandler = <span class="keyword">new</span> ServiceHandler(mServiceLooper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onStartCommand..."</span>);</div><div class="line">        <span class="keyword">if</span>(intent.getAction().equals(ACTION_DOWNLOAD))&#123;</div><div class="line">            handleCommand(intent);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(intent.getAction().equals(ACTION_START_SERVICER))&#123;</div><div class="line">            <span class="comment">//do nothing</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> START_STICKY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleCommand</span><span class="params">(Intent intent)</span></span>&#123;</div><div class="line">        String url = intent.getStringExtra(IMAGE);</div><div class="line">        <span class="comment">// 发送消息下载</span></div><div class="line">        Message message = mServiceHandler.obtainMessage();</div><div class="line">        message.obj = url;</div><div class="line">        mServiceHandler.sendMessage(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建了一个<code>DownloadService</code>，在里面启动了一个工作线程，在线程里下载图片，然后通过<code>BroadcastReceiver</code>通知<code>Activity</code>显示。</p>
<p><code>Activity</code>的代码很简单，注册<code>BroadcastReceiver</code>，在<code>onReceiver</code>中显示图片就好了，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceDemoActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ImageView mImageView;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> BroadcastReceiver mReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">            Bitmap bitmap = intent.getParcelableExtra(<span class="string">"bitmap"</span>);</div><div class="line">            mImageView.setImageBitmap(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_service_demo);</div><div class="line">        mImageView = (ImageView) findViewById(R.id.imageView);</div><div class="line"></div><div class="line">        <span class="comment">//注册广播</span></div><div class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">        intentFilter.addAction(DownloadService.RECEIVER_ACTION);</div><div class="line">        LocalBroadcastManager.getInstance(<span class="keyword">this</span>).registerReceiver(mReceiver,intentFilter);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDownload</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,DownloadService.class);</div><div class="line">        intent.putExtra(<span class="string">"url"</span>,<span class="string">"http://www.8kmm.com/UploadFiles/2012/8/201208140920132659.jpg"</span>);</div><div class="line">        intent.setAction(DownloadService.ACTION_DOWNLOAD);</div><div class="line">        startService(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android33.gif?raw=true" width="375"><br></div>


<h4 id="LocaService-使用Binder-和-服务通信"><a href="#LocaService-使用Binder-和-服务通信" class="headerlink" title="LocaService 使用Binder 和 服务通信"></a>LocaService 使用Binder 和 服务通信</h4><p>既然通过<code>startService</code>启动的服务与启动它的组件是独立的。相互通信比较麻烦，那么<code>Google</code>也提供了两者之间的通信方法，那就是组件绑定服务，也就是上文将的通过<code>bindService</code>将组件和服务绑定到一起。组件可以获取<code>Service</code>通过<code>onBind</code>返回的一个<code>IBinder</code>接口，这样两者就可以通信了，这也是<code>Service</code>应用类通信比较常用的方式。</p>
<p>下面就模拟一个用服务播放音乐的例子来讲一下组件通过Binder 接口和服务之间通信。<br>首先定义一个通信的接口 IPlayer：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPlayer</span> </span>&#123;</div><div class="line">    <span class="comment">// 播放</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// 暂停</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// 停止</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// 获取播放进度</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProgress</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// 获取时长</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDuration</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后添加一个MusicService 类，继承Service 实现 Iplayer 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicService</span> <span class="keyword">extends</span> <span class="title">Service</span> <span class="keyword">implements</span> <span class="title">IPlayer</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MusicService"</span>;</div><div class="line">    <span class="keyword">private</span> LocalService mBinder = <span class="keyword">new</span> LocalService();</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalService</span> <span class="keyword">extends</span> <span class="title">Binder</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> MusicService <span class="title">getService</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="comment">//这里直接将服务返回</span></div><div class="line">            <span class="keyword">return</span> MusicService.<span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBinder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"music play..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"music pause..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"music stop..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProgress</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDuration</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">10240</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中比较重要的就是内部类<code>LocalService</code>，继承<code>Binder</code>,里面提供一个<code>getService</code>方法，返回<code>MusicService</code>实例，组件通过<code>IBinder</code>获取到<code>Music</code>实例后，就可以和<code>Service</code>之间相互通信啦！</p>
<p>Activity中代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceDemoActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MusicService.LocalService mLocalService;</div><div class="line">    <span class="keyword">private</span> MusicService mMusicService;</div><div class="line">    </div><div class="line">    <span class="comment">// 绑定/解除绑定 Service 回调接口</span></div><div class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            <span class="comment">//1 ,获取Binder接口对象</span></div><div class="line">            mLocalService = (MusicService.LocalService) service;</div><div class="line">            <span class="comment">//2, 获取MusicService 实例</span></div><div class="line">            mMusicService = mLocalService.getService();</div><div class="line"></div><div class="line">            <span class="comment">// 只要拿到Music Service 实例之后，就可以调用接口方法了</span></div><div class="line">            <span class="comment">// 可以通过它来播放／暂停音乐，还可以通过它来获取当前播放音乐的进度，时长等等</span></div><div class="line"></div><div class="line">            mMusicService.play();</div><div class="line"></div><div class="line">            mMusicService.pause();</div><div class="line"></div><div class="line">            mMusicService.stop();</div><div class="line"></div><div class="line">            <span class="keyword">int</span> progress = mMusicService.getProgress();</div><div class="line">            Log.i(MusicService.TAG,<span class="string">"progress:"</span>+progress);</div><div class="line"></div><div class="line">            <span class="keyword">int</span> duration = mMusicService.getDuration();</div><div class="line">            Log.i(MusicService.TAG,<span class="string">"duration:"</span>+duration);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">           <span class="comment">// 解除绑定后回调</span></div><div class="line">            mMusicService = <span class="keyword">null</span>;</div><div class="line">            mLocalService = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_service_demo);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindServer</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MusicService.class);</div><div class="line">        bindService(intent,mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取到<code>MusicService</code>后，就可以调用接口方法了，比如：播放音乐，暂停、停止、获取进度等等。</p>
<h3 id="Service-总结"><a href="#Service-总结" class="headerlink" title="Service 总结"></a>Service 总结</h3><p><code>Service</code>有2种启动方式，<code>startService</code>启动服务，服务启动起来后，在后台无限期运行，直到通过<code>stopService</code>或者<code>stopSelf</code>停止服务，服务与组件独立，通信比较困难（但还是有办法的，通过<code>BroadcastReceiver</code>）。另一种方式就是<code>bindService</code>即绑定服务，组件和服务绑定在一起，服务的生命后期受组件影响，如果绑定到服务的组件全部被销毁了，那么服务也就会停止了。绑定服务的方式通常用于组件和服务之间 需要相互通信。<code>startService</code>这种 方式一般用于在后台执行任务，而不需要返回结果给组件。 这两种方式并非完全独立，也就是说，你可以绑定已经通过<code>startService</code>启动起来的服务，可以通过在<code>Intent</code>中添加<code>Action</code>来标示要执行的动作。比如：通过<code>Intent Action</code>标记要播放的音乐，调用<code>startService</code>来启动音乐服务播放音乐，在界面需要显示播放进度的时候，可以通过<code>binderService</code>来绑定服务，从而获取歌曲信息。这种情况下，<code>Service</code>需要实现两种方式的生命周期。这种情况下，除非所有客户端都已经取消绑定，否则通过<code>stopService</code>或者<code>stopSelf</code>是不能停止服务的。</p>
<p><code>Service</code>是运行在主线程中的，因此不能执行耗时的活着密集型的任务，如果要执行耗时操作或者密集型计算任务，请在服务中开启工作线程，在线程中执行。或者使用下面一节将要讲的<code>IntentService</code>。</p>
<hr>
<h3 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h3><p><code>IntentService</code>是<code>Service</code>的子类，它使用工作线程逐一处理所有启动请求，果您不要求服务同时处理多个请求，这是最好的选择。 您只需实现<code>onHandIntent</code>方法即可，该方法会接收每个启动请求的<code>Intent</code>，使您能够执行后台工作。</p>
<p><code>IntentService</code>默认为我们开启了一个工作线程，在任务执行完毕后，自动停止服务，因此在我们大多数的工作中，使用<code>IntentService</code>就够了，并且<code>IntentService</code>比较简单，只要实现一个方法<code>OnHandleIntent</code>，接下来看一下示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIntentService</span> <span class="keyword">extends</span> <span class="title">IntentService</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG =<span class="string">"MyIntentService"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyIntentService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(<span class="string">"MyIntentService"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(@Nullable Intent intent)</span> </span>&#123;</div><div class="line">        <span class="comment">// 这里已经是工作线程，在这里执行操作就行</span></div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> isMainThread =  Thread.currentThread() == Looper.getMainLooper().getThread();</div><div class="line">        Log.i(TAG,<span class="string">"is main thread:"</span>+isMainThread);</div><div class="line"></div><div class="line">        <span class="comment">// 执行耗时下载操作</span></div><div class="line">        mockDownload();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 模拟执行下载</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mockDownload</span><span class="params">()</span></span>&#123;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           Thread.sleep(<span class="number">5000</span>);</div><div class="line">           Log.i(TAG,<span class="string">"下载完成..."</span>);</div><div class="line">       &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后启动服务，看一下打印的日志，如下图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android34.png?raw=true"><br></div>

<h3 id="IntentService-总结"><a href="#IntentService-总结" class="headerlink" title="IntentService 总结"></a>IntentService 总结</h3><p><code>IntentService</code>是<code>Service</code>的子类，默认给我们开启了一个工作线程执行耗时任务，并且执行完任务后自 动停止服务。扩展<code>IntentService</code>比较简单，提供一个构造方法和实现<code>onHandleIntent</code>方法就可了，不用重写父类的其他方法。但是如果要绑定服务的话，还是要重写<code>onBind</code>返回一个<code>IBinder</code>的。使用<code>Service</code>可以同时执行多个请求，而使用<code>IntentService</code>只能同时执行一个请求。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;code&gt;Android&lt;/code&gt;系统中，知道为什么有些软件杀不死么？很大的原因就是&lt;code&gt;Service&lt;/code&gt;。那&lt;code&gt;Service&lt;/code&gt;是什么？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Service&lt;/code&gt;是&lt;code&gt;Android&lt;/code&gt;四大组件之一，开发中会经常用到它，例如当检测到&lt;code&gt;App&lt;/code&gt;有新版本的时候，这时候我们一般会开启一个&lt;code&gt;Service&lt;/code&gt;去后台下载新包，这时候，无论用户是否清除我们的&lt;code&gt;App&lt;/code&gt;，都不会影响下载进度。&lt;/p&gt;
&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android28.png?raw=true&quot; /&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之WebView</title>
    <link href="http://www.guiyongdong.com/2017/05/12/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BWebView/"/>
    <id>http://www.guiyongdong.com/2017/05/12/一天一Android之WebView/</id>
    <published>2017-05-12T01:55:54.000Z</published>
    <updated>2017-05-12T03:47:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>无论是<code>iOS</code>还是<code>Android</code>，通常都会用到混合模式开发，这就要使用到<code>WebView</code>了，通过<code>js</code>和原生交互，可以实现很多功能。今天就来研究一下<code>WebView</code>。</p>
<a id="more"></a>
<h3 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h3><p>加载一个网页：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">webView.loadUrl(<span class="string">"https://www.baidu.com/"</span>);</div></pre></td></tr></table></figure>
<p>加载一个静态html</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">webView.loadUrl(<span class="string">"file:///android_asset/test.html"</span>);</div></pre></td></tr></table></figure>
<h3 id="WebSettings"><a href="#WebSettings" class="headerlink" title="WebSettings"></a>WebSettings</h3><p>主要是针对<code>WebView</code>做一些设置，比如是否启用<code>js</code>等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">WebSettings webSettings = mWebView .getSettings();</div><div class="line"></div><div class="line"><span class="comment">//支持获取手势焦点，输入用户名、密码或其他</span></div><div class="line">webview.requestFocusFromTouch();</div><div class="line"></div><div class="line">setJavaScriptEnabled(<span class="keyword">true</span>);  <span class="comment">//支持js</span></div><div class="line">setPluginsEnabled(<span class="keyword">true</span>);  <span class="comment">//支持插件</span></div><div class="line"></div><div class="line">webSettings.setRenderPriority(RenderPriority.HIGH);  <span class="comment">//提高渲染的优先级</span></div><div class="line"></div><div class="line"><span class="comment">//设置自适应屏幕，两者合用</span></div><div class="line">setUseWideViewPort(<span class="keyword">true</span>);  <span class="comment">//将图片调整到适合webview的大小</span></div><div class="line">setLoadWithOverviewMode(<span class="keyword">true</span>); <span class="comment">// 缩放至屏幕的大小</span></div><div class="line"></div><div class="line">setSupportZoom(<span class="keyword">true</span>);  <span class="comment">//支持缩放，默认为true。是下面那个的前提。</span></div><div class="line">setBuiltInZoomControls(<span class="keyword">true</span>); <span class="comment">//设置内置的缩放控件。</span></div><div class="line"><span class="comment">//若上面是false，则该WebView不可缩放，这个不管设置什么都不能缩放。</span></div><div class="line">setTextZoom(<span class="number">2</span>);<span class="comment">//设置文本的缩放倍数，默认为 100</span></div><div class="line"></div><div class="line">setDisplayZoomControls(<span class="keyword">false</span>); <span class="comment">//隐藏原生的缩放控件</span></div><div class="line"></div><div class="line">setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN); <span class="comment">//支持内容重新布局</span></div><div class="line">supportMultipleWindows();  <span class="comment">//多窗口</span></div><div class="line">setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);  <span class="comment">//关闭webview中缓存</span></div><div class="line">setAllowFileAccess(<span class="keyword">true</span>);  <span class="comment">//设置可以访问文件</span></div><div class="line">setNeedInitialFocus(<span class="keyword">true</span>); <span class="comment">//当webview调用requestFocus时为webview设置节点</span></div><div class="line">setJavaScriptCanOpenWindowsAutomatically(<span class="keyword">true</span>); <span class="comment">//支持通过JS打开新窗口</span></div><div class="line">setLoadsImagesAutomatically(<span class="keyword">true</span>);  <span class="comment">//支持自动加载图片</span></div><div class="line">setDefaultTextEncodingName(<span class="string">"utf-8"</span>);<span class="comment">//设置编码格式</span></div><div class="line"></div><div class="line">setStandardFontFamily(<span class="string">""</span>);<span class="comment">//设置 WebView 的字体，默认字体为 "sans-serif"</span></div><div class="line">setDefaultFontSize(<span class="number">20</span>);<span class="comment">//设置 WebView 字体的大小，默认大小为 16</span></div><div class="line">setMinimumFontSize(<span class="number">12</span>);<span class="comment">//设置 WebView 支持的最小字体大小，默认为 8</span></div></pre></td></tr></table></figure>
<h3 id="WebViewClient"><a href="#WebViewClient" class="headerlink" title="WebViewClient"></a>WebViewClient</h3><p><code>WebViewClient</code>就是帮助<code>WebView</code>处理各种通知、请求事件的。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient()&#123;</div><div class="line">    <span class="comment">//此方法表示是否覆盖重定向，即是否允许打开重定向，</span></div><div class="line">    <span class="comment">//返回true表示不打开重定向，一般情况下，为了适配Android老版本，</span></div><div class="line">    <span class="comment">//我们这里统一返回true，调用我们自己的webView来打开重定向。</span></div><div class="line">    <span class="comment">//切记，不是所有请求都会走这个方法，只有重定向才会走</span></div><div class="line">    <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.LOLLIPOP)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, WebResourceRequest request)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"aaa"</span>, <span class="string">"shouldOverrideUrlLoading1: "</span>+request.getUrl().toString());</div><div class="line">        view.loadUrl(request.getUrl().toString());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//此方法同上</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"aaa"</span>, <span class="string">"shouldOverrideUrlLoading2: "</span>+url);</div><div class="line">        view.loadUrl(url);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//这个事件就是开始载入页面调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"aaa"</span>, <span class="string">"onPageStarted: "</span>+url);</div><div class="line">        <span class="keyword">super</span>.onPageStarted(view, url, favicon);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//在页面加载结束时调用。同样道理，我们可以关闭loading 条，切换程序动作。</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"aaa"</span>, <span class="string">"onPageFinished: "</span>+url);</div><div class="line">        <span class="keyword">super</span>.onPageFinished(view, url);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//加载错误信息</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedError</span><span class="params">(WebView view, WebResourceRequest request, WebResourceError error)</span> </span>&#123;</div><div class="line">        Toast.makeText(MyWebViewActivity.<span class="keyword">this</span>,error.toString(),Toast.LENGTH_SHORT).show();</div><div class="line">        Log.d(<span class="string">"aaa"</span>, <span class="string">"onReceivedError: "</span>+error.toString());</div><div class="line">        <span class="keyword">super</span>.onReceivedError(view, request, error);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadResource</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">       Log.d(<span class="string">"aaa"</span>, <span class="string">"onLoadResource: "</span>+url);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//此方法表示是否禁用网页中的按键事件，比如键盘输入等</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideKeyEvent</span><span class="params">(WebView view, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.shouldOverrideKeyEvent(view,event);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//拦截替换网络请求数据 我们可以在这里返回我们自己的数据</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> WebResourceResponse <span class="title">shouldInterceptRequest</span><span class="params">(WebView view, WebResourceRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.shouldInterceptRequest(view, request);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//同上</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> WebResourceResponse <span class="title">shouldInterceptRequest</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.shouldInterceptRequest(view, url);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//更新历史记录</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doUpdateVisitedHistory</span><span class="params">(WebView view, String url, <span class="keyword">boolean</span> isReload)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.doUpdateVisitedHistory(view, url, isReload);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//(应用程序重新请求网页数据)</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFormResubmission</span><span class="params">(WebView view, Message dontResend, Message resend)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onFormResubmission(view, dontResend, resend);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//（获取返回信息授权请求）</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedHttpAuthRequest</span><span class="params">(WebView view, HttpAuthHandler handler, String host, String realm)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onReceivedHttpAuthRequest(view, handler, host, realm);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写此方法可以让webview处理https请求。</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedSslError</span><span class="params">(WebView view, SslErrorHandler handler, SslError error)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onReceivedSslError(view, handler, error);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// (WebView发生改变时调用)</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScaleChanged</span><span class="params">(WebView view, <span class="keyword">float</span> oldScale, <span class="keyword">float</span> newScale)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onScaleChanged(view, oldScale, newScale);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//（Key事件未被加载时调用）</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUnhandledKeyEvent</span><span class="params">(WebView view, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onUnhandledKeyEvent(view, event);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="WebChromeClient"><a href="#WebChromeClient" class="headerlink" title="WebChromeClient"></a>WebChromeClient</h3><p><code>WebChromeClient</code>是辅助<code>WebView</code>处理<code>js</code>的各种事件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">mWebView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient()&#123;</div><div class="line"></div><div class="line">    <span class="comment">//当js调用alert()方法后，会调用此方法 返回true表示弹出</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsAlert</span><span class="params">(WebView view, String url, String message, JsResult result)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onJsAlert(view, url, message, result);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//处理prompt弹出框 </span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsPrompt</span><span class="params">(WebView view, String url, String message, String defaultValue, JsPromptResult result)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onJsPrompt(view, url, message, defaultValue, result);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//处理confirm弹出框 </span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsConfirm</span><span class="params">(WebView view, String url, String message, JsResult result)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onJsConfirm(view, url, message, result);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获得网页的加载进度 0-100 这里可以更新进度条</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onProgressChanged(view, newProgress);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获取网页中的title</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedTitle</span><span class="params">(WebView view, String title)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"aaa"</span>, <span class="string">"onReceivedTitle: "</span>+title);</div><div class="line">        <span class="keyword">super</span>.onReceivedTitle(view, title);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获取网页的icon</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedIcon</span><span class="params">(WebView view, Bitmap icon)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onReceivedIcon(view, icon);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="WebView的方法"><a href="#WebView的方法" class="headerlink" title="WebView的方法"></a>WebView的方法</h3><p>前进、后退:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">goBack()<span class="comment">//后退</span></div><div class="line">goForward()<span class="comment">//前进</span></div><div class="line">goBackOrForward(intsteps) <span class="comment">//以当前的index为起始点前进或者后退到历史记录中指定的steps，如果steps为负数则为后退，正数则为前进</span></div><div class="line">canGoForward()<span class="comment">//是否可以前进</span></div><div class="line">canGoBack() <span class="comment">//是否可以后退</span></div></pre></td></tr></table></figure>
<p>通常情况下，我们可以拦截系统的回退按钮，判断网页是否回退完，否者退出<code>Activity</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mWebView.canGoBack()) &#123;</div><div class="line">        mWebView.goBack();</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>WebView的状态：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">onResume() <span class="comment">//激活WebView为活跃状态，能正常执行网页的响应</span></div><div class="line">onPause()<span class="comment">//当页面被失去焦点被切换到后台不可见状态，需要执行onPause动过， onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。</span></div><div class="line"></div><div class="line">pauseTimers()<span class="comment">//当应用程序被切换到后台我们使用了webview， 这个方法不仅仅针对当前的webview而是全局的全应用程序的webview，它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。</span></div><div class="line">resumeTimers()<span class="comment">//恢复pauseTimers时的动作。</span></div><div class="line"></div><div class="line">destroy()<span class="comment">//销毁，关闭了Activity时，音乐或视频，还在播放。就必须销毁。</span></div></pre></td></tr></table></figure>
<p>注意：<code>webview</code>调用<code>destory</code>时，<code>webview</code>仍绑定在<code>Activity</code>上。这是由于自定义<code>webview</code>构建时传入了该<code>Activity</code>的<code>context</code>对象，因此需要先从父容器中移除<code>webview</code>,然后再销毁<code>webview</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">rootLayout.removeView(webView);</div><div class="line">webView.destroy();</div></pre></td></tr></table></figure>
<p>判断<code>WebView</code>是否已经滚动到页面底端或者顶端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">getScrollY() <span class="comment">//方法返回的是当前可见区域的顶端距整个页面顶端的距离,也就是当前内容滚动的距离.</span></div><div class="line">getHeight()或者getBottom() <span class="comment">//方法都返回当前WebView这个容器的高度</span></div><div class="line">getContentHeight() <span class="comment">//返回的是整个html的高度,但并不等同于当前整个页面的高度,因为WebView有缩放功能,所以当前整个页面的高度实际上应该是原始html的高度再乘上缩放比例</span></div></pre></td></tr></table></figure>
<p> 获取当前<code>WebView</code>的真实的高度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (webView.getContentHeight() * webView.getScale() == (webView.getHeight() + webView.getScrollY())) &#123;</div><div class="line">    <span class="comment">//已经处于底端</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(webView.getScrollY() == <span class="number">0</span>)&#123;</div><div class="line">    <span class="comment">//处于顶端</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="与js交互"><a href="#与js交互" class="headerlink" title="与js交互"></a>与js交互</h3><p>首先，必须打开与<code>js</code>交互的开关：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<p>原生调用<code>js</code>的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.KITKAT)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jsButtonClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">    mWebView.evaluateJavascript(<span class="string">"javascript:alert('s')"</span>, <span class="keyword">new</span> ValueCallback&lt;String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceiveValue</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">            Log.d(<span class="string">"aaa"</span>, <span class="string">"onReceiveValue: "</span>+value+<span class="string">"---thread:"</span>+Thread.currentThread());</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>js</code>调用原生方法，例如我们的<code>html</code>如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params"></span>)</span>&#123;</div><div class="line">         obj.play(<span class="string">'abc'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"black"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">onClick</span>=<span class="string">"play()"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"ic_launcher.png"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当点击图片的时候，会调用原生的<code>play</code>方法，并传递一个参数。</p>
<p>首先，创建一个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSObject</span> </span>&#123;</div><div class="line">    <span class="meta">@JavascriptInterface</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"aaa"</span>, <span class="string">"play: "</span>+name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>记住，方法名一定要和<code>js</code>中的方法名一致，而且参数也一定要一致。并且需要在方法前加<code>@JavascriptInterface</code>注解，这样<code>js</code>才能调用到我们的原生方法。然后这样设定：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">mWebView.addJavascriptInterface(<span class="keyword">new</span> JSObject(),<span class="string">"obj"</span>);</div></pre></td></tr></table></figure>
<p>这个<code>obj</code>就是我们在<code>js</code>中定义的对象。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关于<code>WebView</code>的基本使用就这么多了，基本上能满足我们的日常开发。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无论是&lt;code&gt;iOS&lt;/code&gt;还是&lt;code&gt;Android&lt;/code&gt;，通常都会用到混合模式开发，这就要使用到&lt;code&gt;WebView&lt;/code&gt;了，通过&lt;code&gt;js&lt;/code&gt;和原生交互，可以实现很多功能。今天就来研究一下&lt;code&gt;WebView&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之ViewPager</title>
    <link href="http://www.guiyongdong.com/2017/05/10/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BViewPager/"/>
    <id>http://www.guiyongdong.com/2017/05/10/一天一Android之ViewPager/</id>
    <published>2017-05-10T03:19:04.000Z</published>
    <updated>2017-05-11T07:26:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>ViewPager</code>在开发中使用的频率非常的高，例如<code>Banner</code>轮播图，首次启动显示的介绍图等，这篇博客就详细介绍一下<code>ViewPager</code>的使用。</p>
<a id="more"></a>
<h3 id="PagerAdapter"><a href="#PagerAdapter" class="headerlink" title="PagerAdapter"></a>PagerAdapter</h3><p><code>ViewPager</code>和<code>ListView</code>一样，也需要一个<code>Adapter</code>，即<code>PagerAdapter</code>，我们先来看看都有哪些方法可以实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BannerPageAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span> </span>&#123;</div><div class="line">      <span class="comment">//获取View的总数</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//当ViewPager的内容有所变化时,进行调用。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startUpdate</span><span class="params">(ViewGroup container)</span> </span>&#123;</div><div class="line">          <span class="keyword">super</span>.startUpdate(container);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//为给定的位置创建相应的View。创建View之后,需要在该方法中自行添加到container中。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">super</span>.instantiateItem(container, position);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//为给定的位置移除相应的View。通常情况下在view不显示的时候调用</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">          <span class="keyword">super</span>.destroyItem(container, position, object);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//ViewPager调用该方法来通知PageAdapter当前ViewPager显示的主要项,提供给用户对主要项进行操作的方法。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrimaryItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">          <span class="keyword">super</span>.setPrimaryItem(container, position, object);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//当ViewPager的内容变化结束时,进行调用。当该方法被调用时,必须确定所有的操作已经结束。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishUpdate</span><span class="params">(ViewGroup container)</span> </span>&#123;</div><div class="line">          <span class="keyword">super</span>.finishUpdate(container);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//确认View与实例对象是否相互对应。ViewPager内部用于获取View对应的ItemInfo。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//保存与PagerAdapter关联的任何实例状态。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> Parcelable <span class="title">saveState</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">super</span>.saveState();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//恢复与PagerAdapter关联的任何实例状态。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreState</span><span class="params">(Parcelable state, ClassLoader loader)</span> </span>&#123;</div><div class="line">          <span class="keyword">super</span>.restoreState(state, loader);</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="comment">//当ViewPager试图确定某个项的位置是否已更改时调用。默认有两个可选项:POSITION_UNCHANGED和POSITION_NONE。</span></div><div class="line">      <span class="comment">//POSITION_UNCHANGED:给定项的位置未变更</span></div><div class="line">      <span class="comment">//POSITION_NONE:给定项不再用于PagerAdapter中</span></div><div class="line">      <span class="comment">//其他值:可以根据具体的情况进行调整</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemPosition</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">super</span>.getItemPosition(object);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//新增方法,目前较多用于Design库中的TabLayout与ViewPager进行绑定时,提供显示的标题。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">super</span>.getPageTitle(position);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//获取给定位置的View的显示宽度比例,该比例是相对于ViewPager。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPageWidth</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">super</span>.getPageWidth(position);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>其实大部分方法我们都不需要实现。</p>
<h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3><p>接下来，就基于<code>ViewPager</code>撸一个无限滚动轮播图。先看运行效果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android27.gif?raw=true" width="375"><br></div>

<p>先说一下我们的大概思路，这里一共创建了三个类，继承于<code>RelativeLayout</code>的<code>BannerView</code>，继承于<code>PagerAdapter</code>的<code>BannerPageAdapter</code>和一个继承于<code>Runnable</code>的工具类<code>WeakRunnable</code>，只所以要创建一个<code>WeakRunnable</code>类，是因为防止内存泄露。因为轮播图会无限循环，这里会使用<code>Handler</code>无限执行。然后拦截<code>BannerView</code>触摸事件，来停止或者开启循环。</p>
<h4 id="WeakRunnable"><a href="#WeakRunnable" class="headerlink" title="WeakRunnable"></a>WeakRunnable</h4><p>先来看看<code>WeakRunnable</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeakRunnableEventListener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">weakRunnableEventCallBack</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> WeakReference&lt;WeakRunnableEventListener&gt; mListener;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeakRunnable</span><span class="params">(WeakRunnableEventListener listener)</span> </span>&#123;</div><div class="line">        mListener = <span class="keyword">new</span> WeakReference&lt;WeakRunnableEventListener&gt;(listener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        WeakRunnableEventListener listener = mListener.get();</div><div class="line">        <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">            listener.weakRunnableEventCallBack();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的代码很简单，定义了一个接口<code>WeakRunnableEventListener</code>，并且声明一个弱引用，来持有实现了<code>WeakRunnableEventListener</code>接口的类，并且在<code>run</code>方法中判断这个类是否还存在，如果存在，就回调<code>weakRunnableEventCallBack</code>方法五执行具体的任务代码。</p>
<h4 id="BannerPageAdapter"><a href="#BannerPageAdapter" class="headerlink" title="BannerPageAdapter"></a>BannerPageAdapter</h4><p>因为<code>ViewPager</code>需要一个<code>PagerAdapter</code>来决定如何显示，所以，我们这里创建类<code>BannerPageAdapter</code>继承于<code>PagerAdapter</code>，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BannerPageAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; mDataSource;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="comment">//缓存ImageView</span></div><div class="line">    <span class="keyword">private</span> List&lt;ImageView&gt; mCacheImageViews;</div><div class="line">    <span class="comment">//真实的数据个数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRealSize;</div><div class="line">    <span class="comment">//点击事件回调监听者</span></div><div class="line">    <span class="keyword">private</span> BannerView.BannerItemClickListener mListener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(BannerView.BannerItemClickListener listener)</span> </span>&#123;</div><div class="line">        mListener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BannerPageAdapter</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mContext = context;</div><div class="line">        mCacheImageViews = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重载数据源更新方法，并调用父类的方法来刷新数据源</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyDataSetChanged</span><span class="params">(List&lt;String&gt; dataSource)</span> </span>&#123;</div><div class="line">        mDataSource = dataSource;</div><div class="line">        mRealSize = mDataSource.size();</div><div class="line">        <span class="keyword">super</span>.notifyDataSetChanged();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mDataSource == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (mRealSize == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> view == object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        position = position%mRealSize;</div><div class="line">        ImageView imageView;</div><div class="line">        <span class="comment">//首先去缓存中取ImageView，如果取不到再创建</span></div><div class="line">        <span class="keyword">if</span> (mCacheImageViews.size() == <span class="number">0</span>) &#123;</div><div class="line">            imageView = <span class="keyword">new</span> ImageView(mContext);</div><div class="line">            imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);</div><div class="line">            imageView.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            imageView = mCacheImageViews.get(mCacheImageViews.size()-<span class="number">1</span>);</div><div class="line">            mCacheImageViews.remove(imageView);</div><div class="line">        &#125;</div><div class="line">        imageView.setId(position);</div><div class="line">        String url = mDataSource.get(position);</div><div class="line">        Glide.with(mContext).load(url).into(imageView);</div><div class="line">        ViewGroup.LayoutParams layoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</div><div class="line">        container.addView(imageView,layoutParams);</div><div class="line">        <span class="keyword">return</span> imageView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mCacheImageViews.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            mCacheImageViews.clear();</div><div class="line">        &#125;</div><div class="line">        container.removeView((View) object);</div><div class="line">        mCacheImageViews.add((ImageView) object);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> position = v.getId();</div><div class="line">        <span class="keyword">if</span> (mListener != <span class="keyword">null</span>) &#123;</div><div class="line">            mListener.onItemClick(position);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码也很简单，</p>
<p>在构造方法中，我们初始化了一个用于缓存<code>ImageView</code>的集合。</p>
<p>重写了父类的<code>notifyDataSetChanged</code>，这里我们追加一个数据源集合，并调用父类的方法，来刷新数据。</p>
<p>在<code>getCount</code>方法中，如果数据源为空，或者数据源的数量为空，返回0，否则返回最大数，因为我们要做无限轮播。</p>
<p>在<code>instantiateItem</code>方法中，首先算出真正的位置，直接<code>position%mRealSize</code>就可以得到当前的位置，然后去缓存集合中取<code>ImageView</code>，如果<code>mCacheImageViews</code>中没有缓存的<code>ImageView</code>，那么直接创建<code>ImageView</code>，并设置点击事件的监听者为自己。如果缓存中有，直接取出来使用，这里使用<code>Glide</code>来加载网络图片，记住，使用<code>Glide</code>就不能使用<code>setTag</code>，这里使用<code>setId</code>。最后一点，一定要将<code>ImageView</code>添加到<code>container</code>中。</p>
<p>在<code>destroyItem</code>方法中，我们将销毁的<code>Imageview</code>添加到缓存中，以备下次使用。</p>
<p>最后，在点击事件中，回调监听者。</p>
<h4 id="BannerView"><a href="#BannerView" class="headerlink" title="BannerView"></a>BannerView</h4><p>再来看我们的<code>BannerView</code>，继承于<code>RelativeLayout</code>，内部持有一个<code>ViewPager</code>，一个<code>BannerPageAdapter</code>，一个<code>WeakRunnable</code>，代码也很简单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BannerView</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> <span class="keyword">implements</span> <span class="title">WeakRunnable</span>.<span class="title">WeakRunnableEventListener</span>, <span class="title">ViewPager</span>.<span class="title">OnPageChangeListener</span> </span>&#123;</div><div class="line">    <span class="comment">//每次循环时间</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> SSUBTIME = <span class="number">3000</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 点击监听</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BannerItemClickListener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> ViewPager mViewPager;</div><div class="line">    <span class="keyword">private</span> BannerPageAdapter mAdapter;</div><div class="line">    <span class="keyword">private</span> LinearLayout mIndicatorLayout;</div><div class="line">    <span class="keyword">private</span> Handler mHandler;</div><div class="line">    <span class="keyword">private</span> WeakRunnable mRunnable;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;ImageView&gt; mIndicators;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastIndex;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRealSize;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BannerView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        initView(context);</div><div class="line">        initEvent();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化视图</div><div class="line">     * <span class="doctag">@param</span> context 上下文</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mViewPager = <span class="keyword">new</span> ViewPager(context);</div><div class="line">        RelativeLayout.LayoutParams params = <span class="keyword">new</span> LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</div><div class="line">        addView(mViewPager,params);</div><div class="line">        mAdapter = <span class="keyword">new</span> BannerPageAdapter(context);</div><div class="line">        mViewPager.setAdapter(mAdapter);</div><div class="line">        mViewPager.addOnPageChangeListener(<span class="keyword">this</span>);</div><div class="line">        mIndicatorLayout = <span class="keyword">new</span> LinearLayout(context);</div><div class="line">        RelativeLayout.LayoutParams indicatorParams = <span class="keyword">new</span> LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);</div><div class="line">        indicatorParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);</div><div class="line">        indicatorParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);</div><div class="line">        indicatorParams.setMargins(<span class="number">0</span>,<span class="number">0</span>,<span class="number">20</span>,<span class="number">20</span>);</div><div class="line">        addView(mIndicatorLayout,indicatorParams);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化事件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">        mHandler = <span class="keyword">new</span> Handler();</div><div class="line">        mRunnable = <span class="keyword">new</span> WeakRunnable(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 动态添加指示器</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addIndicator</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mIndicators == <span class="keyword">null</span>) &#123;</div><div class="line">            mIndicators = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            mIndicators.clear();</div><div class="line">        &#125;</div><div class="line">        mIndicatorLayout.removeAllViews();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">            ImageView indicatorView = <span class="keyword">new</span> ImageView(getContext());</div><div class="line">            LinearLayout.LayoutParams params = <span class="keyword">new</span> LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);</div><div class="line">            params.setMargins(<span class="number">0</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">0</span>);</div><div class="line">            params.gravity = Gravity.CENTER_VERTICAL;</div><div class="line">            mIndicatorLayout.addView(indicatorView,params);</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                indicatorView.setBackgroundResource(R.drawable.indicator_selected);</div><div class="line">                mLastIndex = <span class="number">0</span>;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                indicatorView.setBackgroundResource(R.drawable.indicator_normal);</div><div class="line">            &#125;</div><div class="line">            mIndicators.add(indicatorView);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 修改选中的指示器</div><div class="line">     * <span class="doctag">@param</span> index 选中</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changeIndicator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mLastIndex == index) <span class="keyword">return</span>;</div><div class="line">        ImageView lastImageView = mIndicators.get(mLastIndex);</div><div class="line">        lastImageView.setBackgroundResource(R.drawable.indicator_normal);</div><div class="line">        ImageView nowImageView = mIndicators.get(index);</div><div class="line">        nowImageView.setBackgroundResource(R.drawable.indicator_selected);</div><div class="line">        mLastIndex = index;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 定时回调</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">weakRunnableEventCallBack</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> currentIndex = mViewPager.getCurrentItem()+<span class="number">1</span>;</div><div class="line">        mViewPager.setCurrentItem(currentIndex);</div><div class="line">        mHandler.postDelayed(mRunnable,SSUBTIME);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 数据源改变</div><div class="line">     * <span class="doctag">@param</span> dataSource 数据源</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyDataSetChanged</span><span class="params">(List&lt;String&gt; dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (dataSource == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (dataSource.size() == <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">        mRealSize = dataSource.size();</div><div class="line">        mAdapter.notifyDataSetChanged(dataSource);</div><div class="line">        mViewPager.setCurrentItem(Integer.MAX_VALUE/<span class="number">2</span> - Integer.MAX_VALUE/<span class="number">2</span>%dataSource.size());</div><div class="line">        addIndicator(dataSource.size());</div><div class="line">        mHandler.postDelayed(mRunnable,SSUBTIME);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置点击事件监听者</div><div class="line">     * <span class="doctag">@param</span> listener 监听者</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(BannerItemClickListener listener)</span> </span>&#123;</div><div class="line">        mAdapter.setListener(listener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> index = position % mRealSize;</div><div class="line">        changeIndicator(index);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (MotionEventCompat.getActionMasked(ev) == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">            mHandler.removeCallbacks(mRunnable);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (MotionEventCompat.getActionMasked(ev) == MotionEvent.ACTION_UP || MotionEventCompat.getActionMasked(ev) == MotionEvent.ACTION_CANCEL) &#123;</div><div class="line">            mHandler.postDelayed(mRunnable,SSUBTIME);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，在构造方法中，初始化<code>ViewPager</code>，设置<code>Adapter</code>，初始化事件等。</p>
<p>在重新设置数据源以后，通知<code>Adapter</code>更新数据，并设置<code>ViewPager</code>的当前项。最主要的是<code>onPageSelected</code>方法和<code>dispatchTouchEvent</code>方法，在<code>onPageSelected</code>方法中，我们需要修改当前指示器。在<code>dispatchTouchEvent</code>方法中，我们需要监听触摸手势，如果当前手势为按压，我们要停掉滚动，如果离开，我们再次开启。</p>
<p>在<code>Activity</code>中这样使用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.wangyidemo.MainActivity"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.guiyongdong.wangyidemo.banner.BannerView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"150dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/bannerView"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">com.guiyongdong.wangyidemo.banner.BannerView</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    BannerView mBannerView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        mBannerView = (BannerView) findViewById(R.id.bannerView);</div><div class="line"></div><div class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        arrayList.add(<span class="string">"https://f11.baidu.com/it/u=62466529,3197984907&amp;fm=72"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://f11.baidu.com/it/u=1702154046,3138678857&amp;fm=72"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2506029705,946578911&amp;fm=23&amp;gp=0.jpg"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=331414147,1213722392&amp;fm=23&amp;gp=0.jpg"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2863772336,3300899200&amp;fm=23&amp;gp=0.jpg"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://f11.baidu.com/it/u=62466529,3197984907&amp;fm=72"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://f11.baidu.com/it/u=1702154046,3138678857&amp;fm=72"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2506029705,946578911&amp;fm=23&amp;gp=0.jpg"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=331414147,1213722392&amp;fm=23&amp;gp=0.jpg"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2863772336,3300899200&amp;fm=23&amp;gp=0.jpg"</span>);</div><div class="line"></div><div class="line">        mBannerView.notifyDataSetChanged(arrayList);</div><div class="line">        mBannerView.setOnItemClickListener(<span class="keyword">new</span> BannerView.BannerItemClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">""</span>+index,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，一个无限滚动轮播图就好了。</p>
<h3 id="FragmentPageAdapter"><a href="#FragmentPageAdapter" class="headerlink" title="FragmentPageAdapter"></a>FragmentPageAdapter</h3><p>通常情况下，除了<code>PagerAdapter</code>，我们还可以使用它的两个子类：<code>FragmentStatePagerAdapter</code>和<code>FragmentPagerAdapter</code>，从名字我们就可以看出，这两个适配器主要是针对<code>Fragment</code>的。我们先来看看<code>FragmentPagerAdapter</code>是如何使用的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main2Activity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    MyAdapter mAdapter;</div><div class="line">    ViewPager mPager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main2);</div><div class="line"></div><div class="line">        mAdapter = <span class="keyword">new</span> MyAdapter(getSupportFragmentManager());</div><div class="line">        mPager = (ViewPager) findViewById(R.id.pager);</div><div class="line">        mPager.setAdapter(mAdapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(FragmentManager fm)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(fm);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyFragment();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">            View view = inflater.inflate(R.layout.fragment_pager_list,container,<span class="keyword">false</span>);</div><div class="line">            <span class="keyword">return</span> view;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不难看出，<code>FragmentPagerAdapter</code>只需要我们实现三个方法，一个构造方法，一个<code>getCount()</code>返回几项，<code>getItem(int position)</code>返回具体的<code>Fragment</code>。也用法也是很简单的。</p>
<p><code>FragmentStatePagerAdapter</code>和<code>FragmentPagerAdapter</code>用法一样，只是他们内部缓存的策略不是很一样<code>FragmentStatePagerAdapter</code>会在<code>destroyItem</code>中将已经消失的<code>Fragment</code>移除出去，所以他会一直调用<code>getItem</code>来创建，而<code>FragmentPagerAdapter</code>则不会，所以，如果我们的页数比较多的时候，建议使用<code>FragmentStatePagerAdapter</code>，并做适当的缓存策略，防止一直创建<code>Fragment</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;ViewPager&lt;/code&gt;在开发中使用的频率非常的高，例如&lt;code&gt;Banner&lt;/code&gt;轮播图，首次启动显示的介绍图等，这篇博客就详细介绍一下&lt;code&gt;ViewPager&lt;/code&gt;的使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之Glide详解</title>
    <link href="http://www.guiyongdong.com/2017/05/09/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BGlide%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.guiyongdong.com/2017/05/09/一天一Android之Glide详解/</id>
    <published>2017-05-09T09:12:03.000Z</published>
    <updated>2017-05-10T03:14:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>图片可以丰富<code>App</code>的显示效果，但是图片也是最难处理的，因为通常情况下，图片是最耗内存的。</p>
<p><code>iOS</code>的同学都知道<code>SDWebImage</code>，它极大的简化了我们对图片的操作。而<code>Android</code>端的图片加载框架则有很多，<code>Volley</code>、<code>Picasso</code>和<code>Glide</code>，今天我们主要说的就是<code>Glide</code>。</p>
<a id="more"></a>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>首先使用<code>gradle</code>导入<code>Glide</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &apos;com.github.bumptech.glide:glide:3.7.0&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在导入之前，最好先去<code>Github</code>上查看一下最新版本。当然，需要加入网络权限。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ImageView mImageView;</div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        mImageView = (ImageView) findViewById(R.id.image_view);</div><div class="line">        mButton = (Button) findViewById(R.id.loadImage);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        String url = <span class="string">"https://f10.baidu.com/it/u=1863145503,1330064667&amp;fm=72"</span>;</div><div class="line">        Glide.with(<span class="keyword">this</span>)</div><div class="line">                .load(url)</div><div class="line">                .into(mImageView);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="with"><a href="#with" class="headerlink" title="with()"></a>with()</h5><p>先来看看<code>with</code>方法，<code>with</code>方法可以接收<code>Context</code>、<code>Activity</code>、<code>FragmentActivity</code>、<code>Fragment</code>，这四种类型的参数。此方法传入的实例决定<code>Glide</code>加载图片的生命周期，如果传入的是<code>Activity</code>的实例，当<code>Activity</code>被销毁的时候，图片加载也会停止。此方法返回一个<code>RequestManager</code>对象。</p>
<h5 id="load"><a href="#load" class="headerlink" title="load()"></a>load()</h5><p><code>load</code>方法用于指定加载的图片资源，可以是网络图片，本地图片，应用资源，二进制流，Uri对象等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 加载本地图片</span></div><div class="line">File file = <span class="keyword">new</span> File(getExternalCacheDir() + <span class="string">"/image.jpg"</span>);</div><div class="line">Glide.with(<span class="keyword">this</span>).load(file).into(mImageView);</div><div class="line"></div><div class="line"><span class="comment">// 加载应用资源</span></div><div class="line"><span class="keyword">int</span> resource = R.drawable.image;</div><div class="line">Glide.with(<span class="keyword">this</span>).load(resource).into(mImageView);</div><div class="line"></div><div class="line"><span class="comment">// 加载二进制流</span></div><div class="line"><span class="keyword">byte</span>[] image = getImageBytes();</div><div class="line">Glide.with(<span class="keyword">this</span>).load(image).into(mImageView);</div><div class="line"></div><div class="line"><span class="comment">// 加载Uri对象</span></div><div class="line">Uri imageUri = getImageUri();</div><div class="line">Glide.with(<span class="keyword">this</span>).load(imageUri).into(mImageView);</div></pre></td></tr></table></figure>
<h5 id="into"><a href="#into" class="headerlink" title="into()"></a>into()</h5><p><code>into</code>表示将下载好的图片显示在哪个<code>ImageView</code>上。当然，有时候我们需要在图片下载完成以后做一些事情，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Glide.with(this)</div><div class="line">     .load(imageUri)</div><div class="line">     .into(new SimpleTarget&lt;Bitmap&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void onResourceReady(Bitmap resource, GlideAnimation&lt;? super Bitmap&gt; glideAnimation) &#123;</div><div class="line">				     //处理图片</div><div class="line">            &#125;</div><div class="line">     &#125;);;</div></pre></td></tr></table></figure>
<p>上面三个方法组成了一个完整的加载过程，在这个加载过程中，我们还可以添加其他的配置。下面的方法都是添加在<code>load</code>和<code>into</code>之间。</p>
<h5 id="asBitmap"><a href="#asBitmap" class="headerlink" title="asBitmap()"></a>asBitmap()</h5><p>设置图片的格式为静态图片，如果要加载的图片格式是<code>gif</code>，那么会显示第一帧的静态图片。</p>
<h5 id="asGif"><a href="#asGif" class="headerlink" title="asGif()"></a>asGif()</h5><p>设置图片的格式为动态图片，如果要加载的图片格式是静态图片，那么会直接回显示错误图片。</p>
<h5 id="placeholder"><a href="#placeholder" class="headerlink" title="placeholder()"></a>placeholder()</h5><p>此方法用于设置一个占位图 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">String url = &quot;https://f10.baidu.com/it/u=1863145503,1330064667&amp;fm=72&quot;;</div><div class="line">Glide.with(this)</div><div class="line">        .load(url)</div><div class="line">        .placeholder(R.mipmap.ic_launcher)</div><div class="line">        .into(mImageView);</div></pre></td></tr></table></figure>
<h5 id="diskCacheStrategy"><a href="#diskCacheStrategy" class="headerlink" title="diskCacheStrategy()"></a>diskCacheStrategy()</h5><p>此方法主要用作与磁盘缓存，可传参数为:</p>
<ul>
<li><code>DiskCacheStrategy.ALL</code>: 即缓存原图又缓存压缩后的图</li>
<li><code>DiskCacheStrategy.NONE</code>：不缓存</li>
<li><code>DiskCacheStrategy.SOURCE</code>：原图缓存</li>
<li><code>DiskCacheStrategy.RESULT</code>：缓存压缩后的图片，因为<code>Glide</code>通常不会把原图显示到界面上，例如我们的<code>ImageView</code>的大小是50x50，而图片的大小是200x200，如果我们原图显示，会造成不必要的内存浪费。所以<code>Glide</code>会根据图片的实际大小来压缩。</li>
</ul>
<p><strong>注意：</strong>如果显示的图片位<code>gif</code>格式的图片，最好不缓存，因为<code>Glide</code>会一帧一帧的缓存图片。</p>
<h5 id="skipMemoryCache"><a href="#skipMemoryCache" class="headerlink" title="skipMemoryCache()"></a>skipMemoryCache()</h5><p>此方法表示是否跳过内存缓存，设置为<code>true</code>表示不进行内存缓存。</p>
<h5 id="error"><a href="#error" class="headerlink" title="error()"></a>error()</h5><p>设置一个加载失败的图片</p>
<h5 id="animate"><a href="#animate" class="headerlink" title="animate()"></a>animate()</h5><p>设置加载成功后，显示的动画</p>
<h5 id="override"><a href="#override" class="headerlink" title="override()"></a>override()</h5><p>设置图片加载成功后的大小，例如：<code>verride(300,300)</code></p>
<h5 id="priority"><a href="#priority" class="headerlink" title="priority()"></a>priority()</h5><p>设置下载的优先级 </p>
<h5 id="clearDiskCache"><a href="#clearDiskCache" class="headerlink" title="clearDiskCache()"></a>clearDiskCache()</h5><p>清理磁盘缓存，需要在子线程中执行 <code>Glide.get(this).clearDiskCache();</code></p>
<h5 id="clearMemory"><a href="#clearMemory" class="headerlink" title="clearMemory()"></a>clearMemory()</h5><p>清理内存缓存，可以在UI线程执行 <code>Glide.get(this).clearMemory();</code></p>
<hr>
<h3 id="GlideMoudle"><a href="#GlideMoudle" class="headerlink" title="GlideMoudle"></a>GlideMoudle</h3><p><code>GlideMoudle</code>是一个抽象方法，全局改变<code>Glide</code>行为的一个方式，通过全局<code>GlideMoudle</code>配置<code>Glide</code>，用<code>GlideBuilder</code>设置选项，用<code>Glide</code>注册<code>ModelLoader</code>等。</p>
<h5 id="自定义一个GlideMoudle"><a href="#自定义一个GlideMoudle" class="headerlink" title="自定义一个GlideMoudle"></a>自定义一个GlideMoudle</h5><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlideModule</span> <span class="keyword">implements</span> <span class="title">GlideModule</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyOptions</span><span class="params">(Context context, GlideBuilder builder)</span> </span>&#123;</div><div class="line">        <span class="comment">//配置</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerComponents</span><span class="params">(Context context, Glide glide)</span> </span>&#123;</div><div class="line">		<span class="comment">//注册</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="AndroidManifest-xml注册"><a href="#AndroidManifest-xml注册" class="headerlink" title="AndroidManifest.xml注册"></a>AndroidManifest.xml注册</h5><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.wangyidemo"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        ...</div><div class="line">        <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.wangyidemo.MyGlideModule"</span></span></div><div class="line">                   <span class="attr">android:value</span>=<span class="string">"GlideModule"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="添加混淆处理"><a href="#添加混淆处理" class="headerlink" title="添加混淆处理"></a>添加混淆处理</h5><p>因为我们的代码有可能添加混淆，所以不要给<code>MyGlideModule</code>添加混淆</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">-keepnames class com.guiyongdong.wangyidemo.MyGlideModule</div></pre></td></tr></table></figure>
<h5 id="设置Glide内存缓存大小"><a href="#设置Glide内存缓存大小" class="headerlink" title="设置Glide内存缓存大小"></a>设置Glide内存缓存大小</h5><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) Runtime.getRuntime().maxMemory(); <span class="comment">//获取系统分配给应用的总内存大小</span></div><div class="line"><span class="keyword">int</span> memoryCacheSize = maxMemory/<span class="number">8</span>; <span class="comment">//设置图片内存缓存占八分之一</span></div><div class="line">builder.setMemoryCache(<span class="keyword">new</span> LruResourceCache(memoryCacheSize)); <span class="comment">//设置内存缓存大小</span></div></pre></td></tr></table></figure>
<h5 id="设置Glide磁盘缓存大小"><a href="#设置Glide磁盘缓存大小" class="headerlink" title="设置Glide磁盘缓存大小"></a>设置Glide磁盘缓存大小</h5><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">File cacheDir = context.getExternalCacheDir(); <span class="comment">//设置缓存路径</span></div><div class="line"><span class="keyword">int</span> diskCacheSize = <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">30</span>; <span class="comment">//缓存大小</span></div><div class="line">builder.setDiskCache(<span class="keyword">new</span> DiskLruCacheFactory(cacheDir.getParent(),<span class="string">"glide"</span>,diskCacheSize)); <span class="comment">//设置磁盘缓存大小 glide 表示文件名</span></div></pre></td></tr></table></figure>
<p>也可以通过如下两种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">//存放在data/data/xxxx/cache/</span></div><div class="line">builder.setDiskCache(<span class="keyword">new</span> InternalCacheDiskCacheFactory(context, <span class="string">"glide"</span>, diskCacheSize));</div><div class="line"><span class="comment">//存放在外置文件浏览器</span></div><div class="line">builder.setDiskCache(<span class="keyword">new</span> ExternalCacheDiskCacheFactory(context, <span class="string">"glide"</span>, diskCacheSize));</div></pre></td></tr></table></figure>
<h5 id="设置图片的解码格式"><a href="#设置图片的解码格式" class="headerlink" title="设置图片的解码格式"></a>设置图片的解码格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">//设置图片解码格式</span></div><div class="line">builder.setDecodeFormat(DecodeFormat.PREFER_ARGB_8888);</div></pre></td></tr></table></figure>
<h5 id="设置缓存内存大小"><a href="#设置缓存内存大小" class="headerlink" title="设置缓存内存大小"></a>设置缓存内存大小</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//设置BitmapPool缓存内存大小</div><div class="line">builder.setBitmapPool(new LruBitmapPool(memoryCacheSize));</div></pre></td></tr></table></figure>
<p>基本上的关于<code>Glide</code>的用法已经了解的差不多了，接下来，如果有时间，会了解一下<code>Glide</code>的源码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图片可以丰富&lt;code&gt;App&lt;/code&gt;的显示效果，但是图片也是最难处理的，因为通常情况下，图片是最耗内存的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iOS&lt;/code&gt;的同学都知道&lt;code&gt;SDWebImage&lt;/code&gt;，它极大的简化了我们对图片的操作。而&lt;code&gt;Android&lt;/code&gt;端的图片加载框架则有很多，&lt;code&gt;Volley&lt;/code&gt;、&lt;code&gt;Picasso&lt;/code&gt;和&lt;code&gt;Glide&lt;/code&gt;，今天我们主要说的就是&lt;code&gt;Glide&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之存储目录</title>
    <link href="http://www.guiyongdong.com/2017/05/05/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8B%E5%AD%98%E5%82%A8%E7%9B%AE%E5%BD%95/"/>
    <id>http://www.guiyongdong.com/2017/05/05/一天一Android之存储目录/</id>
    <published>2017-05-05T03:47:05.000Z</published>
    <updated>2017-05-05T07:42:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>iOS</code>系统中，系统会为每个应用分配一个独立的空间，用来存放应用产生的数据，并且每个应用只能访问自己的存储空间。由于<code>Android</code>手机可以插拔内存卡，所以，相对于<code>iOS</code>来说，存储方式更多一点。</p>
<a id="more"></a>
<h3 id="内部存储空间的应用私有目录"><a href="#内部存储空间的应用私有目录" class="headerlink" title="内部存储空间的应用私有目录"></a>内部存储空间的应用私有目录</h3><hr>
<p>在<code>Android</code>系统中，当你安装了某个应用后，系统会为此应用分配一块私有存储空间，如果手机未<code>Root</code>，用户是看不到这个空间下的内容的，但是开发人员通过<code>DDMS</code>可以查看此空间，文件目录为：<code>data/data/应用包名</code>，如图：</p>
<div align="center"><br><img src="http://ocq7gtgqu.bkt.clouddn.com/1493214455.jpg" width="375"><br></div>

<p>这个文件夹用于<code>App</code>中的<code>WebView</code>缓存页面信息，<code>SharedPreferences</code>和<code>SQLiteDatabase</code>持久化应用相关数据等。当然，我们可以通过<code>ContextWrapper</code>提供的方法来获取相应的目录：</p>
<ul>
<li>getFilesDir()  获取名为<code>files</code>的文件夹目录</li>
<li>getCacheDir()  获取名为<code>cache</code>的文件目录</li>
</ul>
<p>当使用数据库，<code>Webview</code>，和<code>SharedPreferences</code>的时候，系统会自动创建<code>databases</code>，<code>app_webview</code>和<code>shared_prefs</code>等文件夹，当然也可以自己创建相关的文件夹。</p>
<blockquote>
<p>注意：当用户卸载APP时，系统会自动删除data/data/目录下对应包名的文件夹及其内容</p>
</blockquote>
<h3 id="外部存储空间中的应用私有目录"><a href="#外部存储空间中的应用私有目录" class="headerlink" title="外部存储空间中的应用私有目录"></a>外部存储空间中的应用私有目录</h3><hr>
<p>考虑到内部存储空间容量有限，<code>Android</code>在外部存储空间中也提供有特殊目录供应用存放私有文件，文件路径为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/storage/emulated/0/Android/data/app package name</div></pre></td></tr></table></figure>
<p>与内部存储空间的应用私有目录不同的是：</p>
<p>第一，默认情况下，系统并不会自动创建外部存储空间的应用私有目录，只有在应用需要的时候，开发人员通过<code>SDK</code>提供的API创建该目录文件夹和操作文件夹内容。</p>
<p>第二，自<code>Android</code>7.0开始，系统对应用私有目录的访问权限进一步限制。其他<code>App</code>无法通过<code>file://</code>这种形式的<code>Uri</code>直接读写该目录下的文件内容，而是通过<code>FileProvider</code>访问。</p>
<p>我们可以通过<code>ContextWrapper</code>提供的方法来获取相应的目录：</p>
<ul>
<li>getExternalCacheDir() </li>
<li>getExternalCacheDir()</li>
</ul>
<p>等等，当然，也可以通过<code>Environment</code>间接操作，但是需要向用户申请权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Environment.getExternalStorageState();</div></pre></td></tr></table></figure>
<p>类似于 File 和 Cache 默认分类目录，开发人员也可以在应用私有目录中创建属于自己的自定义目录，方便于分类存储应用相关文件。</p>
<p>值得注意的一点是，对于外部存储空间下的应用私有目录文件，由于普通用户可以自由修改和删除，开发人员在使用时，一定要做好判空处理和异常捕获，防止应用崩溃退出！</p>
<h3 id="外部存储空间中的公共目录"><a href="#外部存储空间中的公共目录" class="headerlink" title="外部存储空间中的公共目录"></a>外部存储空间中的公共目录</h3><hr>
<p>通常来说，应用涉及到的持久化数据分为两类：应用相关数据和应用无关数据。前者是指专供宿主 App 使用的数据信息，比如一些应用的配置信息，数据库信息，缓存文件等。当应用被卸载，这些信息也应该被随之删除，避免存储空间产生不必要的占用。</p>
<p>相对而言，后者更偏向于这类信息：当应用被卸载，用户仍然希望保留于设备当中的信息。常见如，拍照类应用的图片文件，用户是使用浏览器手动下载的文件等。</p>
<p>显然，无论是内部存储空间，还是外部储存空间，上述两个应用私有目录由于其特有的生命周期（随着应用卸载而自动清除）只适合存储应用相关数据。</p>
<p>或者从访问权限上来说，应用无关数据应该是宿主应用希望与其他应用共享这些数据的，应该存放在外部存储空间的公共目录文件夹下。</p>
<p>外部存储空间已经为用户默认分类出一些公共目录。开发人员可以通过 Environment 类提供的方法直接获取相应目录的绝对路径，传递不同的 type 参数类型即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Environment.getExternalStoragePublicDirectory(String type);</div></pre></td></tr></table></figure>
<p>Envinonment 类提供诸多 type 参数的常量，比如：</p>
<ul>
<li>DIRECTORY_MUSIC：Music</li>
<li>DIRECTORY_MOVIES：Movies</li>
<li>DIRECTORY_PICTURES：Pictures</li>
<li>DIRECTORY_DOWNLOADS：Download</li>
</ul>
<p>等等，以第一个常量为例，音乐类别的公共目录绝对路径为：/storage/emulated/0/Music。如果你使用文件管理器打开设备的外部存储空间的话，均可以看到这些公共目录文件夹。</p>
<p>面对如此诸多的默认类别，开发人员在保存自己应用的公共文件时，也要养成良好的习惯，将要保存的数据分门别类地保存在不同公共目录下。当然，你也可以在公共目录下再次创建属于自己应用的目录，便于管理。</p>
<blockquote>
<p>注意：访问外部存储空间时记得申请读写权限！</p>
</blockquote>
<h3 id="外部存储空间中的其他目录"><a href="#外部存储空间中的其他目录" class="headerlink" title="外部存储空间中的其他目录"></a>外部存储空间中的其他目录</h3><hr>
<p>一般来说，利用两种应用私有目录和公共目录便能够存储应用中需要保存的数据和文件。如果这些还不够的话，那一定是你的开发姿势不对。在 Code Review 的前提下，如果还是不够的话，还可以在外部存储空间自由创建其他目录，通过这个方式获取外部存储空间的绝对路径，然后操作文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Environment.getExternalStorageDirectory();</div></pre></td></tr></table></figure>
<p>例如，我们可以在外包存储的根目录下创建自己的目录：<code>/storage/emulated/0/自己的目录</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;code&gt;iOS&lt;/code&gt;系统中，系统会为每个应用分配一个独立的空间，用来存放应用产生的数据，并且每个应用只能访问自己的存储空间。由于&lt;code&gt;Android&lt;/code&gt;手机可以插拔内存卡，所以，相对于&lt;code&gt;iOS&lt;/code&gt;来说，存储方式更多一点。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之运行时权限</title>
    <link href="http://www.guiyongdong.com/2017/05/04/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90/"/>
    <id>http://www.guiyongdong.com/2017/05/04/一天一Android之运行时权限/</id>
    <published>2017-05-04T01:32:33.000Z</published>
    <updated>2017-05-05T02:25:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>说起权限问题，<code>iOS</code>平台处理的非常严谨，几乎所有的权限都需要在运行时由用户来确认是否允许应用使用此权限。<code>android</code>平台稍微好一点，一部分权限只需要在<code>AndroidManifest.xml</code>中申请一下就可以使用，一部分却需要在运行时由用户来确定。今天就来说说<code>Android</code>的运行时权限问题。</p>
<a id="more"></a>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>运行时权限是在<code>Android6.0</code>才出现的。权限能很好的保护用户的隐私。谷歌将权限分为两类，一类是<code>Normal Permissions</code>，这类权限一般不涉及用户的隐私，不需要用户进行授权，只需要在<code>AndroidManifest.xml</code>中申请就可以。另一类是<code>Dangerous Permission</code>，这类一般都是涉及到用户的隐私的，不仅需要在<code>AndroidManifest.xml</code>中申请，还需要用户进行授权，比如读取SD卡等。</p>
<p><strong>Normal Permissions</strong> 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ACCESS_LOCATION_EXTRA_COMMANDS    允许应用程序访问额外的位置提供命令</div><div class="line">ACCESS_NETWORK_STATE     允许程序访问有关GSM网络信息</div><div class="line">ACCESS_NOTIFICATION_POLICY</div><div class="line">ACCESS_WIFI_STATE     允许程序访问Wi-Fi网络状态信息</div><div class="line">BLUETOOTH     允许程序连接到已配对的蓝牙设备</div><div class="line">BLUETOOTH_ADMIN     允许程序发现和配对蓝牙设备</div><div class="line">BROADCAST_STICKY     允许一个程序广播常用intents</div><div class="line">CHANGE_NETWORK_STATE     允许程序改变网络连接状态</div><div class="line">CHANGE_WIFI_MULTICAST_STATE</div><div class="line">CHANGE_WIFI_STATE     允许程序改变Wi-Fi连接状态</div><div class="line">DISABLE_KEYGUARD     允许程序禁用键盘锁</div><div class="line">EXPAND_STATUS_BAR     允许一个程序扩展收缩在状态栏</div><div class="line">GET_PACKAGE_SIZE     允许一个程序获取任何package占用空间容量</div><div class="line">INSTALL_SHORTCUT</div><div class="line">INTERNET     允许程序打开网络套接字</div><div class="line">KILL_BACKGROUND_PROCESSES</div><div class="line">MODIFY_AUDIO_SETTINGS     允许程序修改全局音频设置</div><div class="line">NFC</div><div class="line">READ_SYNC_SETTINGS     允许程序读取同步设置</div><div class="line">READ_SYNC_STATS     允许程序读取同步状态</div><div class="line">RECEIVE_BOOT_COMPLETED     允许程序接收到 ACTION_BOOT_COMPLETED    广播在系统完成启动</div><div class="line">REORDER_TASKS     允许程序改变Z轴排列任务</div><div class="line">REQUEST_INSTALL_PACKAGES</div><div class="line">SET_ALARM</div><div class="line">SET_TIME_ZONE     允许程序设置时间区域</div><div class="line">SET_WALLPAPER     允许程序设置壁纸</div><div class="line">SET_WALLPAPER_HINTS     允许程序设置壁纸hits</div><div class="line">TRANSMIT_IR</div><div class="line">UNINSTALL_SHORTCUT</div><div class="line">USE_FINGERPRINT</div><div class="line">VIBRATE     允许访问振动设备</div><div class="line">WAKE_LOCK     允许使用PowerManager的 WakeLocks保持进程在休眠时从屏幕消失</div><div class="line">WRITE_SYNC_SETTINGS     允许程序写入同步设置</div></pre></td></tr></table></figure>
<p><strong>Dangerous Permissions</strong> 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">group:android.permission-group.CONTACTS</div><div class="line">  permission:android.permission.WRITE_CONTACTS     允许程序写入但不读取用户联系人数据</div><div class="line">  permission:android.permission.GET_ACCOUNTS     访问一个帐户列表在Accounts Service中</div><div class="line">  permission:android.permission.READ_CONTACTS    允许程序读取用户联系人数据</div><div class="line"></div><div class="line">group:android.permission-group.PHONE</div><div class="line">  permission:android.permission.READ_CALL_LOG</div><div class="line">  permission:android.permission.READ_PHONE_STATE     读取电话状态</div><div class="line">  permission:android.permission.CALL_PHONE    允许一个程序初始化一个电话拨号不需通过拨号用户界面需要用户确认</div><div class="line">  permission:android.permission.WRITE_CALL_LOG</div><div class="line">  permission:android.permission.USE_SIP     允许程序使用SIP视频服务</div><div class="line">  permission:android.permission.PROCESS_OUTGOING_CALLS     允许程序监视、修改有关播出电话</div><div class="line">  permission:com.android.voicemail.permission.ADD_VOICEMAIL</div><div class="line"></div><div class="line">group:android.permission-group.CALENDAR</div><div class="line">  permission:android.permission.READ_CALENDAR     允许程序读取用户日历数据</div><div class="line">  permission:android.permission.WRITE_CALENDAR     允许一个程序写入但不读取用户日历数据</div><div class="line"></div><div class="line">group:android.permission-group.CAMERA</div><div class="line">  permission:android.permission.CAMERA     请求访问使用照相设备</div><div class="line"></div><div class="line">group:android.permission-group.SENSORS</div><div class="line">  permission:android.permission.BODY_SENSORS</div><div class="line"></div><div class="line">group:android.permission-group.LOCATION</div><div class="line">  permission:android.permission.ACCESS_FINE_LOCATION     允许一个程序访问精良位置(如GPS)</div><div class="line">  permission:android.permission.ACCESS_COARSE_LOCATION     允许一个程序访问CellID或WiFi热点来获取粗略的位置</div><div class="line"></div><div class="line">group:android.permission-group.STORAGE</div><div class="line">  permission:android.permission.READ_EXTERNAL_STORAGE     允许程序读取外部存储，如SD卡读取文件</div><div class="line">  permission:android.permission.WRITE_EXTERNAL_STORAGE     允许程序写入外部存储，如SD卡上写文件</div><div class="line"></div><div class="line">group:android.permission-group.MICROPHONE</div><div class="line">  permission:android.permission.RECORD_AUDIO     允许程序录制音频</div><div class="line"></div><div class="line">group:android.permission-group.SMS</div><div class="line">  permission:android.permission.READ_SMS     允许程序读取短信息</div><div class="line">  permission:android.permission.RECEIVE_WAP_PUSH     允许程序监控将收到WAP PUSH信息</div><div class="line">  permission:android.permission.RECEIVE_MMS     允许一个程序监控将收到MMS彩信,记录或处理</div><div class="line">  permission:android.permission.RECEIVE_SMS     允许程序监控一个将收到短信息，记录或处理</div><div class="line">  permission:android.permission.SEND_SMS     允许程序发送SMS短信</div><div class="line">  permission:android.permission.READ_CELL_BROADCASTS</div></pre></td></tr></table></figure>
<p>可以看到，危险权限都是一组一组的，那么分组的意义何在呢？</p>
<p>如果你申请某个危险的权限，假设APP早已经被用户授权了同一组的某个危险权限，那么系统会立即授权，而不需要用户去点击授权，比如当APP对<code>READ_CONTACTS</code>已经授权了，当你申请<code>WRITE_CONTACTS</code>时，系统会直接授权通过。另外，对于申请时弹出的<code>dialog</code>上面的文本说明也是对整个权限组的说明，而不是单个权限。不过需要注意的是，不要对权限组依赖过多，尽可能对每个危险权限都进行正常流程的申请，因为权限组可能会在后期的版本中有变化。</p>
<h3 id="请求权限"><a href="#请求权限" class="headerlink" title="请求权限"></a>请求权限</h3><p>请求权限的步骤分为如下几步：</p>
<p>1 . 在<code>AndroidManifest.xml</code>文件中添加需要申请的权限。如果不添加，可能会崩溃。</p>
<p>2 . 检查权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">            <span class="comment">//请求权限</span></div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//业务</span></div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//6.0以下不需要运行时权限 业务</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里判断某权限是否被用户授权的方法是：<code>checkSelfPermission</code>，方法接收一个参数，为权限名称。此方法为<code>ContextWrapper</code>的实例方法，而我们的<code>Activity</code>一般都间接继承于<code>ContextWrapper</code>，所以，可以在<code>Activity</code>中直接调用此方法。方法返回两种结果：<code>PackageManager.PERMISSION_DENIED</code>和<code>PackageManager.PERMISSION_GRANTED</code>，当返回<code>DENIED</code>就需要申请授权了。</p>
<p>3 . 申请授权</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">requestPermissions(<span class="keyword">new</span> String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,<span class="number">10086</span>);</div></pre></td></tr></table></figure>
<p>此方法定义在<code>Activity</code>中，接收；两个参数，第一个为需要申请的权限的字符串数组，第二个为请求码。主要用于回调的时候检测，系统允许我们一次性申请多个权限，系统会逐一询问用户。注意，此方法为异步。</p>
<p>4 . 处理权限申请回调</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (requestCode == <span class="number">10086</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">            <span class="comment">// 表明用户同意权限  业务</span></div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//用户不同意</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此回调方法回回传三个参数，第一个为请求码，就是我们在请求权限时候传多去的请求码，第二个是权限数组，第三个是请求结果数组。 这里，首先校验权限码，然后，判断<code>grantResults</code>的长度是否大于0，因为这里我们申请的只有一种权限，所以我直接判断数组中的第一个元素是否为<code>PackageManager.PERMISSION_GRANTED</code>，如果我们一次申请多个权限，需要分别判断。</p>
<p>基本的申请权限步骤已经介绍完毕。</p>
<p>完整的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                <span class="comment">//请求权限</span></div><div class="line">                requestPermissions(<span class="keyword">new</span> String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,<span class="number">10086</span>);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//业务</span></div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//6.0以下不需要运行时权限 业务</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (requestCode == <span class="number">10086</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                <span class="comment">// 表明用户同意权限</span></div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//用户不同意</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>虽然权限处理并不麻烦，但是需要编写很多重复的代码，所以，这里推荐一个库:<a href="https://github.com/hongyangAndroid/MPermissions" target="_blank" rel="external">MPermissions</a>，用起来还是很方便的。</p>
<h5 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h5><p>首先，在项目的<code>build.gradle</code>中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.4&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在<code>app</code>的<code>buid.gradle</code>中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">apply plugin: &apos;com.neenbedankt.android-apt&apos;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    apt &apos;com.zhy:mpermission-compiler:1.0.0&apos;</div><div class="line">    compile &apos;com.zhy:mpermission-api:1.0.0&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ul>
<li>申请权限 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">MPermissions.requestPermissions(MainActivity.this, 100, Manifest.permission.WRITE_EXTERNAL_STORAGE);</div></pre></td></tr></table></figure>
<ul>
<li>处理权限回调</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">    MPermissions.onRequestPermissionsResult(<span class="keyword">this</span>, requestCode, permissions, grantResults);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完整的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">		 <span class="comment">//申请权限 权限码很重要</span></div><div class="line">        MPermissions.requestPermissions(MainActivity.<span class="keyword">this</span>, <span class="number">100</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="comment">//处理权限回调</span></div><div class="line">        MPermissions.onRequestPermissionsResult(<span class="keyword">this</span>, requestCode, permissions, grantResults);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//会根据权限码 来映射方法 执行方法</span></div><div class="line">    <span class="meta">@PermissionGrant</span>(<span class="number">100</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"Contact permission is granted"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说起权限问题，&lt;code&gt;iOS&lt;/code&gt;平台处理的非常严谨，几乎所有的权限都需要在运行时由用户来确认是否允许应用使用此权限。&lt;code&gt;android&lt;/code&gt;平台稍微好一点，一部分权限只需要在&lt;code&gt;AndroidManifest.xml&lt;/code&gt;中申请一下就可以使用，一部分却需要在运行时由用户来确定。今天就来说说&lt;code&gt;Android&lt;/code&gt;的运行时权限问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之Material Desisgn</title>
    <link href="http://www.guiyongdong.com/2017/04/15/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BMaterial%20Desisgn/"/>
    <id>http://www.guiyongdong.com/2017/04/15/一天一Android之Material Desisgn/</id>
    <published>2017-04-15T03:32:11.000Z</published>
    <updated>2017-04-19T03:54:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先要说一下现在手机的UI风格，其实之前包括现在，<code>Android</code>的界面设计都是模仿<code>iOS</code>的，就拿我之前的公司，所有的<code>UI</code>图都是根据<code>6s</code>的尺寸，<code>iOS</code>的设计风格来设计得到，<code>Android</code>同学有时候就抱怨，这个好难实现，但是在<code>iOS</code>上，实现起来就很容易了。那么在2014年，谷歌推出了<code>Material Desisgn</code>，一套全新的界面设计语言，但是不少<code>Material Desisgn</code>的效果却很难实现，而<code>Android</code>中却几乎没有提供相应的<code>API</code>支持，于是在2015年，谷歌推出了一个<code>Design Support</code>库，这个库将<code>Material Desisgn</code>中最具代表性的一些控件和效果进行了封装，那么，今天我们就来看看有哪些常用的控件。</p>
<a id="more"></a>
<h3 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h3><p><code>Toolbar</code>是<code>Android</code>5.0开始推出的一个导航控件，用来替换<code>ActionBar</code>。为了兼容老系统，需要在<code>build.gradle</code>导入<code>v7 appcompat</code>支持库。谷歌允许开发者定制修改<code>Toolbar</code>，如：</p>
<ul>
<li>设置导航栏图标</li>
<li>设置App的logo</li>
<li>支持设置标题和子标题</li>
<li>支持添加一个或多个自定义控件</li>
<li>支持Action Menu</li>
</ul>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/912181-dca123890a64e6e0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<p>另外，一个<code>Toolbar</code>就是一个<code>View</code>，跟其他<code>View</code>一样包含在布局中，并且一个<code>Activity</code>中可以有多个<code>Toolbar</code>。</p>
<p>任何一个新建的项目，默认都会显示<code>ActionBar</code>，为了取消系统自带的<code>ActionBar</code>，通常会更改<code>APP</code>的<code>theme</code>。例如，会直接在<code>styles.xml</code>文件中如此修改：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里直接把之前的<code>Theme.AppCompat.Light.DarkActionBar</code>更改为<code>Theme.AppCompat.Light.NoActionBar</code>，当然，你也可以修改主题的其他属性。</p>
<p>现在已经把<code>ActionBar</code>隐藏起来了，接下来在<code>activity_main.xml</code>上添加如下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.MainActivity"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"自定义"</span></div><div class="line">            /&gt;</div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在<code>MainActivity</code>中这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>找到<code>toolbar</code>，并调用<code>setSupportActionBar(toolbar)</code>，这样既可以使用<code>Toolbar</code>，也可以使用<code>ActionBar</code>的外观。当然，你也可以不调用<code>setSupportActionBar(toolbar)</code>，将<code>Toolbar</code>当成普通的<code>View</code>使用。</p>
<p>那<code>Toolbar</code>还可以设置哪些属性呢？</p>
<p><strong>设置左边的图标</strong><br><code>toolbar.setNavigationIcon(R.drawable.home);</code></p>
<p><strong>设置logo</strong><br><code>toolbar.setLogo(R.mipmap.ic_launcher);</code></p>
<p><strong>设置主标题</strong><br><code>toolbar.setTitle(&quot;主标题&quot;);</code></p>
<p><strong>设置子标题</strong><br><code>toolbar.setSubtitle(&quot;子标题&quot;);</code></p>
<p>当然，它不仅可以添加自定义<code>View</code>，它也可以添加<code>action</code>按钮，如下，创建<code>Menu resource file</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">      <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/search"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/search"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"搜索"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/notification"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ling"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"通知"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/item1"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"item1"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/item2"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"item2"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在<code>MainActivity</code>中这样用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        <span class="comment">//设置左边的图标</span></div><div class="line">        toolbar.setNavigationIcon(R.drawable.home);</div><div class="line">        <span class="comment">//设置logo</span></div><div class="line">        toolbar.setLogo(R.mipmap.ic_launcher);</div><div class="line">        <span class="comment">//设置主标题</span></div><div class="line">        toolbar.setTitle(<span class="string">"主标题"</span>);</div><div class="line">        <span class="comment">//子标题</span></div><div class="line">        toolbar.setSubtitle(<span class="string">"子标题"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        getMenuInflater().inflate(R.menu.toolbar_action,menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (item.getItemId())&#123;</div><div class="line">            <span class="keyword">case</span> R.id.search:</div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"搜索"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.notification:</div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"通知"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.item1:</div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"item1"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.item2:</div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"item2"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们不设置<code>setSupportActionBar(toolbar)</code>，那么<code>Toolbar</code>就是当成一个<code>View</code>使用，就可以这样添加<code>action</code>按钮：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line"></div><div class="line">        <span class="comment">//设置左边的图标</span></div><div class="line">        toolbar.setNavigationIcon(R.drawable.home);</div><div class="line">        <span class="comment">//设置logo</span></div><div class="line">        toolbar.setLogo(R.mipmap.ic_launcher);</div><div class="line">        <span class="comment">//设置主标题</span></div><div class="line">        toolbar.setTitle(<span class="string">"主标题"</span>);</div><div class="line">        <span class="comment">//子标题</span></div><div class="line">        toolbar.setSubtitle(<span class="string">"子标题"</span>);</div><div class="line"></div><div class="line">        toolbar.inflateMenu(R.menu.toolbar_action);</div><div class="line">        toolbar.setOnMenuItemClickListener(<span class="keyword">new</span> Toolbar.OnMenuItemClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">                <span class="keyword">switch</span> (item.getItemId())&#123;</div><div class="line">                    <span class="keyword">case</span> R.id.search:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"搜索"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.notification:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"通知"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.item1:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"item1"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.item2:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"item2"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终运行效果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android22.png?raw=true" width="375"><br></div>


<hr>
<h3 id="DrawerLayout"><a href="#DrawerLayout" class="headerlink" title="DrawerLayout"></a>DrawerLayout</h3><p><code>APP</code>中，侧滑菜单使用的频率蛮高的，比如<code>QQ</code>。<code>Android</code>提供了<code>DrawerLayout</code>来实现这种效果，<code>DrawerLayout</code>是一个布局，在布局中允许放两个直接子控件，第一个子控件是主屏幕中显示的内容，第二个子控件是滑动菜单中显示的内容，因此，我们修改一下<code>activity_main.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.MainActivity"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"自定义"</span></div><div class="line">                /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#fff"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"侧滑菜单"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>首先，在根布局<code>DrawerLayout</code>里面，我们放了两个<code>LinearLayout</code>布局，第一个<code>LinearLayout</code>作为屏幕中显示的内容，里面放置了<code>Toolbar</code>。第二个<code>LinearLayout</code>就是我们的侧滑菜单，里面放置了一个<code>TextView</code>。但是关于第二个<code>LinearLayout</code>我们需要注意一点，<code>android:layout_gravity</code>这个属性是必须指定的，因为需要告诉<code>DrawerLayout</code>互动菜单是在屏幕的左边还是右边，指定<code>left</code>表示左边，指定<code>right</code>表示右边，我们这里指定了<code>start</code>，表示根据系统语言进行判断，如果系统语言是从左往右的，菜单就在左边。</p>
<p>现在就可以通过滑动屏幕的左边，打开菜单栏了。如图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android23.png?raw=true" width="375"><br></div>

<p>现在，只能通过屏幕的左边滑动才能打开菜单，但是，一般我们都会在<code>Toolbar</code>上的左边放置一个按钮，通过点击按钮也能打开菜单栏。来看<code>MainActivity.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DrawerLayout mDrawerLayout;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line"></div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line"><span class="comment">//        setSupportActionBar(toolbar);</span></div><div class="line"></div><div class="line">        <span class="comment">//设置左边的图标</span></div><div class="line">        toolbar.setNavigationIcon(R.drawable.home);</div><div class="line">        <span class="comment">//设置logo</span></div><div class="line">        toolbar.setLogo(R.mipmap.ic_launcher);</div><div class="line">        <span class="comment">//设置主标题</span></div><div class="line">        toolbar.setTitle(<span class="string">"主标题"</span>);</div><div class="line">        <span class="comment">//子标题</span></div><div class="line">        toolbar.setSubtitle(<span class="string">"子标题"</span>);</div><div class="line"></div><div class="line">        toolbar.inflateMenu(R.menu.toolbar_action);</div><div class="line">        toolbar.setOnMenuItemClickListener(<span class="keyword">new</span> Toolbar.OnMenuItemClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">                <span class="keyword">switch</span> (item.getItemId())&#123;</div><div class="line">                    <span class="keyword">case</span> R.id.search:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"搜索"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.notification:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"通知"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.item1:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"item1"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.item2:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"item2"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        toolbar.setNavigationOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"home"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                mDrawerLayout.openDrawer(GravityCompat.START);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们没有将<code>Toolbar</code>设置为<code>ActionBar</code>，但是我们设置了<code>Toolbar</code>的<code>NavigationIcon</code>，所以，我们直接给<code>NavigationIcon</code>添加点击事件:<code>toolbar.setNavigationOnClickListener()</code>，然后调用<code>mDrawerLayout.openDrawer(GravityCompat.START)</code>开启菜单。</p>
<p>如果将<code>Toolbar</code>设置为<code>ActionBar</code>，则需要在<code>onOptionsItemSelected()</code>方法中来处理点击事件。并且，如果你没有设置<code>Toolbar</code>的<code>NavigationIcon</code>，则需要这样设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">ActionBar actionBar = getSupportActionBar();</div><div class="line"><span class="keyword">if</span> (actionBar != <span class="keyword">null</span>) &#123;</div><div class="line">    actionBar.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">    actionBar.setHomeAsUpIndicator(R.drawable.home);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>并且此按钮的<code>id</code>永远是<code>android.R.id.home</code>。</p>
<hr>
<h3 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h3><p><code>NavigationView</code>也是<code>Design Support</code>库中提供的一个控件，也很好用。首先需要导入这个库，在<code>app/build.gradle</code>文件，在<code>dependencies</code>中添加如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile 'com.android.support:design:25.3.0'</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们先来看一下运行效果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android24.png?raw=true" width="375"><br></div>

<p>首先我定义了一个头视图和一个<code>menu</code>，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/search"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/search"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"搜索"</span></div><div class="line">                /&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/notification"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ling"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"通知"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/item1"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"首页"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/home"</span></div><div class="line">                /&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/item2"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"item2"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">                /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"180dp"</span></div><div class="line">                <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">                &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"头视图"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#000"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在<code>activity_main.xml</code>这样用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.MainActivity"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"自定义"</span></div><div class="line">                /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">app:menu</span>=<span class="string">"@menu/nav_menu"</span></div><div class="line">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/nav_header"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_view"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#963"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以看到，我们直接把菜单换成了<code>NavigationView</code>，<code>app:menu</code>设置<code>menu</code>，<code>app:headerLayout</code>设置头视图。当然我们也可以为<code>NavigationView</code>的<code>menu</code>添加点击事件。在<code>MainActivity.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DrawerLayout mDrawerLayout;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        ...</div><div class="line"></div><div class="line">        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);</div><div class="line">        navigationView.setNavigationItemSelectedListener(<span class="keyword">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(@NonNull MenuItem item)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,item.getItemId()+<span class="string">""</span>,Toast.LENGTH_SHORT);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="FloatingActionButton-悬浮按钮"><a href="#FloatingActionButton-悬浮按钮" class="headerlink" title="FloatingActionButton 悬浮按钮"></a>FloatingActionButton 悬浮按钮</h3><p>这个控件可以实现悬浮按钮的效果，它默认会使用<code>colorAccent</code>来作为按钮的颜色，当然还可以为它指定一个图标。修改<code>activity_main.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.MainActivity"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"自定义"</span></div><div class="line">                /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"end|bottom"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/car"</span></div><div class="line">            <span class="attr">android:elevation</span>=<span class="string">"8dp"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">	...</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里，可以通过<code>android:src</code>指定按钮的图片，<code>android:elevation</code>可以指定按钮的投影度，数值越大，投影面积越大，但是投影效果越淡，反之越浓。当然，还可以为它添加点击事件，其实<code>FloatingActionButton</code>和一个普通的按钮一样，也是通过<code>setOnClickListener</code>来添加点击是事件。</p>
<hr>
<h3 id="AppBarLayout"><a href="#AppBarLayout" class="headerlink" title="AppBarLayout"></a>AppBarLayout</h3><p><code>AppBarLayout</code>实际上是一个垂直方向的<code>LinearLayout</code>，它内部做了很多滚动事件的封装。它可以通过监听滚动视图的滚动来做出响应。我们依然在<code>activity_main.xml</code>中修改代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.MainActivity"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">                <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways|snap"</span>&gt;</div><div class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:text</span>=<span class="string">"自定义"</span></div><div class="line">                    /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/text_view"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"end|bottom"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/car"</span></div><div class="line">            <span class="attr">android:elevation</span>=<span class="string">"8dp"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">app:menu</span>=<span class="string">"@menu/nav_menu"</span></div><div class="line">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/nav_header"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_view"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#963"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>首先，我们修改了主布局为<code>CoordinatorLayout</code>，<code>CoordinatorLayout</code>是一个加强版的<code>FrameLayout</code>布局。然后添加<code>AppBarLayout</code>布局，并让<code>Toolbar</code>当做它的子布局。最后，添加一个<code>NestedScrollView</code>，最重要的一点是，设置<code>app:layout_behavior</code>属性为<code>@string/appbar_scrolling_view_behavior</code>，表示滚动视图在<code>Toolbar</code>的下面。另外，还给<code>Toolbar</code>添加了属性<code>app:layout_scrollFlags</code>，值为<code>scroll|enterAlways|snap</code>，其中<code>scroll</code>表示当<code>NestedScrollView</code>向上滚动的时候，<code>Toolbar</code>会跟着一起向上滚动并隐藏，<code>enterAlways</code>表示<code>NestedScrollView</code>向下滚动的时候，<code>Toolbar</code>会跟着一起向下滚动并显示出来。<code>snap</code>表示当<code>Toolbar</code>还没有完全隐藏或显示的时候，会根据当前滚动的距离，自动选择是隐藏还是显示。</p>
<hr>
<h3 id="CollapsingToolbarLayout-可折叠式标题栏"><a href="#CollapsingToolbarLayout-可折叠式标题栏" class="headerlink" title="CollapsingToolbarLayout 可折叠式标题栏"></a>CollapsingToolbarLayout 可折叠式标题栏</h3><p><code>CollapsingToolbarLayout</code></p>
<p><code>CollapsingToolbarLayout</code>是一个作用于<code>Toolbar</code>基础上的布局，它可以根据滚动视图的滚动距离来改变高度。先来看一下运行的结果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android25.gif?raw=true" width="375"><br></div>

<p>我这里创建另一个活动<code>SecondActivity</code>，布局如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.SecondActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--标题栏--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"250dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/appBar"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_toolbar"</span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></div><div class="line">            <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span></div><div class="line">                <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#852"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">            </div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_marginBottom</span>=<span class="string">"15dp"</span></div><div class="line">                <span class="attr">android:layout_marginRight</span>=<span class="string">"15dp"</span></div><div class="line">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"15dp"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"35dp"</span>&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/content_text"</span></div><div class="line">                    <span class="attr">android:textColor</span>=<span class="string">"#000"</span></div><div class="line">                    /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们根布局依然使用<code>CoordinatorLayout</code>，同样的，需要使用<code>AppBarLayout</code>作为<code>Toolbar</code>的根布局。这里，指定<code>AppBarLayout</code>的高度为<code>250dp</code>，当然，可以根据需求改动。然后添加了<code>CollapsingToolbarLayout</code>布局，并且指定了主题为<code>@style/ThemeOverlay.AppCompat.Dark.ActionBar</code>，<code>app:contentScrim</code>属性用于指定<code>CollapsingToolbarLayout</code>在趋于折叠状态以及折叠之后的背景色，其实<code>CollapsingToolbarLayout</code>折叠之后就是一个普通的<code>Toolbar</code>。<code>app:layout_scrollFlags</code>我们刚才也用到过，这里指定为<code>scroll|exitUntilCollapsed</code>，<code>scroll</code>表示<code>CollapsingToolbarLayout</code>会随着滚动内容滚动，<code>exitUntilCollapsed</code>表示当<code>CollapsingToolbarLayout</code>随着滚动完成折叠之后就保留在界面上，不再移出屏幕。</p>
<p>可以看到，我们又在<code>CollapsingToolbarLayout</code>中定义了一个<code>View</code>和<code>Toolbar</code>，其实也就意味着，这个标题栏是由普通的<code>View</code>加上<code>Toolbar</code>合成的，<code>app:layout_collapseMode</code>属性，用于指定当前控件<code>CollapsingToolbarLayout</code>折叠过程中的折叠模式，其中<code>Toolbar</code>指定为<code>pin</code>，表示在折叠过程中位置始终保持不变，<code>View</code>指定为<code>parallax</code>，表示会在折叠的过程中产生一定的位置偏移。</p>
<p>最后，在<code>SecondActivity.java</code>中，添加如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_second);</div><div class="line">        <span class="comment">//获取到CollapsingToolbarLayout  并设置标题</span></div><div class="line">        CollapsingToolbarLayout collapsingToolbarLayout = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);</div><div class="line">        collapsingToolbarLayout.setTitle(<span class="string">"苹果"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//获取Toolbar 并将Toolbar设置为ActionBar</span></div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">        ActionBar actionBar = getSupportActionBar();</div><div class="line">        <span class="keyword">if</span> (actionBar != <span class="keyword">null</span>) &#123;</div><div class="line">            actionBar.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//设置内容</span></div><div class="line">        TextView textView = (TextView) findViewById(R.id.content_text);</div><div class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++) &#123;</div><div class="line">            stringBuilder.append(<span class="string">"苹果"</span>);</div><div class="line">        &#125;</div><div class="line">        textView.setText(stringBuilder.toString());</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        getMenuInflater().inflate(R.menu.toolbar_action,menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (item.getItemId() == android.R.id.home) &#123;</div><div class="line">            finish();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改状态栏"><a href="#修改状态栏" class="headerlink" title="修改状态栏"></a>修改状态栏</h3><p>最初的时候，<code>iOS</code>和<code>Android</code>一个比较大的不同就是状态栏，<code>iOS</code>的状态栏属于当前视图的一部分，而<code>Android</code>却永远是黑色的。好在在<code>Android 5.0</code>之后，也可以对状态栏进行修改了。</p>
<p>要想让背景图能和系统的状态栏融合，需要借助<code>android:fitsSystemWindows</code>这个属性。我们需要在<code>activity_second.xml</code>修改布局，给<code>View</code>布局和它的所有父布局都添加这个属性。如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.SecondActivity"</span></div><div class="line">    </div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--标题栏--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"250dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/appBar"</span></div><div class="line">        </div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_toolbar"</span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></div><div class="line">            <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span></div><div class="line">            </div><div class="line">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span></div><div class="line">                <span class="attr">android:background</span>=<span class="string">"#956"</span></div><div class="line">                </div><div class="line">                <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">    </div><div class="line">	...</div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后，我们还需要在主题中将<code>android:statusBarColor</code>属性指定为<code>@android:color/transparent</code>，即将状态栏的颜色设置为透明。因为<code>android:statusBarColor</code>属性是从<code>API 21</code>才有的。所以，新建<code>values-v21.xml</code>布局，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"SecondActivityTheme"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里定义了<code>SecondActivityTheme</code>，并设置<code>android:statusBarColor</code>。然后将这个主题添加到<code>values.xml</code>中，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;item name="android:textColorPrimary"&gt;#000&lt;/item&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"SecondActivityTheme"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>/&gt;</span><span class="xml"></span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>最后，在<code>AndroidManifest.xml</code>文件中设置<code>SecondActivity</code>的主题：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.materialdesisgndemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span></span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@style/SecondActivityTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android26.png?raw=true" width="375"><br></div>


<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>好了，至此关于<code>Material Desisgn</code>风格的控件已经学的差不多了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先要说一下现在手机的UI风格，其实之前包括现在，&lt;code&gt;Android&lt;/code&gt;的界面设计都是模仿&lt;code&gt;iOS&lt;/code&gt;的，就拿我之前的公司，所有的&lt;code&gt;UI&lt;/code&gt;图都是根据&lt;code&gt;6s&lt;/code&gt;的尺寸，&lt;code&gt;iOS&lt;/code&gt;的设计风格来设计得到，&lt;code&gt;Android&lt;/code&gt;同学有时候就抱怨，这个好难实现，但是在&lt;code&gt;iOS&lt;/code&gt;上，实现起来就很容易了。那么在2014年，谷歌推出了&lt;code&gt;Material Desisgn&lt;/code&gt;，一套全新的界面设计语言，但是不少&lt;code&gt;Material Desisgn&lt;/code&gt;的效果却很难实现，而&lt;code&gt;Android&lt;/code&gt;中却几乎没有提供相应的&lt;code&gt;API&lt;/code&gt;支持，于是在2015年，谷歌推出了一个&lt;code&gt;Design Support&lt;/code&gt;库，这个库将&lt;code&gt;Material Desisgn&lt;/code&gt;中最具代表性的一些控件和效果进行了封装，那么，今天我们就来看看有哪些常用的控件。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>说一说JS和Objective-C的交互</title>
    <link href="http://www.guiyongdong.com/2017/04/14/%E8%AF%B4%E4%B8%80%E8%AF%B4JS%E5%92%8CObjective-C%E7%9A%84%E4%BA%A4%E4%BA%92/"/>
    <id>http://www.guiyongdong.com/2017/04/14/说一说JS和Objective-C的交互/</id>
    <published>2017-04-14T08:39:35.000Z</published>
    <updated>2017-04-14T10:35:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>很早以前就听闻<code>&lt;JavaScriptCore/JavaScriptCore.h&gt;</code>的大名了，只是没有正面接触过，有的也只是间接接触过，比如<code>ReactNative</code>，它渲染界面的核心就是<code>&lt;JavaScriptCore/JavaScriptCore.h&gt;</code>。但是今天就不得不和它有一次正面的接触了，公司要做一个功能，需要<code>Native</code>和<code>js</code>方法之间的互调，所以，本篇文章就说说如何实现。当然，本篇文章说的都是基础。</p>
<a id="more"></a>
<h3 id="JSContext"><a href="#JSContext" class="headerlink" title="JSContext"></a>JSContext</h3><p>这个东西是干什么的？看看苹果官方给的解释：A JSContextobject represents a JavaScript execution environment. You create and use JavaScript contexts to evaluate JavaScript scripts from Objective-C or Swift code, to access values defined in or calculated in JavaScript, and to make native objects, methods, or functions accessible to JavaScript.翻译一下，大概意思就是：<code>JSContext</code>就是整个<code>JavaScript</code>的上下文，拥有这个上下文，就可以访问<code>JavaScript</code>中的对象或者方法，也可以使用本地的对象或者方法来供<code>JavaScript</code>调用。说白了，通过<code>JSContext</code>就可以实现交互。</p>
<h5 id="获取JSContext"><a href="#获取JSContext" class="headerlink" title="获取JSContext"></a>获取<code>JSContext</code></h5><p>通常情况下可以在<code>webView</code>加载完以后获取:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    JSContext *context = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取到<code>JSContext</code>就可以和<code>js</code>交互了。</p>
<h3 id="js调用原生方法"><a href="#js调用原生方法" class="headerlink" title="js调用原生方法"></a>js调用原生方法</h3><p><code>JSContext</code>提供了两种方式，可以让<code>js</code>调用原生的方法，一种是<code>block</code>，一种是<code>JSExport</code>协议。</p>
<h5 id="使用block交互"><a href="#使用block交互" class="headerlink" title="使用block交互"></a>使用block交互</h5><p>例如，有如下网页:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"playAudio()"</span>&gt;</span>播放音频<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>点击<code>webView</code>中的播放按钮，然后调用原生的播放功能，我们这里定义播放按钮的方法为<code>playAudio</code>，所以在<code>Objective-C</code>这样调用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    JSContext *context = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line">    context[<span class="string">@"playAudio"</span>] = ^() &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"js调用本地开始播放"</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>点击播放按钮，控制台如下输出：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-14</span> <span class="number">17</span>:<span class="number">42</span>:<span class="number">42.692</span> JSCoreDemo[<span class="number">30994</span>:<span class="number">1357505</span>] js调用本地开始播放</div></pre></td></tr></table></figure></p>
<p>这里需要注意的是<code>js</code>中的方法名和<code>block</code>中的字符串一定要一样。</p>
<p>这种情况下，是<code>js</code>调用原生是不传参数的，那传参又该如何呢？</p>
<p>例如，如下网页：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">jsPlayAudio</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            nativePlayAudio(<span class="string">"http://www.baidu.com"</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"jsPlayAudio()"</span>&gt;</span>给Native传参<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里是显调用<code>js</code>的<code>jsPlayAudio</code>方法，然后调用原生的<code>nativePlayAudio</code>方法，并且传过去一个字符串。在<code>Objective-C</code>这样调用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    JSContext *context = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line">    context[<span class="string">@"nativePlayAudio"</span>] = ^() &#123;</div><div class="line">        <span class="built_in">NSArray</span> *args = [JSContext currentArguments];</div><div class="line">        <span class="keyword">for</span> (JSValue obj <span class="keyword">in</span> args) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"js传过来的参数是：%@"</span>,obj);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-14</span> <span class="number">17</span>:<span class="number">49</span>:<span class="number">19.051</span> JSCoreDemo[<span class="number">31131</span>:<span class="number">1367134</span>] js传过来的参数是：http:<span class="comment">//www.baidu.com</span></div></pre></td></tr></table></figure></p>
<p>通过<code>[JSContext currentArguments]</code>可以获取到所有的参数，因为参数有可能不是一个。所有的参数都会被包装成<code>JSValue</code>对象，查看<code>JSValue</code>可以看出，<code>JSValue</code>可以转换为：<code>Object</code>、<code>Bool</code>、<code>Double</code>、<code>Int32</code>、<code>UInt32</code>、<code>Number</code>、<code>String</code>、<code>Date</code>、<code>Array</code>、<code>Dictionary</code>等类型。并且<code>JSValue</code>还提供了一系列的判断是否是某一类型的方法。具体转换类型如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">  Objective-C type  |   JavaScript type</div><div class="line">--------------------+---------------------</div><div class="line">        nil         |     undefined</div><div class="line">       NSNull       |        null</div><div class="line">      NSString      |       string</div><div class="line">      NSNumber      |   number, boolean</div><div class="line">    NSDictionary    |   Object object</div><div class="line">      NSArray       |    Array object</div><div class="line">       NSDate       |     Date object</div><div class="line">      NSBlock (1)   |   Function object (1)</div><div class="line">         id (2)     |   Wrapper object (2)</div><div class="line">       Class (3)    | Constructor object (3)</div></pre></td></tr></table></figure>
<h5 id="使用JSExport交互"><a href="#使用JSExport交互" class="headerlink" title="使用JSExport交互"></a>使用JSExport交互</h5><p>使用<code>block</code>交互有一个问题，加入我们在<code>js</code>中不是直接调用方法，而是调用某个对象的某个方法，这个时候再使用<code>block</code>就不行了，这就使用到了<code>JSExport</code>。</p>
<p>例如，如下网页：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">jsPlayAudio</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            nativeObj.playAudio();</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"jsPlayAudio()"</span>&gt;</span>给Native传参<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>nativeObj</code>是在<code>js</code>中定义的对象，当然，<code>js</code>可能并没有创建这个对象。那该如何使用呢？</p>
<p>这里需要我们定义一个协议，并继承<code>JSExport</code>协议，在协议中添加方法，如下：</p>
<p><strong>BridgeModel.h</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;JavaScriptCore/JavaScriptCore.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">BridgeProtocol</span> &lt;<span class="title">JSExport</span>&gt;</span></div><div class="line">-  (<span class="keyword">void</span>)playAudio;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BridgeModel</span> : <span class="title">NSObject</span>&lt;<span class="title">BridgeProtocol</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>BridgeModel.m</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"BridgeModel.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">BridgeModel</span></span></div><div class="line">-  (<span class="keyword">void</span>)playAudio &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"js调用本地开始播放"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>需要如此使用：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    JSContext *context = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];    </div><div class="line">    BridgeModel *model = [[BridgeModel alloc] init];</div><div class="line">    context[<span class="string">@"nativeObj"</span>] = model;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>记住，<code>js</code>中的对象名和<code>Objective-C</code>中的对象名要一致。并且协议方法一定不能是<code>@optional</code>。</p>
<p>输出如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-14</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">41.545</span> JSCoreDemo[<span class="number">31708</span>:<span class="number">1402262</span>] js调用本地开始播放</div></pre></td></tr></table></figure></p>
<p>我们再来看看传参该如何处理：</p>
<p>例如，如下网页：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">jsPlayAudio</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            nativeObj.playAudioWithUrlAndType(<span class="string">"http://www.baidu.com"</span>,<span class="number">666</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"jsPlayAudio()"</span>&gt;</span>给Native传参<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里传了两个参数。</p>
<p>来看<code>Objective-C</code>:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">BridgeProtocol</span> &lt;<span class="title">JSExport</span>&gt;</span></div><div class="line">- (<span class="keyword">void</span>)playAudioWithUrl:(<span class="built_in">NSString</span> *)url AndType:(<span class="built_in">NSInteger</span>)type;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)playAudioWithUrl:(<span class="built_in">NSString</span> *)url AndType:(<span class="built_in">NSInteger</span>)type &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"js调用本地开始播放--%@--%ld"</span>,url,type);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>协议中我们定义了一个方法，<code>playAudioWithUrl</code>和<code>AndType</code>拼起来正好是<code>js</code>中的方法，所以，只要原生的方法拼起来和<code>js</code>中的方法一致就可以调用。</p>
<p>输出如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-14</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">45.854</span> JSCoreDemo[<span class="number">31973</span>:<span class="number">1416619</span>] js调用本地开始播放--http:<span class="comment">//www.baidu.com--666</span></div></pre></td></tr></table></figure></p>
<h3 id="原生调用js"><a href="#原生调用js" class="headerlink" title="原生调用js"></a>原生调用js</h3><p>使用原生调用js方法就很简单了。</p>
<p>例如，如下网页：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">endAudio</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">            alert(<span class="string">'停止'</span>+str);</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">endAudio</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">            alert(<span class="string">'停止'</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"jsPlayAudio()"</span>&gt;</span>给Native传参<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>直接使用<code>JSContext</code>就可以调用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    JSContext *context = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line">    </div><div class="line">    [context evaluateScript:<span class="string">@"endAudio()"</span>];</div><div class="line">    [context evaluateScript:<span class="string">@"endAudio(abc)"</span>];    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，想调用某个<code>js</code>对象的方法，也可以直接调用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[context evaluateScript:<span class="string">@"jsObj.endAudio(abc)"</span>];</div></pre></td></tr></table></figure>
<p>另外，你也可以传<code>JSValue</code>对象：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *js = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"endAudio(%@)"</span>,[JSValue valueWithDouble:<span class="number">1.11</span> inContext:context]];</div><div class="line">[context evaluateScript:js];</div></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>好了，基本的<code>Objective-C</code>和<code>js</code>交互已经说完了，至于更强大的功能，就由你慢慢专研吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很早以前就听闻&lt;code&gt;&amp;lt;JavaScriptCore/JavaScriptCore.h&amp;gt;&lt;/code&gt;的大名了，只是没有正面接触过，有的也只是间接接触过，比如&lt;code&gt;ReactNative&lt;/code&gt;，它渲染界面的核心就是&lt;code&gt;&amp;lt;JavaScriptCore/JavaScriptCore.h&amp;gt;&lt;/code&gt;。但是今天就不得不和它有一次正面的接触了，公司要做一个功能，需要&lt;code&gt;Native&lt;/code&gt;和&lt;code&gt;js&lt;/code&gt;方法之间的互调，所以，本篇文章就说说如何实现。当然，本篇文章说的都是基础。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="http://www.guiyongdong.com/categories/Objective-C/"/>
    
    
      <category term="js交互" scheme="http://www.guiyongdong.com/tags/js%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative利用CodePush实现热更新</title>
    <link href="http://www.guiyongdong.com/2017/04/07/ReactNative%E5%88%A9%E7%94%A8CodePush%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://www.guiyongdong.com/2017/04/07/ReactNative利用CodePush实现热更新/</id>
    <published>2017-04-07T02:55:30.000Z</published>
    <updated>2017-04-08T07:37:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要说一下如何利用<code>ReactNative</code>的<code>jsbundle</code>机制来实现<code>App</code>的热更新。</p>
<p>前段时间<code>iOS</code>界发生了一件大事，苹果禁止含有热更新或者热修复的<code>APP</code>上架，这里主要是禁止使用<code>runtime</code>的一些特性。但是<code>ReactNative</code>不同，它没有使用到<code>runtime</code>特性，并且好多人已经证实，<code>ReactNative</code>应用依然可以上线。</p>
<p>其实好多应用并不是使用<code>ReactNative</code>直接开发，而是在原生应用的基础上，导入<code>ReactNative</code>。<code>iOS</code>最好使用<code>cocoapods</code>导入，<code>Android</code>使用<code>build.gradle</code>添加依赖包。本篇文章主要包含三个部分：环境搭建、<code>iOS</code>热更新和<code>Android</code>热更新。</p>
<a id="more"></a>
<h3 id="环境搭建-macOS"><a href="#环境搭建-macOS" class="headerlink" title="环境搭建-macOS"></a>环境搭建-macOS</h3><p>在了解本篇文章之前，你要把<code>ReactNative</code>的环境配好，你可以看<a href="http://reactnative.cn/docs/0.43/getting-started.html" target="_blank" rel="external">这里</a>来配置环境。如果你是<code>macOS</code>系统，这里推荐你一定要装<code>Homebrew</code>，因为<code>Homebrew</code>是<code>macOS</code>下的包管理器，可以安装很多软件。但是，这里并不推荐你使用<code>Homebrew</code>来安装<code>Node</code>，最好使用<code>nvm</code>来安装<code>node</code>，主要是因为<code>nvm</code>是一个强大的<code>node</code>包管理器，在你本机上你可以安装好几个版本的<code>node</code>，并且可以切换任意版本的<code>node</code>。可以使用<code>Homebrew</code>来安装<code>nvm</code>。</p>
<p><strong>安装Homebrew</strong></p>
<p>直接在终端执行以下命令即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<p>因为<code>macOS</code>自带<code>ruby</code>，放在<code>/usr/bin</code>目录下，所以你可以直接使用<code>ruby</code>命令。下面的你可以不实现：（如果你的<code>ruby</code>版本过低，最好别动系统自带的<code>ruby</code>，你可以使用<code>rvm</code>来添加新版本<code>ruby</code>，使用<code>homebrew</code>来安装<code>rvm</code>，重新配置环境变量即可。如果你当前<code>shell</code>是<code>bash</code>，则在当前用户目录下修改<code>.bash_profile</code>添加环境变量，如果当前<code>shell</code>是<code>zsh</code>，则在当前用户目录下修改<code>.zshrc</code>添加环境变量，我接下来所说的添加环境变量都这种情况，当然你电脑的<code>shell</code>也可能是另外两只情况，但是都一样）</p>
<p><strong>安装nvm</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">brew install nvm</div></pre></td></tr></table></figure>
<p>安装完<code>nvm</code>，必须要配置环境变量，需要在根据你当前的<code>shell</code>在相应的文件中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</div><div class="line">  . &quot;/usr/local/opt/nvm/nvm.sh&quot;</div></pre></td></tr></table></figure>
<p>然后可以使用如下命令查看是否配好环境:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nvm --version</div></pre></td></tr></table></figure></p>
<p><strong>安装node</strong></p>
<p>通过<code>nvm ls-remote</code>可以列出所有版本的<code>node</code>，你可以根据你的所需按钮指定版本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nvm install v6.10.0</div></pre></td></tr></table></figure>
<p>安装完<code>node</code>以后通过<code>nvm ls</code>查看当前已经按钮的有哪些版本。<code>node</code>中自带<code>npm</code>，所有你以后可以直接使用<code>npm</code>来安装其他依赖包。</p>
<p><strong>安装react-native-cli</strong></p>
<p>这是<code>ReactNative</code>命令，使用它可以构建<code>ReactNative</code>应用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install -g react-native-cli</div></pre></td></tr></table></figure>
<p><code>-g</code>表示安装到全局模块。</p>
<p>接下来还推荐你安装<code>Watchman</code>和<code>Flow</code>，但是你安装这写不影响开发，安装了更好。它们都可以通过<code>homebrew</code>来安装。</p>
<p>关于IDE，这里推荐<code>Visual Studio Code</code>和<code>WebStorm</code>，至于选哪个看你。</p>
<hr>
<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p><code>ReactNative</code>提供了热更新的功能，但是它并没有热更新的能力，我们需要借助其他平台来实现，这里推荐使用微软的<code>CodePush</code>，它专门用来给<code>ReactNative</code>和<code>Cordova</code>提供热更新管理。它是一个中央管理库。</p>
<h4 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h4><p>首先创建一个<code>iOS</code>工程，这里创建一个示例工程名为：<code>CodePushDemo</code>，并添加<code>cocoapods</code>支持。为了方便管理，我们在工程的根目录下创建一个名为<code>ReactNative</code>的文件夹，这里面放置所有关于<code>ReactNative</code>的文件。打开终端，并进入到<code>ReactNative</code>文件夹中。使用下列命令来初始化依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm init</div><div class="line">npm install --save react react-native</div></pre></td></tr></table></figure>
<p>至此，你文件夹下会有如下文件：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/reactnative/reactnative1.png?raw=true" width="375"><br></div>

<p>打开<code>package.json</code>，如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"CodePushDemo"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"node node_modules/react-native/local-cli/cli.js start"</span>,</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"jest"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"GYD"</span>,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"react"</span>: <span class="string">"^16.0.0-alpha.6"</span>,</div><div class="line">    <span class="attr">"react-native"</span>: <span class="string">"^0.43.1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"babel-jest"</span>: <span class="string">"19.0.0"</span>,</div><div class="line">    <span class="attr">"babel-preset-react-native"</span>: <span class="string">"1.9.1"</span>,</div><div class="line">    <span class="attr">"jest"</span>: <span class="string">"19.0.2"</span>,</div><div class="line">    <span class="attr">"react-test-renderer"</span>: <span class="string">"16.0.0-alpha.6"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"jest"</span>: &#123;</div><div class="line">    <span class="attr">"preset"</span>: <span class="string">"react-native"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，<code>React</code>和<code>ReactNative</code>包我们已经下好了，下面需要装一下<code>code-push-cli</code>，这是<code>CodePush</code>为我们提供的管理工具。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install -g code-push-cli</div></pre></td></tr></table></figure>
<p>如此，<code>code-push-cli</code>已经装好，使用<code>code-push -v</code>可以查看当前版本。</p>
<p>接下来还需要导入<code>CodePush</code>包。依然使用终端，进入到我们刚刚创建的<code>ReactNative</code>文件夹中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install react-native-code-push</div></pre></td></tr></table></figure>
<p>然后你再次打开<code>package.json</code>，你会发现在<code>dependencies</code>字段下多了<code>&quot;react-native-code-push&quot;: &quot;^2.0.1-beta&quot;</code>这一句，说明我们的包已经添加好了。</p>
<p>至此，我们说有的<code>ReactNative</code>依赖已经添加好。</p>
<h4 id="添加pod依赖"><a href="#添加pod依赖" class="headerlink" title="添加pod依赖"></a>添加pod依赖</h4><p>我们这里使用<code>cocoapods</code>来添加<code>ReactNative</code>的依赖，打开并编辑<code>Podfile</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">platform :ios, ‘8.0’</div><div class="line"></div><div class="line">target &apos;CodePushDemo&apos; do</div><div class="line">  # 导入ReactNative 注意，这里的path路径一定要写对 因为我们的node_modules放在了ReactNative文件夹下。</div><div class="line">  pod &apos;React&apos;, :path =&gt; &apos;./ReactNative/node_modules/react-native&apos;, :subspecs =&gt; [</div><div class="line">    &apos;Core&apos;,</div><div class="line">    &apos;RCTText&apos;,</div><div class="line">    &apos;RCTNetwork&apos;,</div><div class="line">    &apos;RCTWebSocket&apos;, # 这个模块是用于调试功能的</div><div class="line">    # 在这里继续添加你所需要的模块</div><div class="line">  ]</div><div class="line">  # 如果你的RN版本 &gt;= 0.42.0，请加入下面这行</div><div class="line">  pod &quot;Yoga&quot;, :path =&gt; &quot;./ReactNative/node_modules/react-native/ReactCommon/yoga&quot;	</div><div class="line">  #CodePush 热更新</div><div class="line">  pod &apos;CodePush&apos;, :path =&gt; &apos;./ReactNative/node_modules/react-native-code-push&apos;</div><div class="line"></div><div class="line">  target &apos;CodePushDemoTests&apos; do</div><div class="line">    inherit! :search_paths</div><div class="line">  end</div><div class="line"></div><div class="line">  target &apos;CodePushDemoUITests&apos; do</div><div class="line">    inherit! :search_paths</div><div class="line">  end</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure>
<p>然后执行<code>pod install</code>，接下来打开工程，看是否编译通过。</p>
<h4 id="在CodePush上创建应用"><a href="#在CodePush上创建应用" class="headerlink" title="在CodePush上创建应用"></a>在CodePush上创建应用</h4><p><strong>注册账号</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">code-push register</div></pre></td></tr></table></figure></p>
<p>你注册完成以后会给你一个key，你需要将这个key输入终端。</p>
<p><strong>向CodePush服务器注册app</strong><br>为了让CodePush服务器知道你的app，我们需要向它注册app： 在终端输入code-push app add <appname>即可完成注册。</appname></p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/reactnative/reactnative2.png?raw=true" width="375"><br></div>

<p>注册完成之后会返回一套deployment key，该key在后面步骤中会用到。</p>
<p>注意，因为<code>CodePush</code>不会区分<code>iOS</code>和<code>Android</code>，所以我们需要注册两个<code>APP</code>。</p>
<p><code>code-push</code> 关于<code>app</code>的相关命令：</p>
<ul>
<li><code>code-push app add</code> 在账号里面添加一个新的app </li>
<li><code>code-push app remove</code> 在账号里移除一个app </li>
<li><code>code-push app rename</code> 重命名一个存在app</li>
<li><code>code-push app list</code> 列出账号下面的所有app </li>
<li><code>code-push app transfer</code> 把app的所有权转移到另外一个账号 </li>
</ul>
<h4 id="使用CodePush"><a href="#使用CodePush" class="headerlink" title="使用CodePush"></a>使用CodePush</h4><p>首先在<code>Info.plist</code>文件中添加键值对：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CodePushDeploymentKey<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>zjS1l098BMmScNFNrOl7ZmsAi3VCNylurZJ6M<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中这个key是你在注册<code>app</code>的时候<code>CodePush</code>给你的，我们这里使用<code>Production key</code>。你也可以通过<code>code-push deployment ls &lt;APP_NAME&gt; -k</code>来查看<code>deployment key</code>。</p>
<p>当然，在我们测试的时候，要把工程更改为<code>Release</code>模式。</p>
<p>然后创建<code>index.ios.js</code>，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React , &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="comment">//导入热更新</span></div><div class="line"><span class="keyword">import</span> codePush <span class="keyword">from</span> <span class="string">"react-native-code-push"</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CodePushDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.highScoresTitle&#125;</span>&gt;</span></div><div class="line">          测试</div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  componentDidMount()&#123;</div><div class="line">    <span class="comment">//检查是否有信版本</span></div><div class="line">    codePush.sync();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: <span class="number">1</span>,</div><div class="line">    justifyContent: <span class="string">'center'</span>,</div><div class="line">    alignItems: <span class="string">'center'</span>,</div><div class="line">    backgroundColor: <span class="string">'#FFFFFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  highScoresTitle: &#123;</div><div class="line">    fontSize: <span class="number">20</span>,</div><div class="line">    textAlign: <span class="string">'center'</span>,</div><div class="line">    margin: <span class="number">10</span>,</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 整体js模块的名称</span></div><div class="line">AppRegistry.registerComponent(<span class="string">'CodePushDemo'</span>, () =&gt; CodePushDemo);</div></pre></td></tr></table></figure>
<p>首先要导入热更新模块<code>import codePush from &quot;react-native-code-push&quot;;</code>，而且我们一般再<code>componentDidMount</code>方法中调用<code>sync</code>放，后台请求更新。</p>
<p>我们在原生里面需要这么使用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"RNViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTRootView.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBundleURLProvider.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;CodePush/CodePush.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RNViewController</span> ()</span></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RNViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">    <span class="keyword">self</span>.title = <span class="string">@"RN界面"</span>;</div><div class="line">  </div><div class="line">    <span class="built_in">NSURL</span> *jsCodeLocation;  </div><div class="line">    jsCodeLocation = [CodePush bundleURL];</div><div class="line">    RCTRootView *view = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation moduleName:<span class="string">@"CodePushDemo"</span> initialProperties:<span class="literal">nil</span> launchOptions:<span class="literal">nil</span>];</div><div class="line">    view.frame = <span class="keyword">self</span>.view.bounds;</div><div class="line">    [<span class="keyword">self</span>.view addSubview:view];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们知道，<code>ReactNative</code>是以<code>bundle</code>的形式加载界面的，所以，我们需要向<code>CodePush</code>提交我们的新<code>Bundle</code>。</p>
<p>将<code>js</code>打包成<code>Bundle</code>的命令是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">react-native bundle --platform 平台 --entry-file 启动文件 --bundle-output 打包js输出文件 --assets-dest 资源输出目录 --dev 是否调试。 </div><div class="line"></div><div class="line">react-native bundle --platform ios --entry-file index.ios.js --bundle-output ./bundle/main.jsbundle --dev false</div></pre></td></tr></table></figure>
<p>最终打好的包如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/reactnative/reactnative3.png?raw=true" width="375"><br></div>

<p>注意，这里有一个坑，在你首次打好包以后，或者你重新上传<code>app</code>到<code>appstore</code>的时候，你需要先把这个<code>main.jsbundle</code>导入到工程中，但是以后更新<code>bundle</code>的时候就不用再次导了，总之，需要保证你的工程中有一个<code>main.jsbundle</code>。</p>
<p>接下来，需要把我们新打好的<code>bundle</code>上传到<code>CodePush</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">code-push release &lt;应用名称&gt; &lt;Bundles所在目录&gt; &lt;对应的应用版本&gt; --deploymentName： 更新环境 --description： 更新描述 --mandatory： 是否强制更新</div><div class="line"></div><div class="line">code-push release CodePushDemo ./bundle/main.jsbundle 1.0.0 --deploymentName Production --description &quot;1.0&quot; --mandatory true</div></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li><code>CodePush</code>默认是<code>staging</code>环境，这里我们切换到<code>Production</code>环境</li>
<li>如果有<code>mandatory</code>则<code>CodePush</code>会根据<code>mandatory</code>是<code>true</code>或<code>false</code>来控制应用是否强制更新。默认情况下<code>mandatory</code>为<code>false</code>即不强制更新。</li>
<li>对应的应用版本（<code>targetBinaryVersion</code>）是指当前app的版本，也就是说此次更新的<code>bundle</code>对应的是<code>app</code>的那个版本。不要将其理解为这次<code>js</code>更新的版本。</li>
<li>如果我们要对某一个应用版本进行多次更新，只需要上传与上次不同的<code>bundle</code>即可</li>
</ul>
<p>在终端输入 <code>code-push deployment history &lt;appName&gt; Production</code> 可以看到<code>Production</code>版本更新的时间、描述等等属性。 </p>
<p>应用启动之后，从<code>CodePush</code>服务器查询更新，并下载到本地，下载好之后跟新界面。</p>
<p>更多部署命令：</p>
<ul>
<li><code>code-push deployment rm</code> 删除部署</li>
</ul>
<p>接下来我们再来看看<code>codePush.sync()</code>方法，它可以传如下几种参数：</p>
<ul>
<li>deploymentKey （String）： 部署key，指定你要查询更新的部署秘钥，默认情况下该值来自于Info.plist(iOS)和MianActivity.java(Android)文件，你可以通过设置该属性来动态查询不同部署key下的更新。</li>
<li>installMode (codePush.InstallMode)： 安装模式，用在向CodePush推送更新时没有设置强制更新(mandatory为true)的情况下，默认codePush.InstallMode.ON_NEXT_RESTART即下一次启动的时候安装。</li>
<li>mandatoryInstallMode (codePush.InstallMode):强制更新,默认codePush.InstallMode.IMMEDIATE。</li>
<li>minimumBackgroundDuration (Number):该属性用于指定app处于后台多少秒才进行重启已完成更新。默认为0。该属性只在installMode为InstallMode.ON_NEXT_RESUME情况下有效。</li>
</ul>
<p>至此，<code>iOS</code>热更新已经说完。</p>
<hr>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><h4 id="创建工程-1"><a href="#创建工程-1" class="headerlink" title="创建工程"></a>创建工程</h4><p>首先，我们依然需要创建<code>package.json</code>，并添加依赖包。最终的工程目录为：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/reactnative/reactnative5.png?raw=true" width="375"><br></div>

<p>接下来配置<code>Android</code>工程，添加依赖。这里我们先添加<code>ReactNative</code>依赖，这里面的坑还是不少的。</p>
<h4 id="添加ReactNative依赖"><a href="#添加ReactNative依赖" class="headerlink" title="添加ReactNative依赖"></a>添加ReactNative依赖</h4><p>在你的app中 build.gradle 文件中添加 React Native 依赖:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile &apos;com.facebook.react:react-native:0.43.1&apos;</div><div class="line">&#125;</div><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    configurations.all &#123;</div><div class="line">        resolutionStrategy.force &apos;com.google.code.findbugs:jsr305:1.3.9&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>react-native</code>后面的版本是你当前<code>package.json</code>内的<code>react-native</code>版本。在这里我们还添加了<code>configurations.all</code>，这里是为了兼容<code>appcompat</code>库。</p>
<p>然后在项目的<code>build.gradle</code>文件中为<code>ReactNative</code>添加一个<code>maven</code>依赖的入口，必须写在<code>&quot;allprojects&quot;</code>代码块中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123;</div><div class="line">            // All of React Native (JS, Android binaries) is installed from npm</div><div class="line">            url &quot;$rootDir/../ReactNative/node_modules/react-native/android&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加完依赖后，新建一个<code>RNActivity</code>。在<code>MainActivity</code>中添加一个按钮，按钮点击打开<code>RNActivity</code>，在<code>RNActivity</code>里面的添加<code>ReactNative</code>界面。由于需要一些权限问题，所以一定要在<code>AndroidManifest.xml</code>文件中添加如下权限：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.SYSTEM_ALERT_WINDOW"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.SYSTEM_OVERLAY_WINDOW"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>因为<code>SYSTEM_OVERLAY_WINDOW</code>是运行时权限，所以我们要在按钮点击的时候去添加权限。<code>MainActivity</code>如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.button);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (!Settings.canDrawOverlays(MainActivity.<span class="keyword">this</span>)) &#123;</div><div class="line">                        <span class="comment">//开启权限</span></div><div class="line">                        Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</div><div class="line">                        startActivity(intent);</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        openRNActivity();</div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    openRNActivity();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openRNActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,RNActivity.class);</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再来看<code>RNActivity</code>，因为我们是将<code>ReactNative</code>作为一个子界面放在布局中的，所以我们直接在<code>RNActivity</code>的布局文件中添加<code>ReactRootView</code>布局，布局如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.codepushdemoandroid.RNActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.facebook.react.ReactRootView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rn_layout"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后看<code>RNActivity.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RNActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">DefaultHardwareBackBtnHandler</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> ReactRootView mReactRootView;</div><div class="line">    <span class="keyword">private</span> ReactInstanceManager mReactInstanceManager;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_rn);</div><div class="line"></div><div class="line">        mReactRootView = (ReactRootView) findViewById(R.id.rn_layout);</div><div class="line">        mReactInstanceManager = ReactInstanceManager.builder()</div><div class="line">                .setCurrentActivity(<span class="keyword">this</span>)</div><div class="line">                .setApplication(getApplication())</div><div class="line">                .setBundleAssetName(<span class="string">"index.android.bundle"</span>)</div><div class="line">                .setJSMainModuleName(<span class="string">"index.android"</span>)</div><div class="line">                .addPackage(<span class="keyword">new</span> MainReactPackage())</div><div class="line">                .setUseDeveloperSupport(BuildConfig.DEBUG)</div><div class="line">                .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">                .build();</div><div class="line">        mReactRootView.startReactApplication(mReactInstanceManager,<span class="string">"CodePushDemoAndroid"</span>,<span class="keyword">null</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeDefaultOnBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onBackPressed();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onHostPause(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onHostResume(<span class="keyword">this</span>, <span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onHostDestroy();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onBackPressed();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">super</span>.onBackPressed();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ReactRootView</code>就是我们的<code>ReactNative</code>界面，<code>ReactInstanceManager</code>主要是去加载<code>bundle</code>的，注意，这里的名字一定要和<code>js</code>中注册的名字一样。我们再来看<code>index.android.js</code>文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React , &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  Image</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CodePushDemoAndroid</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.highScoresTitle&#125;</span>&gt;</span></div><div class="line">          我是ReactNative界面</div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: <span class="number">1</span>,</div><div class="line">    justifyContent: <span class="string">'center'</span>,</div><div class="line">    alignItems: <span class="string">'center'</span>,</div><div class="line">    backgroundColor: <span class="string">'#FFFFFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  highScoresTitle: &#123;</div><div class="line">    fontSize: <span class="number">20</span>,</div><div class="line">    textAlign: <span class="string">'center'</span>,</div><div class="line">    margin: <span class="number">10</span>,</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 整体js模块的名称</span></div><div class="line">AppRegistry.registerComponent(<span class="string">'CodePushDemoAndroid'</span>, () =&gt; CodePushDemoAndroid);</div></pre></td></tr></table></figure>
<p>最终运行结果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/reactnative/reactnative6.gif?raw=true" width="375"><br></div>

<p>至此，我们<code>Android</code>原生项目导入<code>ReactNative</code>已经完成，是不是感觉比<code>iOS</code>坑太多了。<br>下面我们再来看如何导入<code>CodePush</code>。</p>
<h4 id="添加CodePush依赖"><a href="#添加CodePush依赖" class="headerlink" title="添加CodePush依赖"></a>添加CodePush依赖</h4><p>在使用<code>CodePush</code>之前，我们依然要在<code>CodePush</code>平台上添加一个<code>APP</code>，获取<code>key</code>。这些过程和<code>iOS</code>一样，这里就不再说了。</p>
<p>在 <code>app</code>的<code>build.gradle</code>文件里面添如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">apply from: &quot;../../ReactNative/node_modules/react-native-code-push/android/codepush.gradle&quot;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile project(&apos;:react-native-code-push&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，这里的路径一定要根据实际情况来写。比如我的<code>node_modules</code>是放在了和工程目录同一目录下的<code>ReactNative</code>文件夹下。</p>
<p>然后在工程下的<code>settings.gradle</code>中添加如下代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">include &apos;:react-native-code-push&apos;</div><div class="line">project(&apos;:react-native-code-push&apos;).projectDir = new File(rootProject.projectDir, &apos;../ReactNative/node_modules/react-native-code-push/android/app&apos;)</div></pre></td></tr></table></figure>
<p>这里是将<code>react-native-code-push</code>模块导入到工程中，作为一个子模块。</p>
<p>注意，你<code>Android</code>工程的<code>buildToolsVersion</code>版本可能比<code>react-native-code-push</code>的版本高，所以你需要修改<code>react-native-code-push</code>的版本。</p>
<p>至此，<code>CodePush</code>的环境算是配好了。接下来看如何使用。</p>
<p>在这里，你只需要修改<code>RNActivity.java</code>中<code>onCreate</code>方法就行:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RNActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">DefaultHardwareBackBtnHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ReactRootView mReactRootView;</div><div class="line">    <span class="keyword">private</span> ReactInstanceManager mReactInstanceManager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_rn);</div><div class="line">        <span class="comment">// 这里的key要替换成你自己的key</span></div><div class="line">        CodePush codepush = <span class="keyword">new</span> CodePush(<span class="string">"_lVphT2Ox1tyCFRIhzVrBoTcGwKbNylurZJ6M"</span>,getApplication(),BuildConfig.DEBUG);</div><div class="line">        <span class="comment">// 本地bundle的路径</span></div><div class="line">        String path = CodePush.getJSBundleFile();</div><div class="line">        </div><div class="line">        mReactRootView = (ReactRootView) findViewById(R.id.rn_layout);</div><div class="line">        mReactInstanceManager = ReactInstanceManager.builder()</div><div class="line">                .setCurrentActivity(<span class="keyword">this</span>)</div><div class="line">                .setApplication(getApplication())</div><div class="line">                .setJSBundleFile(path)</div><div class="line"><span class="comment">//                .setBundleAssetName("index.android.bundle")</span></div><div class="line"><span class="comment">//                .setJSMainModuleName("index.android")</span></div><div class="line">                .addPackage(<span class="keyword">new</span> MainReactPackage())</div><div class="line">                .addPackage(codepush)</div><div class="line">                .setUseDeveloperSupport(BuildConfig.DEBUG)</div><div class="line">                .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">                .build();</div><div class="line">        mReactRootView.startReactApplication(mReactInstanceManager,<span class="string">"CodePushDemoAndroid"</span>,<span class="keyword">null</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出来，之前我们是使用<code>setBundleAssetName(&quot;index.android.bundle&quot;)</code>和<code>setJSMainModuleName(&quot;index.android&quot;)</code>方法去加载本地<code>bundle</code>，现在我们使用<code>setJSBundleFile(path)</code>并且还添加了<code>addPackage(codepush)</code>。好了，现在这个界面就可以随时更新了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实，<code>ReactNative</code>为什么能热更新？主要是因为我们使用<code>js</code>将代码写好，然后使用<code>ReactNative</code>将<code>js</code>代码打包成<code>jsbundle</code>，而真正去执行代码的就是这个<code>jsbundle</code>，只要你的<code>app</code>支持<code>ReactNative</code>环境，就可以去加载<code>jsbundle</code>，而这个<code>jsbundle</code>其实是放在本地的。所以，你完全可以自己搭一个服务器，去判断远端是否有新<code>bundle</code>，如果有，那么下载下来，替换本地的<code>bundle</code>，等到下次运行的时候就可以更新的。当然，你也可以在下载完以后才去加载这个<code>bundle</code>。我们使用<code>CodePush</code>，只是因为它版本的控制等做的比较好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要说一下如何利用&lt;code&gt;ReactNative&lt;/code&gt;的&lt;code&gt;jsbundle&lt;/code&gt;机制来实现&lt;code&gt;App&lt;/code&gt;的热更新。&lt;/p&gt;
&lt;p&gt;前段时间&lt;code&gt;iOS&lt;/code&gt;界发生了一件大事，苹果禁止含有热更新或者热修复的&lt;code&gt;APP&lt;/code&gt;上架，这里主要是禁止使用&lt;code&gt;runtime&lt;/code&gt;的一些特性。但是&lt;code&gt;ReactNative&lt;/code&gt;不同，它没有使用到&lt;code&gt;runtime&lt;/code&gt;特性，并且好多人已经证实，&lt;code&gt;ReactNative&lt;/code&gt;应用依然可以上线。&lt;/p&gt;
&lt;p&gt;其实好多应用并不是使用&lt;code&gt;ReactNative&lt;/code&gt;直接开发，而是在原生应用的基础上，导入&lt;code&gt;ReactNative&lt;/code&gt;。&lt;code&gt;iOS&lt;/code&gt;最好使用&lt;code&gt;cocoapods&lt;/code&gt;导入，&lt;code&gt;Android&lt;/code&gt;使用&lt;code&gt;build.gradle&lt;/code&gt;添加依赖包。本篇文章主要包含三个部分：环境搭建、&lt;code&gt;iOS&lt;/code&gt;热更新和&lt;code&gt;Android&lt;/code&gt;热更新。&lt;/p&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="http://www.guiyongdong.com/categories/ReactNative/"/>
    
    
      <category term="reactnative" scheme="http://www.guiyongdong.com/tags/reactnative/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之AsyncTask</title>
    <link href="http://www.guiyongdong.com/2017/04/05/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BAsyncTask/"/>
    <id>http://www.guiyongdong.com/2017/04/05/一天一Android之AsyncTask/</id>
    <published>2017-04-05T09:54:27.000Z</published>
    <updated>2017-04-06T08:27:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间我有说过<code>Handler</code>、<code>Message</code>、<code>Looper</code>三者之间的关系，它们可以解决线程间通信，可以用作子线程处理耗时操作，主线程刷新UI等。今天我要说的是另外一种解决方案：<code>AsyncTask</code>。它的内部还是使用异步消息处理机制，只是<code>Android</code>对这三者进行了高度的封装。如果你对异步消息处理机制还不是很清楚的话，你可以看看这篇文章:<a href="http://www.guiyongdong.com/2017/03/27/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8B%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/">一天一Android之异步消息处理机制</a>。来看看<code>AsyncTask</code>到底如何使用。</p>
<a id="more"></a>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>首先看一下<code>AsyncTask</code>的基本用法，因为<code>AsyncTask</code>是一个抽象类，所以如果我们想使用它，就必须要创建一个子类去继承它，在继承时，我们可以为<code>AsyncTask</code>类来指定3个泛型参数，这3个参数的用途如下：</p>
<ul>
<li>Params 在执行<code>AsyncTask</code>时需要传入的参数，可以在后台任务中使用</li>
<li>Progress 后台任务执行时，如果需要在界面上显示当前的进度，则使用这里指定的泛型作为返回值类型</li>
<li>Result 当任务执行完毕后，如果需要对结果进行返回，则使用这里指定的泛型作为返回值类型。</li>
</ul>
<p>所以，我们定义一个<code>AsyncTask</code>就可以写成如下方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>,<span class="title">Integer</span>,<span class="title">Void</span>&gt; </span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里，我们指定第一个泛型参数为<code>Void</code>，表示在执行<code>AsyncTask</code>的时候不需要传入参数给后台任务，第二个泛型参数我们指定为<code>Integer</code>，表示使用整型数据来作为进度显示单位，第三个泛型参数指定为<code>Void</code>，表示不指定反馈执行结果。</p>
<p>一般情况下，我们需要重写<code>AsyncTask</code>中的几个方法才能完成对任务的定制。经常需要重写的方法有四个：</p>
<p><strong>onPreExecute()</strong></p>
<p>这个方法会在后台任务开始执行之前调用，一般我们会在这里进行一些初始化，比如显示一个进度条对话框等。此方法执行在主线程中。</p>
<p><strong>doInBackground(Void… params)</strong></p>
<p>这个方法中的所有代码都在子线程中执行，应当在这里进行耗时的操作，一旦完成操作，可以使用<code>return</code>语句来将执行的结果返回，因为我们这里定义的返回类型是<code>Void</code>，所以我们这里可以不返回或者返回<code>null</code>。另外特别注意，在这个方法中是不能进行UI操作的，如果需要更新UI，比如更新下载进度等，需要调用<code>publishProgress(Progress... values)</code>来完成。</p>
<p><strong>onProgressUpdate(Integer… values)</strong></p>
<p>当我们在后台任务中调用了<code>publishProgress(Progress... values)</code>方法后，这个方法就会被执行，并且执行在主线程中，而且此方法所带的参数正是在后台任务方法中传多来的，我们一般再这个方法中更新UI，比如更新下载进度等。</p>
<p><strong>onPostExecute(Void aVoid)</strong></p>
<p>当后台任务执行完成并且通过<code>return</code>语句返回时，这个方法就会被调用，返回的数据会作为参数传递到此方法中，可以利用返回的数据来进行一些操作，比如关闭进度条对话框等。当然，此方法执行在主线程中。</p>
<p>我们模拟一个下载任务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line">    <span class="keyword">private</span> ProgressDialog mProgressDialog;</div><div class="line">    <span class="keyword">private</span> TextView mTextView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        mTextView = (TextView) findViewById(R.id.textView);</div><div class="line">        mProgressDialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</div><div class="line">        mProgressDialog.setMax(<span class="number">100</span>);</div><div class="line">        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);</div><div class="line">        mProgressDialog.setCancelable(<span class="keyword">false</span>);</div><div class="line">        <span class="comment">//启动任务</span></div><div class="line">        <span class="keyword">new</span> DownloadTask().execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>,<span class="title">Integer</span>,<span class="title">Void</span>&gt; </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">//显示进度条对话框</span></div><div class="line">            mProgressDialog.show();</div><div class="line">            Log.d(TAG, <span class="string">"onPreExecute: "</span>+Thread.currentThread().getName());</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">            <span class="comment">//模拟耗时操作</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">80</span>);</div><div class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//更新下载进度</span></div><div class="line">                publishProgress(i);</div><div class="line">            &#125;</div><div class="line">            Log.d(TAG, <span class="string">"doInBackground: "</span>+Thread.currentThread().getName());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;</div><div class="line">            <span class="comment">//主线程更新进度对话框</span></div><div class="line">            mProgressDialog.setProgress(values[<span class="number">0</span>]);</div><div class="line">            Log.d(TAG, <span class="string">"onProgressUpdate: "</span>+Thread.currentThread().getName());</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Void aVoid)</span> </span>&#123;</div><div class="line">            <span class="comment">//主线程隐藏进度对话框</span></div><div class="line">            mProgressDialog.dismiss();</div><div class="line">            mTextView.setText(<span class="string">"加载完毕"</span>);</div><div class="line">            Log.d(TAG, <span class="string">"onPostExecute: "</span>+Thread.currentThread().getName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果想启动一个任务，只需要调用如下代码即可：<code>new DownloadTask().execute();</code></p>
<p>运行结果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android21.gif?raw=true" width="375"><br></div>


<h3 id="内部实现"><a href="#内部实现" class="headerlink" title="内部实现"></a>内部实现</h3><p>那么，<code>AsyncTask</code>内部是如何实现的呢？那么，就从我们的执行异步任务的起点开始，看看<code>execute</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec,</span></span></div><div class="line">        Params... params) &#123;</div><div class="line">    <span class="comment">//一个任务同一时间只能开启一次,即当前任务只有在结束以后才能再次开启</span></div><div class="line">    <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</div><div class="line">        <span class="keyword">switch</span> (mStatus) &#123;</div><div class="line">            <span class="keyword">case</span> RUNNING:</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></div><div class="line">                        + <span class="string">" the task is already running."</span>);</div><div class="line">            <span class="keyword">case</span> FINISHED:</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></div><div class="line">                        + <span class="string">" the task has already been executed "</span></div><div class="line">                        + <span class="string">"(a task can be executed only once)"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//设置当前任务的状态是正在进行</span></div><div class="line">    mStatus = Status.RUNNING;</div><div class="line">    <span class="comment">// 执行准备工作，我们一般都会重写这个方法</span></div><div class="line">    onPreExecute();</div><div class="line">    <span class="comment">//保存参数，并设置Handler回调</span></div><div class="line">    mWorker.mParams = params;</div><div class="line">    <span class="comment">//将mFuture添加到线程队列中</span></div><div class="line">    exec.execute(mFuture);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码的意思是：首先会判断当前任务是否已经在执行，如果已经在执行则抛出异常，然后设置当前任务的状态为运行状态，调用<code>onPreExecute()</code>方法，一般我们都会重写此方法，会进行一些初始化操作，当前方法还是在主线程中。然后保存参数，执行<code>exec.execute(mFuture)</code>，下面我们来看看<code>mWorker</code>和<code>mFuture</code>。</p>
<p>先来看看<code>mWorker</code>这个成员变量所属的类<code>WorkerRunnable</code>：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerRunnable</span>&lt;<span class="title">Params</span>, <span class="title">Result</span>&gt; <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Result</span>&gt; </span>&#123;</div><div class="line">    Params[] mParams;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，它只有一个成员变量，就是存储我们传入的参数的，并且它还是一个抽象类，并没有实现<code>Callable</code>接口的方法。我们再来看看<code>AsyncTask</code>的构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//创建mWorker 并实现call方法，在合适的时间会调用call方法</span></div><div class="line">    mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            mTaskInvoked.set(<span class="keyword">true</span>);</div><div class="line">            Result result = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">                <span class="comment">//执行后台任务</span></div><div class="line">                result = doInBackground(mParams);</div><div class="line">                Binder.flushPendingCommands();</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable tr) &#123;</div><div class="line">                mCancelled.set(<span class="keyword">true</span>);</div><div class="line">                <span class="keyword">throw</span> tr;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="comment">//后台任务结束，处理返回的结果</span></div><div class="line">                postResult(result);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里会对<code>mWorker</code>进行初始化。这里实现了<code>call</code>方法，并且设置<code>mTaskInvoked=true</code>，然后调用<code>doInBackground(mParams)</code>，之后又调用了<code>postResult(result)</code>方法来操作后台任务返回的结果，那<code>mWorker</code>的<code>call</code>方法什么时候被调用呢？我们等会再来看，先来看看<code>postResult()</code>方法的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="comment">//通过getHandler()方法获取Handler对象 然后创建Message对象</span></div><div class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</div><div class="line">            <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</div><div class="line">    <span class="comment">//异步发送消息</span></div><div class="line">    message.sendToTarget();</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>终于，我们看到了我们熟悉的异步消息机制，这里传递一个<code>message</code>，<code>message.what</code>为<code>MESSAGE_POST_RESULT</code>，<code>message.object</code>为<code>new AsyncTaskResult&lt;Result&gt;(this, result)</code>，我们再来看<code>AsyncTaskResult</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskResult</span>&lt;<span class="title">Data</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> AsyncTask mTask;</div><div class="line">    <span class="keyword">final</span> Data[] mData;</div><div class="line"></div><div class="line">    AsyncTaskResult(AsyncTask task, Data... data) &#123;</div><div class="line">        mTask = task;</div><div class="line">        mData = data;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AsyncTaskResult</code>只是一个简单的携带数据的对象。</p>
<p>看到这里，我们一定相信在某处还存在一个<code>Handler</code>。在<code>postResult(Result result)</code>方法中，通过<code>getHandler()</code>方法获取了一个<code>Handler</code>对象，我们再来看这个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (AsyncTask.class) &#123;</div><div class="line">        <span class="keyword">if</span> (sHandler == <span class="keyword">null</span>) &#123;</div><div class="line">            sHandler = <span class="keyword">new</span> InternalHandler();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sHandler;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码是线程安全的，并且对<code>sHandler</code>进行了初始化。通过查看<code>sHandler</code>，它是一个静态变量，所以我们可以得出，在整个<code>AsyncTask</code>体系中，都只存在一个<code>Handler</code>。我们再来看看<code>InternalHandler</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Looper.getMainLooper());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class="line">        <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">            <span class="keyword">case</span> MESSAGE_POST_RESULT:</div><div class="line">                <span class="comment">// There is only one result</span></div><div class="line">                result.mTask.finish(result.mData[<span class="number">0</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</div><div class="line">                result.mTask.onProgressUpdate(result.mData);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>InternalHandler</code>类重写了<code>handleMessage</code>方法，在接收到<code>MESSAGE_POST_RESULT</code>消息时，执行了<code>result.mTask.finish(result.mData[0])</code>，其实就是执行了<code>AsyncTask.this.finish(result)</code>，在接收早<code>MESSAGE_POST_PROGRESS</code>消息时，执行了<code>result.mTask.onProgressUpdate(result.mData)</code>，其实是执行了<code>AsyncTask.this.onProgressUpdate(progress)</code>，我们先看<code>finish</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isCancelled()) &#123;</div><div class="line">    	 <span class="comment">//如果是取消 回调onCancelled</span></div><div class="line">        onCancelled(result);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//正常结束任务 回调onPostExecute</span></div><div class="line">        onPostExecute(result);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//设置当前任务的状态</span></div><div class="line">    mStatus = Status.FINISHED;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，如果我们调用了<code>cancel()</code>，则执行<code>onCancelled()</code>回调。正常情况下调用的<code>onPostExecute()</code>，而我们一般都会重新<code>onPostExecute()</code>方法。</p>
<p>现在我们有个疑惑，那么后台任务在什么时候执行呢？那就要看<code>mFuture</code>了。再看<code>AsyncTask</code>的构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">    mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                postResultIfNotInvoked(get());</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                android.util.Log.w(LOG_TAG, e);</div><div class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"An error occurred while executing doInBackground()"</span>,</div><div class="line">                        e.getCause());</div><div class="line">            &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</div><div class="line">                postResultIfNotInvoked(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>任务执行结束会调用<code>postResultIfNotInvoked(get())</code>，<code>get()</code>表示获取<code>mWorker</code>的<code>call</code>方法的返回值，即<code>Result</code>，然后看<code>postResultIfNotInvoked</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postResultIfNotInvoked</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> wasTaskInvoked = mTaskInvoked.get();</div><div class="line">    <span class="keyword">if</span> (!wasTaskInvoked) &#123;</div><div class="line">        postResult(result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果<code>mTaskInvoked</code>不为<code>true</code>，则执行<code>postResult</code>，但是在<code>mWorker</code>初始化时就已经将<code>mTaskInvoked</code>为<code>true</code>，所以一般这个<code>postResult</code>执行不到。</p>
<p>好了，现在<code>mWorker</code>和<code>mFurture</code>都已经介绍完了，不过这里只是初始化了两个对象，并没有真正的执行，下面看真正调用执行的地方。</p>
<p>不知道大家还记得不，在<code>executeOnExecutor</code>中有这样一句代码<code>exec.execute(mFuture)</code>，而<code>exec</code>又是传过来的，为<code>sDefaultExecutor</code>。下面来看看这个<code>sDefaultExecutor</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">    <span class="comment">//线程队列</span></div><div class="line">    <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</div><div class="line">    Runnable mActive;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</div><div class="line">        mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    r.run();</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    scheduleNext();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</div><div class="line">            scheduleNext();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</div><div class="line">            THREAD_POOL_EXECUTOR.execute(mActive);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到<code>sDefaultExecutor</code>其实为<code>SerialExecutor</code>的一个实例，其内部维持一个任务队列，直接看其<code>execute(Runnable runnable)</code>方法，将<code>runnable</code>放入<code>mTasks</code>队尾。并且判断当前<code>mActive</code>是否为空，为空则调用<code>scheduleNext</code>方法，<code>scheduleNext</code>放则直接取出任务队列中的首任务，如果不为<code>null</code>则传入<code>THREAD_POOL_EXECUTOR</code>进行执行。</p>
<p>再来看<code>THREAD_POOL_EXECUTOR</code>是什么：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR;</div><div class="line"></div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</div><div class="line">            CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,</div><div class="line">            sPoolWorkQueue, sThreadFactory);</div><div class="line">    threadPoolExecutor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</div><div class="line">    THREAD_POOL_EXECUTOR = threadPoolExecutor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到就是一个自己设置参数的线程池，参数为：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = Math.max(<span class="number">2</span>, Math.min(CPU_COUNT - <span class="number">1</span>, <span class="number">4</span>));</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE_SECONDS = <span class="number">30</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadFactory sThreadFactory = <span class="keyword">new</span> ThreadFactory() &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger mCount = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"AsyncTask #"</span> + mCount.getAndIncrement());</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =</div><div class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">128</span>);</div></pre></td></tr></table></figure></p>
<p>看到这里，大家会认为背后原来有一个线程池，最大的并发数，长度等和CPU都有关系。但是，其实这是一个线性执行任务的线程池，大家再看<code>SerialExecutor</code>，在<code>execute</code>方法中，会判断当前<code>mActive</code>是不是空，如果不是空，是不会取下一个任务的，只有当前任务执行完成，才会取下一个任务。</p>
<p>再来看<code>mFuture</code>，在创建<code>mFuture</code>的时候就已经将<code>mWorker</code>传给了<code>mFuture</code>，而<code>mFuture</code>又是间接继承了<code>Runnable</code>类，所以，<code>mFuture</code>会在<code>run</code>方法中去执行<code>mWorker</code>的<code>call</code>方法：</p>
<p>先来看<code>FutureTask</code>类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (callable == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="comment">//记录回调</span></div><div class="line">    <span class="keyword">this</span>.callable = callable;</div><div class="line">    <span class="comment">//设置当前状态</span></div><div class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造方法中，记录了当前的<code>callable</code>也就是<code>mWorker</code>。我们直接看<code>run</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (state != NEW ||</div><div class="line">        !U.compareAndSwapObject(<span class="keyword">this</span>, RUNNER, <span class="keyword">null</span>, Thread.currentThread()))</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Callable&lt;V&gt; c = callable;</div><div class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span> &amp;&amp; state == NEW) &#123;</div><div class="line">            V result;</div><div class="line">            <span class="keyword">boolean</span> ran;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">            		<span class="comment">//调用mWorker 的 call方法 执行后台任务</span></div><div class="line">                result = c.call();</div><div class="line">                ran = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">                result = <span class="keyword">null</span>;</div><div class="line">                ran = <span class="keyword">false</span>;</div><div class="line">                setException(ex);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (ran)</div><div class="line">                set(result);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="comment">// runner must be non-null until state is settled to</span></div><div class="line">        <span class="comment">// prevent concurrent calls to run()</span></div><div class="line">        runner = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// state must be re-read after nulling runner to prevent</span></div><div class="line">        <span class="comment">// leaked interrupts</span></div><div class="line">        <span class="keyword">int</span> s = state;</div><div class="line">        <span class="keyword">if</span> (s &gt;= INTERRUPTING)</div><div class="line">            handlePossibleCancellationInterrupt(s);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以清楚的看到，这里执行了<code>mWorker</code>的<code>call</code>方法。</p>
<p>还有一个方法我们没说，<code>publishProgress</code>:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!isCancelled()) &#123;</div><div class="line">        getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</div><div class="line">                <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很简单，直接使用<code>Handler</code>发送一个消息，并且携带参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Looper.getMainLooper());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class="line">        <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">            <span class="keyword">case</span> MESSAGE_POST_RESULT:</div><div class="line">                <span class="comment">//耗时操作完成</span></div><div class="line">                result.mTask.finish(result.mData[<span class="number">0</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</div><div class="line">                <span class="comment">//进度更新</span></div><div class="line">                result.mTask.onProgressUpdate(result.mData);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>好了，至此<code>AsyncTask</code>的使用和原理我们已经说完了，再总结一下原生：</p>
<ul>
<li>首先<code>AsyncTask</code>内部维护了<code>mWorker</code>和<code>mFuture</code>，<code>mWorker</code>是真正的执行后台任务，<code>mFuture</code>是一个线程类，内部持有<code>mWorker</code>对象，主要作用是让<code>mWorker</code>去执行后台任务</li>
<li>并且<code>AsyncTask</code>类内部维护一个静态的线性的线程队列<code>SerialExecutor</code>，只要调用<code>AsyncTask</code>的<code>execute</code>方法，就会将<code>mFuture</code>加入到线程队列中，然后开始执行队列中的任务。</li>
<li>另外<code>AsyncTask</code>内部还维护了一个静态的<code>Handler</code>，当<code>mWorker</code>任务执行完成后，会使用<code>Handler</code>开启异步消息机制发送消息，并且当更新进度时，也会发送消息。</li>
</ul>
<p>好了，关于<code>AsyncTask</code>我们已经了解的差不多了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间我有说过&lt;code&gt;Handler&lt;/code&gt;、&lt;code&gt;Message&lt;/code&gt;、&lt;code&gt;Looper&lt;/code&gt;三者之间的关系，它们可以解决线程间通信，可以用作子线程处理耗时操作，主线程刷新UI等。今天我要说的是另外一种解决方案：&lt;code&gt;AsyncTask&lt;/code&gt;。它的内部还是使用异步消息处理机制，只是&lt;code&gt;Android&lt;/code&gt;对这三者进行了高度的封装。如果你对异步消息处理机制还不是很清楚的话，你可以看看这篇文章:&lt;a href=&quot;http://www.guiyongdong.com/2017/03/27/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8B%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/&quot;&gt;一天一Android之异步消息处理机制&lt;/a&gt;。来看看&lt;code&gt;AsyncTask&lt;/code&gt;到底如何使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative实现js和原生交互</title>
    <link href="http://www.guiyongdong.com/2017/04/01/ReactNative%E5%AE%9E%E7%8E%B0js%E5%92%8C%E5%8E%9F%E7%94%9F%E4%BA%A4%E4%BA%92/"/>
    <id>http://www.guiyongdong.com/2017/04/01/ReactNative实现js和原生交互/</id>
    <published>2017-04-01T10:08:43.000Z</published>
    <updated>2017-04-05T02:51:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>写在此文章之前</p>
<p>最近一直在研究<code>Android</code>，我开始学习<code>Android</code>是有原因的，前段时间写过一个类似于一元夺宝的跨平台APP，里面的好多功能是<code>ReactNative</code>没有提供的，好在现在<code>ReactNative</code>开源社区里面已经有好多优秀的开源库了，就直接拿来用了，但是，这并不能满足开发中一些特殊的需求，这个时候就要写js和原生之间的桥接了，因为我的老本就是<code>iOS</code>，所以写<code>iOS</code>的桥接很容易。但是写<code>Adnroid</code>就有点费力了，因为我对<code>Android</code>一窍不通。但是想学好<code>ReactNative</code>，只会<code>iOS</code>是不行的，所以我就开始了我的<code>Android</code>之旅。还有，假如<code>ReactNative</code>在以后死掉了，我也新郑了<code>Android</code>开发这一新技能，一本万利。</p>
<p><code>Android</code>的博客也写了几篇了，我要回过头来说一些<code>ReactNative</code>的东西，所以，如果你看到我今天在说<code>Android</code>，明天又说<code>ReactNative</code>，你不要奇怪，这很正常。</p>
<p>那今天就先来说说关于js和原生的桥接。</p>
<a id="more"></a>
<h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>首先，本项目是在<code>Mac</code>下开发。这里，我要向大家推荐一个我用着非常方便的<code>IDE</code>：<code>WebStorm</code>，相信前端的同学一定对他不陌生，如果想让<code>WebStorm</code>智能提示代码，大家可以看这篇文章：<a href="http://www.jianshu.com/p/27b804d8b91a" target="_blank" rel="external">点我</a>。最近<code>WebStorm</code>刚更新了<code>2017</code>版本，我感觉优化了好多，起码内存方面小了很多。当然，<code>WebStorm</code>是收费的，但是在天朝，一定有办法的。</p>
<p>先来描述一下我们要做的功能：这里我们模拟一下去调用<code>QQ</code>第三方的登录。当点击<code>登录</code>按钮时，调用原生的<code>QQ</code>登录(原生代码使用2秒延迟模拟登录)，然后把登录结果回调到<code>js</code>，并且在屏幕上添加一个<code>下线</code>的原生按钮。当点击<code>下线</code>按钮时，再次调用js的代码，强制下线。</p>
<p>注意：界面上的<code>登录按钮</code>和<code>文字</code>都是<code>ReactNative</code>生成的，<code>下线</code>按钮是<code>iOS</code>或者<code>Android</code>代码生成的。</p>
<p><strong>iOS运行效果如下：</strong></p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android19.gif?raw=true" width="375"><br></div>

<p><strong>Android运行效果如下：</strong></p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android20.gif?raw=true" width="375"><br></div>



<h3 id="iOS通信实现"><a href="#iOS通信实现" class="headerlink" title="iOS通信实现"></a>iOS通信实现</h3><p><code>js</code>与<code>iOS</code>原生之间的通信主要靠<code>ReactNative</code>定义的一些宏来实现的。能让<code>js</code>来调用的无非是类和类的方法，那么下面就来详细的说一下如何导出类和方法。本例是导出名为<code>LocalModule</code>的类和它的某些方法。</p>
<h5 id="导出类"><a href="#导出类" class="headerlink" title="导出类"></a>导出类</h5><p>如果你想让你的某个类可以实现<code>js</code>调用必须实现<code>RCTBridgeModule</code>协议，我们先来看<code>RCTBridgeModule</code>协议必须实现的方法有哪些方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">RCTBridgeModule</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line"><span class="meta">#define RCT_EXPORT_MODULE(js_name) \</span></div><div class="line">RCT_EXTERN <span class="keyword">void</span> RCTRegisterModule(Class); \</div><div class="line">+ (<span class="built_in">NSString</span> *)moduleName &#123; <span class="keyword">return</span> @<span class="meta">#js_name; &#125; \</span></div><div class="line">+ (<span class="keyword">void</span>)load &#123; RCTRegisterModule(<span class="keyword">self</span>); &#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">NSString</span> *)moduleName;</div><div class="line"></div><div class="line"><span class="keyword">@optional</span></div></pre></td></tr></table></figure>
<p>我们看到，<code>RCTBridgeModule</code>协议只有一个需要实现的方法，这个方法就是告诉<code>js</code>需要导出的类，但是，通常情况下，我们并不直接实现这个方法，而是使用<code>RCT_EXPORT_MODULE</code>这个宏，因为这个宏还帮我们实现了<code>load</code>方法，即在类加载的时候就去注册当前类到<code>js</code>。当然，这个宏还接收一个参数，如果我们不传，默认导出当前类的类名为<code>js</code>的调用模块，当然，你可以自定义导出模块的名字。我们来看看具体如何导出类：</p>
<p>LocalModule.h</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBridgeModule.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTEventEmitter.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LocalModule</span> : <span class="title">RCTEventEmitter</span> &lt;<span class="title">RCTBridgeModule</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们在<code>LocalModule.h</code>里面直接实现<code>RCTBridgeModule</code>就行，当然，如果你不需要<code>iOS</code>向<code>js</code>通信，那么你直接继承<code>NSObject</code>就行。否则就必须继承<code>RCTEventEmitter</code>类，这个功能我们等会再说。</p>
<p>LocalModule.m</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LocalModule</span></span></div><div class="line"><span class="comment">//导出这个类，不然js不能使用 默认导出当前类名</span></div><div class="line">RCT_EXPORT_MODULE();</div><div class="line"></div><div class="line"><span class="comment">//当然也可以自定义 名字你随便起，切记不是NSString类型的参数。</span></div><div class="line">RCT_EXPORT_MODULE(MMMMMM);</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>注意，无论你是否是只用默认的导出名，还是自定义的导出名，将来在<code>js</code>中都很重要，所以，你最好导出一个有实际意义的名字。</p>
<h5 id="导出方法"><a href="#导出方法" class="headerlink" title="导出方法"></a>导出方法</h5><p>导出方法使用的也是宏，有两种宏：<code>RCT_EXPORT_METHOD</code>和<code>RCT_REMAP_METHOD</code>，我们来看看具体的用法：</p>
<p>使用<code>RCT_EXPORT_METHOD</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LocalModule</span></span></div><div class="line"></div><div class="line"><span class="comment">//导出一个方法 RCTResponseSenderBlock 设置回调函数 当然 ReactNative为我们提供了多种回到block</span></div><div class="line">RCT_EXPORT_METHOD(loginWithqq:(<span class="built_in">NSString</span> *)qqkey callback:(RCTResponseSenderBlock)callback) &#123;</div><div class="line">	<span class="comment">//业务逻辑</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>学过<code>iOS</code>也许能看出个大概，此导出方法所对应的原生方法为：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)loginWithqq:(<span class="built_in">NSString</span> *)qq &#123;</div><div class="line">	<span class="comment">//业务逻辑</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>导出方法和原生方法相比，去掉了<code>-(void)</code>，方法写在了<code>RCT_EXPORT_METHOD</code>宏的括号内。</p>
<p>切记，所有的方法都没有返回值，如果你想在<code>iOS</code>返回一些数据给<code>js</code>，你必须使用<code>block</code>回调，就像我们刚才所说的第一个导出方法一样。直接在你原有的方法后面追加一个<code>Block</code>参数就行，<code>ReactNative</code>为我们提供了两种<code>Block</code>回调：<code>RCTResponseSenderBlock</code>和<code>RCTResponseErrorBlock</code>。前者一般处理正常的数据回调，后者会处理错误回调。</p>
<p>还有一点需要特别注意，所有的方法都是在子线程里进行的，如果你想在方法内操作一些UI，必须回调主线程，当然，<code>ReactNative</code>也为我们提供了定义线程的方法，只要重写<code>methodQueue</code>的<code>get</code>方法就可以定义自己的队列。此属性定义在<code>RCTBridgeModule</code>协议中。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//决定此类的所有方法运行在哪个队列中</span></div><div class="line">- (<span class="built_in">dispatch_queue_t</span>)methodQueue &#123;</div><div class="line">  <span class="keyword">return</span> dispatch_get_main_queue();</div><div class="line">&#125;</div><div class="line"><span class="comment">//也可以自己创建队列</span></div><div class="line">- (<span class="built_in">dispatch_queue_t</span>)methodQueue &#123;</div><div class="line">  <span class="keyword">return</span> dispatch_queue_create(<span class="string">"com.custom"</span>, DISPATCH_QUEUE_SERIAL);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果重写这个方法，那么你所有的方法都会在这个队列中运行，当然，你也可以在方法内部重新开启其他的线程。</p>
<p>使用<code>RCT_REMAP_METHOD</code></p>
<p>学过前端的可能都知道<code>Promises</code>，ES7以后新增了<code>async/await</code>语法，所以<code>ReactNative</code>也为我们提供了一个可以返回<code>Promises</code>对象的导出方法。</p>
<p>例如，我的原生方法为：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)loginWithqq:(<span class="built_in">NSString</span> *)qq &#123;</div><div class="line">	<span class="comment">//业务逻辑</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>那么，要是想让此方法支持<code>Promises</code>，你需要这么做：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//返回一个Promises对象 可以搭配ES7的async/await语法</span></div><div class="line">RCT_REMAP_METHOD(asyncLoginWithqq,qqkey:(<span class="built_in">NSString</span> *)qqkey resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)&#123;</div><div class="line">  <span class="comment">//业务处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里必须传的两个参数是:<code>RCTPromiseResolveBlock</code>和<code>RCTPromiseRejectBlock</code>，我们使用<code>RCTPromiseResolveBlock</code>来处理正常的数据，使用<code>RCTPromiseRejectBlock</code>来处理错误的数据。通常情况下，使用这个宏来导出方法，此方法一定会返回数据，不然就没有意义了。</p>
<p>现在我们已经知道如何导出类和方法让<code>js</code>来调用，可是，有时候，我们想主动的向<code>js</code>发送一些消息，这时候该怎么办呢？</p>
<h5 id="RCTEventEmitter"><a href="#RCTEventEmitter" class="headerlink" title="RCTEventEmitter"></a>RCTEventEmitter</h5><p>如果导出类继承于<code>RCTEventEmitter</code>，那么我们只需要实现它的<code>- (NSArray&lt;NSString *&gt; *)supportedEvents</code>方法就可以，此方法返回一个字符串数组，代表可以发送的事件名称有哪几个。其实，这些事件名称就类似与通知名，我们在<code>iOS</code>中定义这些通知名，在<code>js</code>去注册观察这些通知名。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//这里注册一个退出登录的事件(通知名)</span></div><div class="line">- (<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)supportedEvents &#123;</div><div class="line">  <span class="keyword">return</span> @[<span class="string">@"QQLoginOut"</span>];</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)buttonclick:(<span class="built_in">UIButton</span> *)button &#123;</div><div class="line">  [button removeFromSuperview];</div><div class="line">  <span class="comment">//发送事件，可以携带数据</span></div><div class="line">  [<span class="keyword">self</span> sendEventWithName:<span class="string">@"QQLoginOut"</span> body:@&#123;<span class="string">@"result"</span>:@<span class="number">1</span>&#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们在<code>iOS</code>中注册了事件，但是在<code>js</code>中并没有去监听这个事件，那么，程序会发生警告，但并不会崩溃，要解决这种情况，我们可以覆盖<code>RCTEventEmitter</code>类的<code>startObserving</code>放和<code>stopObserving</code>方法。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LocalModule</span> </span>&#123;</div><div class="line">  <span class="keyword">bool</span> hasListeners;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 在添加第一个监听函数时触发</span></div><div class="line">-(<span class="keyword">void</span>)startObserving &#123; </div><div class="line">    hasListeners = <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 取消监听时触发</span></div><div class="line">-(<span class="keyword">void</span>)stopObserving &#123; </div><div class="line">    hasListeners = <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)buttonclick:(<span class="built_in">UIButton</span> *)button &#123;</div><div class="line">  [button removeFromSuperview];</div><div class="line">  <span class="keyword">if</span> (hasListeners) &#123;</div><div class="line">    <span class="comment">//如果有监听，才发送事件</span></div><div class="line">    [<span class="keyword">self</span> sendEventWithName:<span class="string">@"QQLoginOut"</span> body:@&#123;<span class="string">@"result"</span>:@<span class="number">1</span>&#125;];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了，现在来看看开头所说的例子的具体实现：</p>
<p>LocalModule.h</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBridgeModule.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTEventEmitter.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LocalModule</span> : <span class="title">RCTEventEmitter</span> &lt;<span class="title">RCTBridgeModule</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>LocalModule.m</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"LocalModule.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LocalModule</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) RCTResponseSenderBlock callBack;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LocalModule</span> </span>&#123;</div><div class="line">    <span class="keyword">bool</span> hasListeners;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//导出这个类，不然js不能使用 默认导出当前类名</span></div><div class="line">RCT_EXPORT_MODULE();</div><div class="line"></div><div class="line"><span class="comment">//当然也可以自定义 名字你随便起，切记不是NSString类型的参数。</span></div><div class="line"><span class="comment">//RCT_EXPORT_MODULE(MMMMMM);</span></div><div class="line"></div><div class="line"><span class="comment">//决定此类的所有方法运行在哪个队列中</span></div><div class="line"><span class="comment">//- (dispatch_queue_t)methodQueue &#123;</span></div><div class="line"><span class="comment">//  return dispatch_get_main_queue();</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"></div><div class="line"><span class="comment">//也可以自己创建队列</span></div><div class="line"><span class="comment">//- (dispatch_queue_t)methodQueue &#123;</span></div><div class="line"><span class="comment">//  return dispatch_queue_create("com.custom", DISPATCH_QUEUE_SERIAL);</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"></div><div class="line"><span class="comment">//导出一个方法 注意，当前线程为子线程 RCTResponseSenderBlock 设置回调函数 当然 ReactNative为我们提供了多种回到block</span></div><div class="line">RCT_EXPORT_METHOD(loginWithqq:(<span class="built_in">NSString</span> *)qqkey callback:(RCTResponseSenderBlock)callback) &#123;</div><div class="line">  <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">  <span class="comment">//记录回调 有可能会在另一个方法中完成业务逻辑。</span></div><div class="line">  <span class="keyword">self</span>.callBack = callback;</div><div class="line">  <span class="comment">//模拟执行本地操作</span></div><div class="line">  <span class="built_in">NSString</span> *code = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@%@"</span>,qqkey,<span class="string">@"---qq登陆成功---iOS"</span>];</div><div class="line">  <span class="comment">//回调到js函数</span></div><div class="line">  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">    [<span class="keyword">self</span> addButton];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.callBack) &#123;</div><div class="line">      <span class="built_in">NSDictionary</span> *info = @&#123;<span class="string">@"result"</span>:code&#125;;</div><div class="line">      <span class="keyword">self</span>.callBack(@[info]);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用ES7的async/await语法</span></div><div class="line">RCT_REMAP_METHOD(asyncLoginWithqq,qqkey:(<span class="built_in">NSString</span> *)qqkey resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)&#123;</div><div class="line">  <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">  <span class="comment">//模拟登陆</span></div><div class="line">  <span class="built_in">NSString</span> *code = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@%@"</span>,qqkey,<span class="string">@"---qq登陆成功---iOS"</span>];</div><div class="line">  <span class="comment">//回调到js函数</span></div><div class="line">  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">    [<span class="keyword">self</span> addButton];</div><div class="line">    <span class="keyword">if</span> (resolve) &#123;</div><div class="line">      <span class="built_in">NSDictionary</span> *info = @&#123;<span class="string">@"result"</span>:code&#125;;</div><div class="line">      resolve(info);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//注册事件</span></div><div class="line">- (<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)supportedEvents &#123;</div><div class="line">  <span class="keyword">return</span> @[<span class="string">@"QQLoginOut"</span>];</div><div class="line">&#125;</div><div class="line"><span class="comment">//添加一个下线的按钮</span></div><div class="line">- (<span class="keyword">void</span>)addButton &#123;</div><div class="line">  <span class="comment">//所有UI的操作都要在主线程中</span></div><div class="line">  <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">    <span class="built_in">UIButton</span> *button = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeSystem</span>];</div><div class="line">    [button setTitle:<span class="string">@"ios的按钮——下线"</span> forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    button.frame = <span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">40</span>, <span class="number">130</span>, <span class="number">30</span>);</div><div class="line">    [button setTitleColor:[<span class="built_in">UIColor</span> whiteColor] forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    button.backgroundColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">    [[<span class="built_in">UIApplication</span> sharedApplication].keyWindow addSubview:button];</div><div class="line">    [button addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(buttonclick:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 在添加第一个监听函数时触发</span></div><div class="line">-(<span class="keyword">void</span>)startObserving &#123; </div><div class="line">    hasListeners = <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 取消监听时触发</span></div><div class="line">-(<span class="keyword">void</span>)stopObserving &#123; </div><div class="line">    hasListeners = <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//下线</span></div><div class="line">- (<span class="keyword">void</span>)buttonclick:(<span class="built_in">UIButton</span> *)button &#123;</div><div class="line">  [button removeFromSuperview];</div><div class="line">  <span class="keyword">if</span> (hasListeners) &#123;</div><div class="line">    <span class="comment">//如果有监听，才发送事件</span></div><div class="line">    [<span class="keyword">self</span> sendEventWithName:<span class="string">@"QQLoginOut"</span> body:@&#123;<span class="string">@"result"</span>:@<span class="number">1</span>&#125;];</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><code>js</code>与<code>iOS</code>通信的基本步骤是：</p>
<ol>
<li>使用宏<code>RCT_EXPORT_MODULE()</code>导出当前类</li>
<li>使用宏<code>RCT_EXPORT_METHOD()</code>或者<code>RCT_REMAP_METHOD()</code>导出方法</li>
<li>使用一系列的<code>block</code>进行回调</li>
<li>在<code>js</code>中注册事件监听，使用<code>sendEventWithName</code>方法发送事件</li>
</ol>
<p>关于<code>iOS</code>的原生我们已经说完，接下来看<code>Android</code>的。</p>
<h3 id="Android通信实现"><a href="#Android通信实现" class="headerlink" title="Android通信实现"></a>Android通信实现</h3><p>相对于<code>iOS</code>，<code>Android</code>会更简单。</p>
<h5 id="导出类-1"><a href="#导出类-1" class="headerlink" title="导出类"></a>导出类</h5><p>首先，导出的类必须继承<code>ReactContextBaseJavaModule</code>，并且重新构造方法和返回模块的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalModuleAndroid</span> <span class="keyword">extends</span> <span class="title">ReactContextBaseJavaModule</span>   </span>&#123;</div><div class="line">	 <span class="comment">//这里记录下当前的Context </span></div><div class="line">    <span class="keyword">private</span> ReactApplicationContext mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LocalModuleAndroid</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(reactContext);</div><div class="line">        mContext= reactContext;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"LocalModuleAndroid"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后你还需要新建一个类，并且实现<code>ReactPackage</code>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalModulePackage</span> <span class="keyword">implements</span> <span class="title">ReactPackage</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;NativeModule&gt; <span class="title">createNativeModules</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        List&lt;NativeModule&gt; modules = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="comment">//返回需要注册的类</span></div><div class="line">        modules.add(<span class="keyword">new</span> LocalModuleAndroid(reactContext));</div><div class="line">        <span class="keyword">return</span> modules;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;</div><div class="line">        <span class="keyword">return</span> Collections.emptyList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;ViewManager&gt; <span class="title">createViewManagers</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在<code>MainApplication</code>的<code>getPackages</code>方法中加入<code>LocalModulePackage</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">          <span class="keyword">new</span> MainReactPackage(),</div><div class="line">              <span class="keyword">new</span> LocalModulePackage()<span class="comment">//自己的本地导出类管理器</span></div><div class="line">      );</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这样，就可以把<code>LocalModuleAndroid</code>导出来了。</p>
<h5 id="导出方法-1"><a href="#导出方法-1" class="headerlink" title="导出方法"></a>导出方法</h5><p>导出方法更简单，只需要声明<code>@ReactMethod</code>就可以了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">//使用回调函数回调结果</span></div><div class="line"><span class="meta">@ReactMethod</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginWithqq</span><span class="params">(String appkey, Callback callback)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//模拟登陆操作</span></div><div class="line">        String code = appkey+<span class="string">"---qq登陆成功--Android"</span>;</div><div class="line">        <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</div><div class="line">            WritableMap result = Arguments.createMap();</div><div class="line">            result.putString(<span class="string">"result"</span>,code);</div><div class="line">            callback.invoke(result);</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//使用Promise回调数据</span></div><div class="line"><span class="meta">@ReactMethod</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncLoginWithqq</span><span class="params">(String appkey, Promise promise)</span> </span>&#123;</div><div class="line">    <span class="comment">//模拟登陆操作</span></div><div class="line">    String code = appkey+<span class="string">"---qq登陆成功--Android"</span>;</div><div class="line">    WritableMap result = Arguments.createMap();</div><div class="line">    result.putString(<span class="string">"result"</span>,code);</div><div class="line">    promise.resolve(result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里提供了两种回调方法，你可以任意的选择。</p>
<h5 id="RCTDeviceEventEmitter"><a href="#RCTDeviceEventEmitter" class="headerlink" title="RCTDeviceEventEmitter"></a>RCTDeviceEventEmitter</h5><p>如果我们想向<code>js</code>发送事件，直接使用<code>RCTDeviceEventEmitter</code>来发送就行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">    ((ViewGroup)layout.getParent()).removeView(layout);</div><div class="line">    WritableMap result = Arguments.createMap();</div><div class="line">    result.putInt(<span class="string">"result"</span>,<span class="number">1</span>);</div><div class="line">    getCurrentActivity().getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(<span class="string">"QQLoginOut"</span>,result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于上面的例子，全部的代码如下：</p>
<p>LocalModuleAndroid类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalModuleAndroid</span> <span class="keyword">extends</span> <span class="title">ReactContextBaseJavaModule</span>   </span>&#123;</div><div class="line">	 <span class="comment">//这里记录下当前的Context</span></div><div class="line">    <span class="keyword">private</span> ReactApplicationContext mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LocalModuleAndroid</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(reactContext);</div><div class="line">        mContext= reactContext;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"LocalModuleAndroid"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ReactMethod</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginWithqq</span><span class="params">(String appkey, Callback callback)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//模拟登陆操作</span></div><div class="line">            String code = appkey+<span class="string">"---qq登陆成功--Android"</span>;</div><div class="line">            addButton();</div><div class="line">            <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</div><div class="line">                WritableMap result = Arguments.createMap();</div><div class="line">                result.putString(<span class="string">"result"</span>,code);</div><div class="line">                callback.invoke(result);</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@ReactMethod</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncLoginWithqq</span><span class="params">(String appkey, Promise promise)</span> </span>&#123;</div><div class="line">        addButton();</div><div class="line">        <span class="comment">//模拟登陆操作</span></div><div class="line">        String code = appkey+<span class="string">"---qq登陆成功--Android"</span>;</div><div class="line">        WritableMap result = Arguments.createMap();</div><div class="line">        result.putString(<span class="string">"result"</span>,code);</div><div class="line">        promise.resolve(result);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	 <span class="comment">//使用原生代码添加按钮</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addButton</span><span class="params">()</span> </span>&#123;</div><div class="line">        getCurrentActivity().runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//在主线程中创建UI</span></div><div class="line">                <span class="keyword">final</span> LinearLayout layout = (LinearLayout) LinearLayout.inflate(mContext,R.layout.local_button,<span class="keyword">null</span>);</div><div class="line">                LinearLayout.LayoutParams mLayoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);</div><div class="line">                mLayoutParams.setMargins(<span class="number">400</span>,<span class="number">80</span>,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">                getCurrentActivity().addContentView(layout,mLayoutParams);</div><div class="line"></div><div class="line">                <span class="keyword">final</span> Button button = (Button) layout.findViewById(R.id.loginOut);</div><div class="line">                button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                        ((ViewGroup)layout.getParent()).removeView(layout);</div><div class="line">                        WritableMap result = Arguments.createMap();</div><div class="line">                        result.putInt(<span class="string">"result"</span>,<span class="number">1</span>);</div><div class="line">                        <span class="comment">//向js发送事件</span></div><div class="line">                        mContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(<span class="string">"QQLoginOut"</span>,result);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>js</code>与<code>Android</code>通信的基本步骤：</p>
<ul>
<li>导出类首先要继承<code>ReactContextBaseJavaModule</code>，并重写<code>getName()</code>返回导出模块的名字</li>
<li>新建一个类，实现<code>ReactPackage</code>接口的三个方法，并且在<code>createNativeModules</code>方法中去注册要导出的类，并在<code>MainApplication</code>的<code>getPackages</code>方法中导出<code>package</code>管理器。</li>
<li>使用关键字<code>@ReactMethod</code>导出方法，使用<code>Callback</code>或者<code>Promise</code>进行回调。</li>
<li>在<code>js</code>中注册监听事件，使用<code>RCTDeviceEventEmitter</code>可以直接发送事件到<code>js</code>，</li>
</ul>
<p>好了，现在我们的原生都写完了，接下来我们看看在<code>js</code>中如何调用。</p>
<h3 id="js调用"><a href="#js调用" class="headerlink" title="js调用"></a>js调用</h3><p>为了代码的复用性，一般都会创建一个<code>js</code>文件，单独封装一类功能。所以我创建一个<code>localModule</code>的<code>js</code>文件。如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    Platform,</div><div class="line">    NativeModules,</div><div class="line">    NativeEventEmitter,</div><div class="line">    DeviceEventEmitter</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="comment">//导入iOS原生模块</span></div><div class="line"><span class="keyword">var</span> LocalModuleiOS = NativeModules.LocalModule;</div><div class="line"><span class="comment">//导入Android原生模块</span></div><div class="line"><span class="keyword">var</span> LocalModuleAndroid = NativeModules.LocalModuleAndroid;</div><div class="line"><span class="comment">//iOS事件监听</span></div><div class="line"><span class="keyword">const</span> localModuleEmitter = <span class="keyword">new</span> NativeEventEmitter(LocalModuleiOS);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> LocalModule = &#123;</div><div class="line">    <span class="comment">//添加事件监听</span></div><div class="line">    addLoginOutCallBack(callBack) &#123;</div><div class="line">        <span class="keyword">if</span> (Platform.OS == <span class="string">'ios'</span>) &#123;</div><div class="line">            <span class="comment">//监听iOS的QQLoginOut事件</span></div><div class="line">            localModuleEmitter.addListener(<span class="string">'QQLoginOut'</span>,(result)=&gt;&#123;</div><div class="line">                <span class="keyword">if</span> (callBack) &#123;</div><div class="line">                    callBack(result);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;<span class="keyword">else</span>  &#123;</div><div class="line">            <span class="comment">//监听Android的QQLoginOut事件</span></div><div class="line">            DeviceEventEmitter.addListener(<span class="string">'QQLoginOut'</span>,(result)=&gt;&#123;</div><div class="line">                <span class="keyword">if</span> (callBack) &#123;</div><div class="line">                    callBack(result);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//调用原生QQ登录</span></div><div class="line">    loginWithqq(appkey,callBack) &#123;</div><div class="line">        <span class="keyword">if</span> (Platform.OS == <span class="string">'ios'</span>) &#123;</div><div class="line">            <span class="comment">// LocalModuleiOS.loginWithqq(appkey,(result) =&gt; &#123;</span></div><div class="line">            <span class="comment">//     if (callBack) &#123;</span></div><div class="line">            <span class="comment">//         callBack(result);</span></div><div class="line">            <span class="comment">//     &#125;</span></div><div class="line">            <span class="comment">// &#125;);</span></div><div class="line"></div><div class="line">            <span class="comment">//使用ES7新特性 async/await</span></div><div class="line">            <span class="keyword">return</span> LocalModuleiOS.asyncLoginWithqq(appkey);</div><div class="line">        &#125;<span class="keyword">else</span>  &#123;</div><div class="line">            <span class="comment">//使用Callback回调</span></div><div class="line">            LocalModuleAndroid.loginWithqq(appkey,(result)=&gt;&#123;</div><div class="line">                <span class="keyword">if</span> (callBack) &#123;</div><div class="line">                    callBack(result);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="comment">// return LocalModuleAndroid.asyncLoginWithqq(appkey);</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//导出模块</span></div><div class="line"><span class="built_in">module</span>.exports = LocalModule;</div></pre></td></tr></table></figure>
<p>首先要导入原生模块，这里使用<code>NativeModules</code>直接导入，因为我们在<code>iOS</code>中导出的模块名是类名，在<code>Android</code>中导出的模块名为<code>LocalModuleAndroid</code>，所以这里分别对应<code>iOS</code>和<code>Android</code>写开。然后又注册了<code>iOS</code>的事件监听。</p>
<p>在<code>loginWithqq</code>中，我们即可以使用<code>block</code>回调，也可以使用<code>Promise</code>。<br>这样，一个登陆功能就封装好了。来看看如何用。</p>
<p>为了保证<code>iOS</code>和<code>Android</code>的通用性，这里新定义一个界面<code>home</code>，作为<code>iOS</code>和<code>Android</code>的主页：</p>
<p>index.ios.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./home'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">moduleDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Home</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;/</span>&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: 'center',</div><div class="line">    alignItems: 'center',</div><div class="line">    backgroundColor: '#F5FCFF',</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent('moduleDemo', () =&gt; moduleDemo);</div></pre></td></tr></table></figure>
<p>index.android.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./home'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">moduleDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Home</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;/</span>&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: 'center',</div><div class="line">    alignItems: 'center',</div><div class="line">    backgroundColor: '#F5FCFF',</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent('moduleDemo', () =&gt; moduleDemo);</div></pre></td></tr></table></figure>
<p>现在，我们只需要关注<code>home</code>界面的业务逻辑就行了，看<code>home</code>界面：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> LocalModule <span class="keyword">from</span> <span class="string">'./localModule'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 构造</span></div><div class="line">      <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="comment">// 初始状态</span></div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            text:<span class="string">'hello word'</span>,</div><div class="line">            isLogin:<span class="literal">false</span></div><div class="line">        &#125;;</div><div class="line">      &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">TouchableHighlight</span> <span class="attr">style</span>=<span class="string">&#123;styles.clikeButton&#125;</span> <span class="attr">onPress</span>=<span class="string">&#123;this.onclick.bind(this)&#125;</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.text&#125;</span>&gt;</span>&#123;this.state.isLogin?'已登录':'登录'&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">TouchableHighlight</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.contentText&#125;</span>&gt;</span>&#123;this.state.text&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">async</span> onclick() &#123;</div><div class="line">        <span class="comment">//qq登录</span></div><div class="line">        <span class="comment">// LocalModule.loginWithqq('123456789',(result)=&gt;&#123;</span></div><div class="line">        <span class="comment">//     var code = result['result'];</span></div><div class="line">        <span class="comment">//     this.setState(&#123;</span></div><div class="line">        <span class="comment">//         text:code,</span></div><div class="line">        <span class="comment">//         isLogin:true</span></div><div class="line">        <span class="comment">//     &#125;)</span></div><div class="line">        <span class="comment">// &#125;);</span></div><div class="line">        <span class="comment">//这里使用async/await的方法</span></div><div class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> LocalModule.loginWithqq(<span class="string">'123456789'</span>);</div><div class="line">        <span class="keyword">var</span> code = result[<span class="string">'result'</span>];</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            text:code,</div><div class="line">            isLogin:<span class="literal">true</span></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">//添加退出登录的响应</span></div><div class="line">        LocalModule.addLoginOutCallBack((result)=&gt;&#123;</div><div class="line">            <span class="keyword">var</span> code = result[<span class="string">'result'</span>];</div><div class="line">            <span class="keyword">if</span> (code == <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">this</span>.setState(&#123;</div><div class="line">                    text:<span class="string">'hello word'</span>,</div><div class="line">                    isLogin:<span class="literal">false</span></div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">    clikeButton:&#123;</div><div class="line">        marginLeft:<span class="number">20</span>,</div><div class="line">        marginTop:<span class="number">40</span>,</div><div class="line">        width:<span class="number">60</span>,</div><div class="line">        height:<span class="number">30</span>,</div><div class="line">        backgroundColor:<span class="string">'red'</span>,</div><div class="line">        alignItems:<span class="string">'center'</span>,</div><div class="line">        justifyContent:<span class="string">'center'</span></div><div class="line">    &#125;,</div><div class="line">    text:&#123;</div><div class="line">        color:<span class="string">'white'</span></div><div class="line">    &#125;,</div><div class="line">    contentText:&#123;</div><div class="line">        fontSize:<span class="number">30</span>,</div><div class="line">        alignSelf:<span class="string">'center'</span>,</div><div class="line">        marginTop:<span class="number">30</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>至此，<code>ReactNative</code>与原始通信已经了解的差不多了，当然，还有更多的知识点需要我们去官网查看。推荐一个翻译至官网的中文网站：<a href="http://reactnative.cn/docs/0.43/native-modules-android.html#content" target="_blank" rel="external">点这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在此文章之前&lt;/p&gt;
&lt;p&gt;最近一直在研究&lt;code&gt;Android&lt;/code&gt;，我开始学习&lt;code&gt;Android&lt;/code&gt;是有原因的，前段时间写过一个类似于一元夺宝的跨平台APP，里面的好多功能是&lt;code&gt;ReactNative&lt;/code&gt;没有提供的，好在现在&lt;code&gt;ReactNative&lt;/code&gt;开源社区里面已经有好多优秀的开源库了，就直接拿来用了，但是，这并不能满足开发中一些特殊的需求，这个时候就要写js和原生之间的桥接了，因为我的老本就是&lt;code&gt;iOS&lt;/code&gt;，所以写&lt;code&gt;iOS&lt;/code&gt;的桥接很容易。但是写&lt;code&gt;Adnroid&lt;/code&gt;就有点费力了，因为我对&lt;code&gt;Android&lt;/code&gt;一窍不通。但是想学好&lt;code&gt;ReactNative&lt;/code&gt;，只会&lt;code&gt;iOS&lt;/code&gt;是不行的，所以我就开始了我的&lt;code&gt;Android&lt;/code&gt;之旅。还有，假如&lt;code&gt;ReactNative&lt;/code&gt;在以后死掉了，我也新郑了&lt;code&gt;Android&lt;/code&gt;开发这一新技能，一本万利。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Android&lt;/code&gt;的博客也写了几篇了，我要回过头来说一些&lt;code&gt;ReactNative&lt;/code&gt;的东西，所以，如果你看到我今天在说&lt;code&gt;Android&lt;/code&gt;，明天又说&lt;code&gt;ReactNative&lt;/code&gt;，你不要奇怪，这很正常。&lt;/p&gt;
&lt;p&gt;那今天就先来说说关于js和原生的桥接。&lt;/p&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="http://www.guiyongdong.com/categories/ReactNative/"/>
    
    
      <category term="reactnative" scheme="http://www.guiyongdong.com/tags/reactnative/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之Fragment</title>
    <link href="http://www.guiyongdong.com/2017/04/01/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BFragment/"/>
    <id>http://www.guiyongdong.com/2017/04/01/一天一Android之Fragment/</id>
    <published>2017-04-01T03:31:37.000Z</published>
    <updated>2017-05-08T03:53:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天愚人节，先祝大家愚人节快乐!</p>
<p>今天来说一下Android开发中经常使用到的一个类：<code>Fragment</code>。由于<code>Android</code>屏幕的碎片化，<code>Android</code>为我们提供了一个和方便的类来使我们的APP可以适应各种屏幕的手机和平板，当然，<code>Fragment</code>的功能远不止是为适应屏幕而生。你可以把<code>Fragment</code>当成<code>Activity</code>的一个界面的一个组成部分，甚至<code>Activity</code>的界面可以由完全不同的<code>Fragment</code>组成，更神奇的是<code>Fragment</code>拥有自己的生命周期和接收、处理用户的事件，这样就不必再<code>Activity</code>写一堆控件的事件处理的代码了，更重要的是，你可以动态的添加、替换和移除某个<code>Fragment</code>。</p>
<a id="more"></a>
<h3 id="Fragment的生命周期"><a href="#Fragment的生命周期" class="headerlink" title="Fragment的生命周期"></a>Fragment的生命周期</h3><p><code>Fragment</code>必须依赖与<code>Activity</code>而存在的，因此<code>Activity</code>的生命周期会直接影响到<code>Fragment</code>的生命周期，我们来看看官网的这张关于两者的生命周期图:</p>
<div align="center"><br><img src="http://img.blog.csdn.net/20140719225005356?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbG1qNjIzNTY1Nzkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><br></div>

<p>可以看到，<code>Fragment</code>的生命周期方法中的大部分我们还是很熟悉的，只比<code>Activity</code>多了几个方法：</p>
<ul>
<li><strong>onAttach(Activity)</strong><br>  当<code>Fragment</code>与<code>Activity</code>发生关联时调用</li>
<li><strong>onCreateView(LayoutInflater,ViewGroup,Bundle)</strong><br>  创建该<code>Fragment</code>的视图，会在这个方法中加载布局文件，返回视图。</li>
<li><strong>onActivityCreated(Bundle)</strong><br>  当<code>Activity</code>的<code>onCreate</code>方法返回时调用</li>
<li><strong>onDestoryView()</strong><br>  与<code>onCreateView</code>相对应，当该<code>Fragment</code>的视图被移除时调用</li>
<li><strong>onDetach()</strong><br>  与<code>onAttach</code>相对应，当该<code>Fragment</code>与<code>Activity</code>关联被取消时调用。</li>
</ul>
<p><strong>注意：</strong>除了<code>onCreateView</code>方法，其他的所有方法如果你重写了，必须调用父类的方法。</p>
<h3 id="静态使用Fragment"><a href="#静态使用Fragment" class="headerlink" title="静态使用Fragment"></a>静态使用Fragment</h3><p>首先需要继承<code>Fragment</code>类，重写<code>onCreateView</code>方法。注意，我们即可用使用<code>Android Studio</code>为我们提供的创建方式，也可以直接创建<code>java</code>类继承<code>Fragment</code>，我们这里使用第二种方式，因为使用<code>Android Studio</code>创建的<code>Fragment</code>会我们生成很多无用的代码。另外，当你选择继承<code>Fragment</code>的时候，会有两个不同的包，一个是系统内置的<code>android.app.Fragment</code>，一个是<code>support-v4</code>库中的<code>android.support.v4.app.Fragment</code>。这里建议使用<code>support-v4</code>库中的。</p>
<p>下面展示一个例子，使用两个<code>Fragment</code>作为<code>Activity</code>的布局，一个<code>Fragment</code>用于标题布局，一个<code>Fragment</code>用于内容布局：</p>
<h4 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h4><p><strong>TitleFragment</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"44dp"</span></div><div class="line">              <span class="attr">android:background</span>=<span class="string">"#963"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/title_button"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"按钮"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/title_text"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"你猜我是谁"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#fff"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"22sp"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>ContentFragment</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"content主页"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"25sp"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="两个Fragment类文件"><a href="#两个Fragment类文件" class="headerlink" title="两个Fragment类文件"></a>两个Fragment类文件</h4><p><strong>TitleFragment</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TitleFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line">    </div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.title_fragment,container,<span class="keyword">false</span>);</div><div class="line">        mButton = (Button) view.findViewById(R.id.title_button);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Toast.makeText(getActivity(),<span class="string">"我是一个按钮"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>ContentFragment</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.content_fragment,container,<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实<code>Fragment</code>的创建很简单，我们只需要在<code>onCreateView</code>方法中加载布局就行。</p>
<p>再来看看如何在<code>Activity</code>中使用：</p>
<p><strong>MainActivity的布局</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.fragmentdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"44dp"</span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.fragmentdemo.TitleFragment"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fragment_title"</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.fragmentdemo.ContentFragment"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fragment_content"</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在<code>MainActivity</code>类的代码中我们什么都不用添加，运行结果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android16.png?raw=true" width="375"><br></div>

<p><strong>注意：</strong>使用<code>Fragment</code>，在<code>xml</code>中必须添加<code>id</code>或者<code>tag</code>属性其中之一，不然有些系统会直接崩溃。</p>
<h3 id="动态使用Fragment"><a href="#动态使用Fragment" class="headerlink" title="动态使用Fragment"></a>动态使用Fragment</h3><p>先来修改一下<code>MainActivity</code>的布局文件，当我们点击<code>TitleFragment</code>上的按钮的时候，动态添加<code>ContentFragment</code>到视图中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.fragmentdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"44dp"</span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.fragmentdemo.TitleFragment"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fragment_title"</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/fragment_content"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.title_button);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                FragmentManager manager = getSupportFragmentManager();</div><div class="line">                <span class="comment">//开启Fragment事务</span></div><div class="line">                FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">                ContentFragment contentFragment = <span class="keyword">new</span> ContentFragment();</div><div class="line">                <span class="comment">//替换布局</span></div><div class="line">                transaction.replace(R.id.fragment_content,contentFragment);</div><div class="line">                <span class="comment">//事务提交</span></div><div class="line">                transaction.commit();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行起来，点击按钮，显示的效果和刚才静态添加的运行效果一模一样。可以看到，我们这里使用了<code>FragmentManager</code>，我们来具体了解一下这个类。</p>
<h3 id="Fragment家族常用的类"><a href="#Fragment家族常用的类" class="headerlink" title="Fragment家族常用的类"></a>Fragment家族常用的类</h3><p><code>Fragment</code>常用的三个类：</p>
<ul>
<li><code>android.support.v4.app.Fragment</code>：主要用于定义<code>Fragment</code></li>
<li><code>android.support.v4.app.FragmentManager</code>：主要用于在<code>Activity</code>中操作<code>Fragment</code></li>
<li><code>android.support.v4.app.FragmentTransaction</code>：保证一系列<code>Fragment</code>操作的原子性，如果你熟悉事务的话一定能明白</li>
</ul>
<p>首先，通过<code>getSupportFragmentManager()</code>获取<code>FragmentManager</code></p>
<p>然后获取一个事务对象，通过<code>manager.beginTransaction()</code>来开启一个事务</p>
<p>接下来，就可以操作<code>Fragment</code>了，例如：</p>
<p><strong>transaction.add()</strong>： 往Activity中添加一个Fragment<br><strong>transaction.remove()</strong>：从Activity中移除一个Fragment<br><strong>transaction.replace()</strong>：使用另一个Fragment替换当前的，实际上就是remove()然后add()的合体~<br><strong>transaction.hide()</strong>：隐藏当前的Fragment，仅仅是设为不可见，并不会销毁<br><strong>transaction.show()</strong>：显示之前隐藏的Fragment<br><strong>transaction.detach()</strong>：会将view从UI中移除,和remove()不同,此时fragment的状态依然由FragmentManager维护<br><strong>transaction.attach()</strong>：重建view视图，附加到UI上并显示<br><strong>transatcion.commit()</strong>：提交事务</p>
<p>上述，基本是操作Fragment的所有的方式了，在一个事务开启到提交可以进行多个的添加、移除、替换等操作。</p>
<p>这里有几个需要注意的：</p>
<p>如果你已经有一个<code>Fragment</code>，再次调用<code>transaction</code>的<code>add</code>、<code>replace</code>，都会和<code>Activity</code>进行重新绑定，另外也会重新调用<code>Fragmnet</code>的<code>onCreateView</code>方法，重新绑定视图。</p>
<p>另外 比如：我在FragmentA中的EditText填了一些数据，当切换到FragmentB时，如果希望会到A还能看到数据，则适合你的就是hide和show；也就是说，希望保留用户操作的面板，你可以使用hide和show，当然了不要使劲在那new实例，进行下非null判断。</p>
<p>再比如：我不希望保留用户操作，你可以使用remove()，然后add()；或者使用replace()这个和remove,add是相同的效果。</p>
<p>remove和detach有一点细微的区别，在不考虑回退栈的情况下，remove会销毁整个Fragment实例，而detach则只是销毁其视图结构，实例并不会被销毁。那么二者怎么取舍使用呢？如果你的当前Activity一直存在，那么在不希望保留用户操作的时候，你可以优先使用detach。</p>
<h3 id="管理Fragment回退栈"><a href="#管理Fragment回退栈" class="headerlink" title="管理Fragment回退栈"></a>管理Fragment回退栈</h3><p>类似与<code>Android</code>系统为<code>Activity</code>维护一个任务栈，我们也可以通过<code>Activity</code>维护一个回退栈来保存每次<code>Fragment</code>事务发生的变化。如果你将<code>Fragment</code>任务添加到回退栈，当用户点击后退按钮时，将看到上一次的保存的<code>Fragment</code>。一旦<code>Fragment</code>完全从回退栈中弹出，用户再次点击后退键，则退出当前<code>Activity</code>。</p>
<p>我们先来看一个效果图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android17.gif?raw=true" width="375"><br></div>

<p>点击第一个按钮，切换到第二个界面，并在输入框内输入内容,点击第二个按钮，切换到第三个界面，然后点击Back键依次回退。这里是<code>Fragment</code>实现的，用户点击<code>Back</code>，实际是<code>Fragment</code>回退栈不断的弹栈。</p>
<p>如何添加一个<code>Fragment</code>事务到回退栈：FragmentTransaction.addToBackStack(String)。</p>
<p>我们来个例子，在<code>MainActivity</code>中依次添加三个<code>Fragment</code>，利用返回栈再依次显示三个<code>Fragment</code>。</p>
<p>先看<code>MainActivity</code>的布局文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.fragmentdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_content"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>不同的<code>Fragment</code>就在这个<code>FrameLayout</code>中显示。</p>
<p><code>MainActivity.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">//添加第一个Fragment</span></div><div class="line">        FragmentManager manager = getSupportFragmentManager();</div><div class="line">        FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">        FragmentOne one = <span class="keyword">new</span> FragmentOne();</div><div class="line">        transaction.add(R.id.id_content,one,<span class="string">"ONE"</span>);</div><div class="line">        transaction.commit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很简答，直接将<code>FragmentOne</code>添加到布局文件的<code>FrameLayout</code>中，因为这里是第一个<code>Fragment</code>，所以并没有添加到返回栈中。</p>
<p>来看<code>FragmentOne.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentOne</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line">    </div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_one,container,<span class="keyword">false</span>);</div><div class="line">        mButton = (Button) view.findViewById(R.id.one_button);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        FragmentTwo two = <span class="keyword">new</span> FragmentTwo();</div><div class="line">        FragmentManager manager = getActivity().getSupportFragmentManager();</div><div class="line">        FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">        transaction.replace(R.id.id_content,two,<span class="string">"TWO"</span>);</div><div class="line">        transaction.addToBackStack(<span class="keyword">null</span>);</div><div class="line">        transaction.commit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在点击<code>FragmentOne</code>中的按钮时，使用了<code>replace</code>方法，如果不添加事务到回退栈中，前一个<code>Fragment</code>，也就是<code>FragmentOne</code>实例会被销毁，所以，我们调用<code>transaction.addToBackStack(null)</code>，将当前的事务添加到回退栈，所以<code>FragmentOne</code>实例不会被销毁，但是视图层依然会被销毁，即会调用<code>onDestoryView</code>方法。</p>
<p>接下来看<code>FragmentTwo.java</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentTwo</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_two,container,<span class="keyword">false</span>);</div><div class="line">        mButton = (Button) view.findViewById(R.id.two_button);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        FragmentThree three = <span class="keyword">new</span> FragmentThree();</div><div class="line">        FragmentManager manager = getActivity().getSupportFragmentManager();</div><div class="line">        FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">        transaction.hide(<span class="keyword">this</span>);</div><div class="line">        transaction.add(R.id.id_content,three,<span class="string">"THREE"</span>);</div><div class="line">        transaction.addToBackStack(<span class="keyword">null</span>);</div><div class="line">        transaction.commit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里点击时，我们没有使用<code>replace</code>，而是先隐藏了当前的<code>Fragment</code>，然后添加了<code>FragmentThree</code>的实例，最后将事务添加到回退栈。这样做的目的是为了给大家提供一种方案：如果不希望视图重绘该怎么做，请再次仔细看效果图，我们在<code>FragmentTwo</code>的<code>EditText</code>填写的内容，用户<code>Back</code>回来时，数据还在~~~</p>
<p>最后<code>FragmentThree</code>很简单，这里就不说了。</p>
<p>经过上面的介绍，应该已经知道Fragment回退栈是怎么一回事了，以及<code>hide</code>，<code>replace</code>等各自的应用的场景。</p>
<h3 id="Fragment与Activity通信"><a href="#Fragment与Activity通信" class="headerlink" title="Fragment与Activity通信"></a>Fragment与Activity通信</h3><p>因为<code>Fragmnet</code>都是依赖与<code>Activity</code>的，所以通信起来并不复杂，大概归为：</p>
<ul>
<li>如果你<code>Activity</code>中包含自己管理的<code>Fragment</code>的引用，可以通过引用直接访问所有的<code>Fragment</code>的<code>public</code>方法</li>
<li>如果<code>Activity</code>中未保存任何<code>Fragment</code>的引用，那么没关系，每个<code>Fragment</code>都有一个唯一的<code>TAG</code>或者<code>ID</code>,可以通过<code>getSupportFragmentManager().findFragmentByTag()</code>或者<code>findFragmentById()</code>获得任何Fragment实例，然后进行操作。</li>
<li>在<code>Fragment</code>中可以通过<code>getActivity()</code>得到当前绑定的<code>Activity</code>的实例，然后进行操作</li>
</ul>
<h3 id="Fragment与Activity通信的最佳实现"><a href="#Fragment与Activity通信的最佳实现" class="headerlink" title="Fragment与Activity通信的最佳实现"></a>Fragment与Activity通信的最佳实现</h3><p>因为要考虑<code>Fragment</code>的重复使用，所以必须降低<code>Fragment</code>与<code>Activity</code>的耦合，而且<code>Fragment</code>更不应该直接操作别的<code>Fragment</code>，毕竟<code>Fragment</code>操作应该由它的管理者<code>Activity</code>来决定。通常情况下，我们可以使用接口来解决这一问题。</p>
<p>下面通过两种方式，分别重构<code>FragmentOne</code>和<code>FragmentTwo</code>的点击事件，以及<code>Activity</code>对点击事件的响应：</p>
<p>先看<code>FragmentOne</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentOne</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line">    </div><div class="line">    <span class="comment">//设置按钮点击回调接口</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OneCallBack</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onOneBtnClick</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_one,container,<span class="keyword">false</span>);</div><div class="line">        mButton = (Button) view.findViewById(R.id.one_button);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">//交给Activity处理 </span></div><div class="line">        <span class="keyword">if</span> (getActivity() <span class="keyword">instanceof</span>  OneCallBack) &#123;</div><div class="line">            ((OneCallBack) getActivity()).onOneBtnClick();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到现在的<code>FragmentOne</code>不和任何<code>Activity</code>耦合，任何<code>Activity</code>都可以使用；并且我们声明了一个接口，来回调其点击事件，想要管理其点击事件的<code>Activity</code>实现此接口就即可。可以看到我们在<code>onClick</code>中首先判断了当前绑定的<code>Activity</code>是否实现了该接口，如果实现了则调用。</p>
<p>再来看<code>FragmentTwo</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentTwo</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TwoCallBack mTwoCallBack;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TwoCallBack</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onTwoBtnClick</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//设置回调接口</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTwoCallBack</span><span class="params">(TwoCallBack twoCallBack)</span> </span>&#123;</div><div class="line">        mTwoCallBack = twoCallBack;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_two,container,<span class="keyword">false</span>);</div><div class="line">        mButton = (Button) view.findViewById(R.id.two_button);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mTwoCallBack != <span class="keyword">null</span>) &#123;</div><div class="line">            mTwoCallBack.onTwoBtnClick();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与<code>FragmentOne</code>极其类似，但是我们提供了<code>setTwoCallBack</code>这样的方法，意味着<code>Activity</code>不仅需要实现该接口，还必须显示调用<code>two.setTwoCallBack(this)</code>。</p>
<p>最后看<code>MainActivity</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">FragmentOne</span>.<span class="title">OneCallBack</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">//添加第一个Fragment</span></div><div class="line">        FragmentManager manager = getSupportFragmentManager();</div><div class="line">        FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">        FragmentOne one = <span class="keyword">new</span> FragmentOne();</div><div class="line">        transaction.add(R.id.id_content,one,<span class="string">"ONE"</span>);</div><div class="line">        transaction.commit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    * FragmentOne 按钮点击时的回调</div><div class="line">    * */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOneBtnClick</span><span class="params">()</span> </span>&#123;</div><div class="line">        FragmentTwo two = <span class="keyword">new</span> FragmentTwo();</div><div class="line">        FragmentManager manager = getSupportFragmentManager();</div><div class="line">        FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">        transaction.replace(R.id.id_content,two,<span class="string">"TWO"</span>);</div><div class="line">        transaction.addToBackStack(<span class="keyword">null</span>);</div><div class="line">        transaction.commit();</div><div class="line"></div><div class="line">        two.setTwoCallBack(<span class="keyword">new</span> FragmentTwo.TwoCallBack() &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">            * FragmentTwo 按钮点击时的回调 </div><div class="line">            * */</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTwoBtnClick</span><span class="params">()</span> </span>&#123;</div><div class="line">                FragmentThree three = <span class="keyword">new</span> FragmentThree();</div><div class="line">                FragmentManager manager = getSupportFragmentManager();</div><div class="line">                FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">                transaction.hide(manager.findFragmentByTag(<span class="string">"TWO"</span>));</div><div class="line">                transaction.add(R.id.id_content,three,<span class="string">"THREE"</span>);</div><div class="line">                transaction.addToBackStack(<span class="keyword">null</span>);</div><div class="line">                transaction.commit();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码重构结束，与开始的效果一模一样。上面两种通信方式都是值得推荐的，随便选择一种自己喜欢的。</p>
<h3 id="如何处理运行时配置发生变化"><a href="#如何处理运行时配置发生变化" class="headerlink" title="如何处理运行时配置发生变化"></a>如何处理运行时配置发生变化</h3><p>运行时配置发生变化，最常见的就是屏幕发生选择，就那我们刚才的例子来说，先看下面的效果图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android18.gif?raw=true" width="375"><br></div>

<p>本来<code>MainActivity</code>这时候显示的是<code>FragmentTwo</code>界面，但是当我们旋转屏幕的时候，这时候按钮又变成了<code>FragmentOne</code>的按钮，并且我们之前输入的内容也不见了。这是为什么呢？</p>
<p>这是因为当运行时配置发生变化时，<code>Activity</code>要重新启动，默认的<code>Activity</code>中的<code>Fragment</code>也会跟着<code>Activity</code>重新创建，这样造成当旋转的时候，本身存在的<code>Fragment</code>会重新启动，然后当执行<code>Activity</code>的<code>onCreate</code>时，又会再次实例化一个新的<code>Fragment</code>，这就是出现的原因。</p>
<p>其实通过检查<code>onCreate</code>的参数<code>savedInstanceState</code>就可以判断，当前是否发生<code>Activity</code>的重新创建，默认的<code>savedInstanceState</code>会存储一些数据，包括<code>Fragment</code>的实例，通过打印可以看出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="number">04</span>-<span class="number">01</span> <span class="number">05</span>:<span class="number">29</span>:<span class="number">03.645</span> <span class="number">9330</span>-<span class="number">9330</span>/com.guiyongdong.fragmentdemo D/dd: onCreate: Bundle[&#123;android:viewHierarchyState=Bundle[&#123;android:views=&#123;<span class="number">16908290</span>=android.view.AbsSavedState$<span class="number">1</span>@<span class="number">5</span>ddcbb8, <span class="number">2131427404</span>=android.view.AbsSavedState$<span class="number">1</span>@<span class="number">5</span>ddcbb8, <span class="number">2131427405</span>=android.view.AbsSavedState$<span class="number">1</span>@<span class="number">5</span>ddcbb8, <span class="number">2131427406</span>=android.support.v7.widget.Toolbar$SavedState<span class="meta">@bd</span>1fd91, <span class="number">2131427407</span>=android.view.AbsSavedState$<span class="number">1</span>@<span class="number">5</span>ddcbb8, <span class="number">2131427421</span>=android.view.AbsSavedState$<span class="number">1</span>@<span class="number">5</span>ddcbb8&#125;, android:Panels=&#123;<span class="number">0</span>=com.android.internal.policy.PhoneWindow$PanelFeatureState$SavedState@<span class="number">2</span>d154f6&#125;&#125;], android:support:fragments=android.support.v4.app.FragmentManagerState@<span class="number">74850f</span>7&#125;]</div></pre></td></tr></table></figure>
<p>所以，我们简单改一下代码，只有在<code>savedInstanceState==null</code>时，才进行创建<code>Fragment</code>实例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">FragmentOne</span>.<span class="title">OneCallBack</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (savedInstanceState == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//添加第一个Fragment</span></div><div class="line">            FragmentManager manager = getSupportFragmentManager();</div><div class="line">            FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">            FragmentOne one = <span class="keyword">new</span> FragmentOne();</div><div class="line">            transaction.add(R.id.id_content,one,<span class="string">"ONE"</span>);</div><div class="line">            transaction.commit();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">            Log.d(<span class="string">"dd"</span>, <span class="string">"onCreate: "</span>+savedInstanceState.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在无论进行多次旋转都只会有一个<code>Fragment</code>实例在<code>Activity</code>中。<br>现在还存在一个问题，就是重新绘制时，Fragment发生重建，原本的数据如何保持？<br>其实和<code>Activity</code>类似，<code>Fragment</code>也有<code>onSaveInstanceState</code>的方法，在此方法中进行保存数据，然后在<code>onCreate</code>或者<code>onCreateView</code>或者<code>onActivityCreated</code>进行恢复都可以。</p>
<p>改造后的<code>FragmentTwo</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentTwo</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> EditText mEditText;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.fragment_two,container,<span class="keyword">false</span>);</div><div class="line">        mButton = (Button) view.findViewById(R.id.two_button);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">if</span> (mEditText == <span class="keyword">null</span>) &#123;</div><div class="line">            mEditText = (EditText) view.findViewById(R.id.editView);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//恢复数据</span></div><div class="line">            String str = savedInstanceState.getString(<span class="string">"editText"</span>);</div><div class="line">            mEditText.setText(str);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">        String str = mEditText.getText().toString();</div><div class="line">        outState.putString(<span class="string">"editText"</span>,str);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就不怕数据消失了。</p>
<p>好了，终于把Fragment相关的联系到一起了，上述基本包含了Fragment所有的用法，相信大家如果能够看完，一定有不少的收获。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天愚人节，先祝大家愚人节快乐!&lt;/p&gt;
&lt;p&gt;今天来说一下Android开发中经常使用到的一个类：&lt;code&gt;Fragment&lt;/code&gt;。由于&lt;code&gt;Android&lt;/code&gt;屏幕的碎片化，&lt;code&gt;Android&lt;/code&gt;为我们提供了一个和方便的类来使我们的APP可以适应各种屏幕的手机和平板，当然，&lt;code&gt;Fragment&lt;/code&gt;的功能远不止是为适应屏幕而生。你可以把&lt;code&gt;Fragment&lt;/code&gt;当成&lt;code&gt;Activity&lt;/code&gt;的一个界面的一个组成部分，甚至&lt;code&gt;Activity&lt;/code&gt;的界面可以由完全不同的&lt;code&gt;Fragment&lt;/code&gt;组成，更神奇的是&lt;code&gt;Fragment&lt;/code&gt;拥有自己的生命周期和接收、处理用户的事件，这样就不必再&lt;code&gt;Activity&lt;/code&gt;写一堆控件的事件处理的代码了，更重要的是，你可以动态的添加、替换和移除某个&lt;code&gt;Fragment&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之异步消息处理机制</title>
    <link href="http://www.guiyongdong.com/2017/03/27/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8B%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.guiyongdong.com/2017/03/27/一天一Android之异步消息处理机制/</id>
    <published>2017-03-27T09:37:50.000Z</published>
    <updated>2017-03-31T09:02:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>无论是<code>Android</code>还是<code>iOS</code>，关于UI的操作都是线程不安全的，所有的UI操作只能在主线程中执行。有时候我们会在子线程中做一些耗时的操作，比如网络资源的请求，当这些耗时操作结束时，我们又希望拿这些请求下来的资源去更新UI，但是当前线程为子线程，而更新UI由必须在主线程中，这就涉及到了线程间的通信问题。</p>
<p>学过iOS的同学都知道，我们可以使用<code>GCD</code>或者<code>performSelectorOnMainThread:</code>等技术来达到我们的需求。而在Android中，我们就要使用到异步消息处理机制了。</p>
<p>这篇文章就来详细说一下异步消息处理机制。</p>
<a id="more"></a>
<h3 id="线程间通信常用的解决方案"><a href="#线程间通信常用的解决方案" class="headerlink" title="线程间通信常用的解决方案"></a>线程间通信常用的解决方案</h3><h5 id="runOnUiThread"><a href="#runOnUiThread" class="headerlink" title="runOnUiThread"></a>runOnUiThread</h5><p>通常情况下，使用<code>runOnUiThread</code>这种方式回到主线程是最为方便，代码量也比较少，具体的使用方式为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//子线程模拟耗时操作</span></div><div class="line">                Thread.sleep(<span class="number">3000</span>);</div><div class="line">                runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        <span class="comment">//主线程更新UI</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为这种方式使用简单，这里我们不再细说。</p>
<h5 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h5><p>我们先来看看如何使用Handler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Handler mHandler;</div><div class="line">    <span class="keyword">private</span> TextView mTextView;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        mTextView = (TextView) findViewById(R.id.textView);</div><div class="line"></div><div class="line">        Button onUIButton = (Button) findViewById(R.id.button);</div><div class="line">        onUIButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                requestData();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//在主线程中创建Handler</span></div><div class="line">        mHandler = <span class="keyword">new</span> Handler(<span class="keyword">new</span> Handler.Callback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">                <span class="comment">//接受到消息</span></div><div class="line">                String str = (String) msg.obj;</div><div class="line">                mTextView.setText(str);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">//子线程模拟耗时操作</span></div><div class="line">                    Thread.sleep(<span class="number">3000</span>);</div><div class="line">                    Message message = <span class="keyword">new</span> Message();</div><div class="line">                    message.obj = <span class="string">"消息"</span>;</div><div class="line">                    <span class="comment">//handler发送消息</span></div><div class="line">                    mHandler.sendMessage(message);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先在主线程中创建<code>Handler</code>，在<code>requestData</code>方法中，开启一个子线程，子线程中模拟耗时操作，操作结束后，使用<code>Handler</code>发送消息，在主线程中接收到消息，更新UI。</p>
<p>这种方式在开发中使用的最频繁，至于其中的原理，我们慢慢来探究。</p>
<h3 id="Handler原理剖析"><a href="#Handler原理剖析" class="headerlink" title="Handler原理剖析"></a>Handler原理剖析</h3><p>上面的例子中，我们创建Handler是在主线程中创建，可能你会想了，我在子线程中创建行么？我们来用代码实验一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> Handler handler1;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> Handler handler2;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        handler1 = <span class="keyword">new</span> Handler();  </div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">                handler2 = <span class="keyword">new</span> Handler();  </div><div class="line">            &#125;  </div><div class="line">        &#125;).start();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上段代码中，我们在主线程中创建<code>handler1</code>，在子线程中创建<code>handler2</code>。当是，当我们允许程序的时候，程序竟然崩溃了，错误提示信息是Can’t create handler inside thread that has not called Looper.prepare()。说是不能再没有调用<code>Looper.prepare()</code>的线程中创建<code>Handler</code>。那系统既然这么说了，那么我们就在子线程中添加这句代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        Looper.prepare();  </div><div class="line">        handler2 = <span class="keyword">new</span> Handler();  </div><div class="line">    &#125;  </div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p>果然不会崩溃了，为什么呢？</p>
<h5 id="Handler与Looper的关系"><a href="#Handler与Looper的关系" class="headerlink" title="Handler与Looper的关系"></a>Handler与Looper的关系</h5><p>为什么在子线程中创建Handler会崩溃呢？</p>
<p>我们先来看看<code>Handler</code>的有参和无参构造方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(callback, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现他们都调用了<code>public Handler(Callback callback, boolean async)</code>这个方法，来看看这个方法的具体实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class="line">        <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class="line">        <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class="line">                (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</div><div class="line">            Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</div><div class="line">                klass.getCanonicalName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mLooper = Looper.myLooper();</div><div class="line">    <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">            <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">    &#125;</div><div class="line">    mQueue = mLooper.mQueue;</div><div class="line">    mCallback = callback;</div><div class="line">    mAsynchronous = async;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们发现这段代码抛出了异常，并且这个异常正好是刚才我们没有创建<code>Handler</code>的时候所出现的。</p>
<p>我们看到，这段代码中，调用了<code>Looper.myLooper()</code>方法获取一个Looper对象，如果Looper对象为空，就会抛异常，那什么时候Looper对象为空呢？我们再来看看<code>Looper.myLooper()</code>中的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sThreadLocal.get();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法很简单，就是从<code>sThreadLocal</code>对象中取出<code>Looper</code>，如果<code>sThreadLocal</code>中有<code>Looper</code>存在就返回<code>Looper</code>，否则返回空。那么我们在什么时候给<code>sThreadLocal</code>设置<code>Looper</code>呢？经验得出，肯定是<code>Looper.prepare()</code>，因为我们没有调用这个方法的时候，程序会崩溃。😄</p>
<p>我们来看<code>Looper.prepare()</code>方法的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line">    prepare(<span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">    &#125;</div><div class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，<code>prepare</code>方法又调用了<code>prepare(boolean quitAllowed)</code>方法，我们直接看<code>prepare(boolean quitAllowed)</code>方法。</p>
<p>首先判断<code>sThreadLocal</code>中是否已经存在<code>Looper</code>了，如果不存在，创建一个新的额<code>Looper</code>并设置给<code>sThreadLocal</code>。这就解释了，我们创建<code>Handler</code>的时候，为什么必须先调用<code>Looper.prepare()</code>方法。如果已经存在，会抛异常。由此得出，一个线程中只能存在一个<code>Looper</code>。</p>
<p>可能你还会疑惑，我们在主线程创建<code>Handler</code>到时候并没有去调用<code>Looper.prepare()</code>方法，程序也没有崩溃啊。这是因为在程序启动的时候，系统已经帮我们自动调用了<code>Looper.prepare()</code>方法。看<code>ActivityThread</code>中的<code>main()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">    SamplingProfilerIntegration.start();  </div><div class="line">    CloseGuard.setEnabled(<span class="keyword">false</span>);  </div><div class="line">    Environment.initForCurrentUser();  </div><div class="line">    EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());  </div><div class="line">    Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);  </div><div class="line">    Looper.prepareMainLooper();  </div><div class="line">    ActivityThread thread = <span class="keyword">new</span> ActivityThread();  </div><div class="line">    thread.attach(<span class="keyword">false</span>);  </div><div class="line">    <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;  </div><div class="line">        sMainThreadHandler = thread.getHandler();  </div><div class="line">    &#125;  </div><div class="line">    AsyncTask.init();  </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;  </div><div class="line">        Looper.myLooper().setMessageLogging(<span class="keyword">new</span> LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));  </div><div class="line">    &#125;  </div><div class="line">    Looper.loop();  </div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，系统帮我们调用了<code>Looper.prepareMainLooper()</code>方法，而这个方法又会再去调用<code>Looper.prepare()</code>，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">    prepare(<span class="keyword">false</span>);</div><div class="line">    <span class="keyword">synchronized</span> (Looper.class) &#123;</div><div class="line">        <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</div><div class="line">        &#125;</div><div class="line">        sMainLooper = myLooper();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因此我们的应用程序的主线程中始终存在一个<code>Looper</code>对象，从而不需要再动手去调用<code>Looper.prepare()</code>。</p>
<p>这样关于<code>Handler</code>和<code>Looper</code>的关系就很明确了，<code>Handler</code>的创建依赖与<code>Looper</code>。一个线程中至多有一个<code>Handler</code>。</p>
<h5 id="Handler、Message、Looper的消息机制"><a href="#Handler、Message、Looper的消息机制" class="headerlink" title="Handler、Message、Looper的消息机制"></a>Handler、Message、Looper的消息机制</h5><p>我们已经明白了<code>Handler</code>和<code>Looper</code>之间的大概关系，那么这三者之间的具体是如何协同操作的呢？</p>
<p>我们先来看看<code>Handler</code>是如何发送消息的:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        Message message = <span class="keyword">new</span> Message();  </div><div class="line">        message.arg1 = <span class="number">1</span>;  </div><div class="line">        Bundle bundle = <span class="keyword">new</span> Bundle();  </div><div class="line">        bundle.putString(<span class="string">"data"</span>, <span class="string">"data"</span>);  </div><div class="line">        message.setData(bundle);  </div><div class="line">        handler.sendMessage(message);  </div><div class="line">    &#125;  </div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p>其实Message只是一个载体，它可以使用<code>setData()</code>或<code>arg</code>参数等方法来携带一些数据，然后通过<code>Handler</code>将消息发送出去。</p>
<p>那么<code>Handler</code>把<code>Message</code>发送到哪里了呢？而且我们又可以在<code>Handler</code>的<code>handleMessage()</code>方法中重新得到这条<code>Message</code>呢？我们来看<code>Handler</code>的<code>sendMessage</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(Message msg, <span class="keyword">long</span> delayMillis)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</div><div class="line">        delayMillis = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">    MessageQueue queue = mQueue;</div><div class="line">    <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">        RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">        Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们看到，辗转反则最后调用了<code>sendMessageAtTime</code>，在此方法的内部，又调用了<code>enqueueMessage</code>方法，此方法接收三个参数：第一个参数<code>queue</code>就是一个消息队列，它将所有收到的消息以队列的形式进行排列，并提供入队和出队的操作，其实当前<code>Handler</code>中的<code>queue</code>是由<code>Looper</code>创建的，<code>Handler</code>只是引用了此<code>queue</code>，我们查看<code>Handler</code>的构造方法，里面会有这样两句代码:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">	...</div><div class="line">	mLooper = Looper.myLooper();</div><div class="line">	...</div><div class="line">	mQueue = mLooper.mQueue;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因此，一个Looper也就只有一个<code>MessageQueue</code>。第二个参数msg就是我们所要发送的消息<code>Message</code>，第三个参数<code>uptimeMillis</code>则表示发送消息的时间，它的值等于系统开机到当前时间的毫秒数再加上延迟时间，如果我们调用的不是<code>endMessageDelayed()</code>方法，延迟时间就是0。然后我们再来看调用的<code>enqueueMessage</code>方法的实现：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">    msg.target = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">        msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此方法会把当前<code>Handler</code>设置为<code>msg</code>的<code>target</code>，这个<code>target</code>的作用我们等会再说。然后就是调用消息队列的<code>enqueueMessage</code>方法，毫无疑问，就是把消息入队了。我们看源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (msg.isInUse()) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (mQuitting) &#123;</div><div class="line">            IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</div><div class="line">                    msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</div><div class="line">            Log.w(TAG, e.getMessage(), e);</div><div class="line">            msg.recycle();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.markInUse();</div><div class="line">        msg.when = when;</div><div class="line">        Message p = mMessages;</div><div class="line">        <span class="keyword">boolean</span> needWake;</div><div class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</div><div class="line">            <span class="comment">// New head, wake up the event queue if blocked.</span></div><div class="line">            msg.next = p;</div><div class="line">            mMessages = msg;</div><div class="line">            needWake = mBlocked;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</div><div class="line">            Message prev;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                prev = p;</div><div class="line">                p = p.next;</div><div class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                    needWake = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            msg.next = p; <span class="comment">// invariant: p == prev.next</span></div><div class="line">            prev.next = msg;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class="line">        <span class="keyword">if</span> (needWake) &#123;</div><div class="line">            nativeWake(mPtr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先判断<code>msg</code>的<code>target</code>是否为空，如果为空抛异常，由此我们看出<code>target</code>在后面会有大作用。其次判断此消息是否已经加入到队列中去。然后设置<code>msg</code>为已加入标记，<code>msg</code>触发时间，这里会取出之前的消息，首先你要知道，<code>MessageQueue</code>并没有使用一个集合把所有的消息都保存起来，它只使用了一个<code>Messages</code>对象表示当前待处理的消息，而且每个<code>Messages</code>对象都会有一个<code>next</code>字段，它也是一个<code>Messages</code>对象，由此可以组成类似于链表一样的数据结构。而且这里会判断当前<code>msg</code>的触发时间是不是0，如果是0直接加入到链表的头部。如果<code>msg</code>的触发时间不是0，会一直循环遍历当前<code>MessageQueue</code>对象中的消息链表，并比较触发时间，重新排列消息链表。如此，当前消息已经被插入到整个消息队列中。</p>
<p>我们会疑惑，代码到这里已经没有了，但是<code>Handler</code>又是如何接收到消息的呢？</p>
<p>不知道大家注意没，我们在看<code>ActivityThread</code>中的<code>main()</code>方法中，有没有还看到这样一句代码：<code>Looper.loop()</code>，这句代码会不会和我们的消息队列有关系呢？我们先来做个试验：我们在子线程中创建一个<code>Handler</code>，并且发送一条消息，但是我们只调用<code>Looper.prepare()</code>方法，我们是否能接收到消息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Looper.prepare();</div><div class="line">                Handler handler = <span class="keyword">new</span> Handler(<span class="keyword">new</span> Handler.Callback() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">                    	<span class="comment">//标记一下接受到消息</span></div><div class="line">                        Log.d(<span class="string">"msg"</span>,<span class="string">"接收到消息"</span>);</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">                <span class="comment">//子线程模拟耗时操作</span></div><div class="line">                Thread.sleep(<span class="number">3000</span>);</div><div class="line">				   <span class="comment">//发送消息</span></div><div class="line">                handler.sendMessage(<span class="keyword">new</span> Message());</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行程序以后，在控制台并没有看到打印的信息，然后我们在<code>handler.sendMessage(new Message())</code>后面添加<code>Looper.loop()</code>代码，再次运行，我们可以看到控制台有信息打印，注意，<code>Looper.loop()</code>会造成代码阻塞，必须放在代码的最后面。 由此我们可以确信，消息的发送确实和<code>Looper.loop()</code>方法有很大关系，我们看源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">	 <span class="comment">//获取当前线程的Looper</span></div><div class="line">    <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">//如果当前线程没有Looper 抛出异常    </span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//拿到当前Looper的消息队列</span></div><div class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line">	</div><div class="line">    Binder.clearCallingIdentity();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line">    </div><div class="line">	 <span class="comment">//死循环当前消息队列</span></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">        	<span class="comment">//没有消息返回</span></div><div class="line">           <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></div><div class="line">        <span class="keyword">final</span> Printer logging = me.mLogging;</div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                    msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> traceTag = me.mTraceTag;</div><div class="line">        <span class="keyword">if</span> (traceTag != <span class="number">0</span> &amp;&amp; Trace.isTagEnabled(traceTag)) &#123;</div><div class="line">            Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">        	  <span class="comment">//拿到消息之前存储的target也就是Handler 发送消息</span></div><div class="line">            msg.target.dispatchMessage(msg);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</div><div class="line">                Trace.traceEnd(traceTag);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Make sure that during the course of dispatching the</span></div><div class="line">        <span class="comment">// identity of the thread wasn't corrupted.</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">        <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">            Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                    + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                    + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                    + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                    + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.recycleUnchecked();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，首先会判断当前线程是否有Looper，如果没有抛出异常，所以<code>Looper.loop()</code>一定要在<code>Looper.prepare()</code>方法之后，然后拿到当前<code>Looper</code>的消息队列<code>mQueue</code>，之后进入无限循环，取出第一条消息，如果没有消息则阻塞，如果我们使用<code>Handler</code>发送消息，这个时候则能通过循环取到消息，之后调用消息的<code>target</code>的<code>dispatchMessage()</code>方法来回调消息信息。其实消息的target就是<code>Handler</code>。</p>
<p>再来看看<code>Handler</code>的<code>dispatchMessage()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123; </div><div class="line">    	 <span class="comment">//使用Handler的post方法发送消息会走这里 </span></div><div class="line">        handleCallback(msg);  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;  </div><div class="line">        	  <span class="comment">//使用Handler的sendMessage方法会走这里</span></div><div class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;  </div><div class="line">                <span class="keyword">return</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        handleMessage(msg);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在使用<code>Handler</code>的有参构造函数的时候，会传一个<code>Callback</code>对象，他是一个接口，只有一个方法<code>handleMessage()</code>，所以会再次走我们的回调函数，传递消息。</p>
<p>至此，关于<code>Looper</code>、<code>Handler</code>、<code>Message</code>这三者关系我们已经非常清楚了，来张图解释一下：</p>
<div align="center"><br><img src="http://img.blog.csdn.net/20140805002935859?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbG1qNjIzNTY1Nzkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><br></div>


<p>另外除了还有一种发送消息的方法：<code>Handler</code>的<code>post()</code>方法。</p>
<p>先来看看<code>post()</code>方法的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable r)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">return</span>  sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原来这里还是调用了sendMessageDelayed()方法去发送一条消息啊，并且还使用了getPostMessage()方法将Runnable对象转换成了一条消息，我们来看下这个方法的源码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Message <span class="title">getPostMessage</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">    Message m = Message.obtain();</div><div class="line">    m.callback = r;</div><div class="line">    <span class="keyword">return</span> m;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这个方法中将消息的callback字段的值指定为传入的Runnable对象。咦？这个callback字段看起来有些眼熟啊，喔！在Handler的dispatchMessage()方法中原来有做一个检查，如果Message的callback等于null才会去调用handleMessage()方法，否则就调用handleCallback()方法。那我们快来看下handleCallback()方法中的代码吧：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">    message.callback.run();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也太简单了！竟然就是直接调用了一开始传入的Runnable对象的run()方法。因此在子线程中通过Handler的post()方法进行UI操作就可以这么写：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Handler handler;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        handler = <span class="keyword">new</span> Handler();  </div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">                handler.post(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">                    <span class="meta">@Override</span>  </div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">                        <span class="comment">// 在这里进行UI操作  </span></div><div class="line">                    &#125;  </div><div class="line">                &#125;);  </div><div class="line">            &#125;  </div><div class="line">        &#125;).start();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>虽然写法上相差很多，但是原理是完全一样的，我们在Runnable对象的run()方法里更新UI，效果完全等同于在handleMessage()方法中更新UI。</p>
<p>通过以上所有源码的分析，我们已经发现了，不管是使用哪种方法在子线程中更新UI，其实背后的原理都是相同的，必须都要借助异步消息处理的机制来实现，而我们又已经将这个机制的流程完全搞明白了。真好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无论是&lt;code&gt;Android&lt;/code&gt;还是&lt;code&gt;iOS&lt;/code&gt;，关于UI的操作都是线程不安全的，所有的UI操作只能在主线程中执行。有时候我们会在子线程中做一些耗时的操作，比如网络资源的请求，当这些耗时操作结束时，我们又希望拿这些请求下来的资源去更新UI，但是当前线程为子线程，而更新UI由必须在主线程中，这就涉及到了线程间的通信问题。&lt;/p&gt;
&lt;p&gt;学过iOS的同学都知道，我们可以使用&lt;code&gt;GCD&lt;/code&gt;或者&lt;code&gt;performSelectorOnMainThread:&lt;/code&gt;等技术来达到我们的需求。而在Android中，我们就要使用到异步消息处理机制了。&lt;/p&gt;
&lt;p&gt;这篇文章就来详细说一下异步消息处理机制。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一天一Android之数据持久化技术</title>
    <link href="http://www.guiyongdong.com/2017/03/24/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    <id>http://www.guiyongdong.com/2017/03/24/一天一Android之数据持久化技术/</id>
    <published>2017-03-24T03:21:30.000Z</published>
    <updated>2017-03-25T07:39:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>任何一个应用程序，说白了都是在不停的和数据打交道，通过网络获取的数据，一般为瞬时数据，当我们关闭APP的时候，这些数据就会消失。但有时候我们却希望在APP关闭的时候，保存这些数据，以期待在下次APP启动的时候能用到这些数据。那么，这里我们就需要用到数据持久化技术了。</p>
<p>其实数据持久化已经被广泛应用于各种程序设计的领域了，后台就不说了，iOS有<code>plist</code>、<code>归档</code>、<code>数据库</code>等。当然，Android也有类似与iOS的存储方式：<code>文件存储</code>、<code>SharedPreference</code>以及<code>数据库</code>等，对了，Android还有SD卡。</p>
<a id="more"></a>
<h3 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h3><h5 id="写数据"><a href="#写数据" class="headerlink" title="写数据"></a>写数据</h5><p>文件存储是Android中最基本的存储方式，它不对存储的内容进行格式化处理，所有的数据原封不动地保存到文件中，因而它适合存储一些简单的文本数据或者二进制数据。其实问价存储是最简单的，你只需要了解java流的使用就可以了。Android提供了一个<code>openFileOutput()</code>方法，可以将数据存储到指定的文件中。这个方法接收两个参数，第一个参数是文件名，注意这里的文件不需要包含路径，因为所有的文件都是默认存储到<code>/data/data/&lt;packagename&gt;/files</code>目录下的，第二个参数是文件的操作模式，主要有两种，一种是<code>MODE_PTIVATE</code>，它也是默认的模式，表示当我们写入的数据会覆盖之前的数据。另一种是<code>MODE_APPEND</code>，表示会追加数据。而且<code>openFileOutput()</code>方法会返回一个<code>FileOutputStream</code>对象，然后就可以以java流的方式写数据了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveData</span><span class="params">(String data)</span> </span>&#123;</div><div class="line">    <span class="comment">//直接使用文件存储</span></div><div class="line">    FileOutputStream fileOutputStream = <span class="keyword">null</span>;</div><div class="line">    BufferedWriter bufferedWriter = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        fileOutputStream = openFileOutput(<span class="string">"str.txt"</span>,MODE_APPEND);</div><div class="line">        bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(fileOutputStream));</div><div class="line">        bufferedWriter.write(data);</div><div class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;<span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (bufferedWriter != <span class="keyword">null</span>)&#123;</div><div class="line">                bufferedWriter.close();</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h5><p>有写就有读，<code>Context</code>类还提供了一个<code>openFileInput()</code>方法，用于读取数据，这个方法只接收一个参数文件名，系统会自动到<code>/data/data/&lt;packagename&gt;/files</code>目录下读取这个文件的数据，并返回一个FileInputStream对象，然后通过java流的方式读取数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    FileInputStream inputStream = <span class="keyword">null</span>;</div><div class="line">    BufferedReader bufferedReader = <span class="keyword">null</span>;</div><div class="line">    StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        inputStream = openFileInput(<span class="string">"str.txt"</span>);</div><div class="line">        bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</div><div class="line">        String line = <span class="string">""</span>;</div><div class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>)&#123;</div><div class="line">            stringBuffer.append(line);</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;<span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (bufferedReader != <span class="keyword">null</span>)&#123;</div><div class="line">                bufferedReader.close();</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> bufferedReader.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SharedPreferences"><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a>SharedPreferences</h3><p>说起这个，我想到了iOS的偏好设置，它也是一种轻量级的数据存储方式，和iOS不同的是，SharedPreferences却可以创建任意的偏好设置。iOS中的偏好设置本质是plist，Android中的偏好设置本质是XML。</p>
<h5 id="写数据-1"><a href="#写数据-1" class="headerlink" title="写数据"></a>写数据</h5><p>要想写数据，首先需要获取<code>SharedPreferences</code>对象，Android提供了三种方式获取。</p>
<p><strong>Context类中的getSharedPreferences()方法</strong><br>此方法接收两个参数，第一个参数用于指定<code>SharedPreferences</code>文件的名称，如果指定的文件不存在则会创建，<code>SharedPreferences</code>文件都是存放在<code>/data/data/&lt;package name&gt;/shared</code>目录下的。第二个参数用于指定操作模式，目前只有MODE_PRIVATE这一种模式可选，表示只有本应用程序才可以对这个<code>SharedPreferences</code>文件进行读写。</p>
<p><strong>Activity类中的getPreferences()方法</strong><br>这个方法直接收一个操作参数，因为使用这个方法时会自动将当前活动的类名作为文件名。</p>
<p><strong>PreferenceManager类中的getDefaultSharedPreferences()方法</strong><br>这是一个静态方法，它接收一个Context参数，并自动使用当前应用程序的包名作为前缀来命名<code>SharedPreferences</code>文件，得到<code>SharedPreferences</code>对象后，就可以实现数据的存储了，主要有3步：</p>
<ul>
<li>调用<code>SharedPreferences</code>对象的edit()方法获取一个<code>SharedPreferences.Editor</code>对象</li>
<li>向<code>SharedPreferences.Editor</code>对象中添加数据</li>
<li>调用<code>apply()</code>方法将数据提交</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">//使用SharedPreferences 存储数据</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveData</span><span class="params">(String data)</span> </span>&#123;</div><div class="line">	SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(<span class="keyword">this</span>);</div><div class="line">	<span class="comment">//sharedPreferences = getSharedPreferences("share",MODE_PRIVATE);</span></div><div class="line">	<span class="comment">//sharedPreferences = getPreferences(MODE_PRIVATE);</span></div><div class="line">	SharedPreferences.Editor editor = sharedPreferences.edit();</div><div class="line">	editor.putString(data,<span class="string">"aaa"</span>);<span class="comment">//以key-value的形式存储</span></div><div class="line">	editor.apply();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="读数据-1"><a href="#读数据-1" class="headerlink" title="读数据"></a>读数据</h5><p>使用<code>SharedPreferences</code>读数据更加的简单，<code>SharedPreferences</code>有一系列的get方法来读取不同类型的数据。get方法的第一个参数是key，第二个参数是如果取不到这个key对应的值，返回的默认值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">	SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(<span class="keyword">this</span>);</div><div class="line">	<span class="comment">//sharedPreferences = getSharedPreferences("share",MODE_PRIVATE);</span></div><div class="line">	<span class="comment">//sharedPreferences = getPreferences(MODE_PRIVATE);</span></div><div class="line">	String string = sharedPreferences.getString(key, <span class="string">"default"</span>);</div><div class="line">	Toast.makeText(<span class="keyword">this</span>,string,Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="数据库存储"><a href="#数据库存储" class="headerlink" title="数据库存储"></a>数据库存储</h3><p>说到数据库存储，不得不了解的就是SQL语句，其实我的数据库了解的很少，SQL语句也只会一些简单的，如果想存储一些有复杂依赖关系的数据是需要数据库功底的。</p>
<p>无论Android还是iOS，系统都内置了名为sqlite数据库，我们可以使用标准的SQL语句来操作它。</p>
<h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><p>Android专门提供一个叫<code>SQLiteOpenHelper</code>的抽象类，它有两个抽象方法<code>onCreate</code>和<code>onUpgrade</code>，顾名思义，一个创建，一个更新。</p>
<p><code>SQLiteOpenHelper</code>中还有两个方法，<code>getReadableDatabase()</code>和<code>getWritableDatabase()</code>。这两个方法都可以创建或打开一个数据库，并返回一个数据库操作对象。不同的是当数据库不可写入时（如磁盘空间已满），<code>getReadableDatabase()</code>方法返回的对象将以只读的方式去打开数据库，而<code>getWritableDatabase()</code>方法则抛异常。</p>
<p><code>SQLiteOpenHelper</code>中有两个构造方法可供重写，一般使用参数少的，第一个参数是Context，第二个参数是数据库名，第三个参数允许我们在查询数据的时候返回一个自定义的Cursor，一般都传null，第四个参数表示当前数据库的版本号，可用于对数据库升级操作。数据库存放的位置在<code>/data/data/&lt;package name&gt;/database/</code>目录下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataBaseHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_BOOK = <span class="string">"create table Book ("</span></div><div class="line">            +<span class="string">"id integer primary key autoincrement,"</span></div><div class="line">            +<span class="string">"author text,"</span></div><div class="line">            +<span class="string">"price real,"</span></div><div class="line">            +<span class="string">"pages integer,"</span></div><div class="line">            +<span class="string">"name text)"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_CATEGORY = <span class="string">"create table Category ("</span></div><div class="line">            +<span class="string">"id integer primary key autoincrement,"</span></div><div class="line">            +<span class="string">"author text,"</span></div><div class="line">            +<span class="string">"price real,"</span></div><div class="line">            +<span class="string">"pages integer,"</span></div><div class="line">            +<span class="string">"name text)"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span>  Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDataBaseHelper</span><span class="params">(Context context, String name, SQLiteDatabase.CursorFactory factory, <span class="keyword">int</span> version)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, name, factory, version);</div><div class="line">        mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">        <span class="comment">//在此方法中创建数据库</span></div><div class="line">        db.execSQL(CREATE_BOOK);</div><div class="line">        Toast.makeText(mContext,<span class="string">"创建数据库"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">        <span class="comment">//如果版本号升级 则在此方法中对数据库进行升级</span></div><div class="line">        Toast.makeText(mContext,<span class="string">"更新数据库"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">        <span class="keyword">if</span> (newVersion == <span class="number">2</span>)&#123;</div><div class="line">            db.execSQL(CREATE_CATEGORY);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MyDataBaseHelper mMyDataBaseHelper;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_data_base);</div><div class="line">        </div><div class="line">        <span class="comment">//等到下次需要升级数据库时，需要修改这里的版本号</span></div><div class="line">        mMyDataBaseHelper = <span class="keyword">new</span> MyDataBaseHelper(<span class="keyword">this</span>,<span class="string">"BookStore.db"</span>,<span class="keyword">null</span>,<span class="number">1</span>);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.button2);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="comment">//会创建数据库</span></div><div class="line">                mMyDataBaseHelper.getWritableDatabase();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有数据库的地方就有增删改查</p>
<h5 id="增"><a href="#增" class="headerlink" title="增"></a>增</h5><p><code>SQLiteOpenHelper</code>提供了一个<code>insert()</code>方法，它接收三个参数，第一个是表名，第二个参数用于在未指定添加数据的情况下给某些可为空的列自动赋值为NULL，一般我们直接传null，第三个是ContentValues对象，它提供了一系列的put（）方法，用于添加数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">	Button addButton = (Button) findViewById(R.id.addButton);</div><div class="line">	addButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">	    <span class="meta">@Override</span></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">	        SQLiteDatabase database = mMyDataBaseHelper.getWritableDatabase();</div><div class="line">	        ContentValues contentValues = <span class="keyword">new</span> ContentValues();</div><div class="line">	        contentValues.put(<span class="string">"name"</span>,<span class="string">"android"</span>);</div><div class="line">	        contentValues.put(<span class="string">"author"</span>,<span class="string">"125"</span>);</div><div class="line">	        contentValues.put(<span class="string">"pages"</span>,<span class="number">40</span>);</div><div class="line">	        contentValues.put(<span class="string">"price"</span>,<span class="number">16.50</span>);</div><div class="line">	        database.insert(<span class="string">"Book"</span>,<span class="keyword">null</span>,contentValues);</div><div class="line">	    &#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="删"><a href="#删" class="headerlink" title="删"></a>删</h5><p><code>SQLiteOpenHelper</code>提供一个<code>delete()</code>方法，第一个参数表名，第二，三个参用于约束删除某一行或某几行的数据，不指定的话默认删除所有行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</div><div class="line">	Button deleteButton = (Button) findViewById(R.id.deleteButton);</div><div class="line">	deleteButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">	    <span class="meta">@Override</span></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">	        SQLiteDatabase database = mMyDataBaseHelper.getWritableDatabase();</div><div class="line">	        database.delete(<span class="string">"Book"</span>,<span class="string">"name = ?"</span>,<span class="keyword">new</span> String[]&#123;<span class="string">"android"</span>&#125;);</div><div class="line">	    &#125;</div><div class="line">	&#125;);	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="改"><a href="#改" class="headerlink" title="改"></a>改</h5><p><code>SQLiteOpenHelper</code>提供了一个<code>update()</code>方法，用于对数据的更新。这个方法接收4个参数，第一个为表名，第二个为ContentValues对象，把要更新数据在这里组装，第三，四个用于约束更新某一行或某几行中的数据，不指定的话更新所有行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</div><div class="line">	Button updateButton = (Button) findViewById(R.id.updateButton);</div><div class="line">    updateButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            SQLiteDatabase database = mMyDataBaseHelper.getWritableDatabase();</div><div class="line">            ContentValues contentValues = <span class="keyword">new</span> ContentValues();</div><div class="line">            contentValues.put(<span class="string">"price"</span>,<span class="number">4545.9</span>);</div><div class="line">            database.update(<span class="string">"Book"</span>,contentValues,<span class="string">"name = ?"</span>,<span class="keyword">new</span> String[]&#123;<span class="string">"android"</span>&#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="查"><a href="#查" class="headerlink" title="查"></a>查</h5><p>通常情况下，数据库中的查是最复杂的。<code>SQLiteOpenHelper</code>提供了一系列<code>query()</code>方法，最短的方法也有7个参数。第一个参数是表名。第二个参数用于指定去查询哪几行，如果不指定默认查询所有行。第三，四个用于约束查询某一行或某几行的数据，不指定则默认查询所有行。第五个参数参数表示指定需要group by的列，不指定则表示不对查询结果进行group by操作。第六个参数用于对group by的进一步过滤。第七个参数用于对查询的结果排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function">pubic <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</div><div class="line">	Button checkButton = (Button) findViewById(R.id.checkButton);</div><div class="line">	checkButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">	    <span class="meta">@Override</span></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">	        SQLiteDatabase database = mMyDataBaseHelper.getWritableDatabase();</div><div class="line">	        Cursor cursor = database.query(<span class="string">"Book"</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</div><div class="line">	        <span class="keyword">if</span> (cursor.moveToFirst())&#123;</div><div class="line">	            do &#123;</div><div class="line">	                String name = cursor.getString(cursor.getColumnIndex(<span class="string">"name"</span>));</div><div class="line">                        <span class="keyword">double</span> price = cursor.getDouble(cursor.getColumnIndex(<span class="string">"price"</span>))</div><div class="line">                        Toast.makeText(DataBaseActivity.<span class="keyword">this</span>,name+price,Toast.LENGTH_SHORT).show();</div><div class="line">	        &#125;</div><div class="line">	        cursor.close();</div><div class="line">	    &#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们看到，调用<code>query()</code>方法会返回一个<code>Cursor</code>对象，调用<code>moveToFirst()</code>可将查询指针指向第一行的位置，调用<code>moveToNext()</code>可将查询指针向下一行移动，如果没有下一行返回false，结束查询。然后我们就可以循环遍历查询数据。通过<code>Cursor</code>的<code>getColumnIndex()</code>方法获取到某一列在表中对应的位置索引，通过这个索引就可以得到索引对应的数据，</p>
<p>当然，关于数据库的操作你完全可以不适用以上方法，如果你对SQL语句足够数量，你可以直接使用SQL语句进行操作，添加、更新、删除等操作都可以直接使用<code>SQLiteDatabase</code>的<code>execSQL()</code>方法操作，第一个参数为SQL语句，第二个参数为值。查询操作可以使用<code>SQLiteDatabase</code>的<code>rawQuery()</code>方法，第一个参数为SQL语句，第二个参数为值。</p>
<p>这里推荐一个库，<strong>LitePal</strong>，简化了数据库的操作，可以直接对JavaBean进行操作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;任何一个应用程序，说白了都是在不停的和数据打交道，通过网络获取的数据，一般为瞬时数据，当我们关闭APP的时候，这些数据就会消失。但有时候我们却希望在APP关闭的时候，保存这些数据，以期待在下次APP启动的时候能用到这些数据。那么，这里我们就需要用到数据持久化技术了。&lt;/p&gt;
&lt;p&gt;其实数据持久化已经被广泛应用于各种程序设计的领域了，后台就不说了，iOS有&lt;code&gt;plist&lt;/code&gt;、&lt;code&gt;归档&lt;/code&gt;、&lt;code&gt;数据库&lt;/code&gt;等。当然，Android也有类似与iOS的存储方式：&lt;code&gt;文件存储&lt;/code&gt;、&lt;code&gt;SharedPreference&lt;/code&gt;以及&lt;code&gt;数据库&lt;/code&gt;等，对了，Android还有SD卡。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之广播</title>
    <link href="http://www.guiyongdong.com/2017/03/23/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8B%E5%B9%BF%E6%92%AD/"/>
    <id>http://www.guiyongdong.com/2017/03/23/一天一Android之广播/</id>
    <published>2017-03-23T06:06:15.000Z</published>
    <updated>2017-03-23T09:08:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>提到广播，因为我是农村的，首先想到的就是我们村大队的喇叭，如果平常有交电费，或者重要的事情，这个喇叭就会响起，全村的都能听见，可能有时候邻村的也能听见，足见广播的推送面积之大。</p>
<p>提到广播这种机制，学过iOS的都知道通知，我想这两种机制应该都是类似的。在iOS中，我们如果想监听系统的某些事件，比如APP退到后台，我们只需要在把监听对象添加到系统的通知中心中，并且关注APP退到后台的事件，就可以随时监听了。通知还有个好处就是，我们可以夸线程，夸界面的处理事件。</p>
<p>那么，在Android中，广播又是怎么回事呢，这篇文章就来详细分析一下广播在Android中的应用。(ps:广播还有另外一个名字——全局大喇叭~~)</p>
<a id="more"></a>
<h3 id="广播机制简介"><a href="#广播机制简介" class="headerlink" title="广播机制简介"></a>广播机制简介</h3><p>在广播机制中，存在两种角色：<strong>广播发送者</strong>和<strong>广播接收者</strong>。</p>
<p>我们来看看广播的使用场景：</p>
<ul>
<li>同一APP内部的同一组件内部的消息通信（单个或多个线程之间）</li>
<li>同一APP内部的不同组件之间的消息通信（单个进程）</li>
<li>同一APP具有多个进程的不同组件之间的消息通信</li>
<li>不同APP之间的组件之间消息通信</li>
<li>Android系统在特定情况下与APP之间的消息通信</li>
</ul>
<p>另外，Android中的广播主要可以分为两种类型：<strong>标准广播</strong>和<strong>有序广播</strong>。</p>
<h5 id="标准广播"><a href="#标准广播" class="headerlink" title="标准广播"></a>标准广播</h5><p>标准广播是一种完全异步执行的广播，在广播发出之后，所有的广播接收器几乎会在同一时刻接收到这条广播消息，因此它们之间没有任何先后顺序可言。这种广播的效率会比较高，但是却不能被截断。标准广播的工作流程是：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1917079-00a6b9ddd0a874a8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>


<h5 id="有序广播"><a href="#有序广播" class="headerlink" title="有序广播"></a>有序广播</h5><p>有序广播是一种同步执行的广播，在广播发出之后，同一时刻只会有一个广播接收器能够收到这条广播消息，当这个广播接收器中的逻辑处理执行完毕后，广播才会继续传播，而且优先级高的广播接收器可以优先接收到广播。并且前面的广播接收器还可以截断正在传递的广播，这样后面的广播接收器就无法收到广播消息了。有序广播的工作流程是：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1917079-31f3a8f2a27d905f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<h3 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h3><p>Android内置了很多系统级别的广播，如果我们想要监听系统的这些广播，就需要用到广播接收器（BroadcastReceiver）。注册广播的方式一般有两种，在代码中注册和在AndroidManifest.xml中注册，其中前者也被称为动态注册，后者也被称为静态注册。</p>
<h5 id="动态注册监听网络变化"><a href="#动态注册监听网络变化" class="headerlink" title="动态注册监听网络变化"></a>动态注册监听网络变化</h5><p>凡是广播接收者都必须继承自<code>BroadcastReceiver</code>，并重写抽象方法<code>onReceive()</code>，当有广播到来时，<code>onReceive()</code>方法就会得到执行。</p>
<p>我们使用动态注册的方式去监听网络的变化。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> NetworkChangeReceiver mNetworkChangeReceiver;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">//添加网络状态的监听</span></div><div class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">        intentFilter.addAction(<span class="string">"android.net.conn.CONNECTIVITY_CHANGE"</span>);</div><div class="line">        mNetworkChangeReceiver = <span class="keyword">new</span> NetworkChangeReceiver();</div><div class="line">        registerReceiver(mNetworkChangeReceiver,intentFilter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        unregisterReceiver(mNetworkChangeReceiver);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NetworkChangeReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">        <span class="comment">//实现接收的方法</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">            ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);</div><div class="line">            NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();</div><div class="line">            <span class="keyword">if</span> (networkInfo != <span class="keyword">null</span> &amp;&amp; networkInfo.isAvailable())&#123;</div><div class="line">                Toast.makeText(context,<span class="string">"有网了！"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                Toast.makeText(context,<span class="string">"没网了！"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不要忘了，要在AndroidManifest.xml中添加网络权限<br><code>&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;</code></p>
<p>可以看到，我在MainActivity中定义了一个内部类<code>NetworkChangeReceiver</code>并继承<code>BroadcastReceiver</code>，重写了父类的<code>onReceive()</code>方法。每当网络发生变化的时候，<code>onReceive()</code>方法就会得到执行。</p>
<p>在<code>onCreate()</code>方法中，我创建了一个IntentFilter的实例，并给它添加了一个值为<code>android.net.conn.CONNECTIVITY_CHANGE</code>的action，因外当网络状态发生变化时，系统会发出一条值为<code>android.net.conn.CONNECTIVITY_CHANGE</code>的广播。因为我们是动态注册广播，所以一定要在<code>onDestroy()</code>方法中调用<code>unregisterReceiver()</code>注销广播的监听。</p>
<h5 id="静态注册实现开机启动"><a href="#静态注册实现开机启动" class="headerlink" title="静态注册实现开机启动"></a>静态注册实现开机启动</h5><p>动态注册的广播接收器可以自由的控制注册与注销，在灵活性方面有很大的优势，但是它存在着一个缺点，即必须要在程序启动之后才能接收到广播，因为注册的逻辑是写在<code>onCreate()</code>方法里的。如果我们想在程序未启动的时候，就能接收到广播，那就要用到静态注册了。</p>
<p>首先我们需要创建一个广播接收器类，创建方式为：选择新建-&gt;Other-&gt;Broadcast Receiver。Android Studio会让我们选择谢谢东西，<code>Exported</code>表示是否允许这个广播接收器接收本程序以外的广播，<code>Enabled</code>表示是否启用这个广播接收器，这里我们都勾选。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootCompleteReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        Toast.makeText(context,<span class="string">"手机开机了"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，<code>BootCompleteReceiver</code>类里面的代码很简单。</p>
<p>另外，静态的广播接收器一定要在AndroidManifest.xml文件中注册才可以使用，但是注册这一步已经被Android Studio自动完成了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.broadreceiverdemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--广播接收者--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">receiver</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".BootCompleteReceiver"</span></div><div class="line">            <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>目前，我们还不能接收到开机广播，因为我们还没有为它添加响应的action。添加代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.broadreceiverdemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--添加权限--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECEIVE_BOOT_COMPLETED"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--广播接收者--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">receiver</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".BootCompleteReceiver"</span></div><div class="line">            <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--添加开机广播的监听--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.BOOT_COMPLETED"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>由于Android系统自动完成后会发送一条值为<code>android.intent.action.BOOT_COMPLETED</code>的广播，因此需要在<code>&lt;intent-filter&gt;</code>标签中添加相应的action，当然，监听系统开机广播的权限也是需要声明的。如此，我们的APP便可监听手机的开机了。</p>
<h3 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h3><p>说了这么多，一直都是系统在发广播，但是有时候我们根据业务需求要想发送自己的广播该这么办呢？前面说了，发广播的形式有两种，标准广播和有序广播，那就来看看这两种广播如何发送。</p>
<h5 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h5><p>在发送广播之前，我先定义一个广播接收器，这里约定action为<code>com.guiyongdong.MY_BROADCAST</code>，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.broadreceiverdemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 添加权限 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECEIVE_BOOT_COMPLETED"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        ...</div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">receiver</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".MyBroadcastReceiver"</span></div><div class="line">            <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--添加自定义的广播接收器--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.MY_BROADCAST"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>MyBroadcastReceiver</code>广播接收器的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        Toast.makeText(context,<span class="string">"接收到自定义的广播"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我在MainActivity中添加了一个按钮，按钮添加点击事件，会发送名为<code>com.guiyongdong.MY_BROADCAST</code>的广播，代码如下：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> NetworkChangeReceiver mNetworkChangeReceiver;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.sendButton);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.guiyongdong.MY_BROADCAST"</span>);</div><div class="line">                sendBroadcast(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重新运行，并点击按钮，效果图如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android15.png?raw=true" width="375"><br></div>

<h5 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h5><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> NetworkChangeReceiver mNetworkChangeReceiver;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.sendButton);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.guiyongdong.MY_BROADCAST"</span>);</div><div class="line">                sendOrderedBroadcast(intent,<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，发送有序广播只需要改动一行代码，即<code>sendBroadcast()</code>方法改成<code>sendOrderedBroadcast()</code>方法。<code>sendOrderedBroadcast()</code>方法接收两个参数，第一个参数任然是Intent，第二个参数是一个与权限相关的字符串，这里传null就行了。</p>
<p>如何定义有序广播的接收者的优先级呢？通过<code>android:priority</code>可以设置优先级。需要修改AndroidManifest.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.broadreceiverdemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 添加权限 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECEIVE_BOOT_COMPLETED"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        ...</div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">receiver</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".MyBroadcastReceiver"</span></div><div class="line">            <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</div><div class="line">            <span class="comment">&lt;!--修改优先级--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--添加自定义的广播接收器--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.MY_BROADCAST"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>那么，当接收者接到广播，也已经处理好逻辑后，如果接收者不想让广播继续传递了呢？这时候，需要调用<code>abdortBroadcast()</code>方法，来中断传播。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        Toast.makeText(context,<span class="string">"接收到自定义的广播"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">        <span class="comment">//中断传输</span></div><div class="line">        abortBroadcast();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="本地广播"><a href="#本地广播" class="headerlink" title="本地广播"></a>本地广播</h3><p>前面我所说的发送的广播都是全局广播，这些广播可以被其他任何应用程序接收到，并且我们也可以接收来自其他应用的广播，这样容易引起安全问题。</p>
<p>当然，Android已经为我们想到了这点，利用本地广播就可以解决广播的安全问题，而且这类广播只能在应用程序内部进行传递，并且广播接收者只能接收来自本应用程序发出的广播。</p>
<p>本地广播并不复杂，它主要使用<code>LocalBroadcastManager</code>来管理广播，并且提供了发送广播和注册广播接收器的方法，我们来看如何使用:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LocalBroadcastManager mLocalBroadcastManager;</div><div class="line">    <span class="keyword">private</span> LocalReceiver mLocalReceiver;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="comment">//创建本地广播管理实例</span></div><div class="line">        mLocalBroadcastManager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>);</div><div class="line">        Button sendLocalButton = (Button) findViewById(R.id.sendLocalButton);</div><div class="line">        sendLocalButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.guiyongdong.LOCAL_BROADCAST"</span>);</div><div class="line">                <span class="comment">//发送本地广播</span></div><div class="line">                mLocalBroadcastManager.sendBroadcast(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//注册广播</span></div><div class="line">        IntentFilter intentFilter1 = <span class="keyword">new</span> IntentFilter();</div><div class="line">        intentFilter.addAction(<span class="string">"com.guiyongdong.LOCAL_BROADCAST"</span>);</div><div class="line">        mLocalReceiver = <span class="keyword">new</span> LocalReceiver();</div><div class="line">        mLocalBroadcastManager.registerReceiver(mLocalReceiver,intentFilter);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LocalReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">            Toast.makeText(context,<span class="string">"接收到本地广播"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        mLocalBroadcastManager.unregisterReceiver(mLocalReceiver);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：本地广播是无法通过静态注册的方式来接收的。</p>
<p>总结一下本地广播的几点优势：</p>
<ul>
<li>可以明确知道正在发送的广播不会离开我们的程序，因此不用担心数据泄露。</li>
<li>其他的程序无法将广播发送到我们程序内部，因此不用担心会有安全漏洞的隐患。</li>
<li>发送本地广播比全局广播更加高效。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提到广播，因为我是农村的，首先想到的就是我们村大队的喇叭，如果平常有交电费，或者重要的事情，这个喇叭就会响起，全村的都能听见，可能有时候邻村的也能听见，足见广播的推送面积之大。&lt;/p&gt;
&lt;p&gt;提到广播这种机制，学过iOS的都知道通知，我想这两种机制应该都是类似的。在iOS中，我们如果想监听系统的某些事件，比如APP退到后台，我们只需要在把监听对象添加到系统的通知中心中，并且关注APP退到后台的事件，就可以随时监听了。通知还有个好处就是，我们可以夸线程，夸界面的处理事件。&lt;/p&gt;
&lt;p&gt;那么，在Android中，广播又是怎么回事呢，这篇文章就来详细分析一下广播在Android中的应用。(ps:广播还有另外一个名字——全局大喇叭~~)&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之RecyclerView</title>
    <link href="http://www.guiyongdong.com/2017/03/22/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BRecyclerView/"/>
    <id>http://www.guiyongdong.com/2017/03/22/一天一Android之RecyclerView/</id>
    <published>2017-03-22T09:29:15.000Z</published>
    <updated>2017-03-23T03:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>ListView由于其强大的功能，已经能满足我们绝大功能的开发，但是，当我们的数据比较复杂，条目也比较复杂的时候，如果我们优化的不好，那么ListView的性能就会非常差。还有，ListView只能实现数据纵向滚动的效果，如果我们想实现横向滚动的话，ListView做不到。</p>
<p>为此，Android提供了一个更强大的滚动控件——RecyclerView。它可以说是一个增强版的ListView，不仅可以轻松实现和ListView同样的效果，还优化了ListView中存在的各种不足之处，目前Android官方更加推荐我们使用RecyclerView。</p>
<a id="more"></a>
<h3 id="RecyclerView的基本用法"><a href="#RecyclerView的基本用法" class="headerlink" title="RecyclerView的基本用法"></a>RecyclerView的基本用法</h3><p>和约束布局一样，RecyclerView也属于新增的控件，所以我们需要添加在build.gradle中相应的依赖库。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile <span class="string">'com.android.support:recyclerview-v7:25.3.0'</span></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="纵向滚动"><a href="#纵向滚动" class="headerlink" title="纵向滚动"></a>纵向滚动</h5><p>我们先来模拟一下ListView的纵向滚动</p>
<p>创建RecyclerView的布局：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.recyclerviewdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/recyclerView"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>同样的，我们创建和上一篇ListView一样的dog_item布局和Dog实体类，这里就不再贴出代码。</p>
<p>创建适配器DogAdapter:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">DogAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Dog&gt; mDogList;</div><div class="line">    </div><div class="line">    <span class="comment">//定义一个内部类ViewHolder，它继承于RecyclerView.ViewHolder</span></div><div class="line">    <span class="keyword">static</span>  <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        ImageView dogImage;</div><div class="line">        TextView dogName;</div><div class="line">        <span class="comment">//构造函数，需要传入一个View</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(view);</div><div class="line">            dogImage = (ImageView) view.findViewById(R.id.dogImage);</div><div class="line">            dogName = (TextView) view.findViewById(R.id.dogName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//构造函数，需要知道数据源</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">DogAdapter</span><span class="params">(List&lt;Dog&gt; dogList)</span></span>&#123;</div><div class="line">        mDogList = dogList;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写父类方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.dog_item,parent,<span class="keyword">false</span>);</div><div class="line">        ViewHolder viewHolder = <span class="keyword">new</span> ViewHolder(view);</div><div class="line">        <span class="keyword">return</span> viewHolder;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写父类方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDogList.size();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写父类方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        Dog dog = mDogList.get(position);</div><div class="line">        holder.dogName.setText(dog.getName());</div><div class="line">        holder.dogImage.setImageResource(dog.getImage());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>是不是看上去和我们之前写的ListView的适配器不一样，感觉好复杂啊。</p>
<ul>
<li>首先我们定义了一个内部类ViewHolder，ViewHolder继承于RecyclerView.ViewHolder。然后ViewHolder的构造函数中需要传入一个View参数，通常这个View就是我们的item条目，我们就可以使用<code>findViewById()</code>方法来获取布局中的ImageView和TextView的实例了。</li>
<li>在DogAdapter中也定义了一个构造函数，需要传入一个Dog的list集合，因为Adapter需要知道现实哪些数据。</li>
<li>由于DogAdapter是继承于RecyclerView.ViewHolder，所以我们需要重新父类的三个方法：<code>onCreateViewHolder()</code>、<code>OnBindViewHolder()</code>和<code>getItemCount()</code>。</li>
<li><code>onCreateViewHolder()</code> 这个方法是用于创建ViewHolder实例，我们在这个方法中会加载item条目布局，并创建ViewHolder实例对象，并将条目View传入到ViewHolder的构造函数中，最后返回ViewHolder。</li>
<li><code>OnBindViewHolder()</code> 这个方法是用于对item条目的数据进行赋值，这个方法会在每个条目滚动到屏幕内的时候执行，这里我们根据position获取到Dog实例，并将数据设置给ViewHolder的dogImage和dogName。</li>
<li><code>getItemCount()</code> 这个方法是告诉RecyclerView一共有多少行的item，我们这里直接返回<code>mDogList</code>的长度。</li>
</ul>
<p>我们看看在<code>MainActivity</code>中如何使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Dog&gt; mDogArrayList;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initDogList();</div><div class="line">        mRecyclerView = (RecyclerView) findViewById(R.id.recyclerView);</div><div class="line">        <span class="comment">//创建一个布局管理类</span></div><div class="line">        LinearLayoutManager linearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">        mRecyclerView.setLayoutManager(linearLayoutManager);</div><div class="line">        <span class="comment">//创建Adapter</span></div><div class="line">        DogAdapter dogAdapter = <span class="keyword">new</span> DogAdapter(mDogArrayList);</div><div class="line">        mRecyclerView.setAdapter(dogAdapter);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initDogList</span><span class="params">()</span> </span>&#123;</div><div class="line">        mDogArrayList = <span class="keyword">new</span> ArrayList&lt;Dog&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">30</span>; i++)&#123;</div><div class="line">            Dog dog = <span class="keyword">new</span> Dog();</div><div class="line">            dog.setName(<span class="string">"小狗"</span>+i);</div><div class="line">            dog.setImage(R.drawable.dog);</div><div class="line">            mDogArrayList.add(dog);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里和ListView有些不同，我们在这里创建了一个<code>LinearLayoutManager</code>实例对象，<code>LinearLayoutManager</code>是线性布局的意思，可以实现和ListView类似的效果。</p>
<p>最终运行效果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android12.png?raw=true" width="375"><br></div>


<h5 id="横向滚动"><a href="#横向滚动" class="headerlink" title="横向滚动"></a>横向滚动</h5><p>我们知道ListView不能实现横向滚动，那么RecyclerView如何实现的呢？</p>
<p>这里我们需要先修改一下dog_item中的布局:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/dogImage"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/dog"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/dogName"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们把布局方式改为垂直方向，并把宽度设置为根据内容的宽度调整，由于我把TextView的宽度设置为match_parent，所以item的宽度会根据图片的宽度缩放。</p>
<p>这里我们只在<code>MainActivity</code>中加入一行代码<code>linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL)</code>就可实现横向滚动。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Dog&gt; mDogArrayList;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initDogList();</div><div class="line">        mRecyclerView = (RecyclerView) findViewById(R.id.recyclerView);</div><div class="line">        <span class="comment">//创建一个布局管理类</span></div><div class="line">        LinearLayoutManager linearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">        linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);</div><div class="line">        mRecyclerView.setLayoutManager(linearLayoutManager);</div><div class="line">        <span class="comment">//创建Adapter</span></div><div class="line">        DogAdapter dogAdapter = <span class="keyword">new</span> DogAdapter(mDogArrayList);</div><div class="line">        mRecyclerView.setAdapter(dogAdapter);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initDogList</span><span class="params">()</span> </span>&#123;</div><div class="line">        mDogArrayList = <span class="keyword">new</span> ArrayList&lt;Dog&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">30</span>; i++)&#123;</div><div class="line">            Dog dog = <span class="keyword">new</span> Dog();</div><div class="line">            dog.setName(<span class="string">"小狗"</span>+i);</div><div class="line">            dog.setImage(R.drawable.dog);</div><div class="line">            mDogArrayList.add(dog);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>LinearLayoutManager</code>的滚动方向默认是垂直方向，我们只需要调用它的<code>setOrientation</code>方法来设置布局的排列方向即可，<code>LinearLayoutManager.HORIZONTAL</code>表示横向排列，<code>LinearLayoutManager.VERTICAL</code>表示纵向排列。</p>
<p>效果图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android13.png?raw=true" width="375"><br></div>


<p>除了<code>LinearLayoutManager</code>外，RecyclerView还为我们提供了<code>GridLayoutManager</code>和<code>StaggeredGridLayoutManager</code>这两种内置的布局排列方式。<code>GridLayoutManager</code>可以用于实现网格布局，<code>StaggeredGridLayoutManager</code>可以用于实现瀑布流布局。</p>
<h3 id="瀑布流"><a href="#瀑布流" class="headerlink" title="瀑布流"></a>瀑布流</h3><p>说起瀑布流，学过iOS的都知道，实现瀑布流是多么复杂的事，需要自己实现布局类，并计算坐标。好在Android不一样，它早就给我们提供了瀑布流布局类<code>StaggeredGridLayoutManager</code>，我们来看看它是如何使用的。</p>
<p>我们在创造数据源的时候，需要把文字的多少设置为5-50的随机数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Dog&gt; mDogArrayList;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initDogList();</div><div class="line">        mRecyclerView = (RecyclerView) findViewById(R.id.recyclerView);</div><div class="line">        <span class="comment">//创建一个布局管理类</span></div><div class="line">        StaggeredGridLayoutManager staggeredGridLayoutManager = <span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">3</span>,StaggeredGridLayoutManager.VERTICAL);</div><div class="line">        mRecyclerView.setLayoutManager(staggeredGridLayoutManager);</div><div class="line">        <span class="comment">//创建Adapter</span></div><div class="line">        DogAdapter dogAdapter = <span class="keyword">new</span> DogAdapter(mDogArrayList);</div><div class="line">        mRecyclerView.setAdapter(dogAdapter);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initDogList</span><span class="params">()</span> </span>&#123;</div><div class="line">        mDogArrayList = <span class="keyword">new</span> ArrayList&lt;Dog&gt;();</div><div class="line">        Random random = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">30</span>; i++)&#123;</div><div class="line">            Dog dog = <span class="keyword">new</span> Dog();</div><div class="line">            StringBuffer name = <span class="keyword">new</span> StringBuffer(<span class="string">"小狗"</span>);</div><div class="line">            <span class="keyword">int</span> len = random.nextInt(<span class="number">50</span>)+<span class="number">5</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;len; j++)&#123;</div><div class="line">                name.append(<span class="string">"小狗"</span>);</div><div class="line">            &#125;</div><div class="line">            dog.setName(name.toString());</div><div class="line">            dog.setImage(R.drawable.dog);</div><div class="line">            mDogArrayList.add(dog);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先我创建了一个<code>StaggeredGridLayoutManager</code>的实例，<code>StaggeredGridLayoutManager</code>的构造函数需要接收两个参数，第一个参数用于指定布局的列数，传入3表示会把布局分为3列，第二个参数用于指定布局的排列方式，<code>StaggeredGridLayoutManager.VERTICAL</code>表示纵向排列，<code>StaggeredGridLayoutManager.HORIZONTAL</code>表示横向排列。</p>
<p>效果图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android14.png?raw=true" width="375"><br></div>


<p>想不到，Android的瀑布流实现如此的简单，我们只需要更改布局类就能实现，好方便啊，真的希望iOS也能借鉴Android的这种方式。</p>
<h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><p>RecyclerView并没有提供类似于<code>setOnItemClickListener()</code>这样的注册监听器方法，我们需要自己动手实现点击事件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">DogAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Dog&gt; mDogList;</div><div class="line"></div><div class="line">    <span class="comment">//定义一个内部类ViewHolder，它继承于RecyclerView.ViewHolder</span></div><div class="line">    <span class="keyword">static</span>  <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        ImageView dogImage;</div><div class="line">        TextView dogName;</div><div class="line">        <span class="comment">//新增一个成员变量 来保存当前item</span></div><div class="line">        View dogView;</div><div class="line">        <span class="comment">//构造函数，需要传入一个View</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(view);</div><div class="line">            dogView = view;</div><div class="line">            dogImage = (ImageView) view.findViewById(R.id.dogImage);</div><div class="line">            dogName = (TextView) view.findViewById(R.id.dogName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//构造函数，需要知道数据源</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">DogAdapter</span><span class="params">(List&lt;Dog&gt; dogList)</span></span>&#123;</div><div class="line">        mDogList = dogList;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写父类方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.dog_item,parent,<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">final</span> ViewHolder viewHolder = <span class="keyword">new</span> ViewHolder(view);</div><div class="line">        <span class="comment">//注册item点击事件</span></div><div class="line">        viewHolder.dogView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> position = viewHolder.getAdapterPosition();</div><div class="line">                Dog dog = mDogList.get(position);</div><div class="line">                Toast.makeText(v.getContext(),dog.getName(),Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//注册图片点击事件</span></div><div class="line">        viewHolder.dogImage.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> position = viewHolder.getAdapterPosition();</div><div class="line">                Dog dog = mDogList.get(position);</div><div class="line">                Toast.makeText(v.getContext(),<span class="string">"第"</span>+position+<span class="string">"个狗的头像被点击"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> viewHolder;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写父类方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDogList.size();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写父类方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        Dog dog = mDogList.get(position);</div><div class="line">        holder.dogName.setText(dog.getName());</div><div class="line">        holder.dogImage.setImageResource(dog.getImage());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我先是在ViewHolder中心增一个成员变量<code>dogView</code>来保存当前的item，然后在<code>onCreateViewHolder</code>方法中添加事件监听。通过<code>ViewHolder</code>拿到点击的position，然后就可以获取Dog实例，接下来就可以更加业务来处理了，我们这里只是简单的吐司。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>说了这么多，也只是说了RecyclerView的基本用法，关于RecyclerView的更多用法，还是去查看Android API，好了，今天的总结就到这里。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ListView由于其强大的功能，已经能满足我们绝大功能的开发，但是，当我们的数据比较复杂，条目也比较复杂的时候，如果我们优化的不好，那么ListView的性能就会非常差。还有，ListView只能实现数据纵向滚动的效果，如果我们想实现横向滚动的话，ListView做不到。&lt;/p&gt;
&lt;p&gt;为此，Android提供了一个更强大的滚动控件——RecyclerView。它可以说是一个增强版的ListView，不仅可以轻松实现和ListView同样的效果，还优化了ListView中存在的各种不足之处，目前Android官方更加推荐我们使用RecyclerView。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之ListView</title>
    <link href="http://www.guiyongdong.com/2017/03/20/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BListView/"/>
    <id>http://www.guiyongdong.com/2017/03/20/一天一Android之ListView/</id>
    <published>2017-03-20T09:31:13.000Z</published>
    <updated>2017-03-22T09:28:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>说起<code>ListView</code>，就不得不说iOS的<code>UITableView</code>，毫不夸张的说的，放在3年前，如果你去面试的时候，你说你会用<code>UITableView</code>，知道<code>UITableView</code>的代理方法，不用说了，你可以直接来上班了。</p>
<p><code>ListView</code>在Android中开发的重要性不言而喻，学好<code>ListView</code>，我想在以后的列表开发中就不用发愁了。什么是列表开发？这么说吧，在你使用的APP中，80%的都会用到列表开发，比如微信的聊天页，QQ的个人空间页。为何要用列表开发，列表开发的优越在哪里？我今天来一探究竟。</p>
<a id="more"></a>
<h3 id="ListView初体验"><a href="#ListView初体验" class="headerlink" title="ListView初体验"></a>ListView初体验</h3><p>我们先来写个小例子，根据这个小例子我们再做进一步的介绍。我们先在xml中创建一个ListView，这里我直接使用<code>ConstraintLayout</code>约束布局。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.listviewdemo2.MainActivity"</span>&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"368dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"495dp"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/listView"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>MainActivity的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ListView mListView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mListView = (ListView) findViewById(R.id.listView);</div><div class="line">        String[] data = &#123;<span class="string">"A"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"A"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"A"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"A"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"A"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"A"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>&#125;;</div><div class="line"></div><div class="line">        ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(MainActivity.<span class="keyword">this</span>,android.R.layout.simple_list_item_1,data);</div><div class="line">        mListView.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android9.png?raw=true" width="375"><br></div>


<h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><p>在Android所有常用的原生控件当中，用法最复杂的应该就是ListView了，它专门用于处理那种内容元素很多，手机屏幕无法展示出所有内容的情况。ListView可以使用列表的形式来展示内容，超出屏幕部分的内容只需要通过手指滑动就可以移动到屏幕内了。</p>
<p>我们先看看ListView的继承体系：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/3278692-0d4f5b5f237acbd6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ul>
<li><code>android:divider</code> 在列表条目之间显示的图片或者颜色(drawable或color)</li>
<li><code>android:dividerHeight</code> 用来指定divider的高度</li>
<li><code>android:scrollbars</code> 设置滚动条状态，不需要滚动条时，设置为none</li>
<li><code>android:listSelector</code> 设置条目选中后的颜色，可设置为#00000000或者@android:color/transparent 取消选中色</li>
<li><code>android:footerDividersEnabled</code> 当设置为false时，ListView将不会在各个footer之间绘制divider，默认为true</li>
<li><code>android:headerDividersEnabled</code> 当设为false时，ListView将不会在各个header之间绘制divider，默认为true</li>
</ul>
<p>其他继承父类的属性就不说了。</p>
<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul>
<li><code>void addFooterView(View v)</code> 添加一个固定在列表底部的View</li>
<li><code>boolean removeFooterView(View v)</code> 删除一个之前添加的FooterView，参数为欲删除的视图，返回是否删除成功</li>
<li><code>void addHeaderView(View v)</code> 添加一个固定在列表顶部的View</li>
<li><code>boolean removeHeaderView(View v)</code> 删除一个之前添加的HeaderView，参数为欲删除的视图，返回是否删除成功</li>
<li><code>void setAdapter(ListAdapter adapter)</code> 为ListView绑定Adapter</li>
<li><code>ListAdapter getAdapter()</code> 返回ListView正在使用的Adapter</li>
<li><code>void setEmptyView(View emptyView)</code> 当数据的个数为0的时候显示一个提示视图</li>
</ul>
<p>通过上面一个简单的例子我们可以看出，ListView如果想要显示数据，必须需要一个Adapter来适配。Android为什么这么设计呢？如果学习过iOS的同学都知道，我们在使用UITableView的时候，一定会实现它的数据源代理方法，在代理方法中我们会返回条目数和条目View。这种设计方法有效的分离了UITableView和数据源的直接打交道，让数据源的显示交于用户来选择。Android也是如此。</p>
<p>ListView只承担交互和展示工作，至于这些数据来源于哪里，ListView并不关心。于是就有了Adapter这样一个机制的出现。Adapter是适配器的意思，它在ListView和数据源之间起到了一个桥梁的作用，ListView会借助Adapter这个桥梁去访问真正的数据源，因为Adapter的接口都是统一的，因此我们可以通过实现接口来定制各种类型的Adapter。另外系统也为我们实现了一些常用的Adapter，比如我们上面用到的ArrayAdapter等。</p>
<h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><p>我们先来看看继承体系：</p>
<div align="center"><br><img src="http://img.blog.csdn.net/20150626100341626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGl0Z2FveGluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"><br></div>

<p>Adapter定义的抽象函数主要包括：</p>
<ul>
<li><code>void registerDataSetObserver(DataSetObserver observer)</code> 添加数据源变化的observer，如增加、删除等将会执行</li>
<li><code>void unregisterDataSetObserver(DataSetObserver observer)</code>  取消注册的observer</li>
<li><code>int getCount()</code> 显示有多少个数据项 即adapter有多少个条目</li>
<li><code>Object getItem(int position)</code> 返回数据集中position位置所对应的数据项</li>
<li><code>long getItemId(int position)</code> 返回position位置所对应的ID号，通常即为position</li>
<li><code>View getView(int position, View convertView, ViewGroup parent)</code> 核心函数，返回position数据项对应的条目View</li>
</ul>
<p>上个示例我们使用的ArrayAdapter，他只能用来显示TextView，如果我们想显示更多的不同种类的条目，我们需要继承<code>BaseAdapter</code>，并重写相关方法，我们现在来看看如何重写。</p>
<p>先上示例图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android10.png?raw=true"><br></div>


<p>我们新建一个Dog类，有<code>name</code>和<code>imageId</code>两个成员变量，分别表示狗的名字和图片资源（这里使用本地图片）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> imageId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> imageId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.imageId = imageId;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">getImageId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> imageId;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在新建一个DogAdapter继承于ArrayAdapter<dog>，因为我们这里的数据不复杂，直接继承ArrayAdapter，如果我们的数据是一个更复杂的嵌套很深的模型，我们可以直接继承BaseAdapter。</dog></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogAdapter</span> <span class="keyword">extends</span> <span class="title">ArrayAdapter</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> resourceId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DogAdapter</span><span class="params">(Context context, <span class="keyword">int</span> resourceId, List&lt;Dog&gt; dogList)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, resourceId, dogList);</div><div class="line">        <span class="comment">// 记录当前布局资源</span></div><div class="line">        <span class="keyword">this</span>.resourceId = resourceId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, @Nullable View convertView, @NonNull ViewGroup parent)</span> </span>&#123;</div><div class="line">        Dog dog = getItem(position);<span class="comment">//获取当前Dog实例</span></div><div class="line">        View view;</div><div class="line">        ViewHolder viewHolder;<span class="comment">//tag缓存</span></div><div class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>)&#123;</div><div class="line">            view = LayoutInflater.from(getContext()).inflate(resourceId,parent,<span class="keyword">false</span>);</div><div class="line">            viewHolder = <span class="keyword">new</span> ViewHolder();</div><div class="line">            viewHolder.mImageView = (ImageView) view.findViewById(R.id.dogImage);</div><div class="line">            viewHolder.mTextView = (TextView) view.findViewById(R.id.dogName);</div><div class="line">            view.setTag(viewHolder);<span class="comment">//设置tag绑定</span></div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            view = convertView;</div><div class="line">            viewHolder = (ViewHolder) view.getTag();</div><div class="line">        &#125;</div><div class="line">        ImageView imageView = viewHolder.mImageView;</div><div class="line">        TextView textView = viewHolder.mTextView;</div><div class="line">        imageView.setImageResource(dog.getImageId());</div><div class="line">        textView.setText(dog.getName());</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        ImageView mImageView;</div><div class="line">        TextView mTextView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：我们都知道ListView的强大，它强大就强大在无论我们设置多少条数据源，ListView都不会完全的把这些条目都创建，而是通过复用已经消失在屏幕的条目来展示新的条目。<br>在<code>getView</code>函数中，有个<code>convertView</code>参数，如果它不为空，就表示ListView的缓存池中有可复用的条目，我们直接取来用就行。而且我们还创建了一个内部类<code>ViewHolder</code>，声明了两个属性<code>mImageView</code>和<code>mTextView</code>，我们可以给View设置tag，方便下次给View赋值的时候，不需要再次调用<code>findViewById</code>方法来重新查找属性。</p>
<p>再来看我们如何使用DogAdapter:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ListView mListView;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Dog&gt; mDogArrayList;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">//初始化数据源</span></div><div class="line">        initDogArrayList();</div><div class="line">        mListView = (ListView) findViewById(R.id.listView);</div><div class="line">        DogAdapter dogAdapter = <span class="keyword">new</span> DogAdapter(<span class="keyword">this</span>,R.layout.dog_item,mDogArrayList);</div><div class="line">        mListView.setAdapter(dogAdapter);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="comment">//模拟数据 </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDogArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">        mDogArrayList = <span class="keyword">new</span> ArrayList&lt;Dog&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">30</span>; i++)&#123;</div><div class="line">            Dog dog = <span class="keyword">new</span> Dog(<span class="string">"小狗"</span>+i,R.drawable.dog);</div><div class="line">            mDogArrayList.add(dog);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><h5 id="触摸监听-OnTouchListener"><a href="#触摸监听-OnTouchListener" class="headerlink" title="触摸监听 OnTouchListener"></a>触摸监听 OnTouchListener</h5><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line">mListView.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (event.getAction())&#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                <span class="comment">//触摸时操作</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                <span class="comment">//移动是操作</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                <span class="comment">//手指离开时操作</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="滑动监听-OnScrollListener"><a href="#滑动监听-OnScrollListener" class="headerlink" title="滑动监听 OnScrollListener"></a>滑动监听 OnScrollListener</h5><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//滑动监听</span></div><div class="line">mListView.setOnScrollListener(<span class="keyword">new</span> AbsListView.OnScrollListener() &#123;</div><div class="line">    <span class="comment">//滚动状态发生改变</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span> </span>&#123;</div><div class="line">       <span class="keyword">switch</span> (scrollState)&#123;</div><div class="line">           <span class="keyword">case</span> SCROLL_STATE_IDLE:</div><div class="line">               <span class="comment">//停止滑动</span></div><div class="line">               Log.d(<span class="string">"gg"</span>,<span class="string">"停止滑动了"</span>);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> SCROLL_STATE_TOUCH_SCROLL:</div><div class="line">               <span class="comment">//正在滚动</span></div><div class="line">               Log.d(<span class="string">"gg"</span>,<span class="string">"正在滑动了"</span>);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> SCROLL_STATE_FLING:</div><div class="line">               <span class="comment">//手指快速滑动，手指离开屏幕后由于惯性继续滑动</span></div><div class="line">               Log.d(<span class="string">"gg"</span>,<span class="string">"惯性滑动了"</span>);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">default</span>:</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//滚动时一直调用</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScroll</span><span class="params">(AbsListView view, <span class="keyword">int</span> firstVisibleItem, <span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"gg"</span>,<span class="string">"混动了"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="条目点击-OnItemClickListener"><a href="#条目点击-OnItemClickListener" class="headerlink" title="条目点击 OnItemClickListener"></a>条目点击 OnItemClickListener</h5><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line">mListView.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"gg"</span>,<span class="string">"点击了第"</span>+position+<span class="string">"条目"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="仿微信聊天界面"><a href="#仿微信聊天界面" class="headerlink" title="仿微信聊天界面"></a>仿微信聊天界面</h3><p>说了这么多，再来做一个例子，仿一下微信的聊天界面。</p>
<p>先看布局，这里依旧使用约束布局：</p>
<h5 id="ListView布局"><a href="#ListView布局" class="headerlink" title="ListView布局"></a>ListView布局</h5><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.listviewdemo2.WXChatActivity"</span>&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/wx_listView"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toTopOf</span>=<span class="string">"@+id/wx_send"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/wx_send"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"44dp"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"发送"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/wx_editText"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"44dp"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.501"</span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toLeftOf</span>=<span class="string">"@+id/wx_send"</span></div><div class="line">        <span class="attr">android:hint</span>=<span class="string">"说些什么吧"</span></div><div class="line">        <span class="attr">android:maxLines</span>=<span class="string">"1"</span>/&gt;</div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="item布局"><a href="#item布局" class="headerlink" title="item布局"></a>item布局</h5><p>这里我们把两种布局都定义在一个xml文件中，稍后会根据代码来决定隐藏哪种类型。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:padding</span>=<span class="string">"10dp"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--好友的信息--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/wx_item_left"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"60dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/left_item_image"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"你打我试试"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@drawable/message_left"</span></div><div class="line">            <span class="attr">android:layout_marginLeft</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"left|center"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/wx_item_left_textView"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--我的消息--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/wx_item_right"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"60dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/right_item_imgae"</span></div><div class="line">            <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/wx_item_right_image"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/wx_item_right_textView"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"打你就打你"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@drawable/message_right"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center|left"</span></div><div class="line">            <span class="attr">android:paddingLeft</span>=<span class="string">"8dp"</span></div><div class="line">            <span class="attr">android:paddingRight</span>=<span class="string">"25dp"</span></div><div class="line">            <span class="attr">android:layout_toLeftOf</span>=<span class="string">"@+id/wx_item_right_image"</span></div><div class="line">            /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="消息实体-MSG类"><a href="#消息实体-MSG类" class="headerlink" title="消息实体 MSG类"></a>消息实体 MSG类</h5><p>我们再创建一个消息实体，来存储消息信息。这里我们定义了两种消息类型，<code>TYPE_RECEIVED</code>表示接收的消息，<code>TYPE_SENT</code>表示发送的消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WXMsg</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_RECEIVED = <span class="number">0</span>; <span class="comment">//接收类型</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_SENT = <span class="number">1</span>; <span class="comment">//发送类型</span></div><div class="line">    <span class="keyword">private</span> String content;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WXMsg</span><span class="params">(String content, <span class="keyword">int</span> type)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.content = content;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> content;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="消息适配器-WXMsgAdapter"><a href="#消息适配器-WXMsgAdapter" class="headerlink" title="消息适配器 WXMsgAdapter"></a>消息适配器 WXMsgAdapter</h5><p>重点来了，我们会根据消息的类型来决定显示哪种布局方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WXAdapter</span> <span class="keyword">extends</span> <span class="title">ArrayAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> resourceId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WXAdapter</span><span class="params">(Context context, <span class="keyword">int</span> resourceId, List&lt;WXMsg&gt; msgArrayList)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, resourceId, msgArrayList);</div><div class="line">        <span class="keyword">this</span>.resourceId = resourceId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, @Nullable View convertView, @NonNull ViewGroup parent)</span> </span>&#123;</div><div class="line">        View view;</div><div class="line">        WXViewHolder wxViewHolder;</div><div class="line">        WXMsg msg = (WXMsg) getItem(position);</div><div class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>)&#123;</div><div class="line">            view = LayoutInflater.from(getContext()).inflate(resourceId,<span class="keyword">null</span>);</div><div class="line">            wxViewHolder = <span class="keyword">new</span> WXViewHolder(view);</div><div class="line">            view.setTag(wxViewHolder);</div><div class="line">        &#125;<span class="keyword">else</span>  &#123;</div><div class="line">            view = convertView;</div><div class="line">            wxViewHolder = (WXViewHolder) view.getTag();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (msg.getType() == WXMsg.TYPE_RECEIVED) &#123;</div><div class="line">            <span class="comment">//如果是收到的消息  显示左边的消息布局，隐藏右边的消息布局</span></div><div class="line">            wxViewHolder.rightLinearLayout.setVisibility(View.GONE);</div><div class="line">            wxViewHolder.leftLinearLayout.setVisibility(View.VISIBLE);</div><div class="line">            wxViewHolder.leftMsg.setText(msg.getContent());</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (msg.getType() == WXMsg.TYPE_SENT) &#123;</div><div class="line">            <span class="comment">//如果是发送的消息  显示右边的消息布局，隐藏左边的消息布局</span></div><div class="line">            wxViewHolder.rightLinearLayout.setVisibility(View.VISIBLE);</div><div class="line">            wxViewHolder.leftLinearLayout.setVisibility(View.GONE);</div><div class="line">            wxViewHolder.rightMsg.setText(msg.getContent());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WXViewHolder</span> </span>&#123;</div><div class="line">        LinearLayout leftLinearLayout;</div><div class="line">        RelativeLayout rightLinearLayout;</div><div class="line">        TextView leftMsg;</div><div class="line">        TextView rightMsg;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WXViewHolder</span><span class="params">(View view)</span></span>&#123;</div><div class="line">            leftLinearLayout = (LinearLayout) view.findViewById(R.id.wx_item_left);</div><div class="line">            rightLinearLayout = (RelativeLayout) view.findViewById(R.id.wx_item_right);</div><div class="line">            leftMsg = (TextView) view.findViewById(R.id.wx_item_left_textView);</div><div class="line">            rightMsg = (TextView) view.findViewById(R.id.wx_item_right_textView);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在WXChatActivity中这样用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WXChatActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ListView mListView;</div><div class="line">    <span class="keyword">private</span> Button mSendButton;</div><div class="line">    <span class="keyword">private</span> EditText mEditText;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;WXMsg&gt; mWXMsgArrayList;</div><div class="line">    <span class="keyword">private</span> WXAdapter mWXAdapter;</div><div class="line">    </div><div class="line">    <span class="comment">//模拟一个回复消息池</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span>  String[] allmsgArray = &#123;<span class="string">"你信不信我打你！"</span>,<span class="string">"现在的年轻人一言不合就斗图~"</span>,<span class="string">"看过一千多部岛国成人片，从人到动物，大妈到熟妇，御姐到萝莉，会一千多种姿势，上百种插法，告诉你，不要惹我，不然你怎么怀孕的都不知道"</span></div><div class="line">                                            ,<span class="string">"你放学别走！"</span>,<span class="string">"不服是不是 不服来打我啊!"</span>&#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_wxchat);</div><div class="line"></div><div class="line">        mListView = (ListView) findViewById(R.id.wx_listView);</div><div class="line">        mSendButton = (Button) findViewById(R.id.wx_send);</div><div class="line">        mEditText = (EditText) findViewById(R.id.wx_editText);</div><div class="line"></div><div class="line">        mWXMsgArrayList = <span class="keyword">new</span> ArrayList&lt;WXMsg&gt;();</div><div class="line">        <span class="comment">//先随机添加一条接收的消息</span></div><div class="line">        addReceivedMsg();</div><div class="line">        mWXAdapter = <span class="keyword">new</span> WXAdapter(<span class="keyword">this</span>,R.layout.wx_item,mWXMsgArrayList);</div><div class="line">        mListView.setAdapter(mWXAdapter);</div><div class="line"></div><div class="line">        <span class="comment">//监听按钮点击</span></div><div class="line">        mSendButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                String content = mEditText.getText().toString();</div><div class="line">                <span class="keyword">if</span> (!<span class="string">""</span>.equals(content))&#123;</div><div class="line">                    <span class="comment">//添加发送信息</span></div><div class="line">                    WXMsg msg = <span class="keyword">new</span> WXMsg(content,WXMsg.TYPE_SENT);</div><div class="line">                    mWXMsgArrayList.add(msg);</div><div class="line">                    <span class="comment">//添加接收信息</span></div><div class="line">                    addReceivedMsg();</div><div class="line">                    <span class="comment">//有消息更新 刷新界面</span></div><div class="line">                    mWXAdapter.notifyDataSetChanged();</div><div class="line">                    <span class="comment">//ListView滚动到最后一行</span></div><div class="line">                    mListView.smoothScrollToPosition(mWXMsgArrayList.size()-<span class="number">1</span>);</div><div class="line">                    <span class="comment">//清空输入框</span></div><div class="line">                    mEditText.setText(<span class="string">""</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//随机添加接收消息</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addReceivedMsg</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> index = <span class="keyword">new</span> Random().nextInt(allmsgArray.length);</div><div class="line">        String content = allmsgArray[index];</div><div class="line">        WXMsg msg = <span class="keyword">new</span> WXMsg(content,WXMsg.TYPE_RECEIVED);</div><div class="line">        mWXMsgArrayList.add(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android11.png?raw=true"><br></div>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>写完微信的小例子，心里的成就感还是很强的，ListView的强大还远不止如此，因为我知道iOS的UITableView的重要性，相信在以后的开发中我会经常和ListView打交道的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说起&lt;code&gt;ListView&lt;/code&gt;，就不得不说iOS的&lt;code&gt;UITableView&lt;/code&gt;，毫不夸张的说的，放在3年前，如果你去面试的时候，你说你会用&lt;code&gt;UITableView&lt;/code&gt;，知道&lt;code&gt;UITableView&lt;/code&gt;的代理方法，不用说了，你可以直接来上班了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ListView&lt;/code&gt;在Android中开发的重要性不言而喻，学好&lt;code&gt;ListView&lt;/code&gt;，我想在以后的列表开发中就不用发愁了。什么是列表开发？这么说吧，在你使用的APP中，80%的都会用到列表开发，比如微信的聊天页，QQ的个人空间页。为何要用列表开发，列表开发的优越在哪里？我今天来一探究竟。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之布局</title>
    <link href="http://www.guiyongdong.com/2017/03/18/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8B%E5%B8%83%E5%B1%80/"/>
    <id>http://www.guiyongdong.com/2017/03/18/一天一Android之布局/</id>
    <published>2017-03-18T07:40:40.000Z</published>
    <updated>2017-03-20T10:36:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天主要说说布局。我在看Android的任何内容的时候，心中总要和iOS进行一番比较，就说布局吧，在iOS中，我们一般直接使用<code>frame</code>计算、AutoLayout约束布局。在Android的世界中，一般使用xml布局文件来进行布局，用到的布局方式有四种：线性布局、相对布局、帧布局、百分比布局。还有一种是直接使用图形化添加约束：ConstraintLayout。为何Android的布局方式如此的多，主要是因为Android屏幕的碎片化，不像苹果就那几款手机。</p>
<a id="more"></a>
<h3 id="线性布局-LinearLayout"><a href="#线性布局-LinearLayout" class="headerlink" title="线性布局-LinearLayout"></a>线性布局-LinearLayout</h3><p>LinearLayout又称作线性布局，正如它的名字所描述的一样，这个布局会将它所包含的控件在线性方向上依次排列。线性布局的两种排法:</p>
<ul>
<li><p>从左到右 <code>android:orientation=&quot;horizontal&quot;</code></p>
</li>
<li><p>从上到下 <code>android:orientation=&quot;vertical&quot;</code></p>
</li>
</ul>
<p>默认的布局方向为：horizontal，这里需要注意，如果LinearLayout的排列方向是<code>horizontal</code>，内部的控件就绝不能将宽度指定为<code>match_parent</code>，因为这个控件会把整个水平方向占满。同理，如果排列方向为<code>vertical</code>，就不能将控件的高度设置为<code>match_parent</code>。</p>
<p><strong>layout_gravity</strong></p>
<p><code>layout_gravity</code>用于指定控件在布局中的对齐方式，当LinearLayout的排列方向是<code>vertical</code>时，只有水平方向上(center_horizontal)的对其方式才会生效，同理，当LinearLayout的排列方向是<code>horizontal</code>时，只有垂直方向上(center_vertical)的对其方式才会生效。</p>
<p><strong>layout_weight</strong></p>
<p>layout_weight这个属性允许我们使用比例的方式来指定控件的大小，例如如下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"hahahaha"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>/&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"heihei"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>/&gt;</div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>实现的效果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android6.png?raw=true" width="375"><br></div>

<p>我们看到两个按钮平分了屏幕的水平空间，当然在开发的过程中，我们可以灵活的使用此属性。</p>
<h3 id="相对布局-RelativeLayout"><a href="#相对布局-RelativeLayout" class="headerlink" title="相对布局-RelativeLayout"></a>相对布局-RelativeLayout</h3><p>RelativeLayout又称为相对布局，也是一种常用的布局，能通过相对定位的方式让控件出现在布局的任何位置，所以相对布局的属性非常的多，我们看看：</p>
<ul>
<li><p>属性值是true或false</p>
<ul>
<li><code>android:layout_centerHrizontal</code> 水平居中</li>
<li><code>android:layout_centerVertical</code> 垂直居中</li>
<li><code>android:layout_centerInparent</code> 相对于父元素完全居中</li>
<li><code>android:layout_alignParentBottom</code> 位于父元素的下边缘</li>
<li><code>android:layout_alignParentTop</code> 位于父元素的上边缘</li>
<li><code>android:layout_alignParentLeft</code> 位于父元素的左边缘</li>
<li><code>android:layout_alignParentRight</code> 位于父元素的右边缘</li>
</ul>
</li>
<li><p>属性值是<code>@id/*</code></p>
<ul>
<li><code>android:layout_below</code> 在某元素的下方</li>
<li><code>android:layout_above</code> 在某元素的上方</li>
<li><code>andorid:layout_toRightOf</code> 在某元素的右方</li>
<li><code>android:layout_toLeftOf</code> 在某元素的左方</li>
<li><code>android:layout_alignBottom</code> 和某元素下方对齐</li>
<li><code>android:layout_alignTop</code> 和某元素上方对齐</li>
<li><code>android:layout_alignRight</code> 和某元素右方对齐</li>
<li><code>android:layout_alignLeft</code> 和某元素左方对齐</li>
</ul>
</li>
<li><p>属性值是数值</p>
<ul>
<li><code>android:layout_marginLeft</code> 离某元素左边缘的距离</li>
<li><code>android:layout_marginRight</code> 离某元素右边缘的距离</li>
<li><code>android:layout_marginTop</code> 离某元素上边缘的距离</li>
<li><code>android:layout_marginBottom</code> 离某元素下边缘的距离</li>
</ul>
</li>
</ul>
<p>我写了一个简单的小例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"1"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"2"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"3"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button3"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"4"</span></div><div class="line">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"5"</span></div><div class="line">        <span class="attr">android:layout_below</span>=<span class="string">"@id/button3"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"6"</span></div><div class="line">        <span class="attr">android:layout_alignBottom</span>=<span class="string">"@id/button3"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"7"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"150dp"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"8"</span></div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_toRightOf</span>=<span class="string">"@id/button3"</span>/&gt;</div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行实例如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android7.png?raw=true" width="375"><br></div>

<p><strong>注意：</strong></p>
<ul>
<li>如果没有定义左右，那么默认在左边，如果没有定义上下，默认在上边。</li>
<li>相同位置，新定义的元素会覆盖旧的元素。例：1被2覆盖了。</li>
<li>4只定义了在父元素的下部，左右没定义，于是默认就在左边了。</li>
<li><code>android:layout_below</code>，在某元素的下部并不意味着就一定是紧随某元素，只是在下部默位置。例如：5是在3的下部，但是是在下部的默认左边。</li>
<li>6为下边缘对其3，7位marginLeft=150dp。</li>
<li>8为多个属性共同定义的结果。首先是在3的右部，然后是垂直居中，然后marginLeft=100dp得到最后位置。</li>
</ul>
<h3 id="帧布局-FrameLayout"><a href="#帧布局-FrameLayout" class="headerlink" title="帧布局-FrameLayout"></a>帧布局-FrameLayout</h3><p>FrameLayout称为帧布局，它相较于前面两种布局就简单多了，这种布局没有方便的定位方式，所有的控件都会默认摆放在布局的左上角。我们可以使用<code>layout_gravity</code>属性来指定控件在布局中的对齐方式，和LinearLayout中的用法是相似的，由于这种布局用到的很少，这里就不说了。</p>
<h3 id="百分比布局"><a href="#百分比布局" class="headerlink" title="百分比布局"></a>百分比布局</h3><p>通过学习上面的三种布局，我们会发现，只有LinearLayout支持使用<code>layout_weight</code>属性来实现按比例指定控大小的功能，其他两种布局都不支持。为此，Android引入了一种全新的布局方式——百分比布局。</p>
<p>由于LinearLayout本身已经支持按比例指定控件的大小了，因此百分比布局只为FrameLayout和RelativeLayout进行了功能的扩展，提供了<strong>PercentFrameLayout</strong>和<strong>PercentRelativeLayout</strong>。</p>
<p>不同于上面的三种布局，Android团队将百分比布局定义在了support库中，我们需要在build.gradle中添加百分比布局库的依赖。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'com.android.support:percent:25.0.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在导入百分比布局的时候，我们需要把完整的包名路径写出来，然后还必须定义一个app的命名空间，这样才能使用百分比布局的自定义属性。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.percent.PercentFrameLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.layoutdemo.SecondActivity"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"button1"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"left|right"</span></div><div class="line">        <span class="attr">app:layout_widthPercent</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">app:layout_heightPercent</span>=<span class="string">"50%"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"button2"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"right|top"</span></div><div class="line">        <span class="attr">app:layout_widthPercent</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">app:layout_heightPercent</span>=<span class="string">"50%"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"button3"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"left|bottom"</span></div><div class="line">        <span class="attr">app:layout_widthPercent</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">app:layout_heightPercent</span>=<span class="string">"50%"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"button4"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"right|bottom"</span></div><div class="line">        <span class="attr">app:layout_widthPercent</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">app:layout_heightPercent</span>=<span class="string">"50%"</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.percent.PercentFrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意，我在写这段代码的时候，IDE不会自动提示~</p>
<p>效果图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android8.png?raw=true" width="375"><br></div>



<hr>
<h3 id="约束布局-ConstraintLayout"><a href="#约束布局-ConstraintLayout" class="headerlink" title="约束布局-ConstraintLayout"></a>约束布局-ConstraintLayout</h3><p>看到这个布局我就想到了iOS的AutoLayout，他的用法和iOS的xib添加约束一样，用着也是很方便的。</p>
<p>ConstraintLayout是Android Studio2.2新添加的功能，虽然传统布局也可以使用可视化界面拖动空间布局，但是因为不够灵活，我们还是会选择xml代码来布局。而ConstraintLayout的出现将我们带入可视化布局编程的新纪元，通过建立空间之间的约束，实现布局的构建。这样做有一个很大的优点，就是减少了布局的嵌套，减少了布局渲染的层数，降低了CPU的消耗，提高了程序的性能。总之就是优点很多。</p>
<h5 id="建立依赖"><a href="#建立依赖" class="headerlink" title="建立依赖"></a>建立依赖</h5><p>在使用ConstraintLayout布局之前，我们需要在build.gradle添加依赖，但是，通常情况下不需要我们手动添加，IDE已经为我们自动添加好了。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'com.android.support.constraint:constraint-layout:1.0.0-beta4'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="切换视图"><a href="#切换视图" class="headerlink" title="切换视图"></a>切换视图</h5><p>点击菜单栏的中的<code>Show Design</code>、<code>Show Blueprint</code>和<code>Show Design + Blueprint</code>按钮可以对操作视图进行切换，如下图所示：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-bef33c37ccb1d63f.gif?imageMogr2/auto-orient/strip" width="375"><br></div>


<h5 id="添加约束"><a href="#添加约束" class="headerlink" title="添加约束"></a>添加约束</h5><p>我们创建一个按钮，并为它添加约束：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-de183f8df27f879d.gif?imageMogr2/auto-orient/strip" width="375"><br></div>

<p>可以看到，按钮控件有四个方向的约束，如下图所示，按钮的上、下、左、右边上各有一个小圆圈，鼠标可拖动小圆圈到<code>ConstraintLayout</code>，与其添加约束。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-85ab8f622faca3a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<p>如将按钮下边圆圈拖至<code>ConstraintLayout</code>底部，则按钮移动至底部；再将按钮上边圆圈拖动至<code>ConstraintLayout</code>顶部，垂直方向上有两个约束的按钮控件就会实现垂直居中。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-4de51c14488859f3.gif?imageMogr2/auto-orient/strip"><br></div>

<h5 id="约束位置比例调整"><a href="#约束位置比例调整" class="headerlink" title="约束位置比例调整"></a>约束位置比例调整</h5><p>当然如果<code>ConstraintLayout</code>添加约束仅仅能实现水平、垂直居中，那么它在功能上与RelativeLayout就没有差别了。除了居中，约束还可以设置控件两边到边界之间的距离比例，通过在右侧属性面板中，拖动水平和垂直方向的进度条来调整两边距离的比例。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-5d4d3177e87d6c22.gif?imageMogr2/auto-orient/strip" width="375"><br></div>

<h5 id="控件之间添加约束"><a href="#控件之间添加约束" class="headerlink" title="控件之间添加约束"></a>控件之间添加约束</h5><p>除了与<code>ConstraintLayout</code>添加约束，控件与控件之间同样可以添加约束。如下图所示，在调整按钮宽度后，将两个按钮的左右两边添加约束，然后将下方按钮的上边与上方按钮的下边添加约束，拖动下方的按钮，可设置两个按钮之间的外边距。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-e814c547622d896e.gif?imageMogr2/auto-orient/strip" width="375"><br></div>

<p>通过控件之间添加约束和调整约束距离比例，开发者可实现较为复杂的约束。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-506a4d7ea3a560b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>


<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-02e85c6fcedd4a17.gif?imageMogr2/auto-orient/strip" width="375"><br></div>


<h5 id="调整控件外边距及尺寸"><a href="#调整控件外边距及尺寸" class="headerlink" title="调整控件外边距及尺寸"></a>调整控件外边距及尺寸</h5><p>你可能会发现，在调整控件位置的比例的时候，当进度条滑动至100时，控件未能完全贴上布局的右边界，这是因为控件存在外边距。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-6b0c81f425c3360f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600"><br></div>

<p>这时候可以修改属性面板中的数值来调整控件的外边距大小，如下图所示：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-c32ddd5ce43f0ed1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<p>在控件尺寸调整上，ConstraintLayout提供了三种模式，在属性面板中点击下图红色框框区域实现模式的切换。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-e1c6a34a875c7d14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<p>这三种分别为：</p>
<ul>
<li><strong>wrap content</strong></li>
</ul>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-b3b5528ebb36940b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<p>wrap content模式就是平时常用的根据内容来设定控件尺寸。</p>
<ul>
<li><strong>固定值</strong></li>
</ul>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-4314b554f154e21b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<p>固定值模式也是平时常用的，通过设定具体数值来确定控件的大小。如下图所示，切换为固定模式后，在下方的layout_width一栏填写具体的宽度数值。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-cac0c176f4f4f49f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<ul>
<li><strong>any size</strong></li>
</ul>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-94472c2f856e43c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<p>any size与match parent类似，都是充满整个范围，但是不同点在于match parent充满相对于父容器，而any size是相对于约束条件，即在约束条件下，能填充的范围全部充满，如下图所示：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-38cc760addcdd58b.gif?imageMogr2/auto-orient/strip"><br></div>

<p>这里说明一下，ConstraintLayout其实也有match parent模式，但是因为ConstraintLayout不存在多层嵌套关系，所以match parent这种相对于父容器的模式在ConstraintLayout中很少会使用。</p>
<h5 id="删除约束"><a href="#删除约束" class="headerlink" title="删除约束"></a>删除约束</h5><p>删除约束有三种方式：</p>
<ul>
<li><strong>删除单个约束</strong></li>
</ul>
<p>将鼠标移动到要删除的约束对应的小圆圈，待小圆圈出现闪烁的红色圈圈时，点击小圆圈即可删除约束。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-fdd60ed653b1dbaa.gif?imageMogr2/auto-orient/strip"><br></div>

<p>除了上面这种删除方法，也可以在属性面板中，将鼠标移动到下图红色框框标记的位置，待出现叉叉图标，点击可删除该约束。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-d604aedaef646425.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>


<ul>
<li><strong>删除单个控件的所有约束</strong></li>
</ul>
<p>用鼠标点击控件，在其左下方会出现一个小叉叉图标，点击小图标即可删除当前控件的所有约束。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-914f40e162960b10.gif?imageMogr2/auto-orient/strip"><br></div>

<ul>
<li><strong>删除当前界面的所有约束</strong></li>
</ul>
<p>点击工具栏中<code>删除所有约束</code>图标的按钮，即可删除当前界面所有的约束。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-99411797db6acd15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>


<h5 id="Guidelines"><a href="#Guidelines" class="headerlink" title="Guidelines"></a>Guidelines</h5><p>学完基本的依赖操作，来看一下ConstraintLayout的进阶用法。这里有一个需求，要求将两个控件合在一起，实现水平居中。如果不使用ConstraintLayout，我们或许会想到用RelativeLayout嵌套LinearLayout来实现。那么在ConstraintLayout这样不存在多布局嵌套的情况下该怎么实现呢？</p>
<p>这时候就提出了Guidelines，GuideLines就如同Photoshop中参考线的概念一样。如下图，创建一个垂直方向的参考线，将其切换至百分比模式，拖动到50%的位置，再将两个控件在左右两侧分别与Guidelines添加约束，然后两个控件的底边相互添加约束即可实现合并居中的效果。此时ConstraintLayout展现了其强大的优势，通过其特性优雅地完成需求。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-a6737f34ac5ad74d.gif?imageMogr2/auto-orient/strip"><br></div>

<p>我们不仅可以创建垂直方向的引导线，还可以创建水平方向上的引导线。</p>
<h5 id="Autoconnect"><a href="#Autoconnect" class="headerlink" title="Autoconnect"></a>Autoconnect</h5><p>或许因为我们是第一次接触ConstraintLayout，所以感觉添加约束的操作很有趣，但是在项目中，当控件数量比较多时，每个控件的每条边都要一个一个添加约束，这样就会拖慢开发效率，所以ConstraintLayout提出了Autoconnect的用法。</p>
<p>如下图所示，单击打开工具栏中Autoconnect功能按钮，将控件拖至屏幕中心，然后约束就会自动添加了。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-1ced9132a90a8aa3.gif?imageMogr2/auto-orient/strip"><br></div>


<p>Autoconnect会根据我们的意图来判断是否添加相应的约束，当然自动添加的约束不一定全是想要的效果，这时候可以关闭Autoconnect，然后手动修改约束。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-f73b47f9987ff980.gif?imageMogr2/auto-orient/strip"><br></div>


<h5 id="Inference"><a href="#Inference" class="headerlink" title="Inference"></a>Inference</h5><p>Inference与Autoconnect功能相同，都是用于自动添加约束的，但是Inference更加强大。Inference是手动添加约束后，对当前界面所有控件的位置关系添加整体约束关系，感觉和Photoshop里面不同布局中的图像调整好位置后合并可见图层很像。Inference操作如下图所示：</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/291600-72db88ec184210fa.gif?imageMogr2/auto-orient/strip"><br></div>



<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Android的布局差不多就这么多，学会这些布局，我想足够能让我在以后的开发中顺利的进行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天主要说说布局。我在看Android的任何内容的时候，心中总要和iOS进行一番比较，就说布局吧，在iOS中，我们一般直接使用&lt;code&gt;frame&lt;/code&gt;计算、AutoLayout约束布局。在Android的世界中，一般使用xml布局文件来进行布局，用到的布局方式有四种：线性布局、相对布局、帧布局、百分比布局。还有一种是直接使用图形化添加约束：ConstraintLayout。为何Android的布局方式如此的多，主要是因为Android屏幕的碎片化，不像苹果就那几款手机。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之Activity</title>
    <link href="http://www.guiyongdong.com/2017/03/17/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BActivity/"/>
    <id>http://www.guiyongdong.com/2017/03/17/一天一Android之Activity/</id>
    <published>2017-03-17T09:30:01.000Z</published>
    <updated>2017-03-18T07:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天来说一说Android四大组件之一的<code>Activity</code>，类似于iOS的<code>UIViewController</code>。当我们新建一个Android项目时，Android Studio默认会为我们创建一个主活动:<code>MainActivity</code>和一个默认的主布局:<code>activity_main.xml</code>。一个活动想要显示在屏幕上，就必须在<code>AndroidManifest.xml</code>中注册。但是这些工作都有IDE帮我们自动完成了。我们来看<code>AndroidManifest.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.activitydemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!--MainActivity--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Activity声明"><a href="#Activity声明" class="headerlink" title="Activity声明"></a>Activity声明</h3><p>我们首先声明了程序的包名<code>package=&quot;com.guiyongdong.listviewdemo&quot;</code>。</p>
<h5 id="lt-application-gt"><a href="#lt-application-gt" class="headerlink" title="&lt;application&gt;"></a><code>&lt;application&gt;</code></h5><p>接下来我们又声明了<code>&lt;application&gt;</code>标签，这个标签标示当前程序的配置，例如我们配置了icon（程序的图标）、label（程序的名称）等。</p>
<h5 id="lt-activity-gt"><a href="#lt-activity-gt" class="headerlink" title="&lt;activity&gt;"></a><code>&lt;activity&gt;</code></h5><p>然后我们又在<code>&lt;application&gt;</code>标签内添加了一个<code>&lt;activity&gt;</code>标签，这个标签就是声明一个活动（Avtivity）。记住，所有的活动都必须声明在<code>&lt;application&gt;</code>标签内。<code>name</code>属性表示声明的是哪个Activity，因为我们之前已经声明过了当前的包名， 所有以后声明的Activity只要在这个包中，我们只需要声明<code>.MainActivity</code>就可以了。其实它的全称还是<code>com.guiyongdong.listviewdemo. MainActivity</code>。 我们又看到在<code>&lt;activity&gt;</code>标签内，我们有声明了一个标签<code>&lt;intent-filter&gt;</code>，来看看它们是什么。</p>
<h5 id="lt-intent-filter-gt"><a href="#lt-intent-filter-gt" class="headerlink" title="&lt;intent-filter&gt;"></a><code>&lt;intent-filter&gt;</code></h5><p><code>&lt;intent-filter&gt;</code>这个标签表示intent过滤器，至于intent是什么，我们待会再说。先来看看它声明了什么类型的过滤器。<br>在<code>&lt;intent-filter&gt;</code>标签内，我们可以声明三种标签，分别是:<code>&lt;action&gt;</code>、<code>&lt;category&gt;</code>和<code>&lt;data&gt;</code>，这三个标签都是可以作为活动的过滤器。这里我们声明了一个<code>&lt;action&gt;</code>：<code>android.intent.action.MAIN</code>和一个<code>&lt;category&gt;</code>：<code>android.intent.category.LAUNCHER</code>，这两个值都是Android SDK提供给我们的，它表示当前活动为主活动，另一个表示当前活动为启动活动，注意着两种类型的过滤器必须放在一起，不让运行不起来~。当然，我们也可以自定义其他过滤器的值，这个在我们说到隐式Intent时会自定义。</p>
<h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>Intent是Android程序中各组件之间进行交互的一种重要方式，它不仅可以指明当前组件想要执行的动作，还可以在不同组件之间传递数据。Intent一般可被用于启动活动，启动服务以及发送广播等场景，当前我们主要讲解Activity,所以我们主要看Intent在活动中的应用。</p>
<p>Intent大致可以分为两种：<strong>显式Intent</strong>和<strong>隐式Intent</strong>。</p>
<p>上面我们说到了，如果一个Activity想要作为程序启动时的主Activity，必须声明声明<code>&lt;intent-filter&gt;</code>标签，而且必须在此标签下声明两个值为固定值的<code>&lt;action&gt;</code>和<code>&lt;category&gt;</code>。一般情况下我们的程序不可能只有一个活动，如果我们想要再开启一个活动时，该怎么办呢？</p>
<h5 id="显式Intent"><a href="#显式Intent" class="headerlink" title="显式Intent"></a>显式Intent</h5><p>开启另一个Activity的最简单的方式就是使用显式Intent，我本人没有开发过Android，也不知道这种方式在项目中的使用率，但我感觉它的使用率应该不低，因为它太简单了。</p>
<p>例如我又新建了一个Avtivity(SecondActivity)，系统默认为我们在<code>AndroidManifest.xml</code>中注册，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.activitydemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!--MainActivity--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!--SecondActivity--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然，这时候我可以在<code>SecondActivity</code>的标签下声明任何的filter标签，不过现在我不需要声明，因为我现在使用的是显式Intent。我们在<code>MainActivity</code>的布局文件中添加一个按钮，并且添加按钮的点击事件，事件是去打开<code>SecondActivity</code>活动，至于如何布局，以后再说。 代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        Button button = (Button) findViewById(R.id.button);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            		<span class="comment">//显式启动SecondActivity</span></div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,SecondActivity.class);</div><div class="line">                startActivity(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至于为何这么写，刚开始我也不明白，好在我有一点java基础，这里奉劝想学习Android的同学，必须打好java基础。</p>
<p>大家可以看到，我在Intent的构造函数中传了两个值，一个是<code>MainActivity.this</code>，一个是<code>SecondActivity.class</code>，它的构造函数为:<code>Intent(Context context, Class&lt;?&gt; cls)</code>，第一个参数是表示启动活动的上下文，第二个参数Class表示指定想要启动的目标活动，通过这个构造函数，我们就能构建出Intent的<code>意图</code>（就是我要去干什么）。然后我们调用<code>startActivity</code>方法，把这个明显的意图传递过去就行了。</p>
<h5 id="隐式Intent"><a href="#隐式Intent" class="headerlink" title="隐式Intent"></a>隐式Intent</h5><p>相比于显式Intent，隐式Intent则含蓄很多了，它并不明确指出我们想要启动哪一个活动，而是指定了一系列更为抽象的<code>action</code>和<code>category</code>等信息，让系统去分析这个Intent，并找出合适的活动去启动。</p>
<p>什么叫合适的活动？我们来想一个问题，系统为什么会启动<code>MainActivity</code>作为程序的主界面，是因为我们声明了如下代码:<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在<code>&lt;action&gt;</code>标签中我们指明了当前活动可以响应<code>android.intent.action.MAIN</code>这个action,而<code>&lt;category&gt;</code>标签则包含了一些附加信息，指明当前活动可以响应<code>android.intent.category.LAUNCHER</code>这个category，只有这两个配置同时匹配，这个活动才是合适的活动。</p>
<p>例如我们为<code>SecondActivity</code>添加如下filter：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.activitydemo.second"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后我修改MainActivity中按钮的点击方法：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Button button = (Button) findViewById(R.id.button);</div><div class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">    		<span class="comment">//隐式启动Intent</span></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.guiyongdong.activitydemo.second"</span>);</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们看到，我直接将action的字符串传了过去，表明想要启动能响应<code>com.guiyongdong.activitydemo.second</code>这个action的活动，我们之前说过，只有action和category同时匹配才能响应，但是这里我们并没有指定category，那是因为<code>android.intent.category.DEFAULT</code>是一种默认的category，在我们调用<code>startActivity</code>方法的时候，会自动的添加这个默认的category到Intent中。</p>
<p>当然，现在我们也可以添加任意自定义的category：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.activitydemo.second"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.category.my_second"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在MainActivity中添加如下代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Button button = (Button) findViewById(R.id.button);</div><div class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.guiyongdong.activitydemo.second"</span>);</div><div class="line">        intent.addCategory(<span class="string">"com.guiyongdong.category.my_second"</span>);</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们依然能够启动<code>SecondActivity</code>。</p>
<p>当然，我们前面也说到了<code>&lt;data&gt;</code>这个标签，它用于更精确地指定当前活动能响应什么类型的数据，<code>&lt;data&gt;</code>标签中主要可以匹配一下内容：</p>
<ul>
<li>android:scheme 用于指定数据协议部分，如http</li>
<li>android:host 用于指定数据的主机名部分，如www.baidu.com</li>
<li>android:port 用于指定数据的端口部分</li>
<li>android:path 用于指定主机名和端口之后的部分</li>
<li>android:mimeType 用于指定可以处理的数据类型</li>
</ul>
<p>至于详细的该怎么用，大家可以去试试。这里列一下打电话的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Button button = (Button) findViewById(R.id.button);</div><div class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_CALL);</div><div class="line">        intent.setData(Uri.parse(<span class="string">"tel:10086"</span>));</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>当然，前提是我们在<code>AndroidManifest.xml</code>添加打电话的权限<br><code>&lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot;/&gt;</code></p>
<h3 id="Activity生命周期"><a href="#Activity生命周期" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h3><p>当我们启动一个新的Activity的时候，它覆盖在了原来的Activity上，我们想一想，Android是通过上面来管理这些Activity的呢？</p>
<p>这里要说明一种数据结构：栈，栈是一种先进后出的数据结构。我们发现，当我们点击返回键时，最先消失的活动是我们最新添加显示的活动。</p>
<p>Android是使用任务（Task）来管理活动的，一个任务就是一组存放在栈里的活动的集合，这个栈也被称为返回栈(Back Stack)。</p>
<h5 id="活动状态"><a href="#活动状态" class="headerlink" title="活动状态"></a>活动状态</h5><ul>
<li><p>运行状态<br>  当一个活动位于返回栈的栈顶时，这时活动就处于运行状态。系统最不愿意回收的就是处于运行状态的活动。</p>
</li>
<li><p>暂停状态<br>  当一个活动不再处于栈顶位置，但仍是可见的，这时活动就进入了暂停状态，因为有时候开启一个新的活动，这个活动并不是占满整个屏幕的。处于暂停状态的活动仍然是完全活着的，系统也不愿意去回收这种活动，只有在内存极低的情况下，系统才会去考虑回收这种活动。</p>
</li>
<li><p>停止状态<br>  当一个活动不再处于栈顶位置，并且完全不可见时，活动就进入了暂停状态，系统仍然会为此活动保存相应的状态和成员变量，但是，这并不是完全可靠，当内存不足，处于停止状态的活动有可能被系统回收。</p>
</li>
<li><p>销毁状态<br>  当一个活动从返回栈中移除后就成了销毁状态。系统最倾向于回收处于这种状态的活动。</p>
</li>
</ul>
<h5 id="活动的生存期"><a href="#活动的生存期" class="headerlink" title="活动的生存期"></a>活动的生存期</h5><p>Activity类中定义了7个回调方法，覆盖了活动生命周期的每一个环节。</p>
<ul>
<li><p>onCreate()<br>  这个方法我们已经见过很多次了，每个活动中我们都重写了这个方法，它会在活动第一次被创建的时候调用。我们应该在这个方法中完成活动的初始化操作，比如加载布局，绑定事件等。</p>
</li>
<li><p>onStart()<br>  这个方法在活动由不可见变为可见的时候调用。</p>
</li>
<li><p>onResume()<br>  这个方法在活动准备好喝用户交互的时候调用。此时活动一定位于返回栈的栈顶，并且处于运行状态。</p>
</li>
<li><p>onPause()<br>  这个方法在系统准备去启动或者恢复另外一个活动的时候调用。通常会在这个方法中奖一些消耗CPU的资源释放掉，但是这个方法的执行速度一定要快，不然会影响到新的活动的使用。</p>
</li>
<li><p>onStop()<br>  这个方法在活动完全不可见的时候调用。它和onPause()方法的区别主要在于，如果启动的新活动是一个对话框式的活动，那么OnPause()方法会得到执行，而onStop()方法并不会执行。</p>
</li>
<li><p>onDestory()<br>  这个方法在活动被销毁之前调用，之后活动的状态将变为销毁状态。</p>
</li>
<li><p>onRestart()<br>  这个方法在活动由停止状态变为运行状态之前调用，也就是活动被重新启动了。</p>
</li>
</ul>
<p>看完以上的7个方法（发现这些方法和iOS好相似啊），可以将活动分为3种生存期。</p>
<ul>
<li><p>完整生存期。活动在onCreate()方法和onDestroy()方法之间所经历的，就是完整生存期。一般情况下，都是在onCreate()中完成各种初始化，在onDestroy()中完成释放内存的操作。</p>
</li>
<li><p>可见生存期。活动在onStart()方法和onStop()方法之间所经历的，就是可见生存期。我们可以通过这两个方法，合理的管理那些对用户可见的资源。</p>
</li>
<li><p>前台生存期。活动在onResume()方法和onPause()方法之间所经历的就是前台生存期。</p>
</li>
</ul>
<p>如图，完整的描述了Activity的整个生命周期：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android5.jpg?raw=true"><br></div>

<h3 id="活动的启动模式"><a href="#活动的启动模式" class="headerlink" title="活动的启动模式"></a>活动的启动模式</h3><p>活动的启动模式一共有4种，分别是standard、singleTop、singleTask和singleInstance。可以在<code>AndroidManifest.xml</code>通过给<code>&lt;activity&gt;</code>标签指定<code>android:launchMode</code>属性来选择启动模式。</p>
<h5 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h5><p>standard是活动的默认启动模式，每当启动一个新的活动，它都会在返回栈中如栈，每次启动都会创建该活动的一个新的实例。</p>
<h5 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h5><p>加入我们在<code>SecondActivity</code>活动中再启动一个<code>SecondActivity</code>，这时候系统是不会再去创建一个新的<code>SecondActivity</code>活动的。singleTop模式下，当启动活动时如果发现返回栈的栈顶已经是该类型的活动，则认为可以直接使用它，不会再去创建新的活动实例。</p>
<h5 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h5><p>使用singleTask可以很好的解决重复创建栈顶活动的问题，每次启动该活动时系统首先会在返回栈中检查是否有存在该活动的实例，如果发现已经存在则直接使用该实例，并把这个活动之上的所有活动统统出栈，如果没有发现，就会创建一个新的活动实例。</p>
<h5 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h5><p>singleInstance不同于上面的三种模式，它表示活动会启用一个新的返回栈来管理这个活动，因为程序中可以存在多个返回栈。一般情况下，我们希望几个程序共享某个活动时会使用到此模式。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>关于Activity的知识还有很多，只有在开发中才能遇到各种问题，继续吧，骚年~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来说一说Android四大组件之一的&lt;code&gt;Activity&lt;/code&gt;，类似于iOS的&lt;code&gt;UIViewController&lt;/code&gt;。当我们新建一个Android项目时，Android Studio默认会为我们创建一个主活动:&lt;code&gt;MainActivity&lt;/code&gt;和一个默认的主布局:&lt;code&gt;activity_main.xml&lt;/code&gt;。一个活动想要显示在屏幕上，就必须在&lt;code&gt;AndroidManifest.xml&lt;/code&gt;中注册。但是这些工作都有IDE帮我们自动完成了。我们来看&lt;code&gt;AndroidManifest.xml&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;manifest&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;package&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.guiyongdong.activitydemo&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;application&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:allowBackup&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:icon&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@mipmap/ic_launcher&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:label&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/app_name&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:roundIcon&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@mipmap/ic_launcher_round&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:supportsRtl&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:theme&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@style/AppTheme&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;&amp;lt;!--MainActivity--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.action.MAIN&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.category.LAUNCHER&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;application&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;manifest&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.guiyongdong.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://www.guiyongdong.com/tags/android/"/>
    
  </entry>
  
</feed>
