<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>贵大头的博客</title>
  <subtitle>贵大头的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://guiyongdong.github.io/"/>
  <updated>2018-10-16T05:10:04.349Z</updated>
  <id>https://guiyongdong.github.io/</id>
  
  <author>
    <name>贵永冬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【转】iOS Memory Deep Dive</title>
    <link href="https://guiyongdong.github.io/2018/10/16/%E3%80%90%E8%BD%AC%E3%80%91iOS-Memory-Deep-Dive/"/>
    <id>https://guiyongdong.github.io/2018/10/16/【转】iOS-Memory-Deep-Dive/</id>
    <published>2018-10-16T05:06:45.000Z</published>
    <updated>2018-10-16T05:10:04.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>仅以此文解答自己大学以来多年对内存管理的疑惑。</p>
<h2 id="经典操作系统的虚拟内存"><a href="#经典操作系统的虚拟内存" class="headerlink" title="经典操作系统的虚拟内存"></a>经典操作系统的虚拟内存</h2><h3 id="为什么要有虚拟内存？"><a href="#为什么要有虚拟内存？" class="headerlink" title="为什么要有虚拟内存？"></a>为什么要有虚拟内存？</h3><p>随着计算机的发展，我们的计算机处理的任务也变得越来越繁多，但是对于某台固定的计算机，CPU 和 Memory<br>都是固定的，如果有些直接使用物理内存地址的话会带来很多问题。首先编译器不能以一种抽象的角度来描绘内存，在执行的过程中如果某个进程占据的内存过大，这个进程可能就无法运行，即便运行了，内存相对来说是非常不安全的，一个不小心操作到了别的进程的内存，可能导致进程的崩溃，如果写入了内核使用的内存可能导致操作系统的崩溃。</p>
<p>现代操作系统的内存管理是非常多计算机科学家智慧的结晶，这种管理方式就是  <strong>虚拟内存 (Virtual Memory/VM)</strong> 。VM<br>是一系列技术的总称，包括硬件异常，物理地址，主存，磁盘文件，操作系统内核软件的内存管理。</p>
<p>虚拟内存提供了三大重要的特性：</p>
<ol>
<li><p>它将主存看做在存储在磁盘上的地址空间的高速缓存，利用程序的局部性原理，只将活跃的内存加载到主存中，提高了主存的利用率；</p>
</li>
<li><p>为每个进程提供了一个抽象的统一的连续的私有的地址空间。简化了内存管理方式；</p>
</li>
<li><p>对内存进行分段（segment）提供权限能力，保护每个进程的地址空间不会被其他进程影响；</p>
</li>
</ol>
<a id="more"></a>
<h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><p>在一些早期的操作系统和一些嵌入式操作系统中，内存管理使用的地址是物理地址，现代操作系统基本使用的是 <code>虚拟地址（Virtual
Addressing）</code>的寻址方式，使用 <strong>虚拟地址</strong> 时 CPU 将 <code>VA</code> 送到 <code>MMU</code> 中去翻译为物理地址。</p>
<blockquote>
<p>注：  <strong>MMU （Memory Management Unit）</strong>  内存管理单元一般是一个 CPU<br>上的专用芯片，是一个硬件。结合操作系统共同完成地址翻译工作。</p>
</blockquote>
<h3 id="地址空间"><a href="#地址空间" class="headerlink" title="地址空间"></a>地址空间</h3><p>通常来说地址空间是 <strong>线性的</strong> 。假设我们有 {0, 1, 2, ..N-1 } 个内存地址，我们可以用 n<br>位二进制来表示内存地址，那么我们就叫这个地址空间为 n 位地址空间。现代操作系统通常是 32 或者 64(但是很多操作系统只用了48位寻址)的。</p>
<pre><code>2^10 = 1k  
2^20 = 1M  
2^30 = 1G  
2^40 = 1T  
2^50 = 1P  
2^60 = 1E  
</code></pre><p>这么看来大家能理解为什么 32位 的操作系统最大只支持 4G 内存空间了。</p>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>现代操作系统将内存划分为页，来简化内存管理，一个页其实就是一段连续的内存地址的集合，通常有 4k 和 16k（iOS 64位是16K）的，成为<br><code>Virtual Page</code> 虚拟页。与之对应的物理内存被称为 <code>Physical Page</code> 物理页。</p>
<blockquote>
<p>注意：虚拟页的个数可能和物理页个数不一样。比如说一个 64 位操作系统中，使用 48 位地址空间的虚拟页大小为<br>16K，那么其虚拟页数可达到（2^48/2^14 = 16M个），假设物理内存只有 4G，那么物理页可能只有 (2^32/2^14 = 256k个)</p>
</blockquote>
<p>操作系统将虚拟页和物理页的映射关系称为 <strong>页表</strong> （Page Table），每个映射叫  <strong>页表条目</strong> （Page Table<br>Entry/Item），操作系统为每个进程提供一个页表放在主存中，CPU 在使用虚拟地址时交给 MMU 去翻译地址，MMU 去查询在主存中的页表来翻译。</p>
<h4 id="缺页处理"><a href="#缺页处理" class="headerlink" title="缺页处理"></a>缺页处理</h4><p>每个 <code>Page Table Entry</code> 都包含了一些描述信息，比如当前页的状态{未分配，缓存的，未缓存的}。</p>
<ol>
<li><p>未分配的不用多说代表未使用的内存；</p>
</li>
<li><p>缓存的代表已经加载进物理内存了；</p>
</li>
<li><p>未缓存的代表还没放在物理内存。</p>
</li>
</ol>
<p>当 CPU 要读取一个页时，检查标记发现当前的页是未缓存的，会触发一个（Page Falut） <strong>缺页中断</strong><br>，这时内核、操作系统的缺页异常处理程序，去选择一个牺牲页（有时候内存够用不用置换别的界面），然后检查这个页面是否有修改，有修改会先写磁盘，然后将需要使用到的内存加载到物理内存中，然后更新<br><code>PTE</code>，随后操作系统重新把虚拟地址发送到地址翻译硬件去重新处理。</p>
<blockquote>
<p>注：有些操作系统无虚拟虚拟内存置换逻辑，如 iOS，取而代之的是内存压缩和收到内存警告时杀死进程的行为。</p>
</blockquote>
<h3 id="虚拟内存带来的好处"><a href="#虚拟内存带来的好处" class="headerlink" title="虚拟内存带来的好处"></a>虚拟内存带来的好处</h3><ol>
<li><p>简化链接过程，允许每个进程都提供统一的内存地址的抽象，独立于物理内存；</p>
</li>
<li><p>简化加载，操作系统加载可执行文件和共享文件时，只是创建了 <strong>页表</strong> ，待访问到缺页时，操作系统再去加载；</p>
</li>
<li><p>简化共享，不同进程的 PT 中的 PTE 可以执行相同的物理地址，如动态库的代码；</p>
</li>
<li><p>内存保护，PT 中的 PTE 中描述了一个虚拟页的权限信息，（R， W， X），指令如果违反了这些权限信息，就会造成 Segment Fault</p>
</li>
</ol>
<h3 id="地址翻译"><a href="#地址翻译" class="headerlink" title="地址翻译"></a>地址翻译</h3><p>虚拟地址翻译到物理地址是软硬件结合实现的。我们通常几个方面来描述。</p>
<h4 id="如何索引"><a href="#如何索引" class="headerlink" title="如何索引"></a>如何索引</h4><p>现代操作系统将地址分为两部分， <strong>页号</strong> 和 <strong>片</strong><br>了（是不是很类型网络号和主机号），由于虚拟页和物理页的大小是相同的，页偏移可以看做虚拟页和物理页的页内地址，且相同；页号则做为 PT 的索引查找到对应的<br>PTE，然后查找对应的物理页地址。</p>
<h4 id="提高效率"><a href="#提高效率" class="headerlink" title="提高效率"></a>提高效率</h4><p>是不是像前面所说的简单的划分为两部分就足够了呢？</p>
<p>举个例子:</p>
<ol>
<li><p>我们假设一台电脑是 32 位的，分页大小位 4k，也就说页内地址占据了 12 位，页号地址位 20 位；</p>
</li>
<li><p>我们假设一台电脑是 64 位的，地址空间 48 位，分页大小为 16k，也就说页内地址占据了 14 位，页号地址位 34 位</p>
</li>
</ol>
<p>我们粗略估算一个 PTE 为 4KB，对于 32位 的操作系统每个进程的页表需要 2^20 = 4M 个页表项常驻内存尚可接受，但是对于寻址为 48位<br>的操作系统来说，每个进程的页表为需要 2^32 = 4G 个页表项，这是无法接受的。</p>
<p>计算机的世界所有的难题都可以用多加一层的办法来解决，所以现代操作系统通常都使用多级页表，减少页表项的个数。将虚拟地址分为多端，代表了一级、二级、多级页表。通过多级页表可以大大减少内存占用。</p>
<h4 id="减少内存"><a href="#减少内存" class="headerlink" title="减少内存"></a>减少内存</h4><p>众所周知 CPU 要比 Memory 快 <code>10^3</code> 个数量级，即便 CPU 中的 <code>L3Cache</code> 也比 Memory 快很多，如果 MMU<br>的地址翻译都要去查找多级 PT，这个开销就会非常巨大，但是所幸程序的局部性原理能够解救我们。MMU 芯片内置一个 <strong>翻译后备缓冲器</strong><br>（Transalation Lookaside Buffer TLB ）的硬件来充当缓存，加快地址翻译的效率.</p>
<h3 id="现代-OS-虚拟内存系统"><a href="#现代-OS-虚拟内存系统" class="headerlink" title="现代 OS 虚拟内存系统"></a>现代 OS 虚拟内存系统</h3><p>操作系统为每个进程维护一个单独的虚拟地址空间，分为两部分：</p>
<ol>
<li><p><strong>内核虚拟内存</strong> ：包含内核中的代码和数据结构，还有一些被映射到所有进程共享的内存页面。还有一些页表，内核在进程上下文中执行代码使用的栈。</p>
</li>
<li><p><strong>进程虚拟内存</strong> ：OS 将内存组织为一些区域（Segment）的集合，代码端，数据端，共享库端，线程栈都是不同的区域，分段的原因是便于管理内存的权限，如果了解过 Mach-O 文件或者 ELF 文件的读者可以看到相同的 Segment 里面的内存权限是相同的，每个 Segment 再划分不同的内容为 section。</p>
</li>
</ol>
<p>在内核中描述一个进程的数据结构概略为如下</p>
<p>pgb 指向第一级页表的基址</p>
<p>每个区域的描述主要有以下几个</p>
<ul>
<li><p><strong>vm_start</strong>  指向这个区域的起始处</p>
</li>
<li><p><strong>vm_end</strong>  指向这个区域的结束出</p>
</li>
<li><p><strong>vm_prot</strong>  内存区域的读写权限</p>
</li>
<li><p><strong>vm_flasg</strong>  一些标志位 私有的还是共享的</p>
</li>
<li><p><strong>vm_next</strong>  指向下一个 vm_area_struct 的描述</p>
</li>
</ul>
<h4 id="内存映射-MMAP"><a href="#内存映射-MMAP" class="headerlink" title="内存映射 MMAP"></a>内存映射 MMAP</h4><p>类 Unix 操作系统可以映射一个普通磁盘上的文件的连续部分到一个固定的内存区域。操作系统会自动管理映射的内容。</p>
<p>内存映射允许不同的进程映射不同的虚拟内存到同一块物理内容上，他们可以是共享的也可以是私有的。</p>
<p>对于共享的，通常多个进程映射到相同的共享对象上。对与私有的，不同进程初始映射的时候操作系统为了节省资源，并没有产生真的副本，直到某个进程修改了这个私有对象，操作系统运用<br><code>copy on write</code> 技术在此时才发生真正的文件拷贝。</p>
<p>mmap 在类 unix 操作系统上作为一个系统调用存在，函数签名如下</p>
<pre><code>void *mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset);  
     addr 代表要从那块虚拟地址开始映射，通常可以不用指定传递NULL让操作系统自己给我们选择  
     len 映射多少长度的内容  
        prot 映射文件的访问权限 读写可执行权限等  
        PROT_EXEFC 可执行权限  
        PROT_READ 可读权限  
        PROT_WRITE 可写权限  
        PROT_NONE 无法访问权限  
    flags 访问文件的标记  
        MAP_SHARED 共享的  
        MAP_PRIVATE私有的  
        MAP_ANON 私有的  
</code></pre><p>举个例子将任意文件映射到 stdout</p>
<pre><code>#include &lt;sys/mman.h&gt;  

int main(int argc, const char * argv[]) {  
    struct stat stat;  
    int fd;  
    if (argc != 2) {  
        printf(&quot;must pass file path&quot;);  
        return 1;  
    }  
    fd = open(argv[1], O_RDONLY, 0);  
    fstat(fd, &amp;stat);  
    char *buffer = mmap(NULL, stat.st_size, PROT_READ, MAP_PRIVATE, fd, 0);  
    printf(&quot;%s&quot;, buffer);  
    return 0;  
}  
</code></pre><h4 id="MMAP-在-iOS-中的用处"><a href="#MMAP-在-iOS-中的用处" class="headerlink" title="MMAP 在 iOS 中的用处"></a>MMAP 在 iOS 中的用处</h4><ol>
<li><p>mmap 让读写一个文件像操作一个内存地址一样简单方便；</p>
</li>
<li><p>mmap 效率极高，不用将一个内容从磁盘读入内核态再拷贝至用户态；</p>
</li>
<li><p>mmap 映射的文件由操作系统接管，如果进程 Crash 操作系统会保证文件刷新回磁盘；</p>
</li>
</ol>
<h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><p>虽然可以使用上面的低级 API 去映射内存，但是需要动态申请内存用来做变量处理的时候就需要 <strong>动态内存分配器</strong> （Dunamic memory<br>allocator），简单理解为 <code>malloc calloc realloc free</code> 等函数来自的库就称为<br><code>DMA</code>。动态内存分配器将一个内存的区域（Heao）分为不同的大小的块（block），这些块要不然就是分配的，要不然就是空闲的。</p>
<p>如何设计分配器又是一个大难题。 几乎所有的计算机语言都采用以下两种：</p>
<ol>
<li><p>显式分配器（手动管理内容）</p>
</li>
<li><p>隐式分配器（GC）</p>
</li>
</ol>
<h3 id="隐式内存分配器"><a href="#隐式内存分配器" class="headerlink" title="隐式内存分配器"></a>隐式内存分配器</h3><p>通常比较知名的语言 <code>Java javaScript Ruby</code> 等都使用 GC，最早的 GC<br>只是使用标记清除算法来管理内容，通过几十年的迭代，早已更新出了数种算法共同参与的 GC。这里就不再赘述了。</p>
<h3 id="显式内存分配器"><a href="#显式内存分配器" class="headerlink" title="显式内存分配器"></a>显式内存分配器</h3><p>C 语言提供了一些列的方法来管理动态内存。如</p>
<ol>
<li><p><strong>malloc</strong>  申请内容并返回初始化的内存首地址；</p>
</li>
<li><p><strong>calloc</strong>  同 malloc 一致，并且会将申请到的内存全置为0；</p>
</li>
<li><p><strong>realloc</strong>  重新分配原本已经申请的内存空间；</p>
</li>
<li><p><strong>free</strong>  释放内容空间；</p>
</li>
<li><p><strong>sbrk</strong>  扩展收缩堆</p>
</li>
</ol>
<h4 id="如何实现一个自己的显式内存分配器"><a href="#如何实现一个自己的显式内存分配器" class="headerlink" title="如何实现一个自己的显式内存分配器"></a>如何实现一个自己的显式内存分配器</h4><p>首先我们要明确内存分配器的需求</p>
<ol>
<li><p>处理任意顺序的申请内存和释放内存；</p>
</li>
<li><p>立即响应，不应为了性能而重新排列或者缓存请求；</p>
</li>
<li><p>所有内容都在 heap 里存放；</p>
</li>
<li><p>对齐块，使之可以存放任意类型的数据；</p>
</li>
<li><p>不修改已分配的内存块；</p>
</li>
</ol>
<p>鉴于对齐和处理任意顺序内存管理的需求，堆利用效率可能会降低，主要会产生内存碎片(Fragmentation) 。内存碎片分为两种：</p>
<ol>
<li><p><strong>内部碎片</strong> ：通常是指一个分配过的块数据并不是全部块的内容，通常有元信息，对齐的字节等；</p>
</li>
<li><p><strong>外部碎片</strong> ：是指不连续的可用的块，通常外部碎片过多会产生所有空白块相加可以满足申请的资源，但是他们不连续。需要整理碎片。</p>
</li>
</ol>
<h4 id="实现显式内存分配器的重点"><a href="#实现显式内存分配器的重点" class="headerlink" title="实现显式内存分配器的重点"></a>实现显式内存分配器的重点</h4><ol>
<li><p>空闲块组织</p>
</li>
<li><p>如何分配新申请的块</p>
</li>
<li><p>如何组织空闲快的剩余部分</p>
</li>
<li><p>如何合并刚释放的块</p>
</li>
</ol>
<h4 id="显式内存分配器的实现方案"><a href="#显式内存分配器的实现方案" class="headerlink" title="显式内存分配器的实现方案"></a>显式内存分配器的实现方案</h4><h5 id="隐式空闲链表"><a href="#隐式空闲链表" class="headerlink" title="隐式空闲链表"></a>隐式空闲链表</h5><p>这种方式在 malloc<br>申请内存的时候，实际上申请的是实际所需内存加上部门元信息大小的块，然后返回指针是有效数据的首地址，元信息直接存在数据块中，所以称为隐式空闲链表。</p>
<p>隐式链表需要处理如何分割空闲块和合并空闲块。</p>
<h5 id="显式空闲链表"><a href="#显式空闲链表" class="headerlink" title="显式空闲链表"></a>显式空闲链表</h5><p>由于隐式空闲链表的搜索效率较低，其实是不适用通用的内存分配的。可以使用某种形式的数据结构去管理这些内存块。基本分为几种：</p>
<ol>
<li><p>简单分离器存储</p>
</li>
<li><p>分离适配法</p>
</li>
<li><p>伙伴系统法</p>
</li>
</ol>
<p>关于详细的设计需要读者查看更多算法知识的文档。</p>
<h4 id="显式内存分配器的实现"><a href="#显式内存分配器的实现" class="headerlink" title="显式内存分配器的实现"></a>显式内存分配器的实现</h4><p>显式内存分配器的需求已经很清晰，下面有个简单的例子可以参考，这时候对于 C 类语言的内存管理应该不会太过恐惧了，</p>
<ul>
<li><strong>C++实现一个简易的内存池分配器</strong> <a href="https://blog.csdn.net/oyoung_2012/article/details/78874869" target="_blank" rel="external">https://blog.csdn.net/oyoung_2012/article/details/78874869</a></li>
</ul>
<p>毕竟源码面前了无秘密。</p>
<h2 id="iOS的虚拟内存"><a href="#iOS的虚拟内存" class="headerlink" title="iOS的虚拟内存"></a>iOS的虚拟内存</h2><h3 id="iOS-内存的分页大小"><a href="#iOS-内存的分页大小" class="headerlink" title="iOS 内存的分页大小"></a>iOS 内存的分页大小</h3><p>在 arm64 之后的芯片，操作系统通常使用 16KB 作为页大小，我们写的程序中的虚拟内存地址右移动 14位 则可得到页编号。MMU 通过 TLB<br>和固定在内存进程虚拟区域的页表来翻译来物理地址。</p>
<p>下面一份代码可以获取页大小。</p>
<pre><code>int main(int argc, char * argv[]) {  
    //    获取虚拟内存分页数据 14为页内地址  
    printf(&quot;page-size%ld mask:%ld, shift%d \n&quot;, vm_kernel_page_size, vm_kernel_page_mask, vm_kernel_page_shift);  
    printf(&quot;%ld\n&quot;, sysconf(_SC_PAGE_SIZE));  
    printf(&quot;%d\n&quot;, getpagesize());  
    printf(&quot;%d\n&quot;, PAGE_SIZE); // 编译时确定不建议使用  
    return 0;  
}  
</code></pre><p>在观察 Crash 日志的时候，有时候注意崩溃的页号可以帮助我们寻找崩溃的原因。</p>
<h3 id="页面的类型"><a href="#页面的类型" class="headerlink" title="页面的类型"></a>页面的类型</h3><p>当操作系统分配一个页面时，内存被称为 <code>Clean</code> 的，表示这个内存页面没有使用，是可以被释放或者重建的，但是一旦写入，操作系统会将其标记为<br><code>Dirty</code>，这意味着磁盘或者其他地方没有此内存页面的备份，无法恢复它。</p>
<p>由于 iPhone 设备为了减少闪存的寿命，并没有在闪存上使用交换分区，因此无论使用多少，在内存压力高紧时，操作系统不会将 Dirty 写好磁盘，而是释放<br>Clean 的页面。如可执行代码（Mach-O）的映射和内存映射文件，或者是 kill 掉进程。</p>
<p>因此使用 dirty 的内存越多，对我们的进程的稳定性越差。</p>
<h4 id="iOS-内存的优化"><a href="#iOS-内存的优化" class="headerlink" title="iOS 内存的优化"></a>iOS 内存的优化</h4><p>在其他常见的操作系统上，由于局部性原理，OS 会将不常用的内存页面写入磁盘，但是 iOS 没有交换空间，取而代之的是内存压缩技术。iOS 将不常用到的<br>dirty 页面压缩以减少页面占用量，在再次访问到的时候重新解压缩。这些都在操作系统层面实现，对进程无感知，有趣的是如果当前进程收到了<br><code>memoryWarning</code>，进程这时候准备释放大量的误用内存，如果访问到过多的压缩内存，再解压缩内存的时候反而会导致内存压力更大，然后被 OS kill<br>掉。</p>
<h3 id="iOS-进程中的堆和栈"><a href="#iOS-进程中的堆和栈" class="headerlink" title="iOS 进程中的堆和栈"></a>iOS 进程中的堆和栈</h3><p>需要注意的是通常操作系统书籍中描述的进程虚拟内存模型都是这样的</p>
<p>Process Virtual Memory</p>
<p>这实际是个用于解析给读者的简化模型，对于多线程程序来说，每个线程都有自己的线程栈。在iOS上通常主线程线程栈大小为 1MB，子线程栈大小为<br>512KB，如果你有一台越狱机，可以试验 <code>ulimt -a</code> 命令观察栈大小的默认参数。</p>
<h3 id="iOS平台上的常见编程语言的内存管理方式"><a href="#iOS平台上的常见编程语言的内存管理方式" class="headerlink" title="iOS平台上的常见编程语言的内存管理方式"></a>iOS平台上的常见编程语言的内存管理方式</h3><p>iOS 上常用的 Swift、Objective-C、C、C++ 都使用显式的内存管理策略，比如 malloc 和 free，new 和<br>delete，alloc 和 dealloc。在 Objective-C 和 Swift 通常使用一种叫做引用计数的简化模型来管理堆内存。现代 Clang<br>已经支持 ARC 的技术帮助程序员解脱内存管理的困扰，但是本质上还是显式内存管理。</p>
<p>建议读者可以读一下 <code>ARC的参考文档</code><a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html" target="_blank" rel="external">http://clang.llvm.org/docs/AutomaticReferenceCounting.html</a></p>
<p>顺便提一下 Xcode10 版本中的 Clang 已经支持在 C 结构体中对于 Objective-C 对象的 ARC 管理，请参看<br><code>whats_new_in_llvm</code></p>
<h3 id="内存分类"><a href="#内存分类" class="headerlink" title="内存分类"></a>内存分类</h3><p>要想合理的使用内存，必须要掌握不同类型内存的区别，才能更合理的使用内存并且在内存资源匮乏的低端机器上写出“高内存性能”的应用。</p>
<p>首先在 Apple 的官方文档中内存主要分为以下几类。</p>
<ol>
<li><p><strong>Free Memory</strong>  当前空闲的memory</p>
</li>
<li><p><strong>Used Mamory</strong>  当前正在使用的内存</p>
</li>
</ol>
<p>我们最关心的当然是 Used Memory，它又分为以下几类。</p>
<ol>
<li><p><strong>Wired Memory</strong> ：一般是内核占用的常驻内存，比如可执行文件的镜像 Image，内核所有的数据等，无法释放，在OS运行期间必须常驻内存；</p>
</li>
<li><p><strong>Active Memory</strong>  活跃的内存，当前正在使用的内存；</p>
</li>
<li><p><strong>Inactive Memory</strong>  不活跃的内存，最近用过，但是现在不怎么用了，按照局部性原则可以被置换出物理内存的内存；</p>
</li>
<li><p><strong>Purgeable Memory</strong>  可释放的内存，通常在 Foundation 中是 <code>NSDiscardableContent</code> 的子类，或者是 <code>NSCache</code> 等。</p>
</li>
</ol>
<p>等等~。上面说的好像跟没说一样/(ㄒoㄒ)/~~。我们换种方式从物理内存和虚拟内存的层面来解释。</p>
<hr>
<p>首先我们的虚拟内存使用的是 Page 来描述的。一个 Page 有两种状态 Dirty 和 Clean。在 iOS 中 Clean 是可以被回收的。</p>
<h4 id="Virtual-Memory-分类"><a href="#Virtual-Memory-分类" class="headerlink" title="Virtual Memory 分类"></a>Virtual Memory 分类</h4><ol>
<li><p><strong>Clean Memory</strong>  主要包括 system framework、binary executable 、memory mapped files</p>
</li>
<li><p><strong>Dirty Memory</strong>  包括 Heap allocation、caches、decompressed images 等。</p>
</li>
</ol>
<p>(每个进程拥有一份独立的 Virtual memory pace) Virtual Memory = clean Memory</p>
<h4 id="PhySical-Memory"><a href="#PhySical-Memory" class="headerlink" title="PhySical Memory"></a>PhySical Memory</h4><p>物理内存是指真正加载在主存中的内存，所以实际了解真正的物理内存占用才对我们内存管理帮助更大。</p>
<ol>
<li><p>DirtyMemory</p>
</li>
<li><p>Clean Memory but loaded。</p>
</li>
<li><p>Page Table</p>
</li>
<li><p>ComPressed memory</p>
</li>
<li><p>IOKit Used</p>
</li>
<li><p>Purgeable</p>
</li>
</ol>
<h3 id="内存测量工具"><a href="#内存测量工具" class="headerlink" title="内存测量工具"></a>内存测量工具</h3><p>了解到前面说的内存分类之后我们应该怎么测量我们的内存分布呢。主要有几种工具：命令行工具、Xcode工具、代码工具等。</p>
<h4 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h4><p>如果你开发的是 Mac 程序，Mac OS 自带的有一下几种。</p>
<ol>
<li><p>top 程序</p>
</li>
<li><p>heap 程序</p>
</li>
<li><p>leaks 程序</p>
</li>
<li><p>vmmap 程序</p>
</li>
</ol>
<p>这些工具读者查看 Man Page 即可。</p>
<p>需要注意的是。以上工具分析的大多是虚拟内存，也就是说对于桌面级程序更适合，但是对于 iOS 中没有交换空间，且拥有 Jetsam<br>监控程序的设备，可能还需要更精准的测量工具。</p>
<p>顺便提一句。一个堆区上 malloc 的程序如果并没有使用，虽然它是 Clean 的，但是也会被程序统计到。理论上 malloc<br>可以申请到的虚拟内存大小非常接近 <code>Virtual Memory Space</code> 的大小（这么说的原因是 前文也提到了 malloc<br>实际上是动态分配器程序提供的一些列函数，为了性能，大多数动态分配器都讲堆分为好几块用来做不同大小虚拟内存的管理，因此malloc可以申请到的虚拟内存大小实际决定于动分配器代码的实现。有兴趣的读者可以读一下。)</p>
<h4 id="Xcode-提供的工具"><a href="#Xcode-提供的工具" class="headerlink" title="Xcode 提供的工具"></a>Xcode 提供的工具</h4><ol>
<li><p>Xcode Debug Area</p>
</li>
<li><p>Instruments</p>
</li>
<li><p>DebugMemoryGraph</p>
</li>
</ol>
<p>Memory Report</p>
<p>instruments</p>
<p>DebugMemoryGraph</p>
<p>Scheme</p>
<blockquote>
<p>Tips：配置了 <code>MallocStackLogging</code> 的话甚至可以追踪每个虚拟内存中的对象申请堆栈，便于我们更好的发现问题。</p>
</blockquote>
<p> <strong>注意点：所有Xcode提供的工具必须使用真机测试才能最难接近用户的使用环境</strong></p>
<h4 id="代码工具"><a href="#代码工具" class="headerlink" title="代码工具"></a>代码工具</h4><p>我们通过开发工具可以用来测量我们的内存，但是到了线上这些都用不了，能精准的测量 APP 用到的物理内存才比较重要。</p>
<p>大部分的代码测量内存是通过拿到 Mach 内核提供的 <code>task_info</code> 来测量的，但是这个信息更多的是虚拟内存层面的信息，不能正确的衡量物理内存。</p>
<pre><code>#include &lt;malloc/malloc.h&gt;  
#include &lt;mach/mach_host.h&gt;  
#include &lt;mach/task.h&gt;  

int main(int argc, char * argv[]) {  
    @autoreleasepool {  
        // method 1  
        struct mstats currentStat = mstats();  
        printf(&quot;Freed Bytes:%ld, Used Bytes:%ld Total Bytes:%ld&quot;, currentStat.bytes_free, currentStat.bytes_used, currentStat.bytes_total);  
        // method 2  
        vm_statistics_data_t vmStats;  
        mach_msg_type_number_t infoCount = HOST_VM_INFO_COUNT;  
        kern_return_t kernReturn = host_statistics(mach_host_self(), HOST_VM_INFO, (host_info_t)&amp;vmStats, &amp;infoCount);  
        printf(&quot;free: %lu\nactive: %lu\ninactive: %lu\nwire: %lu\nzero fill: %lu\nreactivations: %lu\npageins: %lu\npageouts: %lu\nfaults: %u\ncow_faults: %u\nlookups: %u\nhits: %u&quot;,  
              vmStats.free_count * vm_page_size,  
              vmStats.active_count * vm_page_size,  
              vmStats.inactive_count * vm_page_size,  
              vmStats.wire_count * vm_page_size,  
              vmStats.zero_fill_count * vm_page_size,  
              vmStats.reactivations * vm_page_size,  
              vmStats.pageins * vm_page_size,  
              vmStats.pageouts * vm_page_size,  
              vmStats.faults,  
              vmStats.cow_faults,  
              vmStats.lookups,  
              vmStats.hits  
              );  
        // method3  
        task_basic_info_data_t taskInfo;  
        infoCount = TASK_BASIC_INFO_COUNT;  
        kernReturn = task_info(mach_task_self(),  
                                             TASK_BASIC_INFO,  
                                             (task_info_t)&amp;taskInfo,  
                                             &amp;infoCount);  

        if (kernReturn == KERN_SUCCESS) {  
            printf(&quot;resdientSize is :%ld&quot;, taskInfo.resident_size);  
        }  
        return 0;  
    }  
}  
</code></pre><p>其中尤其是和 Xcode Debug Area 的差距较大，有时候可能会偏差 <code>50M-100M</code>，于是有大佬拔出了 Xcode 的<br><code>DebugServer</code> 和 <code>WebKit</code> 中的的物理内存计算方式（2018WWDC 苹果也说了 footPrint才是真正的物理内存使用<br><code>ios_memory_deep_dive</code>）</p>
<p>代码如下</p>
<pre><code>std::optional&lt;size_t&gt; memoryFootprint()  
{  
    task_vm_info_data_t vmInfo;  
    mach_msg_type_number_t count = TASK_VM_INFO_COUNT;  
    kern_return_t result = task_info(mach_task_self(), TASK_VM_INFO, (task_info_t) &amp;vmInfo, &amp;count);  
    if (result != KERN_SUCCESS)  
        return std::nullopt;  
    return static_cast&lt;size_t&gt;(vmInfo.phys_footprint);  
}  
</code></pre><h4 id="线上检查工具"><a href="#线上检查工具" class="headerlink" title="线上检查工具"></a>线上检查工具</h4><p>线上检查内存通常会检查内存泄漏，一般有开源的工具</p>
<ol>
<li><p>MLeaksFinder</p>
</li>
<li><p>FBRetainCycleDetector</p>
</li>
</ol>
<h3 id="高性能使用内存"><a href="#高性能使用内存" class="headerlink" title="高性能使用内存"></a>高性能使用内存</h3><p>了解完那么多原理和分析的工具，那么在日常使用中有没有什么指导原则可以帮助我们来写出更快，内存占用更低的代码呢？</p>
<ol>
<li><p>首先熟读 <code>ARCMenual</code>，大部分 iOS 开发者其实是完全不清楚 ARC 是怎么实现的，还有相对于的原则，尤其是 Autorelease 修饰的指针，还有在多线程情况下的原则。</p>
</li>
<li><p>用 <code>weak</code> 修饰替换 <code>unsafe_unretain</code></p>
</li>
<li><p>使用 <code>weak strong dance</code> 来解决 block 中的循环引用问题。需要注意的是大部分人都以为使用了 weak 指针就可以了。其实不然，在block 内必须使用 strong 重新绑定变量，避免在多线程情况下 <code>weak</code> 变量为空导致 Crash，使用 strong 指针前判断是否为空</p>
</li>
</ol>
<p>例：</p>
<pre><code>- (void)test {  
    weak __typeof(self) weakSelf = self;  
    [xxobjc onCompleate:^(){  
        strong __typeof(self) self = weakSelf;  
        if (!self) { return; }  
        [xx moreCompleate:&amp;(){  
            strong __typeof(self) self = weakSelf;  
            if (!self) { return; }  
            // do something  
        }];  
    }];  
}  
</code></pre><ol>
<li><p>小心方法中的self，在 Objective-C的方法中 隐含的 self 是 <code>__unsafed_unretain</code> 的；</p>
</li>
<li><p>使用 <code>Autoreleasepool</code> 来降低循环中的内存峰值，避免 OOM；</p>
</li>
<li><p>要处理 <code>Memory Warning</code>；</p>
</li>
<li><p>C/C++ new 出来的要 delete，malloc 的要 free；</p>
</li>
<li><p>UITableView/UICollectionView 的重用（不单单是cell重用，cell 使用的子view也要重用。）；</p>
</li>
<li><p>[UIImage imageNamed:] 适合于 UI 界面中的贴图的读取，较大的资源文件应该尽量避免使用；</p>
</li>
<li><p>WKWebView 是跨进程通信的，不会占用我们的 APP 使用的物理内存量；</p>
</li>
<li><p><code>try_catch_finally</code> 一定要清理资源；</p>
</li>
<li><p>尽量少引用 <code>performaSelector:</code> 会对 ARC 的内存管理产生错误，导致内存泄漏；</p>
</li>
<li><p>lazy load 那些大的内存对象，尤其是需要保证线程安全，可以参考 java 中的懒汉式 <code>Double Check</code> 写法；</p>
</li>
<li><p>需要在收到内存警告的时候释放的 Cache，用 NSCache 代替 NSDictionary，使用 NSPurgableData 代替NSData.</p>
</li>
</ol>
<p>前文中我们说到 iOS 的没有交换分区的概念，取而代之的是压缩内存的办法，倘若在使用 NSDictionary<br>的时候收到内存警告，然后去释放这个NSDictionary，如果占据的内存过大，很可能在解压的过程中就被 JetSem Kill<br>掉，如果你的内存只是误用的缓存或者是可重建的数据，就把 NSCache 当初 NSDictionary 用吧。同理 NSPurableData 也是。</p>
<ol>
<li><p>不要使用像素过大的图片文件，即便一个图片在磁盘中很小，但是因为图片像素宽高很大也会占据更多的内存，这里有个公式可以计算<code>widthPx * HeightPx * 4Bytes per pixel(alpha red green blue)</code>。即便在 iOS 12 中已经可以优化单色图的内存占用，可毕竟是 iOS 12，现在好多公司还在支持iOS8 ~~</p>
</li>
<li><p>使用 NSData 和 UIImage 的 mmap 加载选型来加载那些可以被重建的数据；</p>
</li>
<li><p>在子线程手动申请（maloc）大内存的的时候 ping 一下主线程，因为子线程无法收到内存警告的传递；</p>
</li>
</ol>
<pre><code>- (void)test {  
    // current on sub Thread  
    // if main thread is memory warning it will blocked  
    dispatch_sync(dispatch_get_main_queue(), ^{  
        [some description]  
    });  
    malloc(huge memory);  
}  
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;仅以此文解答自己大学以来多年对内存管理的疑惑。&lt;/p&gt;
&lt;h2 id=&quot;经典操作系统的虚拟内存&quot;&gt;&lt;a href=&quot;#经典操作系统的虚拟内存&quot; class=&quot;headerlink&quot; title=&quot;经典操作系统的虚拟内存&quot;&gt;&lt;/a&gt;经典操作系统的虚拟内存&lt;/h2&gt;&lt;h3 id=&quot;为什么要有虚拟内存？&quot;&gt;&lt;a href=&quot;#为什么要有虚拟内存？&quot; class=&quot;headerlink&quot; title=&quot;为什么要有虚拟内存？&quot;&gt;&lt;/a&gt;为什么要有虚拟内存？&lt;/h3&gt;&lt;p&gt;随着计算机的发展，我们的计算机处理的任务也变得越来越繁多，但是对于某台固定的计算机，CPU 和 Memory&lt;br&gt;都是固定的，如果有些直接使用物理内存地址的话会带来很多问题。首先编译器不能以一种抽象的角度来描绘内存，在执行的过程中如果某个进程占据的内存过大，这个进程可能就无法运行，即便运行了，内存相对来说是非常不安全的，一个不小心操作到了别的进程的内存，可能导致进程的崩溃，如果写入了内核使用的内存可能导致操作系统的崩溃。&lt;/p&gt;
&lt;p&gt;现代操作系统的内存管理是非常多计算机科学家智慧的结晶，这种管理方式就是  &lt;strong&gt;虚拟内存 (Virtual Memory/VM)&lt;/strong&gt; 。VM&lt;br&gt;是一系列技术的总称，包括硬件异常，物理地址，主存，磁盘文件，操作系统内核软件的内存管理。&lt;/p&gt;
&lt;p&gt;虚拟内存提供了三大重要的特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;它将主存看做在存储在磁盘上的地址空间的高速缓存，利用程序的局部性原理，只将活跃的内存加载到主存中，提高了主存的利用率；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为每个进程提供了一个抽象的统一的连续的私有的地址空间。简化了内存管理方式；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对内存进行分段（segment）提供权限能力，保护每个进程的地址空间不会被其他进程影响；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://guiyongdong.github.io/categories/Objective-C/"/>
    
    
      <category term="Objective-C" scheme="https://guiyongdong.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>AVFoundation之AVAudioRecorder</title>
    <link href="https://guiyongdong.github.io/2018/07/22/AVFoundation%E4%B9%8BAVAudioRecorder/"/>
    <id>https://guiyongdong.github.io/2018/07/22/AVFoundation之AVAudioRecorder/</id>
    <published>2018-07-22T06:44:25.000Z</published>
    <updated>2018-07-23T08:31:41.007Z</updated>
    
    <content type="html"><![CDATA[<p><code>AVAudioRecorder</code>是一个功能强大且代码简单易用的<code>iOS</code>、<code>Mac</code>平台下的音频录制类。它即可从内置的麦克风录制音频，也可从外部音频设备进行录制，比如外接麦克风等。</p>
<a id="more"></a>
<p>我们先来看官方对其介绍：</p>
<p>一个提供录音功能的类。它支持以下功能：</p>
<blockquote>
<p>可一直录音，知道用户停止<br>可指定录制的时间段<br>拥有暂停、继续的功能<br>可获取录制过程中的音量数据</p>
</blockquote>
<p><code>AVAudioRecorder</code>支持常用的音频编码，如图所示：</p>
<p><img src="https://raw.githubusercontent.com/guiyongdong/Resource/master/hexoImage/AVFoundation/fountation2.png" alt=""></p>
<h1 id="AVAudioRecorder"><a href="#AVAudioRecorder" class="headerlink" title="AVAudioRecorder"></a>AVAudioRecorder</h1><hr>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><hr>
<h3 id="initWithURL-settings-error"><a href="#initWithURL-settings-error" class="headerlink" title="initWithURL:settings:error:"></a>initWithURL:settings:error:</h3><p><code>- (instancetype)initWithURL:(NSURL *)url settings:(NSDictionary&lt;NSString *,id&gt; *)settings error:(NSError * _Nullable *)outError</code><br>给定一个文件路径，并设置录制音频的参数</p>
<p>这里主要说一下<code>settings</code>。主要控制录音参数，比如编码、声道数、码率具体参数如下：</p>
<ul>
<li><code>AVFormatIDKey</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;AVAudioRecorder&lt;/code&gt;是一个功能强大且代码简单易用的&lt;code&gt;iOS&lt;/code&gt;、&lt;code&gt;Mac&lt;/code&gt;平台下的音频录制类。它即可从内置的麦克风录制音频，也可从外部音频设备进行录制，比如外接麦克风等。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://guiyongdong.github.io/categories/Objective-C/"/>
    
    
      <category term="AVFoundation" scheme="https://guiyongdong.github.io/tags/AVFoundation/"/>
    
  </entry>
  
  <entry>
    <title>AVFoundation之AVAudioPlayer</title>
    <link href="https://guiyongdong.github.io/2018/07/21/AVFoundation%E4%B9%8BAVAudioPlayer/"/>
    <id>https://guiyongdong.github.io/2018/07/21/AVFoundation之AVAudioPlayer/</id>
    <published>2018-07-21T05:16:11.000Z</published>
    <updated>2018-07-22T06:54:42.371Z</updated>
    
    <content type="html"><![CDATA[<p>目前公司主要做<code>Voip</code>方面的应用，作为<code>iOS</code>开发者，当然需要对<code>AVFoundation</code>有个全面的了解。接下来将开启一个系列，记录学习<code>AVFoundation</code>的过程。</p>
<a id="more"></a>
<p>这篇主要说一下<code>AVFoundation</code>中经常用到的音频播放类<code>AVAudioPlayer</code>，官方对它的介绍是这样的：</p>
<blockquote>
<p>可以在任意的时间播放音频<br>可以播放文件系统中或内存中的音频<br>可循环播放<br>可使用多个实例同时播放<br>支持快进、快退、定点播放、加速播放、减速播放等</p>
</blockquote>
<p>可以看到，<code>AVAudioPlayer</code>主要用在播放本地音频。如果想播放网络音频，则需要使用其他类了。另外协议类<code>AVAudioPlayerDelegate</code>主要用作<code>AVAudioPlayer</code>的各种事件回调。</p>
<p><code>AVAudioPlayer</code>支持常用的音频编码，如<code>AAC</code>、<code>PCMA</code>、<code>PCMU</code>等。音频类型如下：</p>
<p><img src="https://raw.githubusercontent.com/guiyongdong/Resource/master/hexoImage/AVFoundation/fountation1.png" alt=""></p>
<h1 id="AVAudioPlayer"><a href="#AVAudioPlayer" class="headerlink" title="AVAudioPlayer"></a>AVAudioPlayer</h1><hr>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><hr>
<h3 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h3><p>初始化一个<code>AVAudioPlayer</code>的方式有如下四种：</p>
<p><code>- (instancetype)initWithContentsOfURL:(NSURL *)url error:(NSError * _Nullable *)outError;</code><br><code>- (instancetype)initWithData:(NSData *)data error:(NSError * _Nullable *)outError;</code><br><code>- (instancetype)initWithContentsOfURL:(NSURL *)url fileTypeHint:(NSString *)utiString error:(NSError * _Nullable *)outError;</code><br><code>- (instancetype)initWithData:(NSData *)data fileTypeHint:(NSString *)utiString error:(NSError * _Nullable *)outError;</code></p>
<p><code>AVAudioPlayer</code>有4种初始化方式，即可以通过文件路径（<code>NSURL</code>）来初始化也可以通过音视频数据（<code>NSData</code>）来初始化。另外也可以指定音频文件的<code>UTI</code>类型。通常可以指定为<code>public.audio</code>，关于<code>UTI</code>请点<a href="https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html#//apple_ref/doc/uid/TP40009259-SW1" target="_blank" rel="external">这里</a></p>
<h3 id="prepareToPlay"><a href="#prepareToPlay" class="headerlink" title="prepareToPlay"></a>prepareToPlay</h3><p><code>- (BOOL)prepareToPlay</code></p>
<p>调用此方法可将音频数据提前加载到缓冲区。</p>
<h3 id="play"><a href="#play" class="headerlink" title="play"></a>play</h3><p><code>- (BOOL)play</code></p>
<p>调用此方法即可异步开始播放音频</p>
<h3 id="playAtTime"><a href="#playAtTime" class="headerlink" title="playAtTime"></a>playAtTime</h3><p><code>- (BOOL)playAtTime:(NSTimeInterval)time</code></p>
<p>在某一时刻开始播放音频，可设置成当前时间之后的多少秒。例如设置5秒之后开始播放：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSTimeInterval</span> delay = <span class="number">5</span>;</div><div class="line">[<span class="keyword">self</span>.audioPlayer playAtTime:<span class="keyword">self</span>.audioPlayer.deviceCurrentTime+delay];</div></pre></td></tr></table></figure>
<h3 id="pause"><a href="#pause" class="headerlink" title="pause"></a>pause</h3><p><code>- (void)pause</code></p>
<p>暂停播放</p>
<h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><p><code>- (void)stop</code></p>
<p><code>stop</code>和<code>pause</code>最大的区别是<code>stop</code>会撤销<code>prepareToPlay</code>所做的准备。</p>
<h3 id="setVolume-fadeDuration"><a href="#setVolume-fadeDuration" class="headerlink" title="setVolume:fadeDuration:"></a>setVolume:fadeDuration:</h3><p><code>- (void)setVolume:(float)volume fadeDuration:(NSTimeInterval)duration</code></p>
<p>设置音频在<code>duration</code>时间之后的播放声音大小，<code>volume</code>的范围为0-1</p>
<h3 id="averagePowerForChannel"><a href="#averagePowerForChannel" class="headerlink" title="averagePowerForChannel"></a>averagePowerForChannel</h3><p><code>- (float)averagePowerForChannel:(NSUInteger)channelNumber</code></p>
<p>获取通道内的平均分贝值，取值范围为0Db（最大分贝）到-160Db（最小分贝），调用此方法之前，需先调用<code>updateMeters</code>方法更新分贝。</p>
<h3 id="peakPowerForChannel"><a href="#peakPowerForChannel" class="headerlink" title="peakPowerForChannel"></a>peakPowerForChannel</h3><p><code>- (float)peakPowerForChannel:(NSUInteger)channelNumber</code></p>
<p>获取通道内的最大分贝值，取值范围为0Db（最大分贝）到-160Db（最小分贝），调用此方法之前，需先调用<code>updateMeters</code>方法更新分贝。</p>
<h3 id="updateMeters"><a href="#updateMeters" class="headerlink" title="updateMeters"></a>updateMeters</h3><p><code>- (void)updateMeters</code></p>
<p>更新所有通道内的分贝值。</p>
<hr>
<h2 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h2><hr>
<h3 id="playing"><a href="#playing" class="headerlink" title="playing"></a>playing</h3><p>获取当前播放状态</p>
<h3 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h3><p>获取当前播放的音量大小，范围为0-1，建议使用<code>MPVolumeView</code>来自定义音量界面。</p>
<h3 id="pan"><a href="#pan" class="headerlink" title="pan"></a>pan</h3><p>设置哪个扬声器播放。例如：-1。0表示只使用左扬声器播放，1.0表示只使用右扬声器播放，0.0表示同时使用左右两个扬声器播放。</p>
<h3 id="rate"><a href="#rate" class="headerlink" title="rate"></a>rate</h3><p>设置播放速度，取值范围是0.5-2.0。默认为1.0，表示正常的播放速度。0.5表示半速。2表示两倍。但在使用此属性之前，必须先调用<code>enableRate</code>启用播放速度功能。</p>
<h3 id="enableRate"><a href="#enableRate" class="headerlink" title="enableRate"></a>enableRate</h3><p>开启播放速度，最好在<code>prepareToPlay</code>方法之后设置。</p>
<h3 id="numberOfLoops"><a href="#numberOfLoops" class="headerlink" title="numberOfLoops"></a>numberOfLoops</h3><p>设置循环播放的次数。确切的来说，此变量表示在播放结束之后，还需要再播放几次。例如设置为1，表示在播放结束之后，在播放一次，所有，你能听到两次播放。 如果设置为负数，表示一直循环播放。直到调用<code>stop</code>方法停掉。</p>
<h3 id="delegate"><a href="#delegate" class="headerlink" title="delegate"></a>delegate</h3><p><code>AVAudioPlayer</code>代理</p>
<h3 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h3><p>获取音频参数。例如比特率、通道数等。<code>settings</code>的类型为<code>NSDictionary&lt;NSString *,id&gt;</code>，<code>keys</code>如下：</p>
<ul>
<li>通道：<code>AVChannelLayoutKey</code></li>
<li>比特率：<code>AVEncoderBitRateKey</code></li>
<li>编码类型：<code>AVFormatIDKey</code></li>
<li>通道数：<code>AVNumberOfChannelsKey</code></li>
<li>采样率：<code>AVSampleRateKey</code></li>
</ul>
<h3 id="numberOfChannels"><a href="#numberOfChannels" class="headerlink" title="numberOfChannels"></a>numberOfChannels</h3><p>通道数，效果和<code>AVNumberOfChannelsKey</code>一样。</p>
<h3 id="channelAssignments"><a href="#channelAssignments" class="headerlink" title="channelAssignments"></a>channelAssignments</h3><p>一般情况下为<code>nil</code>，如果不是空的话，那么此数组的长度和<code>numberOfChannels</code>的值一样，每个<code>AVAudioSessionChannelDescription</code>代表每个通道的详细参数。</p>
<h3 id="duration"><a href="#duration" class="headerlink" title="duration"></a>duration</h3><p>音频的长度</p>
<h3 id="currentTime"><a href="#currentTime" class="headerlink" title="currentTime"></a>currentTime</h3><p>当前音频播放到哪里，时间点。通过设置<code>currentTime</code>可实现快退，快进等功能。例如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//快进</span></div><div class="line">- (<span class="keyword">IBAction</span>)fastForward:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="built_in">NSTimeInterval</span> shortTime = <span class="number">1</span>;</div><div class="line">    <span class="built_in">NSTimeInterval</span> now = <span class="keyword">self</span>.audioPlayer.currentTime + shortTime;</div><div class="line">    [<span class="keyword">self</span>.audioPlayer setCurrentTime:now];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="deviceCurrentTime"><a href="#deviceCurrentTime" class="headerlink" title="deviceCurrentTime"></a>deviceCurrentTime</h3><p>输出设备的当前时间，主要搭配<code>playAtTime</code>使用。</p>
<h3 id="url"><a href="#url" class="headerlink" title="url"></a>url</h3><p>音频文件URL</p>
<h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>音频文件数据</p>
<h3 id="format"><a href="#format" class="headerlink" title="format"></a>format</h3><p>获取当前缓存的音频格式</p>
<h3 id="meteringEnabled"><a href="#meteringEnabled" class="headerlink" title="meteringEnabled"></a>meteringEnabled</h3><p>如果想获取音频的分贝值，要开启此设置。例如我们想实时获取当前播放的分贝值。来绘制图形界面：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)startDbTimer:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    [<span class="keyword">self</span>.audioPlayer setMeteringEnabled:<span class="literal">YES</span>];</div><div class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span> (<span class="keyword">self</span>)weakSelf = <span class="keyword">self</span>;</div><div class="line">    <span class="built_in">NSTimer</span> *timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1</span> repeats:<span class="literal">YES</span> block:^(<span class="built_in">NSTimer</span> * _Nonnull timer) &#123;</div><div class="line">        [weakSelf.audioPlayer updateMeters];</div><div class="line">        <span class="keyword">float</span> averageDB = [weakSelf.audioPlayer averagePowerForChannel:<span class="number">0</span>];</div><div class="line">        <span class="keyword">float</span> peakDb = [weakSelf.audioPlayer peakPowerForChannel:<span class="number">0</span>];</div><div class="line">        <span class="comment">//绘制波形图</span></div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="AVAudioPlayerDelegate"><a href="#AVAudioPlayerDelegate" class="headerlink" title="AVAudioPlayerDelegate"></a>AVAudioPlayerDelegate</h1><p><code>AVAudioPlayerDelegate</code>的方法很少。目前能用的只有两个。</p>
<h2 id="audioPlayerDidFinishPlaying-successfully"><a href="#audioPlayerDidFinishPlaying-successfully" class="headerlink" title="audioPlayerDidFinishPlaying:successfully:"></a>audioPlayerDidFinishPlaying:successfully:</h2><p><code>- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer *)player successfully:(BOOL)flag</code></p>
<p>当音频播放完毕以后，会回调此方法</p>
<h2 id="audioPlayerDecodeErrorDidOccur-error"><a href="#audioPlayerDecodeErrorDidOccur-error" class="headerlink" title="audioPlayerDecodeErrorDidOccur:error:"></a>audioPlayerDecodeErrorDidOccur:error:</h2><p><code>- (void)audioPlayerDecodeErrorDidOccur:(AVAudioPlayer *)player error:(NSError *)error</code></p>
<p>播放出错回调</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前公司主要做&lt;code&gt;Voip&lt;/code&gt;方面的应用，作为&lt;code&gt;iOS&lt;/code&gt;开发者，当然需要对&lt;code&gt;AVFoundation&lt;/code&gt;有个全面的了解。接下来将开启一个系列，记录学习&lt;code&gt;AVFoundation&lt;/code&gt;的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://guiyongdong.github.io/categories/Objective-C/"/>
    
    
      <category term="AVFoundation" scheme="https://guiyongdong.github.io/tags/AVFoundation/"/>
    
  </entry>
  
  <entry>
    <title>Socks5代理分析</title>
    <link href="https://guiyongdong.github.io/2017/12/09/Socks5%E4%BB%A3%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>https://guiyongdong.github.io/2017/12/09/Socks5代理分析/</id>
    <published>2017-12-09T06:56:26.000Z</published>
    <updated>2018-01-10T11:30:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>项目中遇到了socks5代理环境下UDP不通的问题，在解决问题的过程中，也学习了socks5到底是如何通信的，下面就原理、客户端、服务器三个方面来详细说一下。</p>
<a id="more"></a>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>有一部分企业，出于安全考虑或者某些原因，员工的上网环境必须走代理，通常服务器会被配置成一个HTTP代理，但是HTTP是基于TCP的，走UDP的数据则不行，所以，像直播或者视频都不行，为了解决这些问题，我们可以将服务器配置成socks5代理，这样就能满足我们的需求。</p>
<p>首先，我们要知道什么是代理，其实代理就是帮你干活的。例如跑腿，你想到楼下的便利店买包烟，但是你的腿被别人打断了，不能下楼，这时，你叫了一个跑腿的，告诉他到楼下的便利店买包烟，他买完以后，又给你送到楼上，你就开始愉快的抽烟。这就是一个完整的代理过程。</p>
<p><img src="https://pic1.zhimg.com/50/v2-d110c54278c699e63724e614743b0d87_hd.jpg" alt=""></p>
<h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p>通常，socks5代理服务器都会配置在1080端口，他是基于TCP的，客户端要连接到代理服务器，首先要经过三次握手，之后需要和服务器进行认证，格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+----+----------+----------+</div><div class="line">|VER | NMETHODS | METHODS  |</div><div class="line">+----+----------+----------+</div><div class="line">| 1  |    1     | 1 to 255 |</div><div class="line">+----+----------+----------+</div></pre></td></tr></table></figure>
<ul>
<li>VER 字段是当前协议的版本号，也就是5</li>
<li>NMETHODS 字段是代表客户端支持的认证方式的个数</li>
<li>METHODS 字段代表客户端支持的认证方式，每一位字节表示一种认证方式。</li>
</ul>
<p>服务器在客户端发送的认证方式中选择一种进行匹配，返回数据如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+----+----------+</div><div class="line">|VER |  METHODS |</div><div class="line">+----+----------+</div><div class="line">| 1  |    1     |</div><div class="line">+----+----------+</div></pre></td></tr></table></figure>
<ul>
<li>METHOD  即为服务器端匹配的结果，如果服务器返回的是OxFF，则表明客户端所支持的认证方式，服务器端都不支持。那么认证失败。</li>
</ul>
<p>认证方式有如下几种：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">0x00: 无验证需求</div><div class="line">0x01: 通用安全服务应用程序接口(GSSAPI)</div><div class="line">0x02: 用户名/密码(USERNAME/PASSWORD)</div><div class="line">0x03: 至 0x7F IANA 分配(IANA ASSIGNED)</div><div class="line">0x80: 至 0xFE 私人方法保留(RESERVED FOR PRIVATE METHODS)</div><div class="line">0xFF: 无可接受方法(NO ACCEPTABLE METHODS)</div></pre></td></tr></table></figure>
<p>下面通过WireShark分析socks5认证过程：</p>
<p><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/socks5_1.png?raw=true" alt=""></p>
<p>首先，客户端和服务器的三次握手建立连接，之后，客户端发送认证请求，我们可以看到，客户端发送的数据为：</p>
<ul>
<li>VER:05  即版本为5</li>
<li>NMETHODS:02  即支持两种认证方式</li>
<li>METHODS: 00 02 两种认证方式分别为 无须认证和用户名密码认证</li>
</ul>
<p><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/socks5_2.png?raw=true" alt=""></p>
<p>服务器回的数据为：</p>
<ul>
<li>VER:05  即版本为5</li>
<li>METHODS:00  即和客户端商议使用无须认证方式</li>
</ul>
<p>当然，这里我配置的代理服务器没有使用用户名密码认证方式，假如需要此种方式的认证，客户端还需要发送用户名密码进行认证，有兴趣的同学可以试试。</p>
<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>认证通过以后，客户端就需要告诉代理，需要它做什么，即需要给代理发命令，具体的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+----+-----+-------+------+----------+----------+</div><div class="line">|VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |</div><div class="line">+----+-----+-------+------+----------+----------+</div><div class="line">| 1  |  1  |   1   |  1   | Variable |    2     |</div><div class="line">+----+-----+-------+------+----------+----------+</div></pre></td></tr></table></figure>
<ul>
<li>VER: 协议版本</li>
<li>CMD: 命令，有三种命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">0x01：CONNECT 建立 TCP 连接 </div><div class="line">0x02: BIND 上报反向连接地址</div><div class="line">0x03：关联 UDP 请求</div></pre></td></tr></table></figure>
<ul>
<li>RSV: 保留字段，值为 0x00</li>
<li>ATYP: 地址类型，取值为：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">0x01：IPv4</div><div class="line">0x03: 域名</div><div class="line">0x04：IPv6</div></pre></td></tr></table></figure>
<ul>
<li>DST.ADDR 目的地，取值随ATYP的类型不同而不同，如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ATYP == 0x01：4 个字节的 IPv4 地址</div><div class="line">ATYP == 0x03：1 个字节表示域名长度，紧随其后的是对应的域名</div><div class="line">ATYP == 0x04：16 个字节的 IPv6 地址</div></pre></td></tr></table></figure>
<ul>
<li>DST.PORT 目的地端口</li>
</ul>
<p>服务器返回的数据如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+----+-----+-------+------+----------+----------+</div><div class="line">|VER | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |</div><div class="line">+----+-----+-------+------+----------+----------+</div><div class="line">| 1  |  1  |   1   |  1   | Variable |    2     |</div><div class="line">+----+-----+-------+------+----------+----------+</div></pre></td></tr></table></figure>
<ul>
<li>VER: 版本号</li>
<li>REP: 服务器返回的结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">* X&apos;00&apos; succeeded</div><div class="line">* X&apos;01&apos; general SOCKS server failure</div><div class="line">* X&apos;02&apos; connection not allowed by ruleset</div><div class="line">* X&apos;03&apos; Network unreachable</div><div class="line">* X&apos;04&apos; Host unreachable</div><div class="line">* X&apos;05&apos; Connection refused</div><div class="line">* X&apos;06&apos; TTL expired</div><div class="line">* X&apos;07&apos; Command not supported</div><div class="line">* X&apos;08&apos; Address type not supported</div><div class="line">* X&apos;09&apos; to X&apos;FF&apos; unassigned</div></pre></td></tr></table></figure>
<ul>
<li>RSV 保留字段</li>
<li>ATYP: 地址类型</li>
<li>BND.ADDR: 服务器地址</li>
<li>BND.PORT: 服务器端口</li>
</ul>
<p><strong>CMD</strong></p>
<p><strong>CONNECT</strong></p>
<p>CONNECT表示要和目的主机建立TCP连接，在服务器回应中，BND.ADDR包含了关联的IP地址。此处所提供的BND.ADDR通常情况下不同于客户端连接到socks5代理服务器的IP地址，因为有可能代理服务器是一个集群，当然我这里只是一个服务器，所以返回的和代理的IP一样，BND.PORT表示服务器分配的连接到目标主机的端口号，即代理服务器接下来会使用BND.PORT这个端口与目标主机进行TCP通信。</p>
<p><strong>BIND</strong><br>BIND请求被用在那些需要客户机接收到服务器连接的协议中。FTP就是一个众所周知的例子。在实际应用场景中，一般用不到，这里不再细说。</p>
<p><strong>UDP ASSOCIATE</strong></p>
<p>此命令表示需要进行UDP转发，BND.ADDR和CONNECT中的含义一样，而BND.PORT表示服务器提供给客户端的UDP转发端口，接下来客户端的所有UDP都需要往代理的此端口发送。</p>
<p>因为我这次遇到的主要是UDP转发的问题，那么接下就着重分析一下UDP ASSOCIATE。</p>
<h3 id="UDP-ASSOCIATE"><a href="#UDP-ASSOCIATE" class="headerlink" title="UDP ASSOCIATE"></a>UDP ASSOCIATE</h3><p>当客户端发送UDP ASSOCIATE命名时，代理服务器会返回相应的断端口，如下：</p>
<p><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/socks5_3.png?raw=true" alt=""></p>
<p>服务器响应如下：</p>
<p><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/socks5_4.png?raw=true" alt=""></p>
<p>那么，客户端知道服务器地址以后，是如何发送到代理服务器呢？</p>
<p>一个UDP数据报如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+----+------+------+----------+----------+----------+</div><div class="line">|RSV | FRAG | ATYP | DST.ADDR | DST.PORT |　　DATA　|</div><div class="line">+----+------+------+----------+----------+----------+</div><div class="line">|　2  |　 1　| 　1　 | Variable | 　2　　　 | Variable |</div><div class="line">+----+------+------+----------+----------+----------+</div></pre></td></tr></table></figure>
<ul>
<li>RSV 占两个字节 即 0x0000</li>
<li>FRAG Current fragment number</li>
<li>ATYP  目的地址类型 </li>
<li>DST.ADDR 目的地址</li>
<li>DST.PORT  目的端口</li>
<li>DATA  真正的数据</li>
</ul>
<p><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/socks5_5.png?raw=true" alt=""></p>
<p>如此，客户端开始不断的发送UDP数据到代理服务器，代理服务器接收到数据后，又会如何呢？</p>
<p><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/socks5_6.png?raw=true" alt=""></p>
<p>我们可以看到，客户端与代理之间的数据要比代理与目的主机之间的数据大10个字节，而这10个字节正是socks5协议头。</p>
<p>完整的UDP转发流程为：</p>
<p><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/socks5_7.jpg?raw=true" alt=""></p>
<p>现在，大家是不是对socks5有了一个全面的认识呢！</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>一般情况下，类似于QQ支持socks5代理配置，但是大部分应用并不支持socks5代理，这时候我们可以使用一些代理工具，这里使用SocksCap64这个工具，他会使你的应用支持socks5协议。但是它只支持Windows，在Mac下你可以在网络上搜索其他的全局代理软件。</p>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>服务器可以使用dante软件。</p>
<ul>
<li>安装Dante</li>
</ul>
<p>从源码安装</p>
<p>首先要下载源码-&gt;<a href="http://www.inet.no/dante/files/dante-1.4.2.tar.gz" target="_blank" rel="external"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">tar -xzf dante-1.4.2.tar.gz</div><div class="line">cd dante-1.4.2</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<ul>
<li>配置</li>
</ul>
<p>dante的默认配置文件时/etc/sockd.conf。具体的配置为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">logoutput: /var/log/sockd.log  # 配置log文件</div><div class="line">internal: eth0  port = 1080  # 配置内网 这里直接写eth0  端口可以配置成1080</div><div class="line">external: 45.77.242.213 #外网ip</div><div class="line">socksmethod: none </div><div class="line">clientmethod:  none</div><div class="line">#method: username  </div><div class="line">#user.privileged: root</div><div class="line">user.notprivileged: root</div><div class="line">#user.libwrap: nobody</div><div class="line"></div><div class="line">client pass &#123;</div><div class="line">from: 0.0.0.0/0 to: 0.0.0.0/0  #客户端过滤规则</div><div class="line">log:error</div><div class="line">&#125;</div><div class="line">socks pass &#123;</div><div class="line">from: 0.0.0.0/0 to: 0.0.0.0/0</div><div class="line">command: connect udpassociate # 支持的CMD</div><div class="line">udp.portrange: 6000-6400  # 指定UDP转发接口范围</div><div class="line">log: connect error</div><div class="line">&#125;</div><div class="line">socks pass &#123;</div><div class="line">from: 0.0.0.0/0 to: 0.0.0.0/0</div><div class="line">command: bindreply udpreply  # UDP回转</div><div class="line">log: error</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>启动</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sockd</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：当Socks5协议不使用1080端口时，WireShark是识别不出Socks5代理的，WireShark会将Socks5协议直接识别成TCP或者UDP。这点要注意。</p>
<p>关于更详细的配置，请参考dante官网<a href="http://www.inet.no/dante/doc/" target="_blank" rel="external">dante</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;项目中遇到了socks5代理环境下UDP不通的问题，在解决问题的过程中，也学习了socks5到底是如何通信的，下面就原理、客户端、服务器三个方面来详细说一下。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="https://guiyongdong.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Socks5" scheme="https://guiyongdong.github.io/tags/Socks5/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket WebRTC Scoket的理解</title>
    <link href="https://guiyongdong.github.io/2017/10/16/WebSocket-WebRTC-Scoket%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://guiyongdong.github.io/2017/10/16/WebSocket-WebRTC-Scoket的理解/</id>
    <published>2017-10-16T06:59:44.000Z</published>
    <updated>2017-10-24T08:07:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直搞不明白<code>Socket</code>、<code>WebSocket</code>、<code>WebRTC</code>的关系，最近有时间，就来研究一下。</p>
<a id="more"></a>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><hr>
<h5 id="HTTP1-O-和-HTTP1-1"><a href="#HTTP1-O-和-HTTP1-1" class="headerlink" title="HTTP1.O 和 HTTP1.1"></a>HTTP1.O 和 HTTP1.1</h5><p>开发中，最常用的协议就是<code>HTTP</code>，<code>HTTP</code>是应用层中的协议，基于<code>TCP</code>来实现传输数据。客户端请求一次数据会通过<code>TCP</code>的三次握手建立连接，连接建立以后，服务器发送数据到客户端，之后断开连接，如此循环。这就造成了一些性能和资源的浪费。例如，一个包含许多图像网页文件中并没有包含真正的图像数据，只是指明了图像的URL地址，客户端需要建立好多连接来请求图片信息，这样会非常的耗时以及浪费资源。所以在<code>Http1.1</code>时，添加了支持持久连接的特性，在一个<code>TCP</code>连接上可以发送多个请求和响应，减少了建立和关闭连接的消耗和延迟。</p>
<h5 id="Polling"><a href="#Polling" class="headerlink" title="Polling"></a>Polling</h5><p>但是<code>HTTP</code>还有一个缺点，就是只能客户端主动去拉取数据，假如服务端有数据想主动推给客户端，那么<code>HTTP</code>则无能为力。但是可以通过<code>Polling</code>轮训的方式模拟实时数据。例如，客户端可以开启定时器，每1秒发送一次<code>HTTP</code>请求，如果服务端有数据则返回。这种方式下，会消耗大量的流量以及资源。是最不适合做APP端的，因为APP端的流量，电量等都是比较稀缺的资源。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1194012-ce4df238336909a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br></div>


<h5 id="Long-polling"><a href="#Long-polling" class="headerlink" title="Long polling"></a>Long polling</h5><p>长轮训是对轮训的改进版，客户端发送<code>HTTP</code>给服务器之后，如果服务器这时没有新消息，就一直等待，当有新消息的时候，才会返回给客户端。当然，某种程度上减少了流量和CPU的消耗。但是这种方式还是有一种弊端，假如服务端的数据更新很快，但是只有当客户端再次询问时才能返回。而且每次发<code>HTTP</code>请求都会携带很重的数据头，有时候这些数据并不是必须的，这就造成了网络资源的浪费。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1194012-6ca608d5a37095e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br></div>


<p><code>iOS</code>端比较常用的<code>HTTP</code>协议封装框架为<code>AFNetWorking</code>。</p>
<h3 id="TCP-三次握手以及四次挥手"><a href="#TCP-三次握手以及四次挥手" class="headerlink" title="TCP 三次握手以及四次挥手"></a>TCP 三次握手以及四次挥手</h3><hr>
<h5 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h5><p><code>TCP/IP</code>协议中，<code>TCP</code>协议提供可靠的传输服务，采用三次握手建立一个连接：</p>
<ol>
<li>第一次握手：建立连接时，客户端A发送SYN包（SYN=j）到服务器B，并进入SYN_SEND状态，等待服务器B确认</li>
<li>第二次握手：服务器B收到SYN包以后，必须确定客户端A的SYN（ACK=j+1），同时自己也发送一个SYN包（SYN=k），即SYN+ACK包，此时服务器B进入SYN_RECV状态</li>
<li>第三次握手：客户端A收到服务器B的SYN+ACK包，向服务器B发送确认包ACK（ACK=k+1），此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。<br>完成三次握手，客户端与服务器开始传输数据。<div align="center"><br><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/phunxm/EntryImages/20091227/TCPConnect.JPG" alt="image"><br></div>

</li>
</ol>
<h5 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h5><ol>
<li>客户端发送一个FIN，用来关闭客户端A到服务器B的数据传输</li>
<li>服务器B收到这个FIN，它发回一个ACK，确定序号为收到的序号加1，和SYN一样</li>
<li>服务器B关闭与客户端A的连接，发送一个FIN给客户端A</li>
<li>客户端A发回ACK报文确定，并将确定序号设置为收到序号加1</li>
</ol>
<div align="center"><br><img src="http://images.cnitblog.com/blog/88420/201401/281600391879667.png" alt="image"><br></div>




<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><hr>
<p>现在急需的需求是服务端有数据能主动发送到客户端。需要一种双向通信的协议，而且不需要大量的请求头，于是，在<code>HTML5</code>中发布了一种新的应用层协议<code>WebSocket</code>。</p>
<blockquote>
<p>WebSocket protocol是HTML5一种新协议，它实现了浏览器与服务器的全双工通信，开始的握手需要借助HTTP请求完成  –百度百科</p>
</blockquote>
<p>既然<code>WebSocket</code>是依赖于<code>HTTP</code>的，那么，通过抓包工具来看看<code>WebSocket</code>到底是如何建立连接以及通信的。</p>
<p>先来看一下抓取的数据包：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/WebSocket2.png?raw=true" alt="image"><br></div>

<p>上图可以看出，<code>WebSocket</code>建立连接的过程为：通过<code>TCP</code>的三次握手建立<code>HTTP</code>连接-&gt;<code>HTTP</code>携带标识<code>WebSocket</code>的请求头字段去请求服务器建立<code>WebSocket</code>连接-&gt;服务器返回数据，建立连接成功。</p>
<p>客户端请求头：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hypertext Transfer Protocol</div><div class="line">    GET / HTTP/1.1</div><div class="line">    Host: 52.187.19.168:8081</div><div class="line">    Sec-WebSocket-Key: 1eHauGgbrITvMLq1edcIHQ==</div><div class="line">    Sec-WebSocket-Version: 13</div><div class="line">    Upgrade: websocket</div><div class="line">    Origin: http://52.187.19.168:8081</div><div class="line">    Authorization: Basic KG51bGwpOihudWxsKQ==</div><div class="line">    Connection: Upgrade</div></pre></td></tr></table></figure>
<p>可以看到，<code>HTTP</code>请求头中多了标识<code>WebSocket</code>的字段。<code>Sec-WebSocket-Key</code>是客户端使用Base64编码的密文，要求服务端必须返回一个对应加密的<code>Sec-WebSocket-Accept</code>应答，否则客户端会校验错误，并关闭连接。<code>Upgrade</code>标识客户端需要的是<code>WebSocket</code>协议进行通信。</p>
<p>服务端响应头：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hypertext Transfer Protocol</div><div class="line">    HTTP/1.1 101 Switching Protocols</div><div class="line">    Upgrade: websocket</div><div class="line">    Connection: Upgrade</div><div class="line">    Sec-WebSocket-Accept: oa7vt9HSY2VFOfM+Jmuoc1p4wfY=</div></pre></td></tr></table></figure>
<p><code>Sec-WebSocket-Accept</code>的值是服务端采用和客户端一致的秘钥计算出来后返回给客户端的，<code>HTTP/1.1 101 Switching Protocols</code>表示服务器接受<code>WebSocket</code>协议的客户端连接，经过这样的请求-响应处理后，客户端服务端的<code>WebSocket</code>连接握手成功，之后通过<code>TCP</code>连接，客户端和服务端都能主动向对方推送数据。</p>
<p><code>iOS</code>端常用的<code>WebSocket</code>协议封装框架为<code>SocketRocket</code>，它是基于<code>NSInputStream</code>、<code>NSOutputStream</code>进行数据传输。</p>
<h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><hr>
<p>首先，<code>Socket</code>其实并不是一个协议，它工作在<code>OSI</code>模型会话层，是为了方便大家直接使用更底层协议(一般是<code>TCP</code>或<code>UDP</code>)而存在的一个抽象层。<code>Socket</code>是对<code>TCP/IP</code>协议的封装，<code>Socket</code>本身并不是协议，而是一个调用接口。</p>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/1194012-d35653654be833ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br></div>

<p><code>Socket</code>通常也称作套接字，用于描述<code>IP</code>地址和端口，是一个通信链的句柄。网络上的两个程序通过一个双向的通讯连接实现数据的交换，这个双向链路的一端称为一个<code>Socket</code>，一个<code>Socket</code>由一个<code>IP</code>地址和一个端口号唯一确定。应用程序通常通过套接字向网络发生请求或者应答网络请求。</p>
<h3 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h3><hr>
<p><code>WebRTC</code>名称源自网页实时通信（Web Real-Time Communication）的缩写，简而言之它是一个支持网页浏览器进行实时语音对话或视频对话的技术。</p>
<p>传统的客户端与客户端进行通信是这样的：首先需要客户端A和服务器，客户端B和服务器建立信道，A给B发送消息时，A先将消息发送到服务器上，服务器对A的消息进行中转，发送到B处，反过来也是一样。这样A和B之间的一次消息要通过两段信道，通信的效率同时受制于这两段信道的带宽，那为什么不让A和B直接通信呢?<code>WebRTC</code>应运而生。<code>WebRTC</code>是一种点对点技术，通过已系列的信令，在客户端A和客户端B之间建立一个信道，这样客户端A和客户端B就可以直接发送数据而不经过服务器。<code>WebRTC</code>为我们提供了视频会议的核心技术，包括音视频的采集、编解码、网络传输、显示等功能，并且还支持跨平台：Windows、Linux、Mac、android、iOS。</p>
<h5 id="WebRTC的服务与信令"><a href="#WebRTC的服务与信令" class="headerlink" title="WebRTC的服务与信令"></a>WebRTC的服务与信令</h5><p>首先要明确一点，<code>WebRTC</code>虽然是基于P2P的音视频通信技术，但是，<code>WebRTC</code>仍然需要服务器来进行信令的中转，只是音视频数据不再通过服务器中转。</p>
<div align="center"><br><img src="http://cc.cocimg.com/api/uploads/20170306/1488765510564803.png" alt="image"><br></div>

<p>另外，由于<code>WebRTC</code>主要用来解决实时通信的问题，可靠性并不是很重要，因此，<code>WebRTC</code>使用<code>UDP</code>作为传输层协议。当然，<code>WebRTC</code>还需要解决<code>NAT</code>的问题。关于<code>WebRTC</code>更详细的资料，有兴趣的可以查询相关文档。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直搞不明白&lt;code&gt;Socket&lt;/code&gt;、&lt;code&gt;WebSocket&lt;/code&gt;、&lt;code&gt;WebRTC&lt;/code&gt;的关系，最近有时间，就来研究一下。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="https://guiyongdong.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="https://guiyongdong.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>iOS强大的泛型</title>
    <link href="https://guiyongdong.github.io/2017/09/15/iOS%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%B3%9B%E5%9E%8B/"/>
    <id>https://guiyongdong.github.io/2017/09/15/iOS强大的泛型/</id>
    <published>2017-09-15T09:19:31.000Z</published>
    <updated>2017-09-18T06:28:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>在学习安卓的过程中，发现<code>java</code>的泛型机制特别的好用，<code>Objective-C</code>是一门动态性弱类型语言，例如毫无关系的两个类<code>A</code>和<code>B</code>，<code>A *a = [[B alloc] init]</code>在<code>Objective-C</code>编译和运行中都不会出错。但是<code>A a = new B()</code>在<code>java</code>中编译失败。这样，可以强制编程人员注意类型转换。</p>
<p>在不了解<code>Objective-C</code>的泛型之前，我一直以为<code>Objective-C</code>的泛型是鸡肋，例如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span>&lt;<span class="built_in">NSString</span> *&gt; *times;</div><div class="line"></div><div class="line">[<span class="keyword">self</span>.times addObject:[[<span class="built_in">NSObject</span> alloc] init]];</div></pre></td></tr></table></figure>
<p>我声明一个<code>NSString</code>类型的泛型数组，但是我往数组中添加的是一个<code>NSObject</code>类型的对象，虽然编译器会警告，但并不会报错(大部分程序猿也会忽略这个警告)。所以，我认为<code>Objective-C</code>的泛型是鸡肋。当然，这只是我之前的自以为(还是自己学的不深入)。但是今天看过一篇介绍<code>Objective-C</code>的泛型以后，才发现<code>Objective-C</code>也能做到编译时报错。</p>
<a id="more"></a>
<h3 id="这篇文章就来说说泛型"><a href="#这篇文章就来说说泛型" class="headerlink" title="这篇文章就来说说泛型"></a>这篇文章就来说说泛型</h3><ol>
<li>泛型是什么</li>
<li>为什么要用泛型</li>
<li>泛型怎么用</li>
<li>泛型进阶</li>
<li>泛型的延伸使用</li>
</ol>
<h5 id="泛型是什么"><a href="#泛型是什么" class="headerlink" title="泛型是什么"></a>泛型是什么</h5><p>泛型可以让你使用定义的类型来编写灵活的、可重用的函数和类型,可以避免重复，以清晰，抽象的方式表达其意图。用人话来说，泛型给予我们更抽象的封装函数或类的能力，不严谨的来讲，一门语言越抽象使用越方便。<code>Objective-C</code>中的<code>NSArray</code>和<code>NSDictionary</code>都是基于泛型编写的集合类型，如果不太理解也没关系，下面讲几个例子理解下。</p>
<h6 id="1-Objective-C中的泛型"><a href="#1-Objective-C中的泛型" class="headerlink" title="1. Objective-C中的泛型"></a>1. Objective-C中的泛型</h6><p>在2015年<code>WWDC</code>上苹果推出了<code>Swift2.0</code>版本，为了让开发者从<code>Objective-C</code>更好得过度到<code>Swift</code>上，苹果也为<code>Objective-C</code>带来了<code>Generics</code>泛型支持</p>
<p>所以，我们经常看到的<code>OC</code>中的泛型比如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 实例化一个元素类型为`NSString`的数组</span></div><div class="line"><span class="built_in">NSArray</span> &lt;<span class="built_in">NSString</span> *&gt; *array = [<span class="built_in">NSArray</span> new];</div><div class="line"></div><div class="line"><span class="comment">// 或者字典</span></div><div class="line"><span class="built_in">NSDictionary</span> &lt;<span class="built_in">NSString</span> *, <span class="built_in">NSNumber</span> *&gt; *dict = @&#123;<span class="string">@"manoboo"</span>: @<span class="number">1</span>&#125;</div></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们先看看<code>OC</code>中的泛型大概做了些什么：<br>打开<code>NSArray.h</code>可以看到：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSArray</span>&lt;<span class="title">__covariant</span> <span class="title">ObjectType</span>&gt; : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>, <span class="title">NSMutableCopying</span>, <span class="title">NSSecureCoding</span>, <span class="title">NSFastEnumeration</span>&gt;</span></div><div class="line"></div><div class="line">- (ObjectType)objectAtIndex:(<span class="built_in">NSUInteger</span>)index;</div><div class="line">- (<span class="keyword">instancetype</span>)initWithObjects:(<span class="keyword">const</span> ObjectType _Nonnull [_Nullable])objects count:(<span class="built_in">NSUInteger</span>)cnt <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们会发现，无论是查找还是初始化，都使用了<code>ObjectType</code>。</p>
<p>声明一个<code>Generics</code>的格式如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> 类名 &lt;占位类型名称&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>占位类型后也可以加入类型限制，比如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MBCollection</span> &lt;<span class="title">T</span>: <span class="title">NSString</span> *&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>若不加入类型限制，则表示接受id即任意类型。我们先来看看一个简单使用泛型的例子：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyCollection</span> &lt;<span class="title">__covariant</span> <span class="title">T</span>&gt; : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span>&lt;T&gt; *elements;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addObject:(T)object;</div><div class="line"></div><div class="line">- (T)getObjectInIndex:(<span class="built_in">NSInteger</span>)index;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>其中T为我们提现声明好的占位类型名称，可自定义(如ObjectType等等)，需要注意的是该T的作用域只限于<code>@interface MyCollection</code>到<code>@end</code>之间，<code>.m</code>文件则不能使用。至于泛型占位名称之前的修饰符则可分为两种：<code>__covariant（协变）</code>和<code>__contravariant(逆变)</code></p>
<p>两者的区别如下：</p>
<p><code>__covariant</code>意味协变，意思是指子类可以强制转换为父类，遵从的是<code>SOLID</code>中的<code>L</code>即里氏替换原则，大概可以描述为：程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换的。</p>
<p><code>__contravariant</code>意为逆变，意思是指父类可以强制转换为子类。</p>
<p>用我们上面自定义的泛型来解释：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">MyCollection *collection;</div><div class="line"></div><div class="line">MyCollection &lt;<span class="built_in">NSString</span> *&gt; *string_collection;</div><div class="line"></div><div class="line">MyCollection &lt;<span class="built_in">NSMutableString</span> *&gt; *mString_collection;</div><div class="line"></div><div class="line">collection = string_collection;</div><div class="line"></div><div class="line">string_collection = collection;</div><div class="line"></div><div class="line">collection = mString_collection;</div></pre></td></tr></table></figure>
<p>默认不指定泛型类型的情况下，不同类型的泛型可以相互转换。</p>
<p>这个时候就可以在占位泛型名称之前加入修饰符<code>__covariant</code>或<code>__contravariant</code>来控制转换关系，像<code>NSArray</code>就使用了<code>__covariant</code>修饰符。</p>
<p>引申：</p>
<p>在上面的这个例子中，声明属性时，还可以在泛型钱添加<code>__kindof</code>关键词，表示其中的类型为该类型或者其子类，如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span>&lt;__kindof T&gt; *elements;</div></pre></td></tr></table></figure>
<p>之后就可以这样调用了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">MyCollection&lt;<span class="built_in">NSString</span> *&gt; *c = [[MyCollection alloc] init];</div><div class="line"><span class="built_in">NSMutableString</span> *d = c.elements.lastObject;</div></pre></td></tr></table></figure>
<p>也就不会有警告了。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习安卓的过程中，发现&lt;code&gt;java&lt;/code&gt;的泛型机制特别的好用，&lt;code&gt;Objective-C&lt;/code&gt;是一门动态性弱类型语言，例如毫无关系的两个类&lt;code&gt;A&lt;/code&gt;和&lt;code&gt;B&lt;/code&gt;，&lt;code&gt;A *a = [[B alloc] init]&lt;/code&gt;在&lt;code&gt;Objective-C&lt;/code&gt;编译和运行中都不会出错。但是&lt;code&gt;A a = new B()&lt;/code&gt;在&lt;code&gt;java&lt;/code&gt;中编译失败。这样，可以强制编程人员注意类型转换。&lt;/p&gt;
&lt;p&gt;在不了解&lt;code&gt;Objective-C&lt;/code&gt;的泛型之前，我一直以为&lt;code&gt;Objective-C&lt;/code&gt;的泛型是鸡肋，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *&amp;gt; *times;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.times addObject:[[&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; alloc] init]];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我声明一个&lt;code&gt;NSString&lt;/code&gt;类型的泛型数组，但是我往数组中添加的是一个&lt;code&gt;NSObject&lt;/code&gt;类型的对象，虽然编译器会警告，但并不会报错(大部分程序猿也会忽略这个警告)。所以，我认为&lt;code&gt;Objective-C&lt;/code&gt;的泛型是鸡肋。当然，这只是我之前的自以为(还是自己学的不深入)。但是今天看过一篇介绍&lt;code&gt;Objective-C&lt;/code&gt;的泛型以后，才发现&lt;code&gt;Objective-C&lt;/code&gt;也能做到编译时报错。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://guiyongdong.github.io/categories/Objective-C/"/>
    
    
      <category term="Objective-C" scheme="https://guiyongdong.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Block</title>
    <link href="https://guiyongdong.github.io/2017/09/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Block/"/>
    <id>https://guiyongdong.github.io/2017/09/13/深入理解Block/</id>
    <published>2017-09-13T07:40:30.000Z</published>
    <updated>2017-09-15T06:45:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>iOS</code>开发中，经常会使用到<code>Block</code>，那<code>Block</code>到底是什么？它的实现方式是什么？通过阅读《Objective-C高级编程：iOS与OS X多线程和内存管理》，会对<code>Block</code>有个更深的了解。</p>
<a id="more"></a>
<p><code>Block</code>是“带有自动变量值的匿名函数”。</p>
<h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><hr>
<p>首先通过<code>clang</code>，需要对我们的源文件进行转换。例如<code>clang -rewrite-objc BlockTest.c</code>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">//BlockTest.c</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">void</span>(^BlockTest)(<span class="keyword">void</span>) = ^&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"执行Block"</span>);</div><div class="line">    &#125;;</div><div class="line">    BlockTest();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>转换结果如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">//BlockTest.cpp</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> <span class="number">__b</span>lock_impl &#123;</div><div class="line">  <span class="keyword">void</span> *isa;</div><div class="line">  <span class="keyword">int</span> Flags;</div><div class="line">  <span class="keyword">int</span> Reserved;</div><div class="line">  <span class="keyword">void</span> *FuncPtr;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0 &#123;</div><div class="line">  <span class="keyword">struct</span> <span class="number">__b</span>lock_impl impl;</div><div class="line">  <span class="keyword">struct</span> <span class="number">__</span>main_block_desc_0* Desc;</div><div class="line">  <span class="number">__</span>main_block_impl_0(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> <span class="number">__</span>main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</div><div class="line">    impl.isa = &amp;<span class="number">_</span>NSConcreteStackBlock;</div><div class="line">    impl.Flags = flags;</div><div class="line">    impl.FuncPtr = fp;</div><div class="line">    Desc = desc;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="number">__</span>main_block_func_0(<span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0 *<span class="number">__</span>cself) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"执行Block"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="number">__</span>main_block_desc_0 &#123;</div><div class="line">  <span class="keyword">size_t</span> reserved;</div><div class="line">  <span class="keyword">size_t</span> Block_size;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="number">__</span>main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0)&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">void</span>(*BlockTest)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;<span class="number">__</span>main_block_impl_0((<span class="keyword">void</span> *)<span class="number">__</span>main_block_func_0, &amp;<span class="number">__</span>main_block_desc_0_DATA));</div><div class="line">    ((<span class="keyword">void</span> (*)(<span class="number">__b</span>lock_impl *))((<span class="number">__b</span>lock_impl *)BlockTest)-&gt;FuncPtr)((<span class="number">__b</span>lock_impl *)BlockTest);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，这里只有<code>struct</code>，而<code>^{printf(&quot;执行Block&quot;);}</code>函数被转换成了：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="number">__</span>main_block_func_0(<span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0 *<span class="number">__</span>cself) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"执行Block"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个函数需要一个<code>__main_block_impl_0</code>类型的参数，改结构体声明如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0 &#123;</div><div class="line">  <span class="keyword">struct</span> <span class="number">__b</span>lock_impl impl;</div><div class="line">  <span class="keyword">struct</span> <span class="number">__</span>main_block_desc_0* Desc;</div><div class="line">  </div><div class="line">  <span class="number">__</span>main_block_impl_0(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> <span class="number">__</span>main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</div><div class="line">    impl.isa = &amp;<span class="number">_</span>NSConcreteStackBlock;</div><div class="line">    impl.Flags = flags;</div><div class="line">    impl.FuncPtr = fp;</div><div class="line">    Desc = desc;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>改结构体有两个成员变量<code>impl</code>和<code>Desc</code>，以及一个构造函数。再来看<code>__block_impl</code>结构体声明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">struct</span> <span class="number">__b</span>lock_impl &#123;</div><div class="line">    <span class="keyword">void</span> *isa;</div><div class="line">    <span class="keyword">int</span> Flags;</div><div class="line">    <span class="keyword">int</span> Reserved;</div><div class="line">    <span class="keyword">void</span> *FuncPtr;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>知道<code>runtime</code>的小伙伴对<code>isa</code>一定不陌生，只不过这里使用的是<code>void*</code>。改结构体的成员变量我们等会再说。</p>
<p>再来看<code>__main_block_desc_0</code>结构体声明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="number">__</span>main_block_desc_0 &#123;</div><div class="line">  <span class="keyword">size_t</span> reserved;</div><div class="line">  <span class="keyword">size_t</span> Block_size;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些也如同成员变量名称所示，其结构体为今后版本升级所需要的区域和<code>Block</code>的大小。</p>
<p>再来看<code>__main_block_impl_0</code>的构造函数：</p>
<p>接着，我们再来看<code>main</code>函数的第一行代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">void</span>(*BlockTest)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;<span class="number">__</span>main_block_impl_0((<span class="keyword">void</span> *)<span class="number">__</span>main_block_func_0, &amp;<span class="number">__</span>main_block_desc_0_DATA));</div></pre></td></tr></table></figure>
<p>这里转换太多，我们转义一下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0 BlockTest = <span class="number">__</span>main_block_impl_0((<span class="keyword">void</span> *)<span class="number">__</span>main_block_func_0, &amp;<span class="number">__</span>main_block_desc_0_DATA);</div></pre></td></tr></table></figure>
<p>以上就对应我们最初源代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">void</span>(^BlockTest)(<span class="keyword">void</span>) = ^&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"执行Block"</span>);</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>这里，将<code>__main_block_impl_0</code>结构体实例的指针赋值给变量<code>BlockTest</code>，源代码中的<code>Block</code>就是<code>__main_block_impl_0</code>结构体类型的自动变量，即栈上生成的<code>__main_block_impl_0</code>结构体实例。再来看<code>__main_block_impl_0</code>的构造函数：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">__main_block_impl_0(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> __main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>参数1为函数指针，这里我们传入了<code>__main_block_func_0</code>的函数指针。参数2为<code>__main_block_desc_0</code>结构体类型的参数，这里直接传入全局变量<code>__main_block_desc_0_DATA</code>，它的初始化如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="number">__</span>main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0)&#125;;</div></pre></td></tr></table></figure>
<p><code>__main_block_desc_0_DATA</code>即初始化<code>__main_block_impl_0</code>。</p>
<p>如此，<code>__main_block_impl_0</code>的初始化如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">impl.isa = &amp;<span class="number">_</span>NSConcreteStackBlock;</div><div class="line">impl.Flags = <span class="number">0</span>;</div><div class="line">impl.FuncPtr = <span class="number">__</span>main_block_func_0;</div><div class="line">Desc = desc;</div></pre></td></tr></table></figure>
<p>即，<code>__block_impl</code>的初始化如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">isa=&amp;<span class="number">_</span>NSConcreteStackBlock;</div><div class="line">Flags=<span class="number">0</span>;</div><div class="line">Reserved=<span class="number">0</span>;</div><div class="line">FunPtr=<span class="number">__</span>main_block_func_0;</div></pre></td></tr></table></figure>
<p>接着，在来看源代码<code>BlockTest()</code>的转换：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">((<span class="keyword">void</span> (*)(<span class="number">__b</span>lock_impl *))((<span class="number">__b</span>lock_impl *)BlockTest)-&gt;FuncPtr)((<span class="number">__b</span>lock_impl *)BlockTest);</div></pre></td></tr></table></figure>
<p>去掉转换部分如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">(*BlockTest-&gt;FuncPtr)(BlockTest);</div></pre></td></tr></table></figure>
<p>由<code>Block</code>语法转换的<code>__main_block_func_0</code>函数的指针被赋值到成员变量<code>FuncPtr</code>中，将<code>BlockTest</code>作为参数，传递到<code>__main_block_func_0</code>函数中。</p>
<p>但是，这里还有一个我们没有搞清楚，就是<code>isa</code>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">isa=&amp;<span class="number">_</span>NSConcreteStackBlock;</div></pre></td></tr></table></figure>
<p><code>_NSConcreteStackBlock</code>相当于<code>class_t</code>结构体实例，在将<code>Block</code>作为<code>Objective-C</code>的对象处理时，关于该类的信息放置于<code>_NSConcreteStackBlock</code>中，</p>
<p>至此，我们已经明白了<code>Block</code>的本质，<code>Block</code>经过<code>clang</code>转换以后，会生成结构体。该结构体包括：</p>
<ul>
<li><code>isa</code>，结构体信息</li>
<li><code>FuncPtr</code>，函数地址，即<code>Block</code>代码块</li>
<li><code>Desc</code>、<code>Flags</code>和其他。</li>
</ul>
<p>调用<code>Block</code>，即调用对象的方法。</p>
<h3 id="截获自动变量"><a href="#截获自动变量" class="headerlink" title="截获自动变量"></a>截获自动变量</h3><hr>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> age = <span class="number">10</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">void</span>(^BlockTest)(<span class="keyword">void</span>) = ^&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"执行Block%d"</span>,age);</div><div class="line">    &#125;;</div><div class="line">    BlockTest();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们增加一个变量，转换后的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">//Block结构体 不变</span></div><div class="line"><span class="keyword">struct</span> <span class="number">__b</span>lock_impl &#123;</div><div class="line">  <span class="keyword">void</span> *isa;</div><div class="line">  <span class="keyword">int</span> Flags;</div><div class="line">  <span class="keyword">int</span> Reserved;</div><div class="line">  <span class="keyword">void</span> *FuncPtr;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//Block结构体，多了一个age的成员变量，并且构造参数多了一个age</span></div><div class="line"><span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0 &#123;</div><div class="line">  <span class="keyword">struct</span> <span class="number">__b</span>lock_impl impl;</div><div class="line">  <span class="keyword">struct</span> <span class="number">__</span>main_block_desc_0* Desc;</div><div class="line">  <span class="keyword">int</span> age;</div><div class="line">  <span class="number">__</span>main_block_impl_0(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> <span class="number">__</span>main_block_desc_0 *desc, <span class="keyword">int</span> <span class="number">_</span>age, <span class="keyword">int</span> flags=<span class="number">0</span>) : age(<span class="number">_</span>age) &#123;</div><div class="line">    impl.isa = &amp;<span class="number">_</span>NSConcreteStackBlock;</div><div class="line">    impl.Flags = flags;</div><div class="line">    impl.FuncPtr = fp;</div><div class="line">    Desc = desc;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//函数中 多了获取age的值</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="number">__</span>main_block_func_0(<span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0 *<span class="number">__</span>cself) &#123;</div><div class="line">  <span class="keyword">int</span> age = <span class="number">__</span>cself-&gt;age; <span class="comment">// bound by copy</span></div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"执行Block%d"</span>,age);</div><div class="line">&#125;</div><div class="line"><span class="comment">//不变</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="number">__</span>main_block_desc_0 &#123;</div><div class="line">  <span class="keyword">size_t</span> reserved;</div><div class="line">  <span class="keyword">size_t</span> Block_size;</div><div class="line">&#125;</div><div class="line"><span class="comment">//不变</span></div><div class="line"><span class="number">__</span>main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0)&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> age = <span class="number">10</span>;</div><div class="line">	 <span class="comment">//不变</span></div><div class="line">    <span class="keyword">void</span>(*BlockTest)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;<span class="number">__</span>main_block_impl_0((<span class="keyword">void</span> *)<span class="number">__</span>main_block_func_0, &amp;<span class="number">__</span>main_block_desc_0_DATA, age));</div><div class="line">    ((<span class="keyword">void</span> (*)(<span class="number">__b</span>lock_impl *))((<span class="number">__b</span>lock_impl *)BlockTest)-&gt;FuncPtr)((<span class="number">__b</span>lock_impl *)BlockTest);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过以上转换代码，我们能很清楚的看到，<code>__main_block_impl_0</code>结构体多了一个成员变量<code>age</code>，并在初始化的时候将<code>age</code>的值传递过去。在调用<code>FuncPtr</code>的时候，通过<code>__cself</code>将<code>age</code>取出来。</p>
<p>通过以上分析，可以指定，<code>Block</code>只所以能截获自动变量，是因为<code>Block</code>将自动变量作为自己的成员变量，并在初始化的时候赋值，在使用的时候取出来。</p>
<h3 id="block-修饰符"><a href="#block-修饰符" class="headerlink" title="__block 修饰符"></a>__block 修饰符</h3><hr>
<p>有时候，我们需要在<code>Block</code>中修改截获的自动变量，这时候就需要在自动变量前加入<code>__block</code>修饰符，否则编译出错。那么，我们也通过<code>clang</code>来看一下转换后的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">//BlockTest.c</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="number">__b</span>lock <span class="keyword">int</span> age = <span class="number">10</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">void</span>(^BlockTest)(<span class="keyword">void</span>) = ^&#123;</div><div class="line">        age = <span class="number">20</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"修改后的age%d"</span>,age);</div><div class="line">    &#125;;</div><div class="line">    BlockTest();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"再次输出age%d"</span>,age);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">//不变</span></div><div class="line"><span class="keyword">struct</span> <span class="number">__b</span>lock_impl &#123;</div><div class="line">  <span class="keyword">void</span> *isa;</div><div class="line">  <span class="keyword">int</span> Flags;</div><div class="line">  <span class="keyword">int</span> Reserved;</div><div class="line">  <span class="keyword">void</span> *FuncPtr;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//多出一个结构体</span></div><div class="line"><span class="keyword">struct</span> <span class="number">__B</span>lock_byref_age_0 &#123;</div><div class="line">  <span class="keyword">void</span> *<span class="number">__</span>isa;</div><div class="line"><span class="number">__B</span>lock_byref_age_0 *<span class="number">__f</span>orwarding;</div><div class="line"> <span class="keyword">int</span> <span class="number">__f</span>lags;</div><div class="line"> <span class="keyword">int</span> <span class="number">__</span>size;</div><div class="line"> <span class="keyword">int</span> age;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//多一个__Block_byref_age_0类型的成员变量，构造函数有变化</span></div><div class="line"><span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0 &#123;</div><div class="line">  <span class="keyword">struct</span> <span class="number">__b</span>lock_impl impl;</div><div class="line">  <span class="keyword">struct</span> <span class="number">__</span>main_block_desc_0* Desc;</div><div class="line">  <span class="number">__B</span>lock_byref_age_0 *age; <span class="comment">// by ref</span></div><div class="line">  <span class="number">__</span>main_block_impl_0(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> <span class="number">__</span>main_block_desc_0 *desc, <span class="number">__B</span>lock_byref_age_0 *<span class="number">_</span>age, <span class="keyword">int</span> flags=<span class="number">0</span>) : age(<span class="number">_</span>age-&gt;<span class="number">__f</span>orwarding) &#123;</div><div class="line">    impl.isa = &amp;<span class="number">_</span>NSConcreteStackBlock;</div><div class="line">    impl.Flags = flags;</div><div class="line">    impl.FuncPtr = fp;</div><div class="line">    Desc = desc;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//取出来 修改值 使用</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="number">__</span>main_block_func_0(<span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0 *<span class="number">__</span>cself) &#123;</div><div class="line">  <span class="number">__B</span>lock_byref_age_0 *age = <span class="number">__</span>cself-&gt;age; <span class="comment">// bound by ref</span></div><div class="line"></div><div class="line">        (age-&gt;<span class="number">__f</span>orwarding-&gt;age) = <span class="number">20</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"修改后的age%d"</span>,(age-&gt;<span class="number">__f</span>orwarding-&gt;age));</div><div class="line">&#125;</div><div class="line"><span class="comment">//多了一个静态函数</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="number">__</span>main_block_copy_0(<span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0*dst, <span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0*src) &#123;</div><div class="line">	<span class="number">_B</span>lock_object_assign((<span class="keyword">void</span>*)&amp;dst-&gt;age, (<span class="keyword">void</span>*)src-&gt;age, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//多了一个静态函数</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="number">__</span>main_block_dispose_0(<span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0*src) &#123;</div><div class="line">	<span class="number">_B</span>lock_object_dispose((<span class="keyword">void</span>*)src-&gt;age, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//多了两个成员变量</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="number">__</span>main_block_desc_0 &#123;</div><div class="line">  <span class="keyword">size_t</span> reserved;</div><div class="line">  <span class="keyword">size_t</span> Block_size;</div><div class="line">  <span class="keyword">void</span> (*copy)(<span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0*, <span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0*);</div><div class="line">  <span class="keyword">void</span> (*dispose)(<span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0*);</div><div class="line">&#125; </div><div class="line"><span class="number">__</span>main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <span class="number">__</span>main_block_impl_0), <span class="number">__</span>main_block_copy_0, <span class="number">__</span>main_block_dispose_0&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//多了一句转换</span></div><div class="line">    <span class="number">__</span>attribute__((<span class="number">__b</span>locks__(byref))) <span class="number">__B</span>lock_byref_age_0 age = &#123;(<span class="keyword">void</span>*)<span class="number">0</span>,(<span class="number">__B</span>lock_byref_age_0 *)&amp;age, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="number">__B</span>lock_byref_age_0), <span class="number">10</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">void</span>(*BlockTest)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;<span class="number">__</span>main_block_impl_0((<span class="keyword">void</span> *)<span class="number">__</span>main_block_func_0, &amp;<span class="number">__</span>main_block_desc_0_DATA, (<span class="number">__B</span>lock_byref_age_0 *)&amp;age, <span class="number">570425344</span>));</div><div class="line">    ((<span class="keyword">void</span> (*)(<span class="number">__b</span>lock_impl *))((<span class="number">__b</span>lock_impl *)BlockTest)-&gt;FuncPtr)((<span class="number">__b</span>lock_impl *)BlockTest);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"再次输出age%d"</span>,(age<span class="number">.__f</span>orwarding-&gt;age));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们会发现，只是增加<code>__block</code>，代码量就急剧增加。而且我们竟然发现，<code>__block int age = 10;</code>竟然转化成了<code>__attribute__((__blocks__(byref))) __Block_byref_age_0 age = {(void*)0,(__Block_byref_age_0 *)&amp;age, 0, sizeof(__Block_byref_age_0), 10};</code>;</p>
<p>即<code>age</code>变成了<code>__Block_byref_age_0</code>结构体对象。并且初始化为10，等到我们再次调用<code>age</code>的时候，竟然是使用结构体来调用。所以，这里我们猜测，源代码中的<code>int</code>型的<code>age</code>，已经被包装成<code>__Block_byref_age_0</code>结构体类型的<code>age</code>。</p>
<p>我们来看<code>__Block_byref_age_0</code>的声明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">struct</span> <span class="number">__B</span>lock_byref_age_0 &#123;</div><div class="line">  <span class="keyword">void</span> *<span class="number">__</span>isa;</div><div class="line"><span class="number">__B</span>lock_byref_age_0 *<span class="number">__f</span>orwarding;</div><div class="line"> <span class="keyword">int</span> <span class="number">__f</span>lags;</div><div class="line"> <span class="keyword">int</span> <span class="number">__</span>size;</div><div class="line"> <span class="keyword">int</span> age;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>age</code>相当于原自动变量，其中<code>isa</code>表示结构体的信息，<code>__forwarding</code>其实是指向自身的指针。</p>
<p>另外增加的函数<code>__main_block_copy_0</code>相当于调用<code>reatain</code>实例方法的函数，将<code>__Block_byref_age_0</code>结构体对象赋值到<code>__main_block_impl_0</code>结构体对象中，而<code>__main_block_dispose_0</code>函数相当于<code>release</code>实例方法的函数。主要是释放赋值在<code>__main_block_impl_0</code>结构体对象中的成员变量<code>__Block_byref_age_0</code>。</p>
<p>至此，我们可以明白<code>__block</code>的作用，例如<code>age</code>:</p>
<ul>
<li>被<code>__block</code>修饰的变量<code>age</code>，会通过<code>__Block_byref_age_0</code>结构体进行包装，并初始化结构体。其中<code>age</code>是初始化的值，<code>__forwarding</code>是指向其自身的指针</li>
<li>而<code>Block</code>结构体中，会增加<code>age</code>结构体的引用，并通过构造函数进行初始化，其引用变量的生命周期是通过<code>__main_block_copy_0</code>函数和<code>__main_block_dispose_0</code>函数来管理。</li>
<li>之后，在调用<code>Block</code>块执行修改自动变量的时候，会通过<code>age</code>结构体的<code>__forwarding</code>找到自身，之后找到<code>age</code>变量进行赋值</li>
<li>之后，假如再次使用<code>age</code>，这时候我们要明白，<code>age</code>已经不是<code>int</code>类型，而是<code>__Block_byref_age_0</code>结构体类型。</li>
</ul>
<h3 id="Block存储域"><a href="#Block存储域" class="headerlink" title="Block存储域"></a>Block存储域</h3><hr>
<p>之前我们看到<code>Blcok</code>结构体中的<code>isa</code>指针指向了<code>&amp;_NSConcreteStackBlock</code>，这里，一共有三种类型：</p>
<ul>
<li>_NSConcreteStackBlock 即该类的对象<code>Block</code>设置在栈上</li>
<li>_NSConcreteGlobalBlock 与全局变量一样，设置在程序的数据区域中</li>
<li>_NSConcreteMallocBlock 此类的实例对象则设置在由<code>malloc</code>函数分配的内存块（即堆）中</li>
</ul>
<p>上述例子中的<code>Block</code>都是<code>_NSConcreteStackBlock</code>类，且都设置在栈上。这是因为我们定义的<code>Block</code>在<code>main</code>函数体中，假如定义在全局，则生成的<code>Block</code>为<code>_NSConcreteGlobalBlock</code>，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">int</span>(^GlobalBlockTest)(<span class="keyword">void</span>) = ^<span class="keyword">int</span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"GlobalBlockTest"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">20</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>转换后为:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">struct</span> <span class="number">__</span>GlobalBlockTest_block_impl_0 &#123;</div><div class="line">  <span class="keyword">struct</span> <span class="number">__b</span>lock_impl impl;</div><div class="line">  <span class="keyword">struct</span> <span class="number">__</span>GlobalBlockTest_block_desc_0* Desc;</div><div class="line">  <span class="number">__</span>GlobalBlockTest_block_impl_0(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> <span class="number">__</span>GlobalBlockTest_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</div><div class="line">    impl.isa = &amp;<span class="number">_</span>NSConcreteGlobalBlock;</div><div class="line">    impl.Flags = flags;</div><div class="line">    impl.FuncPtr = fp;</div><div class="line">    Desc = desc;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>该<code>Blcok</code>的类为<code>_NSConcreteGlobalBlock</code>类，此<code>Block</code>即该<code>Block</code>用结构体实例设置在程序的数据区域中，因为在使用全局变量的地方不能使用自动变量，所以不存在对自动变量进行截获。由此<code>Block</code>用结构体实例的内容不依赖于执行时的状态，所以整个程序中值需要一个实例。因此将<code>Block</code>用结构体实例设置在与全局变量相同的数据区域中即可。</p>
<p>其实，只要<code>Block</code>语法的表达式中不使用应截获的自动变量时，都会使用<code>_NSConcreteGlobalBlock</code>类。</p>
<p>那么，<code>_NSConcreteMallocBlock</code>又是什么时候使用呢？另外，为什么我们一般再声明<code>Block</code>成员变量的时候，使用<code>copy</code>修饰。</p>
<p>配置在全局变量上的<code>Block</code>，从变量作用域外也可以通过指针安全的访问，但设置在栈上的<code>Block</code>，如果其所属的变量作用域结束，该<code>Block</code>就被废弃。由于<code>__block</code>变量也配置在栈上，同样的，如果其所属的变量作用域结束，则该<code>__block</code>变量也会被废弃。</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/block1.png?raw=true"><br></div>

<p><code>Blcoks</code>提供了将<code>Block</code>和<code>__block</code>变量从栈复制到堆上的方法来解决这个问题，将配置在栈上的<code>Block</code>复制到堆上，这样即使<code>Block</code>语法记述的变量作用域结束，堆上的<code>Block</code>还可以继续存在。</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/block2.png?raw=true"><br></div>


<p>而<code>__block</code>变量用结构体成员变量<code>__forwarding</code>可以实现无论<code>__block</code>变量配置在栈上还是堆上时，都能够正确的访问<code>__block</code>变量。这就是我们在声明属性的时候，为什么使用<code>copy</code>而不使用<code>strong</code>。</p>
<p>所以，在调用<code>Block</code>的<code>copy</code>的方法时，如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/block3.png?raw=true"><br></div>


<p>而对于<code>__block</code>变量，如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/block4.png?raw=true"><br></div>

<p>若在1个<code>Block</code>中使用<code>__block</code>变量，则当该<code>Block</code>从栈复制到堆上时，使用到的所有<code>__block</code>变量也必定配置在栈上，这些<code>__block</code>变量也全部被从栈复制到堆中，此时<code>Block</code>持有<code>__block</code>变量。</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/block5.png?raw=true"><br></div>

<p>而堆上的<code>Block</code>对<code>_block</code>的引用，完全符合引用计数管理。</p>
<h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><hr>
<p>使用<code>Block</code>需要特别注意的就是循环引用。通过刚才的例子，我们知道，如果在<code>Block</code>中使用附有<code>__strong</code>修饰符的对象类型自动变量，那么当<code>Block</code>从栈复制到堆时，该对象为<code>Block</code>所持有。这样容易引起循环引用。</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/block6.png?raw=true"><br></div>

<p>通常，我们的解决办法是将变量声明成<code>__weak</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;code&gt;iOS&lt;/code&gt;开发中，经常会使用到&lt;code&gt;Block&lt;/code&gt;，那&lt;code&gt;Block&lt;/code&gt;到底是什么？它的实现方式是什么？通过阅读《Objective-C高级编程：iOS与OS X多线程和内存管理》，会对&lt;code&gt;Block&lt;/code&gt;有个更深的了解。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://guiyongdong.github.io/categories/Objective-C/"/>
    
    
      <category term="Objective-C" scheme="https://guiyongdong.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>深入理解KVC、KVO</title>
    <link href="https://guiyongdong.github.io/2017/08/31/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3KVC%E3%80%81KVO/"/>
    <id>https://guiyongdong.github.io/2017/08/31/深入理解KVC、KVO/</id>
    <published>2017-08-31T03:11:40.000Z</published>
    <updated>2017-09-06T01:55:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>网上关于KVC和KVO的介绍一大片，基本用法这里就不介绍了，这篇主要聊聊KVC和KVO的实现，以及我们自己动手实现一套KVO。</p>
<a id="more"></a>
<h3 id="KVC"><a href="#KVC" class="headerlink" title="KVC"></a>KVC</h3><hr>
<p>KVC也就是key-value-coding，即键值编码，通常用来给某个对象的只读属性或者隐藏属性进行赋值，或者获取某个对象的因此属性的值。虽然我们通过<code>runtime</code>也可以达到这样的目的，但KVC无疑是一种更便捷的方式。</p>
<p>例如<code>Person.m</code>:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> ()</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *_name;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><code>Person</code>类的<code>.h</code>文件中并没有暴露这两个属性，但是通过KVC，我们就可以修改以及读取这两个属性：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)testKVC &#123;</div><div class="line">    Person *p = [[Person alloc] init];</div><div class="line">    [p setValue:@<span class="number">10</span> forKey:<span class="string">@"age"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"p的age--%@"</span>,[p valueForKey:<span class="string">@"age"</span>]);</div><div class="line">    [p setValue:<span class="string">@"小王"</span> forKey:<span class="string">@"_name"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"p的name--%@"</span>,[p valueForKey:<span class="string">@"_name"</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-31</span> <span class="number">15</span>:<span class="number">40</span>:<span class="number">08.105</span> OCDemo[<span class="number">65042</span>:<span class="number">3097442</span>] p的age-<span class="number">-10</span></div><div class="line"><span class="number">2017</span><span class="number">-08</span><span class="number">-31</span> <span class="number">15</span>:<span class="number">40</span>:<span class="number">08.105</span> OCDemo[<span class="number">65042</span>:<span class="number">3097442</span>] p的name--小王</div></pre></td></tr></table></figure>
<p>在KVC中，无论调用<code>- (void)setValue:(nullable id)value forKey:(NSString *)key</code>还是<code>- (void)setValue:(nullable id)value forKey:(NSString *)key</code>方法，都是通过<code>NSString</code>对象来指定被操作属性的。</p>
<p>注意：<code>Foundation</code>框架会按照<code>_&lt;key&gt;</code>，<code>_is&lt;Key&gt;</code>，<code>&lt;key&gt;</code>，<code>is&lt;Key&gt;</code>的顺序查找成员变量。当然，KVO的操作首先是查找成员变量对应的<code>getter/setter</code>方法。</p>
<p>对于上述例子的<code>[p valueForKey:@&quot;age&quot;]</code>方法，底层的执行机制如下：</p>
<ol>
<li>首先KVC调用方法的顺序为<code>getAge</code>-&gt;<code>isAge</code>-&gt;<code>age</code></li>
<li>如果上述三个方法都没有找到，则找成员变量，顺序为<code>_Age</code>-&gt;<code>_isAge</code>-&gt;<code>age</code>-&gt;<code>isAge</code></li>
<li>如果上面都没有找到，那么系统会执行该对象的<code>- (void)setValue:(id)value forUndefinedKey:(NSString *)key</code>，如果该对象没有实现此方法，程序异常退出。</li>
</ol>
<p>对于上述例子的<code>[p setValue:@10 forKey:@&quot;age&quot;]</code>方法，底层的执行机制如下：</p>
<ol>
<li>首先KVC调用<code>setAge</code>方法，然后调用<code>setIsAge</code>方法</li>
<li>如果没有<code>setIsAge</code>方法，则找成员变量，顺序为<code>_Age</code>-&gt;<code>_isAge</code>-&gt;<code>age</code>-&gt;<code>isAge</code></li>
<li>如果还是没有，那么系统会执行该对象的<code>- (id)valueForUndefinedKey:(NSString *)key</code>方法，如果该对象没有实现此方法，程序异常退出。</li>
</ol>
<p>另外，注意一点，当我们将上述<code>setValue</code>代码修改一下，如：<code>[p setValue:[[Person alloc] init] forKey:@&quot;age&quot;]</code>，程序直接崩溃了，异常日志为：<code>-[Person longLongValue]: unrecognized selector sent to instance 0x6100000330c0</code>，说明，KVC在赋值的时候，是会根据基本数据类型的具体类型，来调用<code>Value</code>相应的<code>intValue</code>、<code>doubleValue</code>方法。因为<code>NSNumber</code>和<code>NSString</code>都实现了这些方法，所以程序能正常运行。</p>
<p>还有一点，假如<code>setValue</code>的<code>value</code>为<code>nil</code>，程序则会报<code>Terminating app due to uncaught exception &#39;NSInvalidArgumentException&#39;</code>异常，虽然苹果对<code>nil</code>做了很好的处理(这里要吐槽一下java的判空了)，但是基本数据类型不能接受<code>nil</code>，因此，系统会自动调用<code>setNilValueForKey</code>方法，我们可以在这里做些处理。</p>
<p>KVC除了操作对象之外，还可以操作对象的复合属性，例如，在<code>Person</code>类中，又有一个<code>Person</code>属性。通过<code>- (void)setValue:(id)value forKeyPath:(NSString *)keyPath</code>和<code>- (id)valueForKeyPath:(NSString *)keyPath</code>来操作复合属性。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> ()</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *_name;</div><div class="line">    <span class="built_in">NSInteger</span> _age;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) Person *p;</div><div class="line"><span class="keyword">@end</span></div><div class="line">- (<span class="keyword">void</span>)testKVC &#123;</div><div class="line">    Person *p = [[Person alloc] init];</div><div class="line">    [p setValue:[[Person alloc] init] forKey:<span class="string">@"p"</span>];</div><div class="line">    [p setValue:@<span class="number">10</span> forKeyPath:<span class="string">@"p.age"</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"p的p.age--%@"</span>,[p valueForKeyPath:<span class="string">@"p.age"</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过KVC，我们可以很容易的操作成员变量，最常用的就是对私有变量赋值以及字典转模型。</p>
<h3 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h3><hr>
<p>KVO即key-value-observing，通常情况下，我们会利用KVO来监听某个对象的属性变化。</p>
<p>例如：</p>
<p>新建模型<code>RGBColor</code>，有以下四个属性：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RGBColor</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">double</span> r;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">double</span> g;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">double</span> b;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) <span class="built_in">UIColor</span> *color;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><code>Foundation</code>框架提供的表示属性依赖的机制如下：</p>
<p><code>+ (NSSet&lt;NSString *&gt; *)keyPathsForValuesAffectingValueForKey:(NSString *)key</code></p>
<p>更详细的如下：</p>
<p><code>+ (NSSet&lt;NSString *&gt; *)keyPathsForValuesAffecting&lt;键名&gt;</code></p>
<p>注意，第一个方法的优先级是大于第二个的。在我们的例子中如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">+ (<span class="built_in">NSSet</span>&lt;<span class="built_in">NSString</span> *&gt; *)keyPathsForValuesAffectingColor &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithObjects:<span class="string">@"r"</span>,<span class="string">@"g"</span>,<span class="string">@"b"</span>, <span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">UIColor</span> *)color &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">UIColor</span> colorWithRed:<span class="keyword">self</span>.r green:<span class="keyword">self</span>.g blue:<span class="keyword">self</span>.b alpha:<span class="number">1.0</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体使用如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)testKVO  &#123;</div><div class="line">    <span class="keyword">self</span>.rgbColor = [[RGBColor alloc] init];</div><div class="line">    [<span class="keyword">self</span>.rgbColor addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"color"</span> options:<span class="built_in">NSKeyValueObservingOptionInitial</span> context:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; *)change context:(<span class="keyword">void</span> *)context &#123;</div><div class="line">    <span class="keyword">if</span> ([keyPath isEqualToString:<span class="string">@"color"</span>]) &#123;</div><div class="line">        <span class="keyword">self</span>.view.backgroundColor = <span class="keyword">self</span>.rgbColor.color;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">IBAction</span>)updateR:(<span class="built_in">UISlider</span> *)sender &#123;</div><div class="line">    <span class="keyword">self</span>.rgbColor.r = sender.value;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">IBAction</span>)updateG:(<span class="built_in">UISlider</span> *)sender &#123;</div><div class="line">    <span class="keyword">self</span>.rgbColor.g = sender.value;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">IBAction</span>)updateB:(<span class="built_in">UISlider</span> *)sender &#123;</div><div class="line">    <span class="keyword">self</span>.rgbColor.b = sender.value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="手动通知-VS-自动通知"><a href="#手动通知-VS-自动通知" class="headerlink" title="手动通知 VS 自动通知"></a>手动通知 VS 自动通知</h5><hr>
<p>你会发现刚才的例子有点神奇，为什么修改<code>r</code>，<code>g</code>，<code>b</code>的值会触发<code>observeValueForKeyPath</code>，明明观察的是<code>color</code>。但是实际上发送的事情是，当<code>RGBColor</code>实例的<code>-setR:</code>等方法被调用的时候以下方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)willChangeValueForKey:(<span class="built_in">NSString</span> *)key</div></pre></td></tr></table></figure>
<p>和：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)didChangeValueForKey:(<span class="built_in">NSString</span> *)key</div></pre></td></tr></table></figure>
<p>会在运行<code>-setR:</code>中的代码之前以及之后被自动调用。但有些情况，我们希望关闭键值改变的通知或者达到某些条件再通知，我们需要做以下事情：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">BOOL</span>)automaticallyNotifiesObserversOfB &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)setB:(<span class="keyword">double</span>)b &#123;</div><div class="line">    <span class="keyword">if</span> (b &gt; <span class="number">0.5</span>) &#123;</div><div class="line">        [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"b"</span>];</div><div class="line">    &#125;</div><div class="line">    _b = b;</div><div class="line">    <span class="keyword">if</span> (b &gt; <span class="number">0.5</span>) &#123;</div><div class="line">        [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"b"</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法<code>+ (BOOL)automaticallyNotifiesObserversOf&lt;Key&gt;</code>会告诉系统是否需要关闭自动通知。这里我们进行了收到调用。</p>
<p>你可能会疑惑，自动通知的情况下，系统是如何调用<code>-willChangeValueForKey:</code>和<code>-didChangeValueForKey:</code>的。</p>
<h5 id="基本实现原理"><a href="#基本实现原理" class="headerlink" title="基本实现原理"></a>基本实现原理</h5><p>当观察某对象时，KVO机制动态创建当前类的子类，即<code>NSKVONotifying_&lt;原类&gt;</code>，并为这个新类重写被观察属性<code>key</code>的<code>setter</code>方法。之后修改当前类的<code>isa</code>指向，所以，我们从应用层上看来，当前类是没有改变的。调用流程如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/kvo1.png?raw=true"><br></div>

<p>既然知道了KVO的实现原理，那么我们就可以自己来实现了。我们这里实现一个可以传<code>Block</code>的KVO。</p>
<p>首先，定义<code>NSObject</code>的分类：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="string">"NSObject+KVO.h"</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^GGObserverBlock)(<span class="built_in">NSString</span> * _Nullable newValue);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">KVO</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)gg_addObserver:(<span class="built_in">NSObject</span> *_Nullable)observer</div><div class="line">            forKeyPath:(<span class="built_in">NSString</span> *_Nullable)keyPath</div><div class="line">               options:(<span class="built_in">NSKeyValueObservingOptions</span>)options</div><div class="line">               context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context</div><div class="line">                 block:(GGObserverBlock _Nullable )observerBlock;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里定义的<code>block</code>比较简单。再来看m文件的实现</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> OriginalClass = <span class="string">@"OriginalClass"</span>;</div><div class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> ObserverBlock = <span class="string">@"ObserverBlock"</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">KVO</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)gg_addObserver:(<span class="built_in">NSObject</span> *_Nullable)observer</div><div class="line">            forKeyPath:(<span class="built_in">NSString</span> *_Nullable)keyPath</div><div class="line">               options:(<span class="built_in">NSKeyValueObservingOptions</span>)options</div><div class="line">               context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context</div><div class="line">                 block:(GGObserverBlock _Nullable )observerBlock &#123;</div><div class="line">    <span class="keyword">if</span> (keyPath == <span class="literal">nil</span>)<span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (keyPath.length == <span class="number">0</span>)<span class="keyword">return</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//检测setter方法 并找到</span></div><div class="line">    <span class="built_in">BOOL</span> responds = <span class="literal">false</span>;</div><div class="line">    SEL sel = <span class="literal">NULL</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//1.检测属性是否定义setter方法</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> propertyCount;</div><div class="line">    objc_property_t *p = class_copyPropertyList(<span class="keyword">self</span>.class, &amp;propertyCount);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; propertyCount; i++) &#123;</div><div class="line">        objc_property_t property_t = p[i];</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span>*name = property_getName(property_t);</div><div class="line">        <span class="keyword">if</span> ([keyPath isEqualToString:[<span class="built_in">NSString</span> stringWithUTF8String:name]]) &#123;</div><div class="line">            <span class="built_in">NSString</span> *attrsName = [<span class="built_in">NSString</span> stringWithUTF8String:property_getAttributes(property_t)];</div><div class="line">            <span class="comment">//包含S  表示重写了setter方法</span></div><div class="line">            <span class="built_in">NSArray</span> *items = [attrsName componentsSeparatedByString:<span class="string">@","</span>];</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">NSString</span> *name <span class="keyword">in</span> items) &#123;</div><div class="line">                <span class="keyword">if</span> ([name hasPrefix:<span class="string">@"S"</span>]) &#123;</div><div class="line">                    <span class="built_in">NSString</span> *setterMethod = [name substringFromIndex:<span class="number">1</span>];</div><div class="line">                    sel = <span class="built_in">NSSelectorFromString</span>(setterMethod);</div><div class="line">                    responds = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    free(p);</div><div class="line">    </div><div class="line">    <span class="comment">//2. 检测set&lt;KeyPath&gt;</span></div><div class="line">    <span class="keyword">if</span> (!responds) &#123;</div><div class="line">        sel = <span class="built_in">NSSelectorFromString</span>([<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"set%@%@:"</span>,[[keyPath substringToIndex:<span class="number">1</span>] uppercaseString],[keyPath substringFromIndex:<span class="number">1</span>]]);</div><div class="line">        responds = class_respondsToSelector(<span class="keyword">self</span>.class, sel);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//3. 检测setIs&lt;keyPath&gt;</span></div><div class="line">    <span class="keyword">if</span> (!responds) &#123;</div><div class="line">        sel = <span class="built_in">NSSelectorFromString</span>([<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"setIs%@%@:"</span>,[[keyPath substringToIndex:<span class="number">1</span>] uppercaseString],[keyPath substringFromIndex:<span class="number">1</span>]]);</div><div class="line">        responds = class_respondsToSelector(<span class="keyword">self</span>.class, sel);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//都没有找到 抛出异常</span></div><div class="line">    <span class="keyword">if</span> (!responds) &#123;</div><div class="line">        <span class="built_in">NSException</span> *exception = [[<span class="built_in">NSException</span> alloc] initWithName:<span class="string">@"NoKeyPath"</span> reason:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"没有找到名为%@的属性,在%@类中"</span>,keyPath,<span class="keyword">self</span>] userInfo:<span class="literal">nil</span>];</div><div class="line">        <span class="keyword">@throw</span> exception;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//动态生成一个类</span></div><div class="line">    <span class="built_in">NSString</span> *newClassName = [<span class="string">@"GGKVONotifying_"</span> stringByAppendingString:<span class="built_in">NSStringFromClass</span>(<span class="keyword">self</span>.class)];</div><div class="line">    Class myClass = objc_allocateClassPair(<span class="keyword">self</span>.class, (__bridge <span class="keyword">const</span> <span class="keyword">void</span>*)newClassName, <span class="number">0</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//重写找到的setter方法</span></div><div class="line">    class_addMethod(myClass, sel, (IMP)setKeyPath,<span class="string">"v@:@"</span>);</div><div class="line">    </div><div class="line">    objc_registerClassPair(myClass);</div><div class="line">    </div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, (__bridge <span class="keyword">const</span> <span class="keyword">void</span>*)OriginalClass, <span class="keyword">self</span>.class, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">    </div><div class="line">    <span class="comment">//修改本类的isa指针</span></div><div class="line">    object_setClass(<span class="keyword">self</span>, myClass);</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (observerBlock) &#123;</div><div class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, (__bridge <span class="keyword">const</span> <span class="keyword">void</span>*)ObserverBlock, observerBlock, OBJC_ASSOCIATION_COPY);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> setKeyPath(<span class="keyword">id</span> <span class="keyword">self</span>,SEL _cmd,<span class="built_in">NSString</span> *value) &#123;</div><div class="line">    </div><div class="line">    <span class="comment">//修改isa</span></div><div class="line">    Class originalClass = objc_getAssociatedObject(<span class="keyword">self</span>, (__bridge <span class="keyword">const</span> <span class="keyword">void</span>*)OriginalClass);</div><div class="line">    <span class="comment">//修改到原来的类</span></div><div class="line">    object_setClass(<span class="keyword">self</span>, originalClass);</div><div class="line">    </div><div class="line">    <span class="comment">//调用setter方法</span></div><div class="line">    ((<span class="keyword">void</span>(*)(<span class="keyword">id</span>,SEL, <span class="keyword">id</span>))objc_msgSend)(<span class="keyword">self</span>,_cmd,value);</div><div class="line">    </div><div class="line">    <span class="comment">//回调</span></div><div class="line">    GGObserverBlock observerBlock = objc_getAssociatedObject(<span class="keyword">self</span>, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)ObserverBlock);</div><div class="line">    <span class="keyword">if</span> (observerBlock) &#123;</div><div class="line">        observerBlock(value);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Class kvoClass = objc_getClass((__bridge <span class="keyword">const</span> <span class="keyword">void</span>*)[<span class="string">@"GGKVONotifying_"</span> stringByAppendingString:<span class="built_in">NSStringFromClass</span>(originalClass)]);</div><div class="line">    <span class="comment">//修改回派生类</span></div><div class="line">    object_setClass(<span class="keyword">self</span>, kvoClass);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>当然，这里只是简单的实现，具体还有很多的判断逻辑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上关于KVC和KVO的介绍一大片，基本用法这里就不介绍了，这篇主要聊聊KVC和KVO的实现，以及我们自己动手实现一套KVO。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://guiyongdong.github.io/categories/Objective-C/"/>
    
    
      <category term="Objective-C" scheme="https://guiyongdong.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>load 方法全程跟踪</title>
    <link href="https://guiyongdong.github.io/2017/07/14/load-%E6%96%B9%E6%B3%95%E5%85%A8%E7%A8%8B%E8%B7%9F%E8%B8%AA/"/>
    <id>https://guiyongdong.github.io/2017/07/14/load-方法全程跟踪/</id>
    <published>2017-07-14T04:00:41.000Z</published>
    <updated>2017-07-15T06:45:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="load方法的调用时机"><a href="#load方法的调用时机" class="headerlink" title="load方法的调用时机"></a>load方法的调用时机</h3><p>我们都知道，每个类都有两个初始化方法，其中一个就是<code>load</code>方法，对于每一个<code>Class</code>和<code>Category</code>来说，必定会调用此方法，而且仅调用一次。当包含<code>Class</code>和<code>Category</code>的程序被库载入系统时，就会执行此方法，并且此过程通常是在程序启动的时候执行。</p>
<p>不同的是，现在<code>iOS</code>系统中已经加入了动态加载特性，这是从<code>macOS</code>应用程序中迁移而来的特性，等应用程序启动好之后再去加载程序库。如果<code>Class</code>和其<code>Category</code>中都重写了<code>load</code>方法，则先调用<code>Class</code>中的。那么为什么会先调用<code>Class</code>的<code>load</code>方法呢？通过这篇文章想必你会有个答案。</p>
<a id="more"></a>
<p>因为<code>Objective-C</code>的<code>runtime</code>只能在<code>macOS</code>下才能编译，所以，文章中的所有代码都是在<code>macOS</code>下运行了，这里推荐大家直接使用<a href="https://github.com/RetVal/objc-runtime" target="_blank" rel="external">RetVal</a>封装好的<code>debug</code>版最新源码进行断点调试，来追踪一下<code>load</code>方法的全部处理过程，以便于了解这个函数以及<code>Objective-C</code>强大的动态性。</p>
<p>创建一个<code>Class</code>文件<code>GGObject</code>和两个分类<code>GGObject+GG</code>、<code>NSString+GG</code>，然后分别在这三个文件中添加<code>load</code>方法。运行程序，会看到<code>load</code>方法的调用时机是在入口函数主程序之前。</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/load1.png?raw=true"><br></div>

<p>然后在<code>GGObject</code>中<code>load</code>方法下增加断点，查看其调用栈并跟踪函数执行时候的上层代码：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/load2.png?raw=true"><br></div>

<p>调用栈显示栈情况如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">0</span> +[GGObject load]</div><div class="line"><span class="number">1</span> call_class_loads()</div><div class="line"><span class="number">2</span> call_load_methods()</div><div class="line"><span class="number">3</span> load_images(<span class="keyword">const</span> <span class="keyword">char</span>*, <span class="keyword">const</span> mach_header *)</div><div class="line"><span class="number">4</span> dyld::notifySingle(dyld_image_states, ImageLoader <span class="keyword">const</span>*, ImageLoader::InitializerTimingList*)</div><div class="line"><span class="number">11</span> _dyld_start</div></pre></td></tr></table></figure>
<p>追其源头，从<code>_dyld_start</code>开始研究。<strong>dyld(The Dynamic Link Editor)</strong>是苹果的动态链接库，系统内核做好程序启动的初始准备后，将其他事务交给<code>dyld</code>负责。这里不再细究。</p>
<p>在研究<code>load_images</code>方法之前，先来研究一下什么是<code>images</code>，<code>images</code>表示的是二进制文件编译后的符号、代码等。所以<code>load_images</code>的工作是传入处理过后的二进制文件并让<code>runtime</code>进行处理，并且每一个文件对应一个抽象实例来负责加载，这里的实例是<code>ImageLoader</code>，从调用栈的方法4可以清楚的看到参数类型：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">dyld::notifySingle(dyld_image_states, ImageLoader <span class="keyword">const</span>*, ImageLoader::InitializerTimingList*)</div></pre></td></tr></table></figure>
<p><code>ImageLoader</code>处理二进制文件的时机是在<code>main</code>入口函数以前，它在加载文件时主要做两个工作：</p>
<ul>
<li>在程序运行时它先将动态链接的<code>image</code>递归加载</li>
<li>再从可执行文件<code>image</code>递归加载所有符号</li>
</ul>
<p>我们可以通过断点来打印出所有加载的<code>image</code>。在刚才断点的调用栈中，选中<code>3 load_images(const char*, const mach_header *)</code>，并添加断点：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/load3.png?raw=true"><br></div>

<p>这样可以将当前的<code>image</code>全部显示，我们列出来<code>image</code>的<code>path</code>和<code>slice</code>信息：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">(<span class="keyword">const</span> <span class="keyword">char</span> *) $<span class="number">0</span> = <span class="number">0x000000010004d0b8</span> <span class="string">"/Users/guiyongdong/Library/Developer/Xcode/DerivedData/objc-gursabanmdkytddcknzhdonlrrvk/Build/Products/Debug/libobjc.A.dylib"</span></div><div class="line">(<span class="keyword">const</span> mach_header *) $<span class="number">1</span> = <span class="number">0x00000001000ad000</span></div><div class="line">(<span class="keyword">const</span> <span class="keyword">char</span> *) $<span class="number">2</span> = <span class="number">0x00007fffd60caec8</span> <span class="string">"/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation"</span></div><div class="line">(<span class="keyword">const</span> mach_header *) $<span class="number">3</span> = <span class="number">0x00007fffd60ca000</span></div><div class="line">(<span class="keyword">const</span> <span class="keyword">char</span> *) $<span class="number">4</span> = <span class="number">0x00007fffead2d9d0</span> <span class="string">"/usr/lib/libnetwork.dylib"</span></div><div class="line">(<span class="keyword">const</span> mach_header *) $<span class="number">5</span> = <span class="number">0x00007fffead2d000</span></div><div class="line">(<span class="keyword">const</span> <span class="keyword">char</span> *) $<span class="number">6</span> = <span class="number">0x00007fffd52bbc50</span> <span class="string">"/System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork"</span></div><div class="line">(<span class="keyword">const</span> mach_header *) $<span class="number">7</span> = <span class="number">0x00007fffd52bb000</span></div><div class="line">(<span class="keyword">const</span> <span class="keyword">char</span> *) $<span class="number">8</span> = <span class="number">0x00007fffda1a5610</span> <span class="string">"/System/Library/Frameworks/NetFS.framework/Versions/A/NetFS"</span></div><div class="line">(<span class="keyword">const</span> mach_header *) $<span class="number">9</span> = <span class="number">0x00007fffda1a5000</span></div><div class="line">(<span class="keyword">const</span> <span class="keyword">char</span> *) $<span class="number">10</span> = <span class="number">0x00007fffe4ef0a20</span> <span class="string">"/System/Library/PrivateFrameworks/LanguageModeling.framework/Versions/A/LanguageModeling"</span></div><div class="line">(<span class="keyword">const</span> mach_header *) $<span class="number">11</span> = <span class="number">0x00007fffe4ef0000</span></div><div class="line">(<span class="keyword">const</span> <span class="keyword">char</span> *) $<span class="number">12</span> = <span class="number">0x00007fffd5d42b10</span> <span class="string">"/System/Library/Frameworks/CoreData.framework/Versions/A/CoreData"</span></div><div class="line">(<span class="keyword">const</span> mach_header *) $<span class="number">13</span> = <span class="number">0x00007fffd5d42000</span></div><div class="line">(<span class="keyword">const</span> <span class="keyword">char</span> *) $<span class="number">14</span> = <span class="number">0x00007fffeaa53ac0</span> <span class="string">"/usr/lib/libmecabra.dylib"</span></div><div class="line">(<span class="keyword">const</span> mach_header *) $<span class="number">15</span> = <span class="number">0x00007fffeaa53000</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>这里会传入很多的动态链接库<code>.dylib</code>以及官方静态框架<code>.framework</code>的image，而<code>path</code>就是其对应的二进制文件的地址。在<code>&lt;mach-o/dyld.h&gt;</code>动态库头文件中，也为我们提供了查询所有动态库<code>image</code>的方法，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;mach-o/dyld.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">listImages</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">uint32_t</span> i;</div><div class="line">    <span class="keyword">uint32_t</span> ic = <span class="number">_</span>dyld_image_count();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"image 的个数 %d \n"</span>,ic);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ic; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d: %p\t%s\t(slide: %ld)\n"</span>,</div><div class="line">               i,</div><div class="line">               <span class="number">_</span>dyld_get_image_header(i),</div><div class="line">               <span class="number">_</span>dyld_get_image_name(i),</div><div class="line">               <span class="number">_</span>dyld_get_image_vmaddr_slide(i));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">    listImages();</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        NSLog(@<span class="string">"Application start"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以通过系统库提供的接口方法，来深入学习官方的动态库情况：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/load4.png?raw=true"><br></div>

<h3 id="load-images"><a href="#load-images" class="headerlink" title="load_images"></a>load_images</h3><p>此时，系统已经将所有的<code>image</code>加载进内存，然后交由<code>load_images</code>函数来解析。我们来分析一下<code>load_images</code>函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">hasLoadMethods</span><span class="params">(<span class="keyword">const</span> headerType *mhdr)</span></span>;</div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">prepare_load_methods</span><span class="params">(<span class="keyword">const</span> headerType *mhdr)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span></span></div><div class="line"><span class="title">load_images</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path <span class="number">__u</span>nused, <span class="keyword">const</span> <span class="keyword">struct</span> mach_header *mh)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 先快速的查找image中是否有Class或者Category需要加载 如果没有 直接返回</span></div><div class="line">    <span class="keyword">if</span> (!hasLoadMethods((<span class="keyword">const</span> headerType *)mh)) <span class="keyword">return</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 定义可递归锁对象</span></div><div class="line">    <span class="comment">// 由于 load_images 方法由dyld进行回调，所以数据需要上锁才能保证线程安全</span></div><div class="line">    <span class="comment">// 为了防止多次加锁造成的死锁情况，使用递归锁解决</span></div><div class="line">    <span class="keyword">recursive_mutex_locker_t</span> lock(loadMethodLock);</div><div class="line">    </div><div class="line">    <span class="comment">// 收集所有的 load 方法</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 对 Darwin 提供的线程写锁的封装类</span></div><div class="line">        <span class="keyword">rwlock_writer_t</span> lock2(runtimeLock);</div><div class="line">        <span class="comment">// 提前准备好满足 load 方法调用条件的 Class</span></div><div class="line">        prepare_load_methods((<span class="keyword">const</span> headerType *)mh);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 调用 所有的load 方法 (without runtimeLock - re-entrant)</span></div><div class="line">    call_load_methods();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们一步一步分析。首先调用的是<code>hasLoadMethods</code>函数。其中为了查询<code>load</code>函数列表，会分别查询该函数在内存数据段上指定<code>section</code>区域是否有所记录。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 快速查询image中是否有类列表或者分类类别</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasLoadMethods</span><span class="params">(<span class="keyword">const</span> headerType *mhdr)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">size_t</span> count;</div><div class="line">    <span class="comment">//查询image中是否有类</span></div><div class="line">    <span class="keyword">if</span> (<span class="number">_</span>getObjc2NonlazyClassList(mhdr, &amp;count)  &amp;&amp;  count &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="comment">//查询iamge中是否有Category</span></div><div class="line">    <span class="keyword">if</span> (<span class="number">_</span>getObjc2NonlazyCategoryList(mhdr, &amp;count)  &amp;&amp;  count &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>objc-file.mm</code>文件中存在以下定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 通过宏处理泛型操作</span></div><div class="line"><span class="comment">// 函数内容是从内存数据段的某个区下查询改位置的情况，并回传指针</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GETSECT(name, type, sectname)                                   \</span></div><div class="line">    type *name(const headerType *mhdr, size_t *outCount) &#123;              \</div><div class="line">        return getDataSection<span class="meta-string">&lt;type&gt;</span>(mhdr, sectname, nil, outCount);     \</div><div class="line">    &#125;                                                                   \</div><div class="line">    type *name(const header_info *hi, size_t *outCount) &#123;               \</div><div class="line">        return getDataSection<span class="meta-string">&lt;type&gt;</span>(hi-&gt;mhdr(), sectname, nil, outCount); \</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">// 根据dyld 对images的解析来特定区域查询内存</span></div><div class="line">GETSECT(<span class="number">_</span>getObjc2NonlazyClassList,    <span class="keyword">classref_t</span>,      <span class="string">"__objc_nlclslist"</span>);</div><div class="line">GETSECT(<span class="number">_</span>getObjc2NonlazyCategoryList, <span class="keyword">category_t</span> *,    <span class="string">"__objc_nlcatlist"</span>);</div></pre></td></tr></table></figure>
<p>在<code>Apple</code>的官方文档中，我们可以在<code>__DATA</code>段中查询到<code>__objc_classlist</code>的用途，主要是用在访问<code>Objective-C</code>的类列表，而<code>__objc_nlcatlist</code>用于访问<code>Objective-C</code>的分类列表。这一块对类信息的解析是由<code>dyld</code>处理时期完成的，也就是我们上文提到的<code>map_images</code>方法的解析工作。而且从侧面可以看出，<code>Objective-C</code>的强大动态性，与<code>dyld</code>前期处理密不可分。</p>
<p>通过这一步，会将<code>image</code>中的类列表和分类列表的个数快速的查询出来，只要满足其中一个条件就能继续进行，否则<code>image</code>中连类列表和分类列表都没有，就一定不会有<code>load</code>方法。</p>
<h3 id="可递归锁"><a href="#可递归锁" class="headerlink" title="可递归锁"></a>可递归锁</h3><p>接下来需要定义锁，然后加锁。在<code>load_image</code>方法所在的<code>objc-runtime-new.mm</code>中，全局<code>loadMethodLock</code>是一个<code>recursive_mutex_t</code>类型的变量。这个是苹果通过<code>C</code>实现的一个互斥递归锁<code>Class</code>，来解决多次上锁而不会发生死锁的问题。之所以用递归锁，是因为接下来会递归类的父类直到<code>NSObject</code>。</p>
<p><code>recursive_mutex_t</code>其作用与<code>NSRecursiveLock</code>相同，但不是由<code>NSLock</code>再封装，而是通过<code>C</code>为<code>runtime</code>的使用场景而写的一个<code>Class</code>。更多关于线程锁的知识，可以看看我这篇<a href="http://www.guiyongdong.com/2017/06/26/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E5%90%84%E7%A7%8D%E9%94%81%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/" target="_blank" rel="external">iOS多线程之各种锁的简单介绍</a></p>
<h3 id="准备-load-运行的从属Class"><a href="#准备-load-运行的从属Class" class="headerlink" title="准备 load 运行的从属Class"></a>准备 load 运行的从属Class</h3><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare_load_methods</span><span class="params">(<span class="keyword">const</span> headerType *mhdr)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">size_t</span> count, i;</div><div class="line"></div><div class="line">    runtimeLock.assertWriting();</div><div class="line"></div><div class="line">    <span class="comment">//收集有load方法的Class</span></div><div class="line">    <span class="comment">//获取所有的类的列表</span></div><div class="line">    <span class="keyword">classref_t</span> *classlist = </div><div class="line">        <span class="number">_</span>getObjc2NonlazyClassList(mhdr, &amp;count);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="comment">// 通过remapClass 获取类指针</span></div><div class="line">        <span class="comment">// schedule_class_load 递归到父类逐层载入</span></div><div class="line">        schedule_class_load(remapClass(classlist[i]));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 收集有load方法的Category</span></div><div class="line">    <span class="comment">// 获取所有的Category列表</span></div><div class="line">    <span class="keyword">category_t</span> **categorylist = <span class="number">_</span>getObjc2NonlazyCategoryList(mhdr, &amp;count);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="keyword">category_t</span> *cat = categorylist[i];</div><div class="line">        <span class="comment">// 通过remapClass 获取Category对象存有的Class对象</span></div><div class="line">        Class cls = remapClass(cat-&gt;cls);</div><div class="line">        <span class="keyword">if</span> (!cls) <span class="keyword">continue</span>;</div><div class="line">        <span class="comment">// 对类进行第一次初始化，主要用来分配可读写数据空间并返回真正的类结构</span></div><div class="line">        realizeClass(cls);</div><div class="line">        assert(cls-&gt;ISA()-&gt;isRealized());</div><div class="line">        <span class="comment">// 将需要执行load的Category添加到一个全局列表中</span></div><div class="line">        add_category_to_loadable_list(cat);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>prepare_load_methods</code>作用是为load方法做准备，从代码中可以看出<code>Class</code>的<code>load</code>方法是优先于<code>Category</code>。其中在收集<code>Class</code>的<code>load</code>方法中，因为需要对<code>Class</code>关系树的根节点逐层遍历运行，在<code>schedule_class_load</code>方法中使用深层递归的方式递归到根节点，优先进行收集。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 用来递归检查Class是否有load方法，包括父类</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">schedule_class_load</span><span class="params">(Class cls)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!cls) <span class="keyword">return</span>;</div><div class="line">    <span class="comment">// 查看 RW_REALIZED 是否被标记</span></div><div class="line">    assert(cls-&gt;isRealized());</div><div class="line">    <span class="comment">// 查看 RW_LOADED 是否被标记</span></div><div class="line">    <span class="keyword">if</span> (cls-&gt;data()-&gt;flags &amp; RW_LOADED) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 如果有父类 递归到深层运行</span></div><div class="line">    schedule_class_load(cls-&gt;superclass);</div><div class="line">    </div><div class="line">    <span class="comment">// 将有load方法的Class添加到一个全局列表中</span></div><div class="line">    add_class_to_loadable_list(cls);</div><div class="line">    <span class="comment">// 标记 RW_LOADED 符号</span></div><div class="line">    cls-&gt;setInfo(RW_LOADED); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>schedule_class_load</code>中，<code>Class</code>的读取方式是<code>cls</code>指针方式，其中有很多内存符号位用来记录状态。<code>isRealized()</code>查看的就是<code>RW_REALIZED</code>位，改位记录的是当前<code>Class</code>是否初始化一个类的指标。而之后查看的<code>RW_LOADED</code>是记录当前类的<code>load</code>方法是否已经被检测。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 检测Class是否有load函数 并将其添加到全局静态数组中</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_class_to_loadable_list</span><span class="params">(Class cls)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//标记方法</span></div><div class="line">    IMP method;</div><div class="line"></div><div class="line">    loadMethodLock.assertLocked();</div><div class="line">    <span class="comment">//获取类的load方法的IMP</span></div><div class="line">    method = cls-&gt;getLoadMethod();</div><div class="line">    <span class="comment">//如果没有load方法 返回</span></div><div class="line">    <span class="keyword">if</span> (!method) <span class="keyword">return</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (PrintLoading) &#123;</div><div class="line">        <span class="number">_</span>objc_inform(<span class="string">"LOAD: class '%s' scheduled for +load"</span>, </div><div class="line">                     cls-&gt;nameForLogging());</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//判断数组是否已满</span></div><div class="line">    <span class="keyword">if</span> (loadable_classes_used == loadable_classes_allocated) &#123;</div><div class="line">        <span class="comment">// 动态扩容 为线性表释放空间</span></div><div class="line">        loadable_classes_allocated = loadable_classes_allocated*<span class="number">2</span> + <span class="number">16</span>;</div><div class="line">        loadable_classes = (<span class="keyword">struct</span> loadable_class *)</div><div class="line">            <span class="built_in">realloc</span>(loadable_classes,</div><div class="line">                              loadable_classes_allocated *</div><div class="line">                              <span class="keyword">sizeof</span>(<span class="keyword">struct</span> loadable_class));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 将cls method 存储到loadable_classes 指针中</span></div><div class="line">    loadable_classes[loadable_classes_used].cls = cls;</div><div class="line">    loadable_classes[loadable_classes_used].method = method;</div><div class="line">    <span class="comment">// 索引++</span></div><div class="line">    loadable_classes_used++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在存储静态表的方法中，方法对象会以指针的方式作为传递参数，然后用名为<code>loadable_classes</code>的静态类型数组对即将运行的<code>load</code>方法进行存储，以及方法所属的<code>Class</code>。其下标索引<code>loadable_classes_used</code>为（从0开始）的全局量，并在每次录入方法后自加操作实现索引的偏移。</p>
<p>赛选过<code>Class</code>以后，接下来会继续赛选<code>Category</code>。通过<code>_getObjc2NonlazyCategoryList</code>获取到<code>image</code>中所有的<code>Category</code>后，遍历执行<code>add_category_to_loadable_list</code>方法，将有<code>load</code>方法的<code>Category</code>添加到全局<code>loadable_categories</code>静态类型的数组中。<code>add_category_to_loadable_list</code>方法的实现原理与<code>add_class_to_loadable_list</code>几乎一样。这里不再细说。</p>
<p>由此可以看出，在<code>prepare_load_methods</code>方法中，<code>runtime</code>对<code>Class</code>和<code>Category</code>进行了筛选工作，并且将即将执行的<code>load</code>方法以指针的形式组织成一个线性表结构，为之后执行操作打下基础。</p>
<h3 id="通过函数指针让load方法跑起来"><a href="#通过函数指针让load方法跑起来" class="headerlink" title="通过函数指针让load方法跑起来"></a>通过函数指针让load方法跑起来</h3><p>通过加载镜像(image)、缓存类和分类列表后，开始执行<code>call_load_methods</code>方法。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_load_methods</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//是否已经录入</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> loading = NO;</div><div class="line">    <span class="comment">//是否有关联的Category</span></div><div class="line">    <span class="keyword">bool</span> more_categories;</div><div class="line"></div><div class="line">    loadMethodLock.assertLocked();</div><div class="line"></div><div class="line">    <span class="comment">// 由于loading是全局静态布尔值，如果已经录入方法则直接退出</span></div><div class="line">    <span class="keyword">if</span> (loading) <span class="keyword">return</span>;</div><div class="line">    <span class="comment">//修改全局标记 开始录入</span></div><div class="line">    loading = YES;</div><div class="line"></div><div class="line">    <span class="comment">//声明一个autoreleasePool 对象</span></div><div class="line">    <span class="comment">// 使用push操作其目的是为了创建一个新的 autoreleasePool 对象</span></div><div class="line">    <span class="keyword">void</span> *pool = objc_autoreleasePoolPush();</div><div class="line"></div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="comment">// 检查全局 load 方法数组的长度 并调用load 方法 知道调用完毕</span></div><div class="line">        <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>) &#123;</div><div class="line">            call_class_loads();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 调用 Category 中的load 方法</span></div><div class="line">        more_categories = call_category_loads();</div><div class="line"></div><div class="line">        <span class="comment">// 只要 Class 或者 Category 其中一个有load 都会继续调用</span></div><div class="line">    &#125; <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>  ||  more_categories);</div><div class="line">    <span class="comment">// 将创建的 autoreleasePool 对象释放掉</span></div><div class="line">    objc_autoreleasePoolPop(pool);</div><div class="line">    <span class="comment">// 修改全局标记 录入完毕</span></div><div class="line">    loading = NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实<code>call_load_methods</code>由以上代码可知，仅是运行<code>load</code>方法的入口，其中最重要的方法<code>call_class_loads</code>和<code>call_category_loads</code>会分别从<code>loadable_classes</code>和<code>loadable_categories</code>列表中找出对应的<code>Class</code>和<code>Category</code>，并分别使用<code>selector(load)</code>的实现并加载。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">call_class_loads</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//声明下标</span></div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    </div><div class="line">    <span class="comment">// 分离加载的 Class列表</span></div><div class="line">    <span class="keyword">struct</span> loadable_class *classes = loadable_classes;</div><div class="line">    <span class="comment">// 调用标记</span></div><div class="line">    <span class="keyword">int</span> used = loadable_classes_used;</div><div class="line">    <span class="comment">//重置之前的列表 标记</span></div><div class="line">    loadable_classes = nil;</div><div class="line">    loadable_classes_allocated = <span class="number">0</span>;</div><div class="line">    loadable_classes_used = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 调用列表中的Class 类的load方法</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; used; i++) &#123;</div><div class="line">        <span class="comment">//获取 Class指针</span></div><div class="line">        Class cls = classes[i].cls;</div><div class="line">        <span class="comment">// 获取load 方法</span></div><div class="line">        <span class="keyword">load_method_t</span> load_method = (<span class="keyword">load_method_t</span>)classes[i].method;</div><div class="line">        <span class="keyword">if</span> (!cls) <span class="keyword">continue</span>; </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (PrintLoading) &#123;</div><div class="line">            <span class="number">_</span>objc_inform(<span class="string">"LOAD: +[%s load]\n"</span>, cls-&gt;nameForLogging());</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//方法调用</span></div><div class="line">        (*load_method)(cls, SEL_load);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 释放classes列表</span></div><div class="line">    <span class="keyword">if</span> (classes) <span class="built_in">free</span>(classes);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>(*load_method)(cls, SEL_load)</code>通过这一句就可以调用<code>load</code>方法。这是一个函数指针。其中<code>load_method_t</code>的定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*<span class="keyword">load_method_t</span>)</span><span class="params">(id, SEL)</span></span>;</div></pre></td></tr></table></figure>
<p>可以看到，我们将<code>Class</code>和<code>SEL</code>传递过去，至此完成<code>load</code>方法的动态调用。<code>call_category_loads</code>和<code>call_class_loads</code>的调用机制类似，只是后续会继续做很多内存操作，有兴趣的可以看看。</p>
<p>至此完成了<code>load</code>方法的动态调用。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>你过去可能会听说，对于<code>load</code>方法的调用顺序有两条规则：</p>
<ol>
<li>父类先于子类调用</li>
<li>类先于分类调用</li>
</ol>
<p>通过我们的整体分析，你会发现这种现象是很有原因的。在<code>schedule_class_load</code>递归方法中，会保证父类先于子类加入到<code>loadable_classes</code>数组红，从而确保类的调用顺序的正确性。</p>
<p>而在<code>call_load_methods</code>方法中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>) &#123;</div><div class="line">        call_class_loads();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    more_categories = call_category_loads();</div><div class="line"></div><div class="line">&#125; <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>  ||  more_categories);</div></pre></td></tr></table></figure>
<p>会一次性将所有类的<code>load</code>方法调用完毕，之后才会调用分类的<code>load</code>放法。至此，整个<code>load</code>调用流程图如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/load5.png?raw=true"><br></div>

<p><code>load</code>可以说是我们日常开发中接触到调用时间最靠前的方法，这就成为了我们玩黑魔法的绝佳时机。</p>
<p>但是由于<code>load</code>方法的运行时间过早，所以这里可能不是一个理想的环境，因为某些类可能需要在在其它类之前加载，但是这是我们无法保证的。不过在这个时间点，所有的<code>framework</code>都已经加载到了运行时中，所以调用<code>framework</code>中的方法都是安全的。</p>
<h3 id="扩展initialize"><a href="#扩展initialize" class="headerlink" title="扩展initialize"></a>扩展initialize</h3><p>说到<code>load</code>方法就不得不提<code>initialize</code>方法，我们都知道<code>load</code>会在程序启动的时候加载，而<code>initialize</code>方法会在类或者类的子类收到第一条消息之前被调用。现在，我们已经非常清楚<code>load</code>方法的调用原理，至于<code>initialize</code>呢？我们现在继续分析。</p>
<p>紧接着我们刚才的例子，新建类<code>GGSuperObject</code>，并实现<code>initialize</code>方法，让<code>GGObject</code>继承<code>GGSuperObject</code>，接着实现<code>GGObject</code>和<code>GGObject (GG)</code>的<code>initialize</code>方法，在<code>main</code>中，我们创建<code>GGObject</code>的实例，运行程序如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/load6.png?raw=true"><br></div>

<p>运行结果很符合我们的预期，父类会优先调用，分类会覆盖本类的<code>initialize</code>，下面我们通过代码来看具体的实现原理。当我们向某个类发送消息时，<code>runtime</code>会调用<code>lookUpImpOrForward</code>这个函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function">IMP <span class="title">lookUpImpOrForward</span><span class="params">(Class cls, SEL sel, id inst, </span></span></div><div class="line">                       <span class="keyword">bool</span> initialize, <span class="keyword">bool</span> cache, <span class="keyword">bool</span> resolver)</div><div class="line">&#123;</div><div class="line">    IMP imp = nil;</div><div class="line">    <span class="keyword">bool</span> triedResolver = NO;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">	 <span class="comment">// 类没有初始化 对类进行初始化</span></div><div class="line">    <span class="keyword">if</span> (initialize  &amp;&amp;  !cls-&gt;isInitialized()) &#123;</div><div class="line">        runtimeLock.unlockRead();</div><div class="line">        <span class="comment">//初始化</span></div><div class="line">        <span class="number">_</span>class_initialize (<span class="number">_</span>class_getNonMetaClass(cls, inst));</div><div class="line">        runtimeLock.read();</div><div class="line">        <span class="comment">// If sel == initialize, _class_initialize will send +initialize and </span></div><div class="line">        <span class="comment">// then the messenger will send +initialize again after this </span></div><div class="line">        <span class="comment">// procedure finishes. Of course, if this is not being called </span></div><div class="line">        <span class="comment">// from the messenger then it won't happen. 2778172</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">return</span> imp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从中可以看到当类没有初始化时，会调用<code>_class_initialize</code>对类进行初始化，<code>_class_getNonMetaClass</code>这里主要是对类进行一些转换，我们这里不用过多考虑。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">void</span> <span class="number">_</span>class_initialize(Class cls)</div><div class="line">&#123;</div><div class="line">    assert(!cls-&gt;isMetaClass());</div><div class="line"></div><div class="line">    Class supercls;</div><div class="line">    <span class="keyword">bool</span> reallyInitialize = NO;</div><div class="line"></div><div class="line">    <span class="comment">// 先找到父类</span></div><div class="line">    supercls = cls-&gt;superclass;</div><div class="line">    <span class="comment">// 如果父类没有初始化 对父类进行初始化</span></div><div class="line">    <span class="comment">// 我们发现 又有递归调用 从这里我们可以发现，父类的initialize比子类先调用</span></div><div class="line">    <span class="keyword">if</span> (supercls  &amp;&amp;  !supercls-&gt;isInitialized()) &#123;</div><div class="line">        <span class="number">_</span>class_initialize(supercls);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (reallyInitialize) &#123;</div><div class="line">        ...</div><div class="line">        @<span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 发送调用类的initialize的消息</span></div><div class="line">            callInitialize(cls);</div><div class="line"></div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里，显示对入参的父类进行递归调用，以确保父类优先于子类初始化，还有一个关键的地方，我们来看<code>callInitialize</code>发送消息的具体实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">callInitialize</span><span class="params">(Class cls)</span></span></div><div class="line">&#123;</div><div class="line">    ((<span class="keyword">void</span>(*)(Class, SEL))objc_msgSend)(cls, SEL_initialize);</div><div class="line">    <span class="keyword">asm</span>(<span class="string">""</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有没有很熟悉，<code>runtime</code>使用了发送消息<code>objc_msgSend</code>的方式对<code>initialize</code>方法进行调用，这样，<code>initialize</code>方法的调用就是与普通方法的调用是一致的，都是走的发送消息的流程，那么我们再回到<code>lookUpImpOrForward</code>方法中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function">IMP <span class="title">lookUpImpOrForward</span><span class="params">(Class cls, SEL sel, id inst, </span></span></div><div class="line">                       <span class="keyword">bool</span> initialize, <span class="keyword">bool</span> cache, <span class="keyword">bool</span> resolver)</div><div class="line">&#123;</div><div class="line">    IMP imp = nil;</div><div class="line">    <span class="keyword">bool</span> triedResolver = NO;</div><div class="line"></div><div class="line">    runtimeLock.assertUnlocked();</div><div class="line"></div><div class="line">    <span class="comment">// 这里会先从缓存中查找 imp</span></div><div class="line">    <span class="keyword">if</span> (cache) &#123;</div><div class="line">        imp = cache_getImp(cls, sel);</div><div class="line">        <span class="keyword">if</span> (imp) <span class="keyword">return</span> imp;</div><div class="line">    &#125;</div><div class="line">    runtimeLock.read();</div><div class="line">    <span class="comment">// 注册类</span></div><div class="line">    <span class="keyword">if</span> (!cls-&gt;isRealized()) &#123;</div><div class="line">        runtimeLock.write();</div><div class="line">		</div><div class="line">        realizeClass(cls);</div><div class="line"></div><div class="line">        runtimeLock.unlockWrite();</div><div class="line">        runtimeLock.read();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 初始化类 </span></div><div class="line">    <span class="keyword">if</span> (initialize  &amp;&amp;  !cls-&gt;isInitialized()) &#123;</div><div class="line">        runtimeLock.unlockRead();</div><div class="line">        <span class="number">_</span>class_initialize (<span class="number">_</span>class_getNonMetaClass(cls, inst));</div><div class="line">        runtimeLock.read();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line"> retry:    </div><div class="line">    runtimeLock.assertReading();</div><div class="line"></div><div class="line">    <span class="comment">// 先从缓存中查找 imp （本例中的imp  就是initialize）</span></div><div class="line">    imp = cache_getImp(cls, sel);</div><div class="line">    <span class="keyword">if</span> (imp) <span class="keyword">goto</span> done;</div><div class="line"></div><div class="line">    <span class="comment">// 缓存中没有 去方法列表中找 imp 的实现</span></div><div class="line">    &#123;</div><div class="line">        Method meth = getMethodNoSuper_nolock(cls, sel);</div><div class="line">        <span class="keyword">if</span> (meth) &#123;</div><div class="line">            log_and_fill_cache(cls, meth-&gt;imp, sel, inst, cls);</div><div class="line">            <span class="comment">//找到了就调用</span></div><div class="line">            imp = meth-&gt;imp;</div><div class="line">            <span class="keyword">goto</span> done;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 去父类的缓存列表和方法列表中找imp 的实现</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">unsigned</span> attempts = unreasonableClassCount();</div><div class="line">        <span class="comment">//循环遍历父类</span></div><div class="line">        <span class="keyword">for</span> (Class curClass = cls;</div><div class="line">             curClass != nil;</div><div class="line">             curClass = curClass-&gt;superclass)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (--attempts == <span class="number">0</span>) &#123;</div><div class="line">                <span class="number">_</span>objc_fatal(<span class="string">"Memory corruption in class list."</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 去缓存中寻找</span></div><div class="line">            imp = cache_getImp(curClass, sel);</div><div class="line">            <span class="keyword">if</span> (imp) &#123;</div><div class="line">                <span class="keyword">if</span> (imp != (IMP)<span class="number">_</span>objc_msgForward_impcache) &#123;</div><div class="line">                    log_and_fill_cache(cls, imp, sel, inst, curClass);</div><div class="line">                    <span class="keyword">goto</span> done;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//去方法列表中找</span></div><div class="line">            Method meth = getMethodNoSuper_nolock(curClass, sel);</div><div class="line">            <span class="keyword">if</span> (meth) &#123;</div><div class="line">                log_and_fill_cache(cls, meth-&gt;imp, sel, inst, curClass);</div><div class="line">                imp = meth-&gt;imp;</div><div class="line">                <span class="keyword">goto</span> done;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 无论是类 或者父类 都没有找到 接下来走消息转发机制</span></div><div class="line">    <span class="keyword">if</span> (resolver  &amp;&amp;  !triedResolver) &#123;</div><div class="line">        runtimeLock.unlockRead();</div><div class="line">        <span class="number">_</span>class_resolveMethod(cls, sel, inst);</div><div class="line">        runtimeLock.read();</div><div class="line">        </div><div class="line">        triedResolver = YES;</div><div class="line">        <span class="keyword">goto</span> retry;</div><div class="line">    &#125;</div><div class="line">    imp = (IMP)<span class="number">_</span>objc_msgForward_impcache;</div><div class="line">    cache_fill(cls, sel, imp, inst);</div><div class="line"></div><div class="line"> done:</div><div class="line">    runtimeLock.unlockRead();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> imp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，整个调用流程我们已经很清晰了，其实<code>initialize</code>走的就是完整的一个消息发送流程。</p>
<p>当我们第一次调用某个类的方法时，首先会递归遍历此类的父类，给父类发送<code>initialize</code>消息。接着又回调消息发送机制上，先查类的缓存，之后查类的方法列表，然后沿着继承链查父类的缓存，之后查父类的方法，如果都没有查到IMP，则走消息转发流程。至此，我们也明白为何子类会覆盖父类的方法，其实都是<code>runtime</code>的作用。</p>
<p>可能你还有个疑惑，为什么分类的<code>initialize</code>方法会覆盖本来的<code>initialize</code>方法呢？通过下面一段代码你会发现端倪：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">Method* methodList_f = class_copyMethodList(object_getClass([GGObject <span class="keyword">class</span>]),&amp;count_f);</div><div class="line">    </div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count_f;i++) &#123;</div><div class="line">    Method temp_f = methodList_f[i];</div><div class="line">    <span class="comment">//方法名字符串</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* name_s =sel_getName(method_getName(temp_f));</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"方法名：%@"</span>,[<span class="built_in">NSString</span> stringWithUTF8String:name_s]);</div><div class="line">&#125;</div><div class="line">free(methodList_f);</div></pre></td></tr></table></figure>
<p>你会发现打印了两个<code>initialize</code>，其实这是因为类先于分类加载，在加载分类的时候，会将分类的方法放在类的方法的前面，所以类的方法列表中有两个<code>initialize</code>方法，并不是分类中的方法覆盖了本类中的方法，只是<code>runtime</code>在遍历方法列表的时候，只要找到一个就会返回，<code>runtime</code>不知道后面还有一个<code>initialize</code>方法。想必你现在知道类和分类的调用关系了吧。</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/oc/load7.png?raw=true"><br></div>

<p>好了，至此<code>load</code>方法和<code>initialize</code>方法咱们已经说完。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/Draveness/iOS-Source-Code-Analyze/blob/master/contents/objc/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3%20load%20%E6%96%B9%E6%B3%95%E4%B9%88%EF%BC%9F.md" target="_blank" rel="external">你真的了解 load 方法么？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;load方法的调用时机&quot;&gt;&lt;a href=&quot;#load方法的调用时机&quot; class=&quot;headerlink&quot; title=&quot;load方法的调用时机&quot;&gt;&lt;/a&gt;load方法的调用时机&lt;/h3&gt;&lt;p&gt;我们都知道，每个类都有两个初始化方法，其中一个就是&lt;code&gt;load&lt;/code&gt;方法，对于每一个&lt;code&gt;Class&lt;/code&gt;和&lt;code&gt;Category&lt;/code&gt;来说，必定会调用此方法，而且仅调用一次。当包含&lt;code&gt;Class&lt;/code&gt;和&lt;code&gt;Category&lt;/code&gt;的程序被库载入系统时，就会执行此方法，并且此过程通常是在程序启动的时候执行。&lt;/p&gt;
&lt;p&gt;不同的是，现在&lt;code&gt;iOS&lt;/code&gt;系统中已经加入了动态加载特性，这是从&lt;code&gt;macOS&lt;/code&gt;应用程序中迁移而来的特性，等应用程序启动好之后再去加载程序库。如果&lt;code&gt;Class&lt;/code&gt;和其&lt;code&gt;Category&lt;/code&gt;中都重写了&lt;code&gt;load&lt;/code&gt;方法，则先调用&lt;code&gt;Class&lt;/code&gt;中的。那么为什么会先调用&lt;code&gt;Class&lt;/code&gt;的&lt;code&gt;load&lt;/code&gt;方法呢？通过这篇文章想必你会有个答案。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://guiyongdong.github.io/categories/Objective-C/"/>
    
    
      <category term="Runtime" scheme="https://guiyongdong.github.io/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>iOS多线程之各种锁的简单介绍</title>
    <link href="https://guiyongdong.github.io/2017/06/26/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E5%90%84%E7%A7%8D%E9%94%81%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>https://guiyongdong.github.io/2017/06/26/iOS多线程之各种锁的简单介绍/</id>
    <published>2017-06-26T06:48:28.000Z</published>
    <updated>2017-06-27T06:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS开发中，多线程开发是个头疼的问题，最大的问题就是资源竞争问题。同一时间，多个线程对资源的读或者写都有可能造成不可预知的问题。解决这种问题的手段就是在操作资源的时候加上锁，那么常用的锁都有哪几种呢？本篇博客就来简单的说一说。</p>
<a id="more"></a> 
<h3 id="多线程卖票"><a href="#多线程卖票" class="headerlink" title="多线程卖票"></a>多线程卖票</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)sellTicket &#123;</div><div class="line">    <span class="keyword">self</span>.number = <span class="number">5</span>;</div><div class="line">    <span class="keyword">void</span>(^sellTicket)() = ^() &#123;</div><div class="line">        <span class="comment">//其他代码</span></div><div class="line"></div><div class="line">        [<span class="keyword">self</span>.lock lock];</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.number &gt; <span class="number">0</span>) &#123;</div><div class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">0.1</span>];</div><div class="line">            <span class="keyword">self</span>.number--;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@还有%ld张票"</span>,[<span class="built_in">NSThread</span> currentThread],<span class="keyword">self</span>.number);</div><div class="line">        &#125;</div><div class="line">        [<span class="keyword">self</span>.lock unlock];</div><div class="line">        </div><div class="line">        <span class="comment">//其他代码</span></div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), sellTicket);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码是典型的多线程问题，现在有5张票，开启了10个窗口（三条线程）,进行卖票（资源竞争），每个窗口只卖一张，卖票的时候判断了票的个数，但是输出结果依然有问题。输出如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">03</span>:<span class="number">23.902</span> OCDemo[<span class="number">59833</span>:<span class="number">17164897</span>] &lt;<span class="built_in">NSThread</span>: <span class="number">0x61000007bf80</span>&gt;&#123;number = <span class="number">22</span>, name = (null)&#125;还有<span class="number">1</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">03</span>:<span class="number">23.902</span> OCDemo[<span class="number">59833</span>:<span class="number">17164888</span>] &lt;<span class="built_in">NSThread</span>: <span class="number">0x61000007ac80</span>&gt;&#123;number = <span class="number">16</span>, name = (null)&#125;还有<span class="number">0</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">03</span>:<span class="number">23.902</span> OCDemo[<span class="number">59833</span>:<span class="number">17164893</span>] &lt;<span class="built_in">NSThread</span>: <span class="number">0x60000007c980</span>&gt;&#123;number = <span class="number">17</span>, name = (null)&#125;还有<span class="number">2</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">03</span>:<span class="number">23.902</span> OCDemo[<span class="number">59833</span>:<span class="number">17164894</span>] &lt;<span class="built_in">NSThread</span>: <span class="number">0x600000076b00</span>&gt;&#123;number = <span class="number">19</span>, name = (null)&#125;还有<span class="number">2</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">03</span>:<span class="number">23.902</span> OCDemo[<span class="number">59833</span>:<span class="number">17164895</span>] &lt;<span class="built_in">NSThread</span>: <span class="number">0x608000262b80</span>&gt;&#123;number = <span class="number">20</span>, name = (null)&#125;还有<span class="number">2</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">03</span>:<span class="number">23.902</span> OCDemo[<span class="number">59833</span>:<span class="number">17164896</span>] &lt;<span class="built_in">NSThread</span>: <span class="number">0x600000077d40</span>&gt;&#123;number = <span class="number">21</span>, name = (null)&#125;还有<span class="number">2</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">03</span>:<span class="number">23.902</span> OCDemo[<span class="number">59833</span>:<span class="number">17164427</span>] &lt;<span class="built_in">NSThread</span>: <span class="number">0x608000262c40</span>&gt;&#123;number = <span class="number">15</span>, name = (null)&#125;还有<span class="number">-1</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">03</span>:<span class="number">23.902</span> OCDemo[<span class="number">59833</span>:<span class="number">17164892</span>] &lt;<span class="built_in">NSThread</span>: <span class="number">0x608000262a40</span>&gt;&#123;number = <span class="number">18</span>, name = (null)&#125;还有<span class="number">2</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">03</span>:<span class="number">23.902</span> OCDemo[<span class="number">59833</span>:<span class="number">17164891</span>] &lt;<span class="built_in">NSThread</span>: <span class="number">0x61000007c280</span>&gt;&#123;number = <span class="number">14</span>, name = (null)&#125;还有<span class="number">-2</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">03</span>:<span class="number">23.902</span> OCDemo[<span class="number">59833</span>:<span class="number">17164889</span>] &lt;<span class="built_in">NSThread</span>: <span class="number">0x60800007f600</span>&gt;&#123;number = <span class="number">13</span>, name = (null)&#125;还有<span class="number">-3</span>张票</div></pre></td></tr></table></figure>
<p>这就是典型的多线程问题。在同一时间内多个线程共同操作一个数据，就会发生这种问题。那么解决这种问题最常用的手段就是加锁，当然，还有其他的解决办法，例如我们可以将操作数据的代码放到串行队列中，但这篇文章主要来说一说各种锁的用法。</p>
<h3 id="锁的概念"><a href="#锁的概念" class="headerlink" title="锁的概念"></a>锁的概念</h3><p>锁是最常用的同步工具，一段代码在同一时间只能允许被一个线程访问，比如线程A进入加锁代码以后，线程会持有这个锁，当其他线程进入这段代码以后就无法访问，只有线程A释放掉锁以后其他线程才能继续访问这段代码。但是，通常情况下，我们不需要将整段代码放入到锁中，只需要将操作数据的部分代码加锁即可。</p>
<h3 id="NSLock"><a href="#NSLock" class="headerlink" title="NSLock"></a>NSLock</h3><p><code>NSLock</code>是一个简单的互斥锁，实现了<code>NSLocking</code>协议，主要方法如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)lock; <span class="comment">//加锁</span></div><div class="line">- (<span class="keyword">void</span>)unlock; <span class="comment">//解锁</span></div><div class="line">- (<span class="built_in">BOOL</span>)tryLock; <span class="comment">//此方法会尝试加锁，如果锁不可用(已经被锁住)，则并不会阻塞线程，并返回NO。</span></div><div class="line">- (<span class="built_in">BOOL</span>)lockBeforeDate:(<span class="built_in">NSDate</span> *)limit; <span class="comment">//此方法会在所指定Date之前尝试加锁，如果在指定时间之前都不能加锁，则返回NO</span></div></pre></td></tr></table></figure>
<p>具体用法如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSLock</span> *lock;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)sellTicket &#123;</div><div class="line">    <span class="keyword">self</span>.number = <span class="number">5</span>;</div><div class="line">    <span class="keyword">void</span>(^sellTicket)() = ^() &#123;</div><div class="line">        <span class="comment">//其他代码</span></div><div class="line"></div><div class="line">        [<span class="keyword">self</span>.lock lock];</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.number &gt; <span class="number">0</span>) &#123;</div><div class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">0.1</span>];</div><div class="line">            <span class="keyword">self</span>.number--;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@还有%ld张票"</span>,[<span class="built_in">NSThread</span> currentThread],<span class="keyword">self</span>.number);</div><div class="line">        &#125;</div><div class="line">        [<span class="keyword">self</span>.lock unlock];</div><div class="line">        </div><div class="line">        <span class="comment">//其他代码</span></div><div class="line"></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), sellTicket);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="synchronized"><a href="#synchronized" class="headerlink" title="@synchronized"></a>@synchronized</h3><p>利用关键字<code>synchronized</code>将代码块同步，使用如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)sellTicket &#123;</div><div class="line">    <span class="keyword">self</span>.number = <span class="number">5</span>;</div><div class="line">    <span class="keyword">void</span>(^sellTicket)() = ^() &#123;</div><div class="line">        <span class="comment">//其他代码</span></div><div class="line"></div><div class="line">        <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">self</span>.number &gt; <span class="number">0</span>) &#123;</div><div class="line">                [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">0.1</span>];</div><div class="line">                <span class="keyword">self</span>.number--;</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"%@还有%ld张票"</span>,[<span class="built_in">NSThread</span> currentThread],<span class="keyword">self</span>.number);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//其他代码</span></div><div class="line"></div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), sellTicket);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>@synchronized</code>使用<code>self</code>作为锁，当然你也可以使用其他的对象。</p>
<h3 id="NSCondition"><a href="#NSCondition" class="headerlink" title="NSCondition"></a>NSCondition</h3><p><code>NSCondition</code>是一个条件锁，同样实现了<code>NSLocking</code>协议，它和<code>NSLock</code>一样，也有<code>lock</code>和<code>unlock</code>方法。它的基本用法和<code>NSLock</code>一样，这里说一下<code>NSCondition</code>的特殊用法。</p>
<p><code>NSCondition</code>提供更高级的用法，方法如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)wait; <span class="comment">//阻塞当前线程 直到等待唤醒 </span></div><div class="line">- (<span class="built_in">BOOL</span>)waitUntilDate:(<span class="built_in">NSDate</span> *)limit;  <span class="comment">//阻塞当前线程到一定时间 之后自动唤醒</span></div><div class="line">- (<span class="keyword">void</span>)signal; <span class="comment">//唤醒一条阻塞线程</span></div><div class="line">- (<span class="keyword">void</span>)broadcast; <span class="comment">//唤醒所有阻塞线程</span></div></pre></td></tr></table></figure>
<p>我们修改上面的买票例子，依然是开启10个窗口，每个窗口只卖一张票，如果票卖完了，就阻塞，一直等待，直到有票。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)sellTicket &#123;</div><div class="line">    <span class="keyword">self</span>.number = <span class="number">5</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">void</span>(^sellTicket)() = ^() &#123;</div><div class="line">        <span class="comment">//其他代码</span></div><div class="line"></div><div class="line">        [<span class="keyword">self</span>.lock lock];</div><div class="line">        <span class="comment">//卖票</span></div><div class="line">        [<span class="keyword">self</span> loopTicket];</div><div class="line">        [<span class="keyword">self</span>.lock unlock];</div><div class="line">        <span class="comment">//其他代码</span></div><div class="line">        </div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), sellTicket);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)loopTicket &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.number &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.number--;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@还有%ld张票"</span>,[<span class="built_in">NSThread</span> currentThread],<span class="keyword">self</span>.number);</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//票没了 就阻塞 等待有票</span></div><div class="line">        [<span class="keyword">self</span>.lock wait];</div><div class="line">        <span class="comment">//我只等1秒 不管你有没有票我都要执行下面的代码</span></div><div class="line"><span class="comment">//        [self.lock waitUntilDate:[NSDate dateWithTimeIntervalSinceNow:1000]];</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.number &gt; <span class="number">0</span>) &#123;</div><div class="line">            [<span class="keyword">self</span> loopTicket];</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"我不想等了"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)addTicket &#123;</div><div class="line">    <span class="comment">//模拟来票了</span></div><div class="line">    <span class="keyword">self</span>.number = <span class="number">2</span>;</div><div class="line">    <span class="comment">//唤醒所有阻塞的线程</span></div><div class="line">    [<span class="keyword">self</span>.lock broadcast];</div><div class="line">    <span class="comment">//唤醒一个</span></div><div class="line">    <span class="comment">//[self.lock signal];</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用<code>addTicket</code>方法增加票数 并唤醒所有的阻塞线程。</p>
<h3 id="NSConditionLock"><a href="#NSConditionLock" class="headerlink" title="NSConditionLock"></a>NSConditionLock</h3><p><code>NSConditionLock</code>也实现了<code>NSLocking</code>协议，但是它内部维护了一个条件，只有当锁可用并且条件满足时才会持有锁，所以<code>NSConditionLock</code>既是条件锁也是互斥锁, 来看<code>NSConditionLock</code>的方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)initWithCondition:(<span class="built_in">NSInteger</span>)condition; <span class="comment">//根据条件初始化锁对象</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSInteger</span> condition; <span class="comment">//条件 </span></div><div class="line">- (<span class="keyword">void</span>)lockWhenCondition:(<span class="built_in">NSInteger</span>)condition; <span class="comment">// 根据条件 请求锁</span></div><div class="line">- (<span class="built_in">BOOL</span>)tryLock; <span class="comment">// 尝试锁 不会阻塞线程</span></div><div class="line">- (<span class="built_in">BOOL</span>)tryLockWhenCondition:(<span class="built_in">NSInteger</span>)condition; <span class="comment">//根据条件 尝试持有锁 不会阻塞线程</span></div><div class="line">- (<span class="keyword">void</span>)unlockWithCondition:(<span class="built_in">NSInteger</span>)condition; <span class="comment">// 解锁 并修改条件</span></div><div class="line">- (<span class="built_in">BOOL</span>)lockBeforeDate:(<span class="built_in">NSDate</span> *)limit; <span class="comment">// 在指定的时间之前尝试持有锁，之后不会阻塞线程</span></div><div class="line">- (<span class="built_in">BOOL</span>)lockWhenCondition:(<span class="built_in">NSInteger</span>)condition beforeDate:(<span class="built_in">NSDate</span> *)limit; <span class="comment">// 在指定的时间之前 并根据条件尝试 持有锁 ， 之后不会阻塞线程</span></div></pre></td></tr></table></figure>
<p>我们现在来做这样一个例子，假如有10个卖票窗口，每个窗口只卖一张票。我们有十个加票员，只有票卖完了，才去加票，每次只加一张票。如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addTicket &#123;</div><div class="line">    <span class="comment">//只有当前锁可用  并且内部条件是0才会持有锁 否则阻塞  因为卖票的会在卖完票以后将内部条件设置为0</span></div><div class="line">    [<span class="keyword">self</span>.lock lockWhenCondition:<span class="number">0</span>];</div><div class="line">    <span class="keyword">self</span>.number = <span class="number">1</span>;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"我加了一张票，还有%ld张票"</span>,<span class="keyword">self</span>.number);</div><div class="line">    <span class="comment">//释放锁  并且修改内部条件为1</span></div><div class="line">    [<span class="keyword">self</span>.lock unlockWithCondition:<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)sellTicket &#123;</div><div class="line">    <span class="keyword">self</span>.number = <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">void</span>(^sellTicket)() = ^() &#123;</div><div class="line">        <span class="comment">//其他代码</span></div><div class="line"></div><div class="line">        <span class="comment">//只有当前锁可用  并且锁内部条件是1的时候 才能持有锁 否则阻塞</span></div><div class="line">        [<span class="keyword">self</span>.lock lockWhenCondition:<span class="number">1</span>];</div><div class="line">        <span class="comment">//卖票</span></div><div class="line">        [<span class="keyword">self</span> loopTicket];</div><div class="line">        <span class="comment">//释放锁 并且修改内部条件为0</span></div><div class="line">        [<span class="keyword">self</span>.lock unlockWithCondition:<span class="number">0</span>];</div><div class="line">        <span class="comment">//其他代码</span></div><div class="line">        </div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        <span class="comment">//10个卖票的</span></div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), sellTicket);</div><div class="line">        <span class="comment">//10个加票的</span></div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">            [<span class="keyword">self</span> addTicket];</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)loopTicket &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.number &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.number--;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"我卖了一张票%@还有%ld张票"</span>,[<span class="built_in">NSThread</span> currentThread],<span class="keyword">self</span>.number);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.454</span> OCDemo[<span class="number">71778</span>:<span class="number">17837792</span>] 我卖了一张票&lt;<span class="built_in">NSThread</span>: <span class="number">0x6000000798c0</span>&gt;&#123;number = <span class="number">3</span>, name = (null)&#125;还有<span class="number">0</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.454</span> OCDemo[<span class="number">71778</span>:<span class="number">17838431</span>] 我加了一张票，还有<span class="number">1</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.455</span> OCDemo[<span class="number">71778</span>:<span class="number">17838433</span>] 我卖了一张票&lt;<span class="built_in">NSThread</span>: <span class="number">0x608000078bc0</span>&gt;&#123;number = <span class="number">4</span>, name = (null)&#125;还有<span class="number">0</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.455</span> OCDemo[<span class="number">71778</span>:<span class="number">17838436</span>] 我加了一张票，还有<span class="number">1</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.455</span> OCDemo[<span class="number">71778</span>:<span class="number">17838437</span>] 我卖了一张票&lt;<span class="built_in">NSThread</span>: <span class="number">0x60000007e340</span>&gt;&#123;number = <span class="number">5</span>, name = (null)&#125;还有<span class="number">0</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.455</span> OCDemo[<span class="number">71778</span>:<span class="number">17838434</span>] 我加了一张票，还有<span class="number">1</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.456</span> OCDemo[<span class="number">71778</span>:<span class="number">17838441</span>] 我卖了一张票&lt;<span class="built_in">NSThread</span>: <span class="number">0x60000007e400</span>&gt;&#123;number = <span class="number">6</span>, name = (null)&#125;还有<span class="number">0</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.456</span> OCDemo[<span class="number">71778</span>:<span class="number">17838431</span>] 我加了一张票，还有<span class="number">1</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.456</span> OCDemo[<span class="number">71778</span>:<span class="number">17838442</span>] 我卖了一张票&lt;<span class="built_in">NSThread</span>: <span class="number">0x61800006f900</span>&gt;&#123;number = <span class="number">7</span>, name = (null)&#125;还有<span class="number">0</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.457</span> OCDemo[<span class="number">71778</span>:<span class="number">17838438</span>] 我加了一张票，还有<span class="number">1</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.457</span> OCDemo[<span class="number">71778</span>:<span class="number">17838444</span>] 我卖了一张票&lt;<span class="built_in">NSThread</span>: <span class="number">0x60000007e440</span>&gt;&#123;number = <span class="number">8</span>, name = (null)&#125;还有<span class="number">0</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.457</span> OCDemo[<span class="number">71778</span>:<span class="number">17838436</span>] 我加了一张票，还有<span class="number">1</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.457</span> OCDemo[<span class="number">71778</span>:<span class="number">17838445</span>] 我卖了一张票&lt;<span class="built_in">NSThread</span>: <span class="number">0x618000072280</span>&gt;&#123;number = <span class="number">9</span>, name = (null)&#125;还有<span class="number">0</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.457</span> OCDemo[<span class="number">71778</span>:<span class="number">17838433</span>] 我加了一张票，还有<span class="number">1</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.458</span> OCDemo[<span class="number">71778</span>:<span class="number">17838435</span>] 我卖了一张票&lt;<span class="built_in">NSThread</span>: <span class="number">0x610000075040</span>&gt;&#123;number = <span class="number">10</span>, name = (null)&#125;还有<span class="number">0</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.458</span> OCDemo[<span class="number">71778</span>:<span class="number">17838434</span>] 我加了一张票，还有<span class="number">1</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.458</span> OCDemo[<span class="number">71778</span>:<span class="number">17838446</span>] 我卖了一张票&lt;<span class="built_in">NSThread</span>: <span class="number">0x61800006f800</span>&gt;&#123;number = <span class="number">11</span>, name = (null)&#125;还有<span class="number">0</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.458</span> OCDemo[<span class="number">71778</span>:<span class="number">17837792</span>] 我加了一张票，还有<span class="number">1</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.459</span> OCDemo[<span class="number">71778</span>:<span class="number">17838440</span>] 我卖了一张票&lt;<span class="built_in">NSThread</span>: <span class="number">0x608000078c80</span>&gt;&#123;number = <span class="number">12</span>, name = (null)&#125;还有<span class="number">0</span>张票</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">51.459</span> OCDemo[<span class="number">71778</span>:<span class="number">17838437</span>] 我加了一张票，还有<span class="number">1</span>张票</div></pre></td></tr></table></figure>
<h3 id="NSRecursiveLock"><a href="#NSRecursiveLock" class="headerlink" title="NSRecursiveLock"></a>NSRecursiveLock</h3><p><code>NSRecursiveLock</code>是一个递归锁，有时候<code>加锁代码</code>中存在递归调用，递归开始前加锁，递归调用开始后，反复执行加锁代码会造成死锁，这个时候可以使用递归锁来解决问题。使用递归锁可以在一个线程中反复获取锁而不造成死锁，这个过程会记录获取锁和释放锁的次数，注意，只有两者平衡锁才会被最终释放。</p>
<p>如下，我们先模拟一下递归死锁，我们使用<code>NSLock</code>锁：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">self</span>.lock = [<span class="built_in">NSLock</span> new];</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)loopLock &#123;</div><div class="line">    [<span class="keyword">self</span>.lock lock];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.number &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.number--;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"还有%ld张票"</span>,<span class="keyword">self</span>.number);</div><div class="line">        <span class="comment">//我还想卖</span></div><div class="line">        [<span class="keyword">self</span> loopLock];</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span>.lock unlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里直接模拟主线程卖票，卖了一张以后 还想卖，结果造成死锁。如果我们使用<code>NSRecursiveLock</code>，<code>self.lock = [NSRecursiveLock new]</code>将不会造成死锁。一定要注意，加锁和解锁是成对出现的。</p>
<h3 id="dispatch-semaphore-t"><a href="#dispatch-semaphore-t" class="headerlink" title="dispatch_semaphore_t"></a>dispatch_semaphore_t</h3><p>条件信号量，<code>dispatch_semaphore_t</code>是GCD中的信号量，也可以解决资源抢占问题，支持信号通知和信号等待。每当发送一个信号通知，则信号量+1，每当发送一个等待信号时，信号量-1.如果信号量为0则信号会处于等待状态，直到信号量大于0开始执行。 开如下方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">dispatch_semaphore_create(<span class="keyword">long</span> value);  创建一个信号  初始化信号量 这里你可以随意设置</div><div class="line"></div><div class="line">dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout); 等待信号 当信号的信号量为<span class="number">0</span>的时候会阻塞线程 直到信号的信号量大于<span class="number">0</span> 超时时间为timeout  当信号的信号量大于<span class="number">0</span> 会将信号量减<span class="number">1</span>。</div><div class="line"></div><div class="line">dispatch_semaphore_signal(dispatch_semaphore_t dsema); 发送一个信号量 此时信号的信号量会+<span class="number">1</span></div></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) dispatch_semaphore_t semaphore;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.number = <span class="number">10</span>;</div><div class="line">    <span class="comment">//创建一个信号量为1的信号</span></div><div class="line">    <span class="keyword">self</span>.semaphore = dispatch_semaphore_create(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)test &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">             [<span class="keyword">self</span> sellTicket];</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)sellTicket &#123;</div><div class="line">    <span class="comment">//wait之后 信号量-1  为0  此时再进来的线程都需要等待  等待时间为DISPATCH_TIME_FOREVER 永远</span></div><div class="line">    dispatch_semaphore_wait(<span class="keyword">self</span>.semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.number &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.number--;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@还剩%ld张票"</span>,[<span class="built_in">NSThread</span> currentThread],<span class="keyword">self</span>.number);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//发送一个信号通知 这时信号量+1  为1；</span></div><div class="line">    dispatch_semaphore_signal(<span class="keyword">self</span>.semaphore);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="POSIX"><a href="#POSIX" class="headerlink" title="POSIX"></a>POSIX</h3><p><code>POSIX</code>是互斥所，和<code>dispatch_semaphore_t</code>很像，但是完全不同，<code>POSIX</code>是<code>Unix/Linux</code>平台上提供的一套条件互斥锁的API。</p>
<p>新建一个简单的<code>POSIX</code>互斥锁<code>pthread_mutex_t</code>，引入头文件<code>#import &lt;pthread.h&gt;</code>声明并初始化一个<code>pthread_mutex_t</code>的结构。使用<code>pthread_mutex_lock</code>和<code>pthread_mutex_unlock</code>函数。调用<code>pthread_mutex_destroy</code>来释放该锁的数据结构。</p>
<p>如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//声明 pthread_mutex_t</span></div><div class="line">    pthread_mutex_t mutex;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">//初始化</span></div><div class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);  </div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)test &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">             [<span class="keyword">self</span> sellTicket];</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)sellTicket &#123;</div><div class="line">    <span class="comment">//加锁</span></div><div class="line">    pthread_mutex_lock(&amp;mutex);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.number &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.number--;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@还剩%ld张票"</span>,[<span class="built_in">NSThread</span> currentThread],<span class="keyword">self</span>.number);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//解锁</span></div><div class="line">    pthread_mutex_unlock(&amp;mutex);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">    <span class="comment">//一定要释放</span></div><div class="line">    pthread_mutex_destroy(&amp;mutex);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>POSIX</code>还可以创建条件锁<code>pthread_cond_t</code>，提供了和<code>NSCondition</code>一样的条件控制，初始化互斥锁同时使用<code>pthread_cond_init</code>来初始化条件数据结构:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 初始化</span></div><div class="line"><span class="keyword">int</span> pthread_cond_init (pthread_cond_t *cond, pthread_condattr_t *attr);</div><div class="line"></div><div class="line"><span class="comment">// 等待（会阻塞）</span></div><div class="line"><span class="keyword">int</span> pthread_cond_wait (pthread_cond_t *cond, pthread_mutex_t *mut);</div><div class="line"></div><div class="line"><span class="comment">// 定时等待</span></div><div class="line"><span class="keyword">int</span> pthread_cond_timedwait (pthread_cond_t *cond, pthread_mutex_t *mut, <span class="keyword">const</span> <span class="keyword">struct</span> timespec *abstime);</div><div class="line"></div><div class="line"><span class="comment">// 唤醒</span></div><div class="line"><span class="keyword">int</span> pthread_cond_signal (pthread_cond_t *cond);</div><div class="line"></div><div class="line"><span class="comment">// 广播唤醒</span></div><div class="line"><span class="keyword">int</span> pthread_cond_broadcast (pthread_cond_t *cond);</div><div class="line"></div><div class="line"><span class="comment">// 销毁</span></div><div class="line"><span class="keyword">int</span> pthread_cond_destroy (pthread_cond_t *cond);</div></pre></td></tr></table></figure>
<p><code>POSIX</code>还提供了很多函数，有一套完整的API，包含<code>Pthreads</code>线程的创建控制等等，非常底层，可以手动处理线程的各个状态的转换即管理生命周期，甚至可以实现一套自己的多线程，感兴趣的可以继续深入了解。推荐一篇详细文章，但不是基于<code>iOS</code>的，是基于<code>Linux</code>的，但是介绍的非常详细<a href="http://blog.chinaunix.net/uid-26885237-id-3207962.html" target="_blank" rel="external">Linux 线程锁详解</a></p>
<h3 id="OSSpinLock"><a href="#OSSpinLock" class="headerlink" title="OSSpinLock"></a>OSSpinLock</h3><p><code>OSSpinLock</code>是自旋锁，首先要声明的一点，<code>OSSpinLock</code>不再安全。主要原因发生在低优先级线程拿到锁时，高优先级线程进入忙等(busy-wait)状态，消耗大量 CPU 时间，从而导致低优先级线程拿不到 CPU 时间，也就无法完成任务并释放锁。这种问题被称为优先级反转。具体为什么不安全，请看这篇文章<a href="http://blog.ibireme.com/2016/01/16/spinlock_is_unsafe_in_ios/" target="_blank" rel="external">不再安全的 OSSpinLock</a>;</p>
<p>玩法如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;libkern/OSAtomic.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line">&#123;</div><div class="line">    OSSpinLock spinlock;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.number = <span class="number">10</span>;</div><div class="line">    spinlock = OS_SPINLOCK_INIT;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">IBAction</span>)test:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">             [<span class="keyword">self</span> sellTicket];</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)sellTicket &#123;</div><div class="line">    OSSpinLockLock(&amp;spinlock);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.number &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.number--;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@还剩%ld张票"</span>,[<span class="built_in">NSThread</span> currentThread],<span class="keyword">self</span>.number);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    OSSpinLockUnlock(&amp;spinlock);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>最后放一张各个锁的性能对比图（摘自<a href="http://blog.ibireme.com/2016/01/16/spinlock_is_unsafe_in_ios/" target="_blank" rel="external">ibireme</a>）：</p>
<div align="center"><br><img src="http://blog.ibireme.com/wp-content/uploads/2016/01/lock_benchmark.png" alt="image"><br></div>

<p>从图中可以看出，<code>OSSpinLock</code>的性能最好，但是它已不再安全。推荐大家使用<code>dispatch_semaphore</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS开发中，多线程开发是个头疼的问题，最大的问题就是资源竞争问题。同一时间，多个线程对资源的读或者写都有可能造成不可预知的问题。解决这种问题的手段就是在操作资源的时候加上锁，那么常用的锁都有哪几种呢？本篇博客就来简单的说一说。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://guiyongdong.github.io/categories/Objective-C/"/>
    
    
      <category term="多线程" scheme="https://guiyongdong.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative导航新宠儿react-navigation</title>
    <link href="https://guiyongdong.github.io/2017/05/20/ReactNative%E5%AF%BC%E8%88%AA%E6%96%B0%E5%AE%A0%E5%84%BFreact-navigation/"/>
    <id>https://guiyongdong.github.io/2017/05/20/ReactNative导航新宠儿react-navigation/</id>
    <published>2017-05-20T01:24:19.000Z</published>
    <updated>2017-05-22T07:22:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>导航一直是<code>App</code>开发中比较重要的一个组件，<code>ReactNative</code>提供了两种导航组件供我们使用，分别是：<code>NavigatorIOS</code>和<code>Navigator</code>，但是前者只能用于<code>iOS</code>平台，后者在<code>ReactNative</code>0.44版本以后已经被移除了。好在有人提供了更好的导航组件，就是我们今天要讲的<code>react-navigation</code>，并且<code>ReactNative</code>官方更推荐我们使用此组件。</p>
<a id="more"></a>
<p>本篇文章只讲解基础用法，如果你想了解更多，请戳这里-&gt;<a href="https://reactnavigation.org/docs/intro/" target="_blank" rel="external">戳我</a>。</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>react-navigation</code>主要包括导航，底部<code>tab</code>，顶部<code>tab</code>，侧滑等，功能很强大，而且体验接近原生。今天我们介绍的组件分别为：</p>
<p></p><p></p>
<ul>
<li>导航 -&gt; StackNavigator</li>
<li>底部或者顶部<code>tab</code> -&gt; TabNavigator</li>
<li>侧滑 -&gt; DrawerNavigator</li>
</ul>
<h3 id="DrawerNavigator"><a href="#DrawerNavigator" class="headerlink" title="DrawerNavigator"></a>DrawerNavigator</h3><p>先来看看运行效果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android35.gif?raw=true"><br></div>

<p>这里，我们定义三个界面，一个为根界面，一个主界面，一个侧滑界面，分别如下：</p>
<p><strong>侧滑界面DrawerLeftPage.js：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    View,</div><div class="line">    Text,</div><div class="line">    TouchableOpacity,</div><div class="line">    StyleSheet,</div><div class="line">    Image</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawerLeftPage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> navigationOptions = &#123;</div><div class="line">        <span class="comment">//标题</span></div><div class="line">        drawerLabel:<span class="string">'购物车'</span>,</div><div class="line">        <span class="comment">//图标</span></div><div class="line">        drawerIcon:(&#123;tintColor&#125;) =&gt; &#123;</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">Image</span></span></span></div><div class="line">                    <span class="attr">source</span>=<span class="string">&#123;require(</span>'<span class="attr">..</span>/<span class="attr">images</span>/<span class="attr">car</span>@<span class="attr">3x.png</span>')&#125;</div><div class="line">                    <span class="attr">style</span>=<span class="string">&#123;[&#123;width:24,height:24&#125;,&#123;tintColor:tintColor&#125;]&#125;</span></div><div class="line">                /&gt;</div><div class="line">            );</div><div class="line">        &#125;,</div><div class="line">    &#125;;</div><div class="line">    render() &#123;</div><div class="line">        return(</div><div class="line">            <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</div><div class="line">                    //点击关闭侧滑</div><div class="line">                    this.props.navigation.navigate('DrawerClose')</div><div class="line">                &#125;&#125;&gt;</div><div class="line">                    <span class="tag">&lt;<span class="name">Text</span>&gt;</span>关闭侧滑栏<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex:1,</div><div class="line">        justifyContent:'center',</div><div class="line">        alignItems:'center'</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这个界面很简单，我们定义了一个按钮，点击按钮的时候，关闭侧滑页，这里关闭的参数为<code>DrawerClose</code>,通过<code>props</code>属性可以拿到当前<code>navigation</code>。另外我们又定义了一个静态属性，来配置侧滑显示的具体属性。注意，此属性名一定要写成<code>navigationOptions</code>。</p>
<p><code>navigationOptions</code>主要有以下参数：</p>
<p></p><p></p>
<ul>
<li><code>title</code>：通用标题，当你不写<code>drawerLabel</code>时，使用此参数作为侧滑标题，通常都不写</li>
<li><code>drawerLabel</code>：侧滑标题</li>
<li><code>drawerIcon</code>：侧滑的标题图标，这里会回传两个参数，<code>{focused: boolean, tintColor: string}</code>，<code>focused</code>表示是否是选中状态，<code>tintColor</code>表示选中的颜色，这个颜色是我们自己在根视图定义的。当然，你也可以使用其他的组件来作为图标，比如<code>Text</code>。</li>
</ul>
<p><strong>主界面 DrawerHomePage.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    View,</div><div class="line">    Text,</div><div class="line">    TouchableOpacity,</div><div class="line">    StyleSheet,</div><div class="line">    Image</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawerHomePage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> navigationOptions = &#123;</div><div class="line">        drawerLabel:<span class="string">'首页'</span>,</div><div class="line">        drawerIcon:(&#123;tintColor&#125;) =&gt; &#123;</div><div class="line">            <span class="keyword">return</span> (</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">Image</span></span></span></div><div class="line">                    <span class="attr">source</span>=<span class="string">&#123;require(</span>'<span class="attr">..</span>/<span class="attr">images</span>/<span class="attr">home</span>@<span class="attr">3x.png</span>')&#125;</div><div class="line">                    <span class="attr">style</span>=<span class="string">&#123;[&#123;width:24,height:24&#125;,&#123;tintColor:tintColor&#125;]&#125;</span></div><div class="line">                /&gt;</div><div class="line">            );</div><div class="line">        &#125;,</div><div class="line">    &#125;;</div><div class="line">    render() &#123;</div><div class="line">        return(</div><div class="line">              <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</div><div class="line">                      //点击打开抽屉</div><div class="line">                      this.props.navigation.navigate('DrawerOpen')</div><div class="line">                  &#125;&#125;&gt;</div><div class="line">                      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>打开侧滑栏<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex:1,</div><div class="line">        justifyContent:'center',</div><div class="line">        alignItems:'center'</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这个界面和上一个界面基本一样，只是这里的点击事件为打开抽屉，传的参数为<code>DrawerOpen</code>。<br>打开侧滑：<code>this.props.navigation.navigate(&#39;DrawerOpen&#39;)</code><br>关闭侧滑：<code>this.props.navigation.navigate(&#39;DrawerClose&#39;)</code></p>
<p><strong>根视图 DrawerPage.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    StyleSheet,</div><div class="line">    View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> DrawerHomePage <span class="keyword">from</span> <span class="string">'./DrawerHomePage'</span>;</div><div class="line"><span class="keyword">import</span> DrawerLeftPage <span class="keyword">from</span> <span class="string">'./DrawerLeftPage'</span>;</div><div class="line"><span class="keyword">import</span> &#123;DrawerNavigator&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Drawer = DrawerNavigator(</div><div class="line">    &#123;</div><div class="line">        Home:&#123;</div><div class="line">            screen:DrawerHomePage,</div><div class="line">        &#125;,</div><div class="line">        Left:&#123;</div><div class="line">            screen:DrawerLeftPage</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        drawerWidth:<span class="number">300</span>,</div><div class="line">        drawerPosition:<span class="string">'left'</span>,</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawerPage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Drawer</span>/&gt;</span></span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex:<span class="number">1</span>,</div><div class="line">        justifyContent:<span class="string">'center'</span>,</div><div class="line">        alignItems:<span class="string">'center'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里我们从<code>react-navigation</code>导入侧滑组件<code>DrawerNavigator</code>，这里我们定义一个常量<code>Drawer</code>，主要来配置侧滑的各种参数。首先，看<code>DrawerNavigator</code>的构造方法：<br><code>DrawerNavigator(RouteConfigs, DrawerNavigatorConfig)</code><br>这里接收两个参数，一个为页面路由配置，一个为显示的配置，我们分别来看，</p>
<p><code>RouteConfigs</code>：</p>
<p>这里你可以配置所有的界面，例如，当前例子配置了两个界面：<code>Home</code>和<code>Left</code>，指定界面分别为<code>DrawerHomePage</code>和<code>DrawerLeftPage</code>。你还可以配置其他界面，这些配置的界面都将显示在侧滑栏上。</p>
<p><code>DrawerNavigatorConfig</code>：</p>
<p></p><p></p>
<ul>
<li><code>drawerWidth</code>: 侧滑栏的宽度，如果你不想写死，可以使用<code>Dimensions</code>获取屏幕的宽度，动态计算</li>
<li><code>drawerPosition</code>: 侧滑的方向，<code>left</code>和<code>right</code>，默认<code>left</code></li>
<li><code>contentComponent</code>: 这个就比较重要了，可以自定义侧滑页，我们等会详细说。</li>
<li><code>contentOptions</code>: 主要配置侧滑栏条目的属性，只对<code>DrawerItems</code>，例如我们刚才写的例子，就可以通过这个属性来配置颜色，背景色等。其主要属性有：<ul>
<li><code>items</code>: 这个我也没弄清是什么意思，不影响</li>
<li><code>activeItemKey</code>: 定义当前选中的页面的key</li>
<li><code>activeTintColor</code>: 选中条目状态的文字颜色</li>
<li><code>activeBackgroundColor</code>: 选中条目的背景色</li>
<li><code>inactiveTintColor</code>: 未选中条目状态的文字颜色</li>
<li><code>inactiveBackgroundColor</code>: 未选中条目的背景色</li>
<li><code>onItemPress</code>: 选中条目的回调，这个参数属性为函数，会将当前路由回调过去</li>
<li><code>style</code>: 定义条目的颜色</li>
<li><code>labelStyle</code>: 定义条目文字的颜色</li>
</ul>
</li>
</ul>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    drawerWidth:<span class="number">300</span>,</div><div class="line">    drawerPosition:<span class="string">'left'</span>,</div><div class="line">    contentOptions:&#123;</div><div class="line">        activeTintColor: <span class="string">'#e91e63'</span>,</div><div class="line">        items:[<span class="string">"Home"</span>],</div><div class="line">        activeItemKey:<span class="string">'abc'</span>,</div><div class="line">        activeBackgroundColor:<span class="string">'yellow'</span>,</div><div class="line">        inactiveTintColor:<span class="string">'blue'</span>,</div><div class="line">        inactiveBackgroundColor:<span class="string">'red'</span>,</div><div class="line">        onItemPress:((route)=&gt;&#123;</div><div class="line">            <span class="built_in">console</span>.log(route);</div><div class="line">        &#125;),</div><div class="line">        labelStyle:&#123;</div><div class="line">            fontSize:<span class="number">30</span></div><div class="line">        &#125;,</div><div class="line">        style:&#123;</div><div class="line">            marginRight:<span class="number">30</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如此，<code>DrawerNavigator</code>的基本用法我们已经搞的差不多了，但是，这还不能满足我们的日常开发，因为我们的侧滑界面可不是这个样子的。</p>
<p>刚才还有个参数没有介绍，就是<code>contentComponent</code>，他就是用来自定义侧滑界面的。</p>
<p>上面的例子有一个问题，加入我们的<code>item</code>比较多，但是侧滑页面并不能滑动，这时，就要使用<code>contentComponent</code>来自定义界面，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">//导入DrawerItems 因为系统的条目就是DrawerItems</span></div><div class="line"><span class="keyword">import</span> &#123;DrawerNavigator,DrawerItems&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    drawerWidth:<span class="number">300</span>,</div><div class="line">    drawerPosition:<span class="string">'left'</span>,</div><div class="line">    <span class="comment">//ScrollView作为我们的侧滑界面，内部依然是DrawerItems</span></div><div class="line">    contentComponent:((props)=&gt;&#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span> &gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">DrawerItems</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></div><div class="line">        )&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行效果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android36.gif?raw=true"><br></div>

<p>当然，我们完全可以自定义侧滑界面，并且不使用<code>DrawerItems</code>条目。如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> DrawerHomePage <span class="keyword">from</span> <span class="string">'./DrawerHomePage'</span>;</div><div class="line"><span class="keyword">import</span> DrawerLeftPage <span class="keyword">from</span> <span class="string">'./DrawerLeftPage'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;DrawerNavigator&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</div><div class="line"></div><div class="line"><span class="comment">//自定义侧滑界面 </span></div><div class="line"><span class="keyword">const</span> CustomDrawerContentComponent = (props)=&gt;&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">DrawerLeftPage</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span></div><div class="line">    );</div><div class="line">&#125;;</div><div class="line">const Drawer = DrawerNavigator(</div><div class="line">    &#123;</div><div class="line">        Home:&#123;</div><div class="line">            screen:DrawerHomePage,</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        drawerWidth:300,</div><div class="line">        drawerPosition:'left',</div><div class="line">        contentComponent:(CustomDrawerContentComponent)</div><div class="line">    &#125;</div><div class="line">);</div><div class="line">export default class DrawerPage extends Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return(</div><div class="line">            <span class="tag">&lt;<span class="name">Drawer</span>/&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex:1</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我们这里定义了一个常量，返回<code>DrawerLeftPage</code>作为我们的侧滑界面，在<code>DrawerLeftPage</code>中就可以随意定制了。注意，一定要将<code>props</code>传递到下一个界面，否则通过<code>props</code>拿不到<code>navigation</code>。最终运行效果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android37.gif?raw=true"><br></div>

<p>好了，<code>DrawerNavigator</code>我们已经了解完了。</p>
<hr>
<h3 id="StackNavigator"><a href="#StackNavigator" class="headerlink" title="StackNavigator"></a>StackNavigator</h3><p>这个组件就比较麻烦了，我们先来看他的构造函数：<br><code>StackNavigator(RouteConfigs, StackNavigatorConfig)</code></p>
<p><strong>RouteConfigs:</strong> </p>
<p>它主要是来配置页面路由的，类似与<code>Android</code>的<code>Manifest.xml</code>，所有的界面都必须配置在里面。如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    First:&#123;</div><div class="line">        screen:FirstNavigation,</div><div class="line">        navigationOptions:(&#123;</div><div class="line">            title:<span class="string">'首页'</span></div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    Second:&#123;</div><div class="line">        screen:SecondNavigation,</div><div class="line">        navigationOptions:(&#123;navigation&#125;) =&gt; (&#123;</div><div class="line">            title: <span class="string">"第二个界面"</span></div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们配置了首页和第二个页面，并且配置了标题参数。当然，如果你不想在路由里面配置页面的参数，你也可以在页面中配置，需要在页面中定义一个静态常量<code>navigationOptions</code>，和<code>DrawerNavigator</code>的使用方法类似。我们来看看<code>navigationOptions</code>有哪些可以配置的参数：</p>
<p></p><p></p>
<ul>
<li><code>title</code>: 这个即可以作为头部标题，也可以作为返回标题和<code>Tab</code>标题</li>
<li><code>header</code>: 自定义导航条，系统的导航条会隐藏</li>
<li><code>headerTitle</code>: 标题</li>
<li><code>headerBackTitle</code>: 回退标题</li>
<li><code>headerTruncatedBackTitle</code>: 当回退标题不能显示的时候显示此属性的标题，比如回退标题太长了</li>
<li><code>headerRight</code>: 定义导航栏右边视图</li>
<li><code>headerLeft</code>: 定义导航栏左边视图</li>
<li><code>headerStyle</code>: 定义导航栏的样式，比如背景色等</li>
<li><code>headerTitleStyle</code>: 定义标题的样式</li>
<li><code>headerBackTitleStyle</code>: 定义返回标题的样式</li>
<li><code>headerTintColor</code>: 定义导航条的tintColor，会覆盖<code>headerTitleStyle</code>中的颜色</li>
<li><code>gesturesEnabled</code>: 定义是否能侧滑返回，<code>iOS</code>默认<code>true</code>，<code>Android</code>默认<code>false</code></li>
</ul>
<p>示例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">static</span> navigationOptions=(&#123;</div><div class="line">    title:<span class="string">'首页'</span>,</div><div class="line">    header:(</div><div class="line">        &lt;View style=&#123;&#123;width:Dimensions.get('window').width,height:64,backgroundColor:'red'&#125;&#125;/&gt;</div><div class="line">    ),</div><div class="line">    headerTitle:(</div><div class="line">        &lt;View style=&#123;&#123;width:60,height:20,backgroundColor:'red'&#125;&#125;/&gt;</div><div class="line">    ),</div><div class="line">    headerBackTitle:'哈哈哈哈哈',</div><div class="line">    headerTruncatedBackTitle:'你好',</div><div class="line">    headerRight:(</div><div class="line">        &lt;View&gt;</div><div class="line">            &lt;Text&gt;right&lt;/Text&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">    ),</div><div class="line">    headerLeft:(</div><div class="line">        &lt;View&gt;</div><div class="line">            &lt;Text&gt;left&lt;/Text&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">    ),</div><div class="line">    headerStyle: &#123;</div><div class="line">        backgroundColor:'yellow'</div><div class="line">    &#125;,</div><div class="line">    headerTitleStyle:&#123;</div><div class="line">        color:'red'</div><div class="line">    &#125;,</div><div class="line">    headerBackTitleStyle:&#123;</div><div class="line">        tintColor:'#789'</div><div class="line">    &#125;,</div><div class="line">    headerTintColor:'#956',</div><div class="line">    gesturesEnabled:false</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>StackNavigatorConfig</strong></p>
<p>这个参数主要是配置整个路由的，包括跳转动画，跳转方式等。先来看看它有哪些参数：</p>
<p></p><p></p>
<ul>
<li><code>initialRouteName</code>: 初始化哪个界面为根界面，如果不配置，默认使用<code>RouteConfigs</code>中的第一个页面当做根界面</li>
<li><code>initialRouteParams</code>: 初始化根界面参数，主要是给根视图传递一些参数，通过<code>this.props.navigation.state.params</code>可以取到</li>
<li><code>navigationOptions</code>: 配置默认的<code>navigationOptions</code></li>
<li><code>paths</code>: 官方意思是覆盖已经配置的路由，可是我没有试出来效果</li>
<li><code>mode</code>: 跳转方式，一种是<code>card</code>，默认的，在<code>iOS</code>上是从右到左跳转，在<code>Android</code>上是从下到上，都是使用原生系统的默认跳转方式。一种是<code>modal</code>，只针对<code>iOS</code>平台，模态跳转。</li>
<li><code>headerMode</code>: 跳转过程中，导航条的动画效果，有三个值，<code>float</code>表示会渐变，类似于<code>iOS</code>的原生效果，<code>screen</code>表示没有渐变。<code>none</code>表示隐藏导航条</li>
<li><code>cardStyle</code>: 可以统一定义界面的颜色，例如背景色</li>
<li><code>transitionConfig</code>：配置页面跳转的动画</li>
<li><code>onTransitionStart</code>: 页面跳转动画即将开始的回调</li>
<li><code>onTransitionEnd</code>: 页面跳转动画结束的回调</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">static</span> stackNavigatorConfig = (&#123;</div><div class="line">    initialRouteName:<span class="string">'First'</span>,</div><div class="line">    initialRouteParams:&#123;</div><div class="line">        data:<span class="string">'haha'</span></div><div class="line">    &#125;,</div><div class="line">    navigationOptions:&#123;</div><div class="line">        headerTintColor:<span class="string">'red'</span></div><div class="line">    &#125;,</div><div class="line">    mode:<span class="string">'card'</span>,</div><div class="line">    headerMode:<span class="string">'screen'</span>,</div><div class="line">    cardStyle:(&#123;backgroundColor:<span class="string">'blue'</span>&#125;),</div><div class="line">    onTransitionStart:((route)=&gt;&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'开始动画'</span>);</div><div class="line">    &#125;),</div><div class="line">    onTransitionEnd:((route)=&gt;&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'结束动画'</span>);</div><div class="line">    &#125;),</div><div class="line">    transitionConfig:(()=&gt;(&#123;</div><div class="line">        <span class="comment">//因为ios 的导航动画默认是从左到右，所以，这里配置一下动画，使用react-navigation已经实现的从左到右的动画，</span></div><div class="line">        <span class="comment">//适配Android，不过，需要导入动画 </span></div><div class="line">        <span class="comment">//import CardStackStyleInterpolator from 'react-navigation/src/views/CardStackStyleInterpolator';</span></div><div class="line">        screenInterpolator:CardStackStyleInterpolator.forHorizontal,</div><div class="line">    &#125;))</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="Navigation-Prop"><a href="#Navigation-Prop" class="headerlink" title="Navigation Prop"></a>Navigation Prop</h4><p>了解完路由配置以后，我们再来看看组件的属性，</p>
<p></p><p></p>
<ul>
<li><code>navigate</code>：路由方法，主要来启动另一个页面</li>
<li><code>state</code>：状态，其实<code>StackNavigator</code>内部维护了两个路由栈，一个名为<code>newState</code>，是当前显示页面之前的所有页面，包括当前界面。一个名为<code>lastState</code>，当然，通过<code>state</code>还能拿到很多参数。</li>
<li><code>setParams</code>: 设置参数，记住，一定不要在<code>render</code>方法中调用此方法。</li>
<li><code>goBack</code>: 返回</li>
<li><code>dispatch</code>: 给当前界面设置action，会替换原来的跳转，回退等事件</li>
</ul>
<p><strong>navigate</strong></p>
<p>此方法可以传三个参数：<code>navigate(routeName, params, action)</code></p>
<p></p><p></p>
<ul>
<li><code>routeName</code>: 页面名称，一定要在路由配置中配置。</li>
<li><code>params</code>: 传递参数到下一个页面</li>
<li><code>action</code>: <code>action</code></li>
</ul>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">this</span>.props.navigation.navigate(<span class="string">'Second'</span>,&#123;<span class="string">'data'</span>:<span class="string">'haha'</span>&#125;);</div></pre></td></tr></table></figure>
<p><strong>state</strong></p>
<p>通过<code>state</code>，我们能拿到传递过来的参数，通过打印<code>state</code>，得到如下结果：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">state: </div><div class="line">   &#123; params: &#123;<span class="string">'data'</span>:<span class="string">'haha'</span>&#125;,</div><div class="line">     key: <span class="string">'id-1495292939049-1'</span>,</div><div class="line">     routeName: <span class="string">'Model'</span> &#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，通过<code>state</code>，我们可以拿到传递过来的<code>params</code></p>
<p><strong>setParams</strong></p>
<p>设置当前页面的参数，记住，调用此方法一定要在<code>componentDidMount</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">componentDidMount() &#123;</div><div class="line">    <span class="keyword">var</span> &#123;setParams&#125; = <span class="keyword">this</span>.props.navigation;</div><div class="line">    setParams(&#123;<span class="string">'haha'</span>:<span class="string">'abc'</span>&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>goBack</strong></p>
<p>回退到指定界面，如果什么都不传，回退到上一个界面，传<code>null</code>，回退到任意界面。传<code>key</code>，可以回退到指定界面。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">this</span>.props.navigation.goBack();</div><div class="line"><span class="keyword">this</span>.props.navigation.goBack(<span class="literal">null</span>);</div><div class="line"><span class="keyword">this</span>.props.navigation.goBack(<span class="string">'Profile'</span>);</div></pre></td></tr></table></figure>
<p>关于<code>react-navigation</code>的基本用法已经了解的差不多了，至于更详细的用法，可以看官方文档。</p>
<p><strong>注意：</strong></p>
<p>全屏侧滑返回手势：系统默认有侧滑返回手势，距离屏幕距离为35，为了使用全屏侧滑，需要修改源码：在<code>react-navigation/src/views/CardStack.js</code>类，修改常量<code>GESTURE_RESPONSE_DISTANCE_HORIZONTAL</code>为<code>Dimensions.get(&#39;window&#39;).width</code>即可。</p>
<p>在<code>iOS</code>上，标题会居中，但是在<code>Android</code>上是居左的，想要<code>Android</code>上也居中，需要修改：<code>react-navigation/src/views/Header.js</code>中的<code>title</code>样式修改为<code>center</code>，并且在方法<code>_renderTitle</code>中注释掉</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (Platform.OS === <span class="string">'android'</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (!options.hasLeftComponent) &#123;</div><div class="line">        style.left = <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (!options.hasRightComponent) &#123;</div><div class="line">        style.right = <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这几句代码。</p>
<hr>
<h3 id="TabNavigator"><a href="#TabNavigator" class="headerlink" title="TabNavigator"></a>TabNavigator</h3><p><code>tab</code>选项卡的功能，在<code>iOS</code>上默认类似于<code>TabBar</code>，在<code>Android</code>中类似于<code>TabLayout</code>，先来看看构造方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">TabNavigator(RouteConfigs, TabNavigatorConfig)</div></pre></td></tr></table></figure>
<p><strong>RouteConfigs</strong></p>
<p>同样的，还是配置路由，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    Home:&#123;</div><div class="line">        screen:HomeTab,</div><div class="line">        <span class="comment">//navigationOptions:&#123;</span></div><div class="line">        <span class="comment">//    ....</span></div><div class="line">        <span class="comment">//&#125;</span></div><div class="line">    &#125;,</div><div class="line">    Car:&#123;</div><div class="line">        screen:CarTab</div><div class="line">    &#125;,</div><div class="line">    Profile:&#123;</div><div class="line">        screen:ProfileTab</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，你也可以配置<code>navigationOptions</code>，但是，在这里配置的优先级比在页面中配置的优先级高，所以，我们一般再单个页面中配置所有的<code>navigationOptions</code>。</p>
<p><strong>TabNavigatorConfig</strong></p>
<p></p><p></p>
<ul>
<li><code>tabBarComponent</code>: 默认两种方式，<code>TabBarBottom</code>和<code>TabBarTop</code>，可以通过如下代码导入：<code>import {TabBarBottom,TabBarTop} from &#39;react-navigation&#39;;</code>，这两者的区别主要是样式和位置的区别，<code>iOS</code>上默认使用<code>TabBarBottom</code>，<code>Android</code>上默认使用<code>TabBarTop</code>。</li>
<li><code>tabBarPosition</code>: 配置<code>tab</code>的位置，<code>top</code>和<code>bottom</code></li>
<li><code>swipeEnabled</code>: 是否可以滑动切换<code>tab</code></li>
<li><code>animationEnabled</code>: 点击选项卡切换界面是否需要动画</li>
<li><code>lazy</code>: 是否懒加载界面，默认一次加载所有的界面，我们最好设置为true</li>
<li><code>tabBarOptions</code>: <code>tab</code>的样式等配置，我们下面详细说</li>
<li><code>initialRouteName</code>，第一次初始化哪个界面，默认初始化第一个。</li>
<li><code>order</code>，<code>tab</code>排序，默认使用配置路由的顺序</li>
<li><code>paths</code>: 配置path</li>
<li><code>backBehavior</code>，当<code>Android</code>点击返回键的时候，做的处理，<code>initialRoute</code>返回到初始化的界面，<code>none</code>退出应用</li>
</ul>
<p>例子如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> Tab = TabNavigator(</div><div class="line">    &#123;</div><div class="line">        Home:&#123;</div><div class="line">            screen:HomeTab</div><div class="line">        &#125;,</div><div class="line">        Car:&#123;</div><div class="line">            screen:CarTab</div><div class="line">        &#125;,</div><div class="line">        Profile:&#123;</div><div class="line">            screen:ProfileTab</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        tabBarComponent:TabBarBottom,</div><div class="line">        tabBarPosition:<span class="string">'bottom'</span>,</div><div class="line">        swipeEnabled:<span class="literal">true</span>,</div><div class="line">        animationEnabled:<span class="literal">false</span>,</div><div class="line">        lazy:<span class="literal">true</span>,</div><div class="line">        initialRouteName:<span class="string">'Profile'</span>,</div><div class="line">        order:([<span class="string">'Profile'</span>,<span class="string">'Home'</span>,<span class="string">'Car'</span>]),</div><div class="line">        backBehavior:<span class="string">'none'</span></div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p><strong>tabBarOptions</strong></p>
<p>这个参数主要配置样式，针对<code>TabBarBottom</code>和<code>TabBarTop</code>。</p>
<p><code>TabBarBottom</code>:</p>
<p></p><p></p>
<ul>
<li><code>activeTintColor</code>: 选中的文字颜色</li>
<li><code>activeBackgroundColor</code>: 选中的背景色</li>
<li><code>inactiveTintColor</code>： 未选中的文字颜色</li>
<li><code>inactiveBackgroundColor</code>: 未选中的背景色</li>
<li><code>showLabel</code>: 是否显示标题，默认显示</li>
<li><code>style</code>: 定义item的样式</li>
<li><code>labelStyle</code>: 标题的样式</li>
</ul>
<p>例如：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">tabBarOptions:&#123;</div><div class="line">    activeTintColor:<span class="string">'red'</span>,</div><div class="line">    activeBackgroundColor:<span class="string">'blue'</span>,</div><div class="line">    inactiveTintColor:<span class="string">'yellow'</span>,</div><div class="line">    inactiveBackgroundColor:<span class="string">'#987'</span>,</div><div class="line">    showLabel:<span class="literal">true</span>,</div><div class="line">    labelStyle:&#123;</div><div class="line">        fontSize:<span class="number">12</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>TabBarTop</code>:</p>
<p></p><p></p>
<ul>
<li><code>activeTintColor</code>: 选中的文字颜色</li>
<li><code>inactiveTintColor</code>： 未选中的文字颜色</li>
<li><code>showIcon</code>: 是否显示图标，默认显示</li>
<li><code>showLabel</code>: 是否显示标题，默认显示</li>
<li><code>upperCaseLabel</code>: 使用大写字母</li>
<li><code>pressColor</code>: 定义颜色，大于<code>Android5.0</code>的一种按压效果</li>
<li><code>pressOpacity</code>: 按压下去的透明度，在<code>iOS</code>或者<code>Android5.0</code>之前</li>
<li><code>scrollEnabled</code>: 是否能够滚动，类似于今日头条的标题头</li>
<li><code>tabStyle</code>: 定义<code>item</code>的样式</li>
<li><code>indicatorStyle</code>: 指示器的颜色</li>
<li><code>labelStyle</code>: 文字的样式</li>
<li><code>iconStyle</code>: 图标的样式</li>
<li><code>style</code>: 定义<code>tab</code>的样式</li>
</ul>
<p>例如：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">tabBarOptions:&#123;</div><div class="line">    activeTintColor:<span class="string">'red'</span>,</div><div class="line">    inactiveTintColor:<span class="string">'yellow'</span>,</div><div class="line">    showIcon:<span class="literal">false</span>,</div><div class="line">    showLabel:<span class="literal">true</span>,</div><div class="line">    upperCaseLabel:<span class="literal">false</span>,</div><div class="line">    labelStyle:&#123;</div><div class="line">        fontSize:<span class="number">12</span></div><div class="line">    &#125;,</div><div class="line">    indicatorStyle:<span class="string">'green'</span>,</div><div class="line">    pressColor:<span class="string">'#823453'</span>,</div><div class="line">    pressOpacity:<span class="number">0.8</span>,</div><div class="line">    scrollEnabled:<span class="literal">true</span>,</div><div class="line">    tabStyle:&#123;</div><div class="line">        height:<span class="number">44</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>NavigationOptions</strong></p>
<p>当然，通过<code>NavigationOptions</code>来配置我们的<code>tabBarItem</code>:</p>
<p>

<ul>
<li><code>title</code>: 标题</li>
<li><code>tabBarVisible</code>: 是否可见</li>
<li><code>tabBarIcon</code>: 配置图片，当然，完全可以不使用图片</li>
<li><code>tabBarLabel</code>: 也是配置标题，只不过<code>title</code>既能配置<code>tab</code>的标题，也能配置<code>navigation</code>的标题</li>
</ul>
</p><p>例如：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">Profile:&#123;</div><div class="line">    screen:ProfileTab,</div><div class="line">    navigationOptions:(&#123;navigation&#125;)=&gt;(&#123;</div><div class="line">        tabBarLabel:<span class="string">'我的'</span>,</div><div class="line">        tabBarIcon:(&#123;focused,tintColor&#125;)=&gt;(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Image</span></span></span></div><div class="line">                <span class="attr">source</span>=<span class="string">&#123;focused?require(</span>'<span class="attr">..</span>/<span class="attr">..</span>/<span class="attr">images</span>/<span class="attr">user_hover</span>@<span class="attr">3x.png</span>')<span class="attr">:require</span>('<span class="attr">..</span>/<span class="attr">..</span>/<span class="attr">images</span>/<span class="attr">user</span>@<span class="attr">3x.png</span>')&#125;</div><div class="line">                <span class="attr">style</span>=<span class="string">&#123;&#123;width:30,height:30,tintColor:tintColor&#125;&#125;</span></div><div class="line">            /&gt;</div><div class="line">        )</div><div class="line">    &#125;),</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好了，<code>TabNavigator</code>也说的差不多了。当然，如果你想在某个界面切换<code>tab</code>，使用如下方法：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">this</span>.props.navigation.navigate(<span class="string">'Home'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="仿QQ主界面"><a href="#仿QQ主界面" class="headerlink" title="仿QQ主界面"></a>仿QQ主界面</h3><p>下面的例子是仿<code>QQ</code>主界面的，当然包括本篇文章的实例代码，请戳这里-&gt;<a href="http://git.oschina.net/guiyongdong/reactnavigationdemo" target="_blank" rel="external">戳我</a>。</p>
<p>运行效果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android38.gif?raw=true"><br></div>











]]></content>
    
    <summary type="html">
    
      &lt;p&gt;导航一直是&lt;code&gt;App&lt;/code&gt;开发中比较重要的一个组件，&lt;code&gt;ReactNative&lt;/code&gt;提供了两种导航组件供我们使用，分别是：&lt;code&gt;NavigatorIOS&lt;/code&gt;和&lt;code&gt;Navigator&lt;/code&gt;，但是前者只能用于&lt;code&gt;iOS&lt;/code&gt;平台，后者在&lt;code&gt;ReactNative&lt;/code&gt;0.44版本以后已经被移除了。好在有人提供了更好的导航组件，就是我们今天要讲的&lt;code&gt;react-navigation&lt;/code&gt;，并且&lt;code&gt;ReactNative&lt;/code&gt;官方更推荐我们使用此组件。&lt;/p&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="https://guiyongdong.github.io/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="https://guiyongdong.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之Service</title>
    <link href="https://guiyongdong.github.io/2017/05/12/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BService/"/>
    <id>https://guiyongdong.github.io/2017/05/12/一天一Android之Service/</id>
    <published>2017-05-12T04:00:17.000Z</published>
    <updated>2017-05-12T09:23:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>Android</code>系统中，知道为什么有些软件杀不死么？很大的原因就是<code>Service</code>。那<code>Service</code>是什么？</p>
<p><code>Service</code>是<code>Android</code>四大组件之一，开发中会经常用到它，例如当检测到<code>App</code>有新版本的时候，这时候我们一般会开启一个<code>Service</code>去后台下载新包，这时候，无论用户是否清除我们的<code>App</code>，都不会影响下载进度。</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android28.png?raw=true"><br></div>

<a id="more"></a>
<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p><code>Service</code>和<code>Activity</code>一样，都有各自的生命周期，不同的是，由于<code>Service</code>有两种启动方式，其生命周期也不同。</p>
<h5 id="startService"><a href="#startService" class="headerlink" title="startService"></a>startService</h5><p>当应用组件通过<code>startService</code>方法来启动<code>Service</code>时，<code>Service</code>则会处于启动状态，一旦服务启动，它就会在后台无限期的运行，生命周期独立于启动它的组件，即使启动它的组件已经销毁了也不受任何影响，由于启动的服务长期运行在后台，这会大量消耗手机的电量，因此，我们应该在任务执行完成之后调用<code>stopSelf()</code>来停止服务，或者通过其他应用组件调用<code>stopService</code>来停止服务。</p>
<p><code>startService</code>启动服务后，会执行如下生命周期：<code>onCreate()</code>-&gt;<code>onStart()(已经废弃)</code>-&gt;<code>onStartCommand()</code>-&gt;<code>onDestroy</code>。</p>
<p></p><p></p>
<ul>
<li><strong>onCreate():</strong>首次启动服务的时候，系统会调用这个方法，在<code>onStartCommand</code>和<code>onBind</code>方法之前，如果服务已经启动了，再次启动时，则不会调用此方法，因此可以在<code>onCreate</code>方法中做一些初始化的操作。比如要执行耗时的操作，可以在这里创建线程。</li>
<li><strong>onStartCommand():</strong>当通过<code>startService()</code>方法来启动服务的时候，在<code>onCreate</code>方法之后就会调用这个方法，此方法调用后，服务就启动了，将会在后台无限期的运行，直到通过<code>stopService</code>或者<code>stopSelf</code>方法来停止服务。</li>
<li><strong>onDestroy:</strong>当服务不再使用且将被销毁是，系统将调用此方法，服务应该事先此方法来清理所有资源，如线程等。</li>
</ul>
<p>了解完这几个生命周期方法后，我们来写一个简单的<code>Service</code>：</p>
<p>要使用<code>Service</code>就要通过继承<code>Service</code>类来实现，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SimpleService"</span>;</div><div class="line">    </div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onBind..."</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onCreate..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onStart..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onStartCommand..."</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onDestroy..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>切记，<code>Service</code>类写好后，需要在<code>AndroidManifest.xml</code>文件中注册：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".SimpleService"</span></div><div class="line">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后，我们在<code>Activity</code>中放置两个按钮，一个启动<code>Service</code>，一个停止<code>Service</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">        <span class="keyword">case</span> R.id.start_service:</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,SimpleService.class);</div><div class="line">            <span class="comment">// 启动服务</span></div><div class="line">            startService(intent);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> R.id.stop_service:</div><div class="line">            Intent service = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,SimpleService.class);</div><div class="line">            <span class="comment">// 停止服务</span></div><div class="line">            stopService(service);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到如下打印日志：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android30.png?raw=true"><br></div>

<blockquote>
<p>小结：通过startService方法启动的服务，服务会无限期的在后台运行，直到通过stopService或者stopSelf来终止服务。服务独立于启动它的组件，也就是说，当组件启动服务后，组件和服务就再也没有关系了。就算启动它的组件被销毁了，服务照样在后台运行。通过这种方式启动的服务不好与组件之间通信。</p>
</blockquote>
<h5 id="bindService"><a href="#bindService" class="headerlink" title="bindService"></a>bindService</h5><p>除了<code>startService</code>来启动服务之外，另外一种启动服务的方式就是通过<code>bindService</code>方法了，也就是绑定服务，其实通过它的名字就容易理解，绑定即将启动组件和服务绑定在一起。前面讲的通过<code>startService</code>方式启动的服务是与组件相独立的，即使启动服务的组件被销毁了，服务仍然在后台运行不受干扰。但是通过<code>bindSerivce</code>方式绑定的服务就不一样了，它与绑定组件的生命周期是有关的。如下：</p>
<p><strong>多个组件可以绑定到同一个服务上，如果只有一个组件绑定服务，当绑定的组件被销毁时，服务也就会停止了。如果是多个组件绑定到一个服务上，当绑定到该服务的所有组件都被销毁时，服务才会停止。</strong></p>
<p><code>bindService</code>绑定服务和<code>startService</code>的生命周期是不一样，<code>bindServie</code>的生命周期如下:<code>onCreate</code>-&gt;<code>onBind</code>-&gt;<code>onUnbind</code>-&gt;<code>onDestroy</code>。其中重要的就是<code>onBind</code>和<code>onUnbind</code>方法。</p>
<p>

<ul>
<li><strong>onBind():</strong>其他组件想通过<code>bindService</code>与服务绑定时，系统将会回调这个方法，在实现中，你必须返回一个<code>IBinder</code>接口，供客户端与服务进行通信，必须实现此方法，这个方法是<code>Service</code>的一个抽象方法，但是如果你不允许绑定的话，返回<code>null</code>就可以了。</li>
<li><strong>onUnbind():</strong>当所有与服务绑定的组件都解除绑定时，就会调用此方法。</li>
</ul>
</p><p>了解了这2个方法后，我们来看一下怎么绑定一个服务。</p>
<p><strong>1 首先，添加一个类 继承 Binder ,在Binder 类中添加其他组件要与服务交互的方法，并在onBind() 方法中返回IBinder 实例对象：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SimpleService"</span>;</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onBind..."</span>);</div><div class="line">        <span class="comment">//返回IBinder 接口对象</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyBinder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onUnbind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onUnbind..."</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onUnbind(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onCreate..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onStart..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onStartCommand..."</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onDestroy..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 添加一个类继承Binder</span></div><div class="line">    <span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span></span>&#123;</div><div class="line">        <span class="comment">// 添加要与外界交互的方法</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String  <span class="title">getStringInfo</span><span class="params">()</span></span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">"调用了服务中的方法"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2, 绑定服务的时候，需要提供一个ServiceConnection 接口，在接口回调中获取Binder 对象，与服务进行通信。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceDemoActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SimpleService.MyBinder mMyBinder;</div><div class="line">    <span class="comment">// 绑定/解除绑定 Service 回调接口</span></div><div class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            <span class="comment">// 绑定成功后回调</span></div><div class="line">            <span class="comment">//1 ,获取Binder接口对象</span></div><div class="line">            mMyBinder = (SimpleService.MyBinder) service;</div><div class="line">            <span class="comment">//2, 重服务获取数据</span></div><div class="line">            String content = mMyBinder.getStringInfo();</div><div class="line">            <span class="comment">// 3,界面提示</span></div><div class="line">            Toast.makeText(ServiceSimpleActivity.<span class="keyword">this</span>,content,Toast.LENGTH_LONG).show();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">           <span class="comment">// 解除绑定后回调</span></div><div class="line">            mMyBinder = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_service_demo);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//绑定服务</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindServer</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,SimpleService.class);</div><div class="line">        bindService(intent,mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//解除绑定</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unBindServer</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        unbindService(mConnection);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>点击绑定按钮，即绑定服务，并且在<code>onServiceConnected</code>中得到<code>MyBinder</code>对象，就可以通过这个对象和服务通信了，生命周期方法调用如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android31.png?raw=true"><br></div>

<p>可以看到，绑定服务的生命周期内依此调用了<code>onCreate</code>,<code>onBind</code>,<code>onUnbind</code>和 <code>onDestroy</code>方法，只有中间两个生命周期方法与<code>startService</code>启动服务是不同的。一张图就能看清两种方式的生命周期的异同：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android32.png?raw=true"><br></div>

<blockquote>
<p>tips: Service 的生命周期方法不同与Activity ，不需要调用超类的生命周期方法，如：不用调用 super.onCreate（）</p>
</blockquote>
<p><strong>注意，当使用startService方式启动Service的时候，可以通过手机的设置查看到启动的服务，而通过bindService方式启动的则不能。这很好理解，前者跟我们的应用程序的存活周期没有关系，有时候需要手动杀掉Service。</strong></p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android29.png?raw=true"><br></div>


<h3 id="Service通信"><a href="#Service通信" class="headerlink" title="Service通信"></a>Service通信</h3><h4 id="BroadcastReceiver"><a href="#BroadcastReceiver" class="headerlink" title="BroadcastReceiver"></a>BroadcastReceiver</h4><p>通过前文我们知道，<code>startService</code>方式启动的服务在后台，无限期地运行，并且与启动它的组件是独立的，启动<code>Service</code>之后也就与启动它的组件没有任何关系了。因此它是不能与启动它的组件之间相互通信的。虽然<code>Service</code>没有提供这种启动方式的通信方法，我们还是可以通过其他方式来解决的，这就用到了<code>BroadcastReceiver</code>。</p>
<p>场景描述：通过<code>startService</code>启动一个长期在后台运行的下载图片服务，然后在界面上点击下载按钮，通过<code>intent</code>传递一个下载链接给<code>Service</code>，在下载完成后，通过<code>BroadcastReceiver</code>通过<code>Activity</code>界面显示图片。看一下代码实现：</p>
<p><strong>Service:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IMAGE = <span class="string">"iamge_url"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RECEIVER_ACTION = <span class="string">"simpleservice"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"DownloadService"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_START_SERVICER = <span class="string">"startservice"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_DOWNLOAD = <span class="string">"startdownload"</span>;</div><div class="line">    <span class="keyword">private</span> Looper mServiceLooper;</div><div class="line">    <span class="keyword">private</span> ServiceHandler mServiceHandler;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServiceHandler</span><span class="params">(Looper looper)</span></span>&#123;</div><div class="line">            <span class="keyword">super</span>(looper);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="comment">// 工作线程做耗时下载</span></div><div class="line">            String url = (String) msg.obj;</div><div class="line">            Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                bitmap = Picasso.with(getApplicationContext()).load(url).get();</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">                intent.putExtra(<span class="string">"bitmap"</span>,bitmap);</div><div class="line">                intent.setAction(RECEIVER_ACTION);</div><div class="line">                <span class="comment">// 通知显示</span></div><div class="line">                LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//工作完成之后，停止服务</span></div><div class="line">            stopSelf();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 开启一个工作线程做耗时工作</span></div><div class="line">        HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"ServiceHandlerThread"</span>, Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">        thread.start();</div><div class="line">        <span class="comment">// 获取工作线程的Looper</span></div><div class="line">        mServiceLooper = thread.getLooper();</div><div class="line">        <span class="comment">// 创建工作线程的Handler</span></div><div class="line">        mServiceHandler = <span class="keyword">new</span> ServiceHandler(mServiceLooper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"call onStartCommand..."</span>);</div><div class="line">        <span class="keyword">if</span>(intent.getAction().equals(ACTION_DOWNLOAD))&#123;</div><div class="line">            handleCommand(intent);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(intent.getAction().equals(ACTION_START_SERVICER))&#123;</div><div class="line">            <span class="comment">//do nothing</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> START_STICKY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleCommand</span><span class="params">(Intent intent)</span></span>&#123;</div><div class="line">        String url = intent.getStringExtra(IMAGE);</div><div class="line">        <span class="comment">// 发送消息下载</span></div><div class="line">        Message message = mServiceHandler.obtainMessage();</div><div class="line">        message.obj = url;</div><div class="line">        mServiceHandler.sendMessage(message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建了一个<code>DownloadService</code>，在里面启动了一个工作线程，在线程里下载图片，然后通过<code>BroadcastReceiver</code>通知<code>Activity</code>显示。</p>
<p><code>Activity</code>的代码很简单，注册<code>BroadcastReceiver</code>，在<code>onReceiver</code>中显示图片就好了，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceDemoActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ImageView mImageView;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> BroadcastReceiver mReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">            Bitmap bitmap = intent.getParcelableExtra(<span class="string">"bitmap"</span>);</div><div class="line">            mImageView.setImageBitmap(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_service_demo);</div><div class="line">        mImageView = (ImageView) findViewById(R.id.imageView);</div><div class="line"></div><div class="line">        <span class="comment">//注册广播</span></div><div class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">        intentFilter.addAction(DownloadService.RECEIVER_ACTION);</div><div class="line">        LocalBroadcastManager.getInstance(<span class="keyword">this</span>).registerReceiver(mReceiver,intentFilter);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDownload</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,DownloadService.class);</div><div class="line">        intent.putExtra(<span class="string">"url"</span>,<span class="string">"http://www.8kmm.com/UploadFiles/2012/8/201208140920132659.jpg"</span>);</div><div class="line">        intent.setAction(DownloadService.ACTION_DOWNLOAD);</div><div class="line">        startService(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android33.gif?raw=true" width="375"><br></div>


<h4 id="LocaService-使用Binder-和-服务通信"><a href="#LocaService-使用Binder-和-服务通信" class="headerlink" title="LocaService 使用Binder 和 服务通信"></a>LocaService 使用Binder 和 服务通信</h4><p>既然通过<code>startService</code>启动的服务与启动它的组件是独立的。相互通信比较麻烦，那么<code>Google</code>也提供了两者之间的通信方法，那就是组件绑定服务，也就是上文将的通过<code>bindService</code>将组件和服务绑定到一起。组件可以获取<code>Service</code>通过<code>onBind</code>返回的一个<code>IBinder</code>接口，这样两者就可以通信了，这也是<code>Service</code>应用类通信比较常用的方式。</p>
<p>下面就模拟一个用服务播放音乐的例子来讲一下组件通过Binder 接口和服务之间通信。<br>首先定义一个通信的接口 IPlayer：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPlayer</span> </span>&#123;</div><div class="line">    <span class="comment">// 播放</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// 暂停</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// 停止</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// 获取播放进度</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProgress</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">// 获取时长</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDuration</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后添加一个MusicService 类，继承Service 实现 Iplayer 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicService</span> <span class="keyword">extends</span> <span class="title">Service</span> <span class="keyword">implements</span> <span class="title">IPlayer</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MusicService"</span>;</div><div class="line">    <span class="keyword">private</span> LocalService mBinder = <span class="keyword">new</span> LocalService();</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalService</span> <span class="keyword">extends</span> <span class="title">Binder</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> MusicService <span class="title">getService</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="comment">//这里直接将服务返回</span></div><div class="line">            <span class="keyword">return</span> MusicService.<span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBinder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"music play..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"music pause..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"music stop..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProgress</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDuration</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">10240</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中比较重要的就是内部类<code>LocalService</code>，继承<code>Binder</code>,里面提供一个<code>getService</code>方法，返回<code>MusicService</code>实例，组件通过<code>IBinder</code>获取到<code>Music</code>实例后，就可以和<code>Service</code>之间相互通信啦！</p>
<p>Activity中代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceDemoActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MusicService.LocalService mLocalService;</div><div class="line">    <span class="keyword">private</span> MusicService mMusicService;</div><div class="line">    </div><div class="line">    <span class="comment">// 绑定/解除绑定 Service 回调接口</span></div><div class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">            <span class="comment">//1 ,获取Binder接口对象</span></div><div class="line">            mLocalService = (MusicService.LocalService) service;</div><div class="line">            <span class="comment">//2, 获取MusicService 实例</span></div><div class="line">            mMusicService = mLocalService.getService();</div><div class="line"></div><div class="line">            <span class="comment">// 只要拿到Music Service 实例之后，就可以调用接口方法了</span></div><div class="line">            <span class="comment">// 可以通过它来播放／暂停音乐，还可以通过它来获取当前播放音乐的进度，时长等等</span></div><div class="line"></div><div class="line">            mMusicService.play();</div><div class="line"></div><div class="line">            mMusicService.pause();</div><div class="line"></div><div class="line">            mMusicService.stop();</div><div class="line"></div><div class="line">            <span class="keyword">int</span> progress = mMusicService.getProgress();</div><div class="line">            Log.i(MusicService.TAG,<span class="string">"progress:"</span>+progress);</div><div class="line"></div><div class="line">            <span class="keyword">int</span> duration = mMusicService.getDuration();</div><div class="line">            Log.i(MusicService.TAG,<span class="string">"duration:"</span>+duration);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">           <span class="comment">// 解除绑定后回调</span></div><div class="line">            mMusicService = <span class="keyword">null</span>;</div><div class="line">            mLocalService = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_service_demo);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindServer</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MusicService.class);</div><div class="line">        bindService(intent,mConnection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取到<code>MusicService</code>后，就可以调用接口方法了，比如：播放音乐，暂停、停止、获取进度等等。</p>
<h3 id="Service-总结"><a href="#Service-总结" class="headerlink" title="Service 总结"></a>Service 总结</h3><p><code>Service</code>有2种启动方式，<code>startService</code>启动服务，服务启动起来后，在后台无限期运行，直到通过<code>stopService</code>或者<code>stopSelf</code>停止服务，服务与组件独立，通信比较困难（但还是有办法的，通过<code>BroadcastReceiver</code>）。另一种方式就是<code>bindService</code>即绑定服务，组件和服务绑定在一起，服务的生命后期受组件影响，如果绑定到服务的组件全部被销毁了，那么服务也就会停止了。绑定服务的方式通常用于组件和服务之间 需要相互通信。<code>startService</code>这种 方式一般用于在后台执行任务，而不需要返回结果给组件。 这两种方式并非完全独立，也就是说，你可以绑定已经通过<code>startService</code>启动起来的服务，可以通过在<code>Intent</code>中添加<code>Action</code>来标示要执行的动作。比如：通过<code>Intent Action</code>标记要播放的音乐，调用<code>startService</code>来启动音乐服务播放音乐，在界面需要显示播放进度的时候，可以通过<code>binderService</code>来绑定服务，从而获取歌曲信息。这种情况下，<code>Service</code>需要实现两种方式的生命周期。这种情况下，除非所有客户端都已经取消绑定，否则通过<code>stopService</code>或者<code>stopSelf</code>是不能停止服务的。</p>
<p><code>Service</code>是运行在主线程中的，因此不能执行耗时的活着密集型的任务，如果要执行耗时操作或者密集型计算任务，请在服务中开启工作线程，在线程中执行。或者使用下面一节将要讲的<code>IntentService</code>。</p>
<hr>
<h3 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h3><p><code>IntentService</code>是<code>Service</code>的子类，它使用工作线程逐一处理所有启动请求，果您不要求服务同时处理多个请求，这是最好的选择。 您只需实现<code>onHandIntent</code>方法即可，该方法会接收每个启动请求的<code>Intent</code>，使您能够执行后台工作。</p>
<p><code>IntentService</code>默认为我们开启了一个工作线程，在任务执行完毕后，自动停止服务，因此在我们大多数的工作中，使用<code>IntentService</code>就够了，并且<code>IntentService</code>比较简单，只要实现一个方法<code>OnHandleIntent</code>，接下来看一下示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIntentService</span> <span class="keyword">extends</span> <span class="title">IntentService</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG =<span class="string">"MyIntentService"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyIntentService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(<span class="string">"MyIntentService"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(@Nullable Intent intent)</span> </span>&#123;</div><div class="line">        <span class="comment">// 这里已经是工作线程，在这里执行操作就行</span></div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> isMainThread =  Thread.currentThread() == Looper.getMainLooper().getThread();</div><div class="line">        Log.i(TAG,<span class="string">"is main thread:"</span>+isMainThread);</div><div class="line"></div><div class="line">        <span class="comment">// 执行耗时下载操作</span></div><div class="line">        mockDownload();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 模拟执行下载</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mockDownload</span><span class="params">()</span></span>&#123;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           Thread.sleep(<span class="number">5000</span>);</div><div class="line">           Log.i(TAG,<span class="string">"下载完成..."</span>);</div><div class="line">       &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后启动服务，看一下打印的日志，如下图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android34.png?raw=true"><br></div>

<h3 id="IntentService-总结"><a href="#IntentService-总结" class="headerlink" title="IntentService 总结"></a>IntentService 总结</h3><p><code>IntentService</code>是<code>Service</code>的子类，默认给我们开启了一个工作线程执行耗时任务，并且执行完任务后自 动停止服务。扩展<code>IntentService</code>比较简单，提供一个构造方法和实现<code>onHandleIntent</code>方法就可了，不用重写父类的其他方法。但是如果要绑定服务的话，还是要重写<code>onBind</code>返回一个<code>IBinder</code>的。使用<code>Service</code>可以同时执行多个请求，而使用<code>IntentService</code>只能同时执行一个请求。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;code&gt;Android&lt;/code&gt;系统中，知道为什么有些软件杀不死么？很大的原因就是&lt;code&gt;Service&lt;/code&gt;。那&lt;code&gt;Service&lt;/code&gt;是什么？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Service&lt;/code&gt;是&lt;code&gt;Android&lt;/code&gt;四大组件之一，开发中会经常用到它，例如当检测到&lt;code&gt;App&lt;/code&gt;有新版本的时候，这时候我们一般会开启一个&lt;code&gt;Service&lt;/code&gt;去后台下载新包，这时候，无论用户是否清除我们的&lt;code&gt;App&lt;/code&gt;，都不会影响下载进度。&lt;/p&gt;
&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android28.png?raw=true&quot; /&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Android" scheme="https://guiyongdong.github.io/categories/Android/"/>
    
    
      <category term="android" scheme="https://guiyongdong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之WebView</title>
    <link href="https://guiyongdong.github.io/2017/05/12/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BWebView/"/>
    <id>https://guiyongdong.github.io/2017/05/12/一天一Android之WebView/</id>
    <published>2017-05-12T01:55:54.000Z</published>
    <updated>2017-05-12T03:47:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>无论是<code>iOS</code>还是<code>Android</code>，通常都会用到混合模式开发，这就要使用到<code>WebView</code>了，通过<code>js</code>和原生交互，可以实现很多功能。今天就来研究一下<code>WebView</code>。</p>
<a id="more"></a>
<h3 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h3><p>加载一个网页：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">webView.loadUrl(<span class="string">"https://www.baidu.com/"</span>);</div></pre></td></tr></table></figure>
<p>加载一个静态html</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">webView.loadUrl(<span class="string">"file:///android_asset/test.html"</span>);</div></pre></td></tr></table></figure>
<h3 id="WebSettings"><a href="#WebSettings" class="headerlink" title="WebSettings"></a>WebSettings</h3><p>主要是针对<code>WebView</code>做一些设置，比如是否启用<code>js</code>等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">WebSettings webSettings = mWebView .getSettings();</div><div class="line"></div><div class="line"><span class="comment">//支持获取手势焦点，输入用户名、密码或其他</span></div><div class="line">webview.requestFocusFromTouch();</div><div class="line"></div><div class="line">setJavaScriptEnabled(<span class="keyword">true</span>);  <span class="comment">//支持js</span></div><div class="line">setPluginsEnabled(<span class="keyword">true</span>);  <span class="comment">//支持插件</span></div><div class="line"></div><div class="line">webSettings.setRenderPriority(RenderPriority.HIGH);  <span class="comment">//提高渲染的优先级</span></div><div class="line"></div><div class="line"><span class="comment">//设置自适应屏幕，两者合用</span></div><div class="line">setUseWideViewPort(<span class="keyword">true</span>);  <span class="comment">//将图片调整到适合webview的大小</span></div><div class="line">setLoadWithOverviewMode(<span class="keyword">true</span>); <span class="comment">// 缩放至屏幕的大小</span></div><div class="line"></div><div class="line">setSupportZoom(<span class="keyword">true</span>);  <span class="comment">//支持缩放，默认为true。是下面那个的前提。</span></div><div class="line">setBuiltInZoomControls(<span class="keyword">true</span>); <span class="comment">//设置内置的缩放控件。</span></div><div class="line"><span class="comment">//若上面是false，则该WebView不可缩放，这个不管设置什么都不能缩放。</span></div><div class="line">setTextZoom(<span class="number">2</span>);<span class="comment">//设置文本的缩放倍数，默认为 100</span></div><div class="line"></div><div class="line">setDisplayZoomControls(<span class="keyword">false</span>); <span class="comment">//隐藏原生的缩放控件</span></div><div class="line"></div><div class="line">setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN); <span class="comment">//支持内容重新布局</span></div><div class="line">supportMultipleWindows();  <span class="comment">//多窗口</span></div><div class="line">setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);  <span class="comment">//关闭webview中缓存</span></div><div class="line">setAllowFileAccess(<span class="keyword">true</span>);  <span class="comment">//设置可以访问文件</span></div><div class="line">setNeedInitialFocus(<span class="keyword">true</span>); <span class="comment">//当webview调用requestFocus时为webview设置节点</span></div><div class="line">setJavaScriptCanOpenWindowsAutomatically(<span class="keyword">true</span>); <span class="comment">//支持通过JS打开新窗口</span></div><div class="line">setLoadsImagesAutomatically(<span class="keyword">true</span>);  <span class="comment">//支持自动加载图片</span></div><div class="line">setDefaultTextEncodingName(<span class="string">"utf-8"</span>);<span class="comment">//设置编码格式</span></div><div class="line"></div><div class="line">setStandardFontFamily(<span class="string">""</span>);<span class="comment">//设置 WebView 的字体，默认字体为 "sans-serif"</span></div><div class="line">setDefaultFontSize(<span class="number">20</span>);<span class="comment">//设置 WebView 字体的大小，默认大小为 16</span></div><div class="line">setMinimumFontSize(<span class="number">12</span>);<span class="comment">//设置 WebView 支持的最小字体大小，默认为 8</span></div></pre></td></tr></table></figure>
<h3 id="WebViewClient"><a href="#WebViewClient" class="headerlink" title="WebViewClient"></a>WebViewClient</h3><p><code>WebViewClient</code>就是帮助<code>WebView</code>处理各种通知、请求事件的。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient()&#123;</div><div class="line">    <span class="comment">//此方法表示是否覆盖重定向，即是否允许打开重定向，</span></div><div class="line">    <span class="comment">//返回true表示不打开重定向，一般情况下，为了适配Android老版本，</span></div><div class="line">    <span class="comment">//我们这里统一返回true，调用我们自己的webView来打开重定向。</span></div><div class="line">    <span class="comment">//切记，不是所有请求都会走这个方法，只有重定向才会走</span></div><div class="line">    <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.LOLLIPOP)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, WebResourceRequest request)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"aaa"</span>, <span class="string">"shouldOverrideUrlLoading1: "</span>+request.getUrl().toString());</div><div class="line">        view.loadUrl(request.getUrl().toString());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//此方法同上</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"aaa"</span>, <span class="string">"shouldOverrideUrlLoading2: "</span>+url);</div><div class="line">        view.loadUrl(url);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//这个事件就是开始载入页面调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"aaa"</span>, <span class="string">"onPageStarted: "</span>+url);</div><div class="line">        <span class="keyword">super</span>.onPageStarted(view, url, favicon);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//在页面加载结束时调用。同样道理，我们可以关闭loading 条，切换程序动作。</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"aaa"</span>, <span class="string">"onPageFinished: "</span>+url);</div><div class="line">        <span class="keyword">super</span>.onPageFinished(view, url);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//加载错误信息</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedError</span><span class="params">(WebView view, WebResourceRequest request, WebResourceError error)</span> </span>&#123;</div><div class="line">        Toast.makeText(MyWebViewActivity.<span class="keyword">this</span>,error.toString(),Toast.LENGTH_SHORT).show();</div><div class="line">        Log.d(<span class="string">"aaa"</span>, <span class="string">"onReceivedError: "</span>+error.toString());</div><div class="line">        <span class="keyword">super</span>.onReceivedError(view, request, error);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadResource</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">       Log.d(<span class="string">"aaa"</span>, <span class="string">"onLoadResource: "</span>+url);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//此方法表示是否禁用网页中的按键事件，比如键盘输入等</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideKeyEvent</span><span class="params">(WebView view, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.shouldOverrideKeyEvent(view,event);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//拦截替换网络请求数据 我们可以在这里返回我们自己的数据</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> WebResourceResponse <span class="title">shouldInterceptRequest</span><span class="params">(WebView view, WebResourceRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.shouldInterceptRequest(view, request);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//同上</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> WebResourceResponse <span class="title">shouldInterceptRequest</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.shouldInterceptRequest(view, url);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//更新历史记录</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doUpdateVisitedHistory</span><span class="params">(WebView view, String url, <span class="keyword">boolean</span> isReload)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.doUpdateVisitedHistory(view, url, isReload);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//(应用程序重新请求网页数据)</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFormResubmission</span><span class="params">(WebView view, Message dontResend, Message resend)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onFormResubmission(view, dontResend, resend);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//（获取返回信息授权请求）</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedHttpAuthRequest</span><span class="params">(WebView view, HttpAuthHandler handler, String host, String realm)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onReceivedHttpAuthRequest(view, handler, host, realm);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重写此方法可以让webview处理https请求。</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedSslError</span><span class="params">(WebView view, SslErrorHandler handler, SslError error)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onReceivedSslError(view, handler, error);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// (WebView发生改变时调用)</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScaleChanged</span><span class="params">(WebView view, <span class="keyword">float</span> oldScale, <span class="keyword">float</span> newScale)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onScaleChanged(view, oldScale, newScale);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//（Key事件未被加载时调用）</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUnhandledKeyEvent</span><span class="params">(WebView view, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onUnhandledKeyEvent(view, event);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="WebChromeClient"><a href="#WebChromeClient" class="headerlink" title="WebChromeClient"></a>WebChromeClient</h3><p><code>WebChromeClient</code>是辅助<code>WebView</code>处理<code>js</code>的各种事件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">mWebView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient()&#123;</div><div class="line"></div><div class="line">    <span class="comment">//当js调用alert()方法后，会调用此方法 返回true表示弹出</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsAlert</span><span class="params">(WebView view, String url, String message, JsResult result)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onJsAlert(view, url, message, result);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//处理prompt弹出框 </span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsPrompt</span><span class="params">(WebView view, String url, String message, String defaultValue, JsPromptResult result)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onJsPrompt(view, url, message, defaultValue, result);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//处理confirm弹出框 </span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsConfirm</span><span class="params">(WebView view, String url, String message, JsResult result)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onJsConfirm(view, url, message, result);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获得网页的加载进度 0-100 这里可以更新进度条</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onProgressChanged(view, newProgress);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获取网页中的title</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedTitle</span><span class="params">(WebView view, String title)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"aaa"</span>, <span class="string">"onReceivedTitle: "</span>+title);</div><div class="line">        <span class="keyword">super</span>.onReceivedTitle(view, title);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获取网页的icon</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedIcon</span><span class="params">(WebView view, Bitmap icon)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onReceivedIcon(view, icon);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="WebView的方法"><a href="#WebView的方法" class="headerlink" title="WebView的方法"></a>WebView的方法</h3><p>前进、后退:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">goBack()<span class="comment">//后退</span></div><div class="line">goForward()<span class="comment">//前进</span></div><div class="line">goBackOrForward(intsteps) <span class="comment">//以当前的index为起始点前进或者后退到历史记录中指定的steps，如果steps为负数则为后退，正数则为前进</span></div><div class="line">canGoForward()<span class="comment">//是否可以前进</span></div><div class="line">canGoBack() <span class="comment">//是否可以后退</span></div></pre></td></tr></table></figure>
<p>通常情况下，我们可以拦截系统的回退按钮，判断网页是否回退完，否者退出<code>Activity</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mWebView.canGoBack()) &#123;</div><div class="line">        mWebView.goBack();</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>WebView的状态：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">onResume() <span class="comment">//激活WebView为活跃状态，能正常执行网页的响应</span></div><div class="line">onPause()<span class="comment">//当页面被失去焦点被切换到后台不可见状态，需要执行onPause动过， onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。</span></div><div class="line"></div><div class="line">pauseTimers()<span class="comment">//当应用程序被切换到后台我们使用了webview， 这个方法不仅仅针对当前的webview而是全局的全应用程序的webview，它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。</span></div><div class="line">resumeTimers()<span class="comment">//恢复pauseTimers时的动作。</span></div><div class="line"></div><div class="line">destroy()<span class="comment">//销毁，关闭了Activity时，音乐或视频，还在播放。就必须销毁。</span></div></pre></td></tr></table></figure>
<p>注意：<code>webview</code>调用<code>destory</code>时，<code>webview</code>仍绑定在<code>Activity</code>上。这是由于自定义<code>webview</code>构建时传入了该<code>Activity</code>的<code>context</code>对象，因此需要先从父容器中移除<code>webview</code>,然后再销毁<code>webview</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">rootLayout.removeView(webView);</div><div class="line">webView.destroy();</div></pre></td></tr></table></figure>
<p>判断<code>WebView</code>是否已经滚动到页面底端或者顶端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">getScrollY() <span class="comment">//方法返回的是当前可见区域的顶端距整个页面顶端的距离,也就是当前内容滚动的距离.</span></div><div class="line">getHeight()或者getBottom() <span class="comment">//方法都返回当前WebView这个容器的高度</span></div><div class="line">getContentHeight() <span class="comment">//返回的是整个html的高度,但并不等同于当前整个页面的高度,因为WebView有缩放功能,所以当前整个页面的高度实际上应该是原始html的高度再乘上缩放比例</span></div></pre></td></tr></table></figure>
<p> 获取当前<code>WebView</code>的真实的高度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (webView.getContentHeight() * webView.getScale() == (webView.getHeight() + webView.getScrollY())) &#123;</div><div class="line">    <span class="comment">//已经处于底端</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(webView.getScrollY() == <span class="number">0</span>)&#123;</div><div class="line">    <span class="comment">//处于顶端</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="与js交互"><a href="#与js交互" class="headerlink" title="与js交互"></a>与js交互</h3><p>首先，必须打开与<code>js</code>交互的开关：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<p>原生调用<code>js</code>的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.KITKAT)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jsButtonClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">    mWebView.evaluateJavascript(<span class="string">"javascript:alert('s')"</span>, <span class="keyword">new</span> ValueCallback&lt;String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceiveValue</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">            Log.d(<span class="string">"aaa"</span>, <span class="string">"onReceiveValue: "</span>+value+<span class="string">"---thread:"</span>+Thread.currentThread());</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>js</code>调用原生方法，例如我们的<code>html</code>如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params"></span>)</span>&#123;</div><div class="line">         obj.play(<span class="string">'abc'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"black"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">onClick</span>=<span class="string">"play()"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"ic_launcher.png"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当点击图片的时候，会调用原生的<code>play</code>方法，并传递一个参数。</p>
<p>首先，创建一个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSObject</span> </span>&#123;</div><div class="line">    <span class="meta">@JavascriptInterface</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"aaa"</span>, <span class="string">"play: "</span>+name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>记住，方法名一定要和<code>js</code>中的方法名一致，而且参数也一定要一致。并且需要在方法前加<code>@JavascriptInterface</code>注解，这样<code>js</code>才能调用到我们的原生方法。然后这样设定：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">mWebView.addJavascriptInterface(<span class="keyword">new</span> JSObject(),<span class="string">"obj"</span>);</div></pre></td></tr></table></figure>
<p>这个<code>obj</code>就是我们在<code>js</code>中定义的对象。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关于<code>WebView</code>的基本使用就这么多了，基本上能满足我们的日常开发。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无论是&lt;code&gt;iOS&lt;/code&gt;还是&lt;code&gt;Android&lt;/code&gt;，通常都会用到混合模式开发，这就要使用到&lt;code&gt;WebView&lt;/code&gt;了，通过&lt;code&gt;js&lt;/code&gt;和原生交互，可以实现很多功能。今天就来研究一下&lt;code&gt;WebView&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://guiyongdong.github.io/categories/Android/"/>
    
    
      <category term="android" scheme="https://guiyongdong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之ViewPager</title>
    <link href="https://guiyongdong.github.io/2017/05/10/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BViewPager/"/>
    <id>https://guiyongdong.github.io/2017/05/10/一天一Android之ViewPager/</id>
    <published>2017-05-10T03:19:04.000Z</published>
    <updated>2017-05-11T07:26:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>ViewPager</code>在开发中使用的频率非常的高，例如<code>Banner</code>轮播图，首次启动显示的介绍图等，这篇博客就详细介绍一下<code>ViewPager</code>的使用。</p>
<a id="more"></a>
<h3 id="PagerAdapter"><a href="#PagerAdapter" class="headerlink" title="PagerAdapter"></a>PagerAdapter</h3><p><code>ViewPager</code>和<code>ListView</code>一样，也需要一个<code>Adapter</code>，即<code>PagerAdapter</code>，我们先来看看都有哪些方法可以实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BannerPageAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span> </span>&#123;</div><div class="line">      <span class="comment">//获取View的总数</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//当ViewPager的内容有所变化时,进行调用。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startUpdate</span><span class="params">(ViewGroup container)</span> </span>&#123;</div><div class="line">          <span class="keyword">super</span>.startUpdate(container);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//为给定的位置创建相应的View。创建View之后,需要在该方法中自行添加到container中。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">super</span>.instantiateItem(container, position);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//为给定的位置移除相应的View。通常情况下在view不显示的时候调用</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">          <span class="keyword">super</span>.destroyItem(container, position, object);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//ViewPager调用该方法来通知PageAdapter当前ViewPager显示的主要项,提供给用户对主要项进行操作的方法。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrimaryItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">          <span class="keyword">super</span>.setPrimaryItem(container, position, object);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//当ViewPager的内容变化结束时,进行调用。当该方法被调用时,必须确定所有的操作已经结束。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishUpdate</span><span class="params">(ViewGroup container)</span> </span>&#123;</div><div class="line">          <span class="keyword">super</span>.finishUpdate(container);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//确认View与实例对象是否相互对应。ViewPager内部用于获取View对应的ItemInfo。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//保存与PagerAdapter关联的任何实例状态。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> Parcelable <span class="title">saveState</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">super</span>.saveState();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//恢复与PagerAdapter关联的任何实例状态。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreState</span><span class="params">(Parcelable state, ClassLoader loader)</span> </span>&#123;</div><div class="line">          <span class="keyword">super</span>.restoreState(state, loader);</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="comment">//当ViewPager试图确定某个项的位置是否已更改时调用。默认有两个可选项:POSITION_UNCHANGED和POSITION_NONE。</span></div><div class="line">      <span class="comment">//POSITION_UNCHANGED:给定项的位置未变更</span></div><div class="line">      <span class="comment">//POSITION_NONE:给定项不再用于PagerAdapter中</span></div><div class="line">      <span class="comment">//其他值:可以根据具体的情况进行调整</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemPosition</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">super</span>.getItemPosition(object);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//新增方法,目前较多用于Design库中的TabLayout与ViewPager进行绑定时,提供显示的标题。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">super</span>.getPageTitle(position);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//获取给定位置的View的显示宽度比例,该比例是相对于ViewPager。</span></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPageWidth</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">super</span>.getPageWidth(position);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>其实大部分方法我们都不需要实现。</p>
<h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3><p>接下来，就基于<code>ViewPager</code>撸一个无限滚动轮播图。先看运行效果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android27.gif?raw=true" width="375"><br></div>

<p>先说一下我们的大概思路，这里一共创建了三个类，继承于<code>RelativeLayout</code>的<code>BannerView</code>，继承于<code>PagerAdapter</code>的<code>BannerPageAdapter</code>和一个继承于<code>Runnable</code>的工具类<code>WeakRunnable</code>，只所以要创建一个<code>WeakRunnable</code>类，是因为防止内存泄露。因为轮播图会无限循环，这里会使用<code>Handler</code>无限执行。然后拦截<code>BannerView</code>触摸事件，来停止或者开启循环。</p>
<h4 id="WeakRunnable"><a href="#WeakRunnable" class="headerlink" title="WeakRunnable"></a>WeakRunnable</h4><p>先来看看<code>WeakRunnable</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeakRunnableEventListener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">weakRunnableEventCallBack</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> WeakReference&lt;WeakRunnableEventListener&gt; mListener;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeakRunnable</span><span class="params">(WeakRunnableEventListener listener)</span> </span>&#123;</div><div class="line">        mListener = <span class="keyword">new</span> WeakReference&lt;WeakRunnableEventListener&gt;(listener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        WeakRunnableEventListener listener = mListener.get();</div><div class="line">        <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">            listener.weakRunnableEventCallBack();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的代码很简单，定义了一个接口<code>WeakRunnableEventListener</code>，并且声明一个弱引用，来持有实现了<code>WeakRunnableEventListener</code>接口的类，并且在<code>run</code>方法中判断这个类是否还存在，如果存在，就回调<code>weakRunnableEventCallBack</code>方法五执行具体的任务代码。</p>
<h4 id="BannerPageAdapter"><a href="#BannerPageAdapter" class="headerlink" title="BannerPageAdapter"></a>BannerPageAdapter</h4><p>因为<code>ViewPager</code>需要一个<code>PagerAdapter</code>来决定如何显示，所以，我们这里创建类<code>BannerPageAdapter</code>继承于<code>PagerAdapter</code>，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BannerPageAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; mDataSource;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    <span class="comment">//缓存ImageView</span></div><div class="line">    <span class="keyword">private</span> List&lt;ImageView&gt; mCacheImageViews;</div><div class="line">    <span class="comment">//真实的数据个数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRealSize;</div><div class="line">    <span class="comment">//点击事件回调监听者</span></div><div class="line">    <span class="keyword">private</span> BannerView.BannerItemClickListener mListener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(BannerView.BannerItemClickListener listener)</span> </span>&#123;</div><div class="line">        mListener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BannerPageAdapter</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mContext = context;</div><div class="line">        mCacheImageViews = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重载数据源更新方法，并调用父类的方法来刷新数据源</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyDataSetChanged</span><span class="params">(List&lt;String&gt; dataSource)</span> </span>&#123;</div><div class="line">        mDataSource = dataSource;</div><div class="line">        mRealSize = mDataSource.size();</div><div class="line">        <span class="keyword">super</span>.notifyDataSetChanged();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mDataSource == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (mRealSize == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> view == object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        position = position%mRealSize;</div><div class="line">        ImageView imageView;</div><div class="line">        <span class="comment">//首先去缓存中取ImageView，如果取不到再创建</span></div><div class="line">        <span class="keyword">if</span> (mCacheImageViews.size() == <span class="number">0</span>) &#123;</div><div class="line">            imageView = <span class="keyword">new</span> ImageView(mContext);</div><div class="line">            imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);</div><div class="line">            imageView.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            imageView = mCacheImageViews.get(mCacheImageViews.size()-<span class="number">1</span>);</div><div class="line">            mCacheImageViews.remove(imageView);</div><div class="line">        &#125;</div><div class="line">        imageView.setId(position);</div><div class="line">        String url = mDataSource.get(position);</div><div class="line">        Glide.with(mContext).load(url).into(imageView);</div><div class="line">        ViewGroup.LayoutParams layoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</div><div class="line">        container.addView(imageView,layoutParams);</div><div class="line">        <span class="keyword">return</span> imageView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mCacheImageViews.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            mCacheImageViews.clear();</div><div class="line">        &#125;</div><div class="line">        container.removeView((View) object);</div><div class="line">        mCacheImageViews.add((ImageView) object);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> position = v.getId();</div><div class="line">        <span class="keyword">if</span> (mListener != <span class="keyword">null</span>) &#123;</div><div class="line">            mListener.onItemClick(position);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码也很简单，</p>
<p>在构造方法中，我们初始化了一个用于缓存<code>ImageView</code>的集合。</p>
<p>重写了父类的<code>notifyDataSetChanged</code>，这里我们追加一个数据源集合，并调用父类的方法，来刷新数据。</p>
<p>在<code>getCount</code>方法中，如果数据源为空，或者数据源的数量为空，返回0，否则返回最大数，因为我们要做无限轮播。</p>
<p>在<code>instantiateItem</code>方法中，首先算出真正的位置，直接<code>position%mRealSize</code>就可以得到当前的位置，然后去缓存集合中取<code>ImageView</code>，如果<code>mCacheImageViews</code>中没有缓存的<code>ImageView</code>，那么直接创建<code>ImageView</code>，并设置点击事件的监听者为自己。如果缓存中有，直接取出来使用，这里使用<code>Glide</code>来加载网络图片，记住，使用<code>Glide</code>就不能使用<code>setTag</code>，这里使用<code>setId</code>。最后一点，一定要将<code>ImageView</code>添加到<code>container</code>中。</p>
<p>在<code>destroyItem</code>方法中，我们将销毁的<code>Imageview</code>添加到缓存中，以备下次使用。</p>
<p>最后，在点击事件中，回调监听者。</p>
<h4 id="BannerView"><a href="#BannerView" class="headerlink" title="BannerView"></a>BannerView</h4><p>再来看我们的<code>BannerView</code>，继承于<code>RelativeLayout</code>，内部持有一个<code>ViewPager</code>，一个<code>BannerPageAdapter</code>，一个<code>WeakRunnable</code>，代码也很简单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BannerView</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> <span class="keyword">implements</span> <span class="title">WeakRunnable</span>.<span class="title">WeakRunnableEventListener</span>, <span class="title">ViewPager</span>.<span class="title">OnPageChangeListener</span> </span>&#123;</div><div class="line">    <span class="comment">//每次循环时间</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> SSUBTIME = <span class="number">3000</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 点击监听</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BannerItemClickListener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> ViewPager mViewPager;</div><div class="line">    <span class="keyword">private</span> BannerPageAdapter mAdapter;</div><div class="line">    <span class="keyword">private</span> LinearLayout mIndicatorLayout;</div><div class="line">    <span class="keyword">private</span> Handler mHandler;</div><div class="line">    <span class="keyword">private</span> WeakRunnable mRunnable;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;ImageView&gt; mIndicators;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastIndex;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRealSize;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BannerView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        initView(context);</div><div class="line">        initEvent();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化视图</div><div class="line">     * <span class="doctag">@param</span> context 上下文</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mViewPager = <span class="keyword">new</span> ViewPager(context);</div><div class="line">        RelativeLayout.LayoutParams params = <span class="keyword">new</span> LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</div><div class="line">        addView(mViewPager,params);</div><div class="line">        mAdapter = <span class="keyword">new</span> BannerPageAdapter(context);</div><div class="line">        mViewPager.setAdapter(mAdapter);</div><div class="line">        mViewPager.addOnPageChangeListener(<span class="keyword">this</span>);</div><div class="line">        mIndicatorLayout = <span class="keyword">new</span> LinearLayout(context);</div><div class="line">        RelativeLayout.LayoutParams indicatorParams = <span class="keyword">new</span> LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);</div><div class="line">        indicatorParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);</div><div class="line">        indicatorParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);</div><div class="line">        indicatorParams.setMargins(<span class="number">0</span>,<span class="number">0</span>,<span class="number">20</span>,<span class="number">20</span>);</div><div class="line">        addView(mIndicatorLayout,indicatorParams);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化事件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">        mHandler = <span class="keyword">new</span> Handler();</div><div class="line">        mRunnable = <span class="keyword">new</span> WeakRunnable(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 动态添加指示器</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addIndicator</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mIndicators == <span class="keyword">null</span>) &#123;</div><div class="line">            mIndicators = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            mIndicators.clear();</div><div class="line">        &#125;</div><div class="line">        mIndicatorLayout.removeAllViews();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">            ImageView indicatorView = <span class="keyword">new</span> ImageView(getContext());</div><div class="line">            LinearLayout.LayoutParams params = <span class="keyword">new</span> LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);</div><div class="line">            params.setMargins(<span class="number">0</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">0</span>);</div><div class="line">            params.gravity = Gravity.CENTER_VERTICAL;</div><div class="line">            mIndicatorLayout.addView(indicatorView,params);</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                indicatorView.setBackgroundResource(R.drawable.indicator_selected);</div><div class="line">                mLastIndex = <span class="number">0</span>;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                indicatorView.setBackgroundResource(R.drawable.indicator_normal);</div><div class="line">            &#125;</div><div class="line">            mIndicators.add(indicatorView);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 修改选中的指示器</div><div class="line">     * <span class="doctag">@param</span> index 选中</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changeIndicator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mLastIndex == index) <span class="keyword">return</span>;</div><div class="line">        ImageView lastImageView = mIndicators.get(mLastIndex);</div><div class="line">        lastImageView.setBackgroundResource(R.drawable.indicator_normal);</div><div class="line">        ImageView nowImageView = mIndicators.get(index);</div><div class="line">        nowImageView.setBackgroundResource(R.drawable.indicator_selected);</div><div class="line">        mLastIndex = index;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 定时回调</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">weakRunnableEventCallBack</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> currentIndex = mViewPager.getCurrentItem()+<span class="number">1</span>;</div><div class="line">        mViewPager.setCurrentItem(currentIndex);</div><div class="line">        mHandler.postDelayed(mRunnable,SSUBTIME);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 数据源改变</div><div class="line">     * <span class="doctag">@param</span> dataSource 数据源</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyDataSetChanged</span><span class="params">(List&lt;String&gt; dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (dataSource == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (dataSource.size() == <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">        mRealSize = dataSource.size();</div><div class="line">        mAdapter.notifyDataSetChanged(dataSource);</div><div class="line">        mViewPager.setCurrentItem(Integer.MAX_VALUE/<span class="number">2</span> - Integer.MAX_VALUE/<span class="number">2</span>%dataSource.size());</div><div class="line">        addIndicator(dataSource.size());</div><div class="line">        mHandler.postDelayed(mRunnable,SSUBTIME);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置点击事件监听者</div><div class="line">     * <span class="doctag">@param</span> listener 监听者</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(BannerItemClickListener listener)</span> </span>&#123;</div><div class="line">        mAdapter.setListener(listener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> index = position % mRealSize;</div><div class="line">        changeIndicator(index);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (MotionEventCompat.getActionMasked(ev) == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">            mHandler.removeCallbacks(mRunnable);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (MotionEventCompat.getActionMasked(ev) == MotionEvent.ACTION_UP || MotionEventCompat.getActionMasked(ev) == MotionEvent.ACTION_CANCEL) &#123;</div><div class="line">            mHandler.postDelayed(mRunnable,SSUBTIME);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，在构造方法中，初始化<code>ViewPager</code>，设置<code>Adapter</code>，初始化事件等。</p>
<p>在重新设置数据源以后，通知<code>Adapter</code>更新数据，并设置<code>ViewPager</code>的当前项。最主要的是<code>onPageSelected</code>方法和<code>dispatchTouchEvent</code>方法，在<code>onPageSelected</code>方法中，我们需要修改当前指示器。在<code>dispatchTouchEvent</code>方法中，我们需要监听触摸手势，如果当前手势为按压，我们要停掉滚动，如果离开，我们再次开启。</p>
<p>在<code>Activity</code>中这样使用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.wangyidemo.MainActivity"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.guiyongdong.wangyidemo.banner.BannerView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"150dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/bannerView"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">com.guiyongdong.wangyidemo.banner.BannerView</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    BannerView mBannerView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        mBannerView = (BannerView) findViewById(R.id.bannerView);</div><div class="line"></div><div class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        arrayList.add(<span class="string">"https://f11.baidu.com/it/u=62466529,3197984907&amp;fm=72"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://f11.baidu.com/it/u=1702154046,3138678857&amp;fm=72"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2506029705,946578911&amp;fm=23&amp;gp=0.jpg"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=331414147,1213722392&amp;fm=23&amp;gp=0.jpg"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2863772336,3300899200&amp;fm=23&amp;gp=0.jpg"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://f11.baidu.com/it/u=62466529,3197984907&amp;fm=72"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://f11.baidu.com/it/u=1702154046,3138678857&amp;fm=72"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2506029705,946578911&amp;fm=23&amp;gp=0.jpg"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=331414147,1213722392&amp;fm=23&amp;gp=0.jpg"</span>);</div><div class="line">        arrayList.add(<span class="string">"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2863772336,3300899200&amp;fm=23&amp;gp=0.jpg"</span>);</div><div class="line"></div><div class="line">        mBannerView.notifyDataSetChanged(arrayList);</div><div class="line">        mBannerView.setOnItemClickListener(<span class="keyword">new</span> BannerView.BannerItemClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">""</span>+index,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，一个无限滚动轮播图就好了。</p>
<h3 id="FragmentPageAdapter"><a href="#FragmentPageAdapter" class="headerlink" title="FragmentPageAdapter"></a>FragmentPageAdapter</h3><p>通常情况下，除了<code>PagerAdapter</code>，我们还可以使用它的两个子类：<code>FragmentStatePagerAdapter</code>和<code>FragmentPagerAdapter</code>，从名字我们就可以看出，这两个适配器主要是针对<code>Fragment</code>的。我们先来看看<code>FragmentPagerAdapter</code>是如何使用的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main2Activity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    MyAdapter mAdapter;</div><div class="line">    ViewPager mPager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main2);</div><div class="line"></div><div class="line">        mAdapter = <span class="keyword">new</span> MyAdapter(getSupportFragmentManager());</div><div class="line">        mPager = (ViewPager) findViewById(R.id.pager);</div><div class="line">        mPager.setAdapter(mAdapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(FragmentManager fm)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(fm);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyFragment();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">            View view = inflater.inflate(R.layout.fragment_pager_list,container,<span class="keyword">false</span>);</div><div class="line">            <span class="keyword">return</span> view;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不难看出，<code>FragmentPagerAdapter</code>只需要我们实现三个方法，一个构造方法，一个<code>getCount()</code>返回几项，<code>getItem(int position)</code>返回具体的<code>Fragment</code>。也用法也是很简单的。</p>
<p><code>FragmentStatePagerAdapter</code>和<code>FragmentPagerAdapter</code>用法一样，只是他们内部缓存的策略不是很一样<code>FragmentStatePagerAdapter</code>会在<code>destroyItem</code>中将已经消失的<code>Fragment</code>移除出去，所以他会一直调用<code>getItem</code>来创建，而<code>FragmentPagerAdapter</code>则不会，所以，如果我们的页数比较多的时候，建议使用<code>FragmentStatePagerAdapter</code>，并做适当的缓存策略，防止一直创建<code>Fragment</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;ViewPager&lt;/code&gt;在开发中使用的频率非常的高，例如&lt;code&gt;Banner&lt;/code&gt;轮播图，首次启动显示的介绍图等，这篇博客就详细介绍一下&lt;code&gt;ViewPager&lt;/code&gt;的使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://guiyongdong.github.io/categories/Android/"/>
    
    
      <category term="android" scheme="https://guiyongdong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之Glide详解</title>
    <link href="https://guiyongdong.github.io/2017/05/09/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BGlide%E8%AF%A6%E8%A7%A3/"/>
    <id>https://guiyongdong.github.io/2017/05/09/一天一Android之Glide详解/</id>
    <published>2017-05-09T09:12:03.000Z</published>
    <updated>2017-05-10T03:14:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>图片可以丰富<code>App</code>的显示效果，但是图片也是最难处理的，因为通常情况下，图片是最耗内存的。</p>
<p><code>iOS</code>的同学都知道<code>SDWebImage</code>，它极大的简化了我们对图片的操作。而<code>Android</code>端的图片加载框架则有很多，<code>Volley</code>、<code>Picasso</code>和<code>Glide</code>，今天我们主要说的就是<code>Glide</code>。</p>
<a id="more"></a>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>首先使用<code>gradle</code>导入<code>Glide</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &apos;com.github.bumptech.glide:glide:3.7.0&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在导入之前，最好先去<code>Github</code>上查看一下最新版本。当然，需要加入网络权限。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ImageView mImageView;</div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">        mImageView = (ImageView) findViewById(R.id.image_view);</div><div class="line">        mButton = (Button) findViewById(R.id.loadImage);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        String url = <span class="string">"https://f10.baidu.com/it/u=1863145503,1330064667&amp;fm=72"</span>;</div><div class="line">        Glide.with(<span class="keyword">this</span>)</div><div class="line">                .load(url)</div><div class="line">                .into(mImageView);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="with"><a href="#with" class="headerlink" title="with()"></a>with()</h5><p>先来看看<code>with</code>方法，<code>with</code>方法可以接收<code>Context</code>、<code>Activity</code>、<code>FragmentActivity</code>、<code>Fragment</code>，这四种类型的参数。此方法传入的实例决定<code>Glide</code>加载图片的生命周期，如果传入的是<code>Activity</code>的实例，当<code>Activity</code>被销毁的时候，图片加载也会停止。此方法返回一个<code>RequestManager</code>对象。</p>
<h5 id="load"><a href="#load" class="headerlink" title="load()"></a>load()</h5><p><code>load</code>方法用于指定加载的图片资源，可以是网络图片，本地图片，应用资源，二进制流，Uri对象等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 加载本地图片</span></div><div class="line">File file = <span class="keyword">new</span> File(getExternalCacheDir() + <span class="string">"/image.jpg"</span>);</div><div class="line">Glide.with(<span class="keyword">this</span>).load(file).into(mImageView);</div><div class="line"></div><div class="line"><span class="comment">// 加载应用资源</span></div><div class="line"><span class="keyword">int</span> resource = R.drawable.image;</div><div class="line">Glide.with(<span class="keyword">this</span>).load(resource).into(mImageView);</div><div class="line"></div><div class="line"><span class="comment">// 加载二进制流</span></div><div class="line"><span class="keyword">byte</span>[] image = getImageBytes();</div><div class="line">Glide.with(<span class="keyword">this</span>).load(image).into(mImageView);</div><div class="line"></div><div class="line"><span class="comment">// 加载Uri对象</span></div><div class="line">Uri imageUri = getImageUri();</div><div class="line">Glide.with(<span class="keyword">this</span>).load(imageUri).into(mImageView);</div></pre></td></tr></table></figure>
<h5 id="into"><a href="#into" class="headerlink" title="into()"></a>into()</h5><p><code>into</code>表示将下载好的图片显示在哪个<code>ImageView</code>上。当然，有时候我们需要在图片下载完成以后做一些事情，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Glide.with(this)</div><div class="line">     .load(imageUri)</div><div class="line">     .into(new SimpleTarget&lt;Bitmap&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void onResourceReady(Bitmap resource, GlideAnimation&lt;? super Bitmap&gt; glideAnimation) &#123;</div><div class="line">				     //处理图片</div><div class="line">            &#125;</div><div class="line">     &#125;);;</div></pre></td></tr></table></figure>
<p>上面三个方法组成了一个完整的加载过程，在这个加载过程中，我们还可以添加其他的配置。下面的方法都是添加在<code>load</code>和<code>into</code>之间。</p>
<h5 id="asBitmap"><a href="#asBitmap" class="headerlink" title="asBitmap()"></a>asBitmap()</h5><p>设置图片的格式为静态图片，如果要加载的图片格式是<code>gif</code>，那么会显示第一帧的静态图片。</p>
<h5 id="asGif"><a href="#asGif" class="headerlink" title="asGif()"></a>asGif()</h5><p>设置图片的格式为动态图片，如果要加载的图片格式是静态图片，那么会直接回显示错误图片。</p>
<h5 id="placeholder"><a href="#placeholder" class="headerlink" title="placeholder()"></a>placeholder()</h5><p>此方法用于设置一个占位图 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">String url = &quot;https://f10.baidu.com/it/u=1863145503,1330064667&amp;fm=72&quot;;</div><div class="line">Glide.with(this)</div><div class="line">        .load(url)</div><div class="line">        .placeholder(R.mipmap.ic_launcher)</div><div class="line">        .into(mImageView);</div></pre></td></tr></table></figure>
<h5 id="diskCacheStrategy"><a href="#diskCacheStrategy" class="headerlink" title="diskCacheStrategy()"></a>diskCacheStrategy()</h5><p>此方法主要用作与磁盘缓存，可传参数为:</p>
<ul>
<li><code>DiskCacheStrategy.ALL</code>: 即缓存原图又缓存压缩后的图</li>
<li><code>DiskCacheStrategy.NONE</code>：不缓存</li>
<li><code>DiskCacheStrategy.SOURCE</code>：原图缓存</li>
<li><code>DiskCacheStrategy.RESULT</code>：缓存压缩后的图片，因为<code>Glide</code>通常不会把原图显示到界面上，例如我们的<code>ImageView</code>的大小是50x50，而图片的大小是200x200，如果我们原图显示，会造成不必要的内存浪费。所以<code>Glide</code>会根据图片的实际大小来压缩。</li>
</ul>
<p><strong>注意：</strong>如果显示的图片位<code>gif</code>格式的图片，最好不缓存，因为<code>Glide</code>会一帧一帧的缓存图片。</p>
<h5 id="skipMemoryCache"><a href="#skipMemoryCache" class="headerlink" title="skipMemoryCache()"></a>skipMemoryCache()</h5><p>此方法表示是否跳过内存缓存，设置为<code>true</code>表示不进行内存缓存。</p>
<h5 id="error"><a href="#error" class="headerlink" title="error()"></a>error()</h5><p>设置一个加载失败的图片</p>
<h5 id="animate"><a href="#animate" class="headerlink" title="animate()"></a>animate()</h5><p>设置加载成功后，显示的动画</p>
<h5 id="override"><a href="#override" class="headerlink" title="override()"></a>override()</h5><p>设置图片加载成功后的大小，例如：<code>verride(300,300)</code></p>
<h5 id="priority"><a href="#priority" class="headerlink" title="priority()"></a>priority()</h5><p>设置下载的优先级 </p>
<h5 id="clearDiskCache"><a href="#clearDiskCache" class="headerlink" title="clearDiskCache()"></a>clearDiskCache()</h5><p>清理磁盘缓存，需要在子线程中执行 <code>Glide.get(this).clearDiskCache();</code></p>
<h5 id="clearMemory"><a href="#clearMemory" class="headerlink" title="clearMemory()"></a>clearMemory()</h5><p>清理内存缓存，可以在UI线程执行 <code>Glide.get(this).clearMemory();</code></p>
<hr>
<h3 id="GlideMoudle"><a href="#GlideMoudle" class="headerlink" title="GlideMoudle"></a>GlideMoudle</h3><p><code>GlideMoudle</code>是一个抽象方法，全局改变<code>Glide</code>行为的一个方式，通过全局<code>GlideMoudle</code>配置<code>Glide</code>，用<code>GlideBuilder</code>设置选项，用<code>Glide</code>注册<code>ModelLoader</code>等。</p>
<h5 id="自定义一个GlideMoudle"><a href="#自定义一个GlideMoudle" class="headerlink" title="自定义一个GlideMoudle"></a>自定义一个GlideMoudle</h5><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlideModule</span> <span class="keyword">implements</span> <span class="title">GlideModule</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyOptions</span><span class="params">(Context context, GlideBuilder builder)</span> </span>&#123;</div><div class="line">        <span class="comment">//配置</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerComponents</span><span class="params">(Context context, Glide glide)</span> </span>&#123;</div><div class="line">		<span class="comment">//注册</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="AndroidManifest-xml注册"><a href="#AndroidManifest-xml注册" class="headerlink" title="AndroidManifest.xml注册"></a>AndroidManifest.xml注册</h5><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.wangyidemo"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        ...</div><div class="line">        <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"com.guiyongdong.wangyidemo.MyGlideModule"</span></span></div><div class="line">                   <span class="attr">android:value</span>=<span class="string">"GlideModule"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="添加混淆处理"><a href="#添加混淆处理" class="headerlink" title="添加混淆处理"></a>添加混淆处理</h5><p>因为我们的代码有可能添加混淆，所以不要给<code>MyGlideModule</code>添加混淆</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">-keepnames class com.guiyongdong.wangyidemo.MyGlideModule</div></pre></td></tr></table></figure>
<h5 id="设置Glide内存缓存大小"><a href="#设置Glide内存缓存大小" class="headerlink" title="设置Glide内存缓存大小"></a>设置Glide内存缓存大小</h5><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) Runtime.getRuntime().maxMemory(); <span class="comment">//获取系统分配给应用的总内存大小</span></div><div class="line"><span class="keyword">int</span> memoryCacheSize = maxMemory/<span class="number">8</span>; <span class="comment">//设置图片内存缓存占八分之一</span></div><div class="line">builder.setMemoryCache(<span class="keyword">new</span> LruResourceCache(memoryCacheSize)); <span class="comment">//设置内存缓存大小</span></div></pre></td></tr></table></figure>
<h5 id="设置Glide磁盘缓存大小"><a href="#设置Glide磁盘缓存大小" class="headerlink" title="设置Glide磁盘缓存大小"></a>设置Glide磁盘缓存大小</h5><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">File cacheDir = context.getExternalCacheDir(); <span class="comment">//设置缓存路径</span></div><div class="line"><span class="keyword">int</span> diskCacheSize = <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">30</span>; <span class="comment">//缓存大小</span></div><div class="line">builder.setDiskCache(<span class="keyword">new</span> DiskLruCacheFactory(cacheDir.getParent(),<span class="string">"glide"</span>,diskCacheSize)); <span class="comment">//设置磁盘缓存大小 glide 表示文件名</span></div></pre></td></tr></table></figure>
<p>也可以通过如下两种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">//存放在data/data/xxxx/cache/</span></div><div class="line">builder.setDiskCache(<span class="keyword">new</span> InternalCacheDiskCacheFactory(context, <span class="string">"glide"</span>, diskCacheSize));</div><div class="line"><span class="comment">//存放在外置文件浏览器</span></div><div class="line">builder.setDiskCache(<span class="keyword">new</span> ExternalCacheDiskCacheFactory(context, <span class="string">"glide"</span>, diskCacheSize));</div></pre></td></tr></table></figure>
<h5 id="设置图片的解码格式"><a href="#设置图片的解码格式" class="headerlink" title="设置图片的解码格式"></a>设置图片的解码格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">//设置图片解码格式</span></div><div class="line">builder.setDecodeFormat(DecodeFormat.PREFER_ARGB_8888);</div></pre></td></tr></table></figure>
<h5 id="设置缓存内存大小"><a href="#设置缓存内存大小" class="headerlink" title="设置缓存内存大小"></a>设置缓存内存大小</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//设置BitmapPool缓存内存大小</div><div class="line">builder.setBitmapPool(new LruBitmapPool(memoryCacheSize));</div></pre></td></tr></table></figure>
<p>基本上的关于<code>Glide</code>的用法已经了解的差不多了，接下来，如果有时间，会了解一下<code>Glide</code>的源码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图片可以丰富&lt;code&gt;App&lt;/code&gt;的显示效果，但是图片也是最难处理的，因为通常情况下，图片是最耗内存的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iOS&lt;/code&gt;的同学都知道&lt;code&gt;SDWebImage&lt;/code&gt;，它极大的简化了我们对图片的操作。而&lt;code&gt;Android&lt;/code&gt;端的图片加载框架则有很多，&lt;code&gt;Volley&lt;/code&gt;、&lt;code&gt;Picasso&lt;/code&gt;和&lt;code&gt;Glide&lt;/code&gt;，今天我们主要说的就是&lt;code&gt;Glide&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://guiyongdong.github.io/categories/Android/"/>
    
    
      <category term="android" scheme="https://guiyongdong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之存储目录</title>
    <link href="https://guiyongdong.github.io/2017/05/05/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8B%E5%AD%98%E5%82%A8%E7%9B%AE%E5%BD%95/"/>
    <id>https://guiyongdong.github.io/2017/05/05/一天一Android之存储目录/</id>
    <published>2017-05-05T03:47:05.000Z</published>
    <updated>2017-05-05T07:42:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>iOS</code>系统中，系统会为每个应用分配一个独立的空间，用来存放应用产生的数据，并且每个应用只能访问自己的存储空间。由于<code>Android</code>手机可以插拔内存卡，所以，相对于<code>iOS</code>来说，存储方式更多一点。</p>
<a id="more"></a>
<h3 id="内部存储空间的应用私有目录"><a href="#内部存储空间的应用私有目录" class="headerlink" title="内部存储空间的应用私有目录"></a>内部存储空间的应用私有目录</h3><hr>
<p>在<code>Android</code>系统中，当你安装了某个应用后，系统会为此应用分配一块私有存储空间，如果手机未<code>Root</code>，用户是看不到这个空间下的内容的，但是开发人员通过<code>DDMS</code>可以查看此空间，文件目录为：<code>data/data/应用包名</code>，如图：</p>
<div align="center"><br><img src="http://ocq7gtgqu.bkt.clouddn.com/1493214455.jpg" width="375"><br></div>

<p>这个文件夹用于<code>App</code>中的<code>WebView</code>缓存页面信息，<code>SharedPreferences</code>和<code>SQLiteDatabase</code>持久化应用相关数据等。当然，我们可以通过<code>ContextWrapper</code>提供的方法来获取相应的目录：</p>
<ul>
<li>getFilesDir()  获取名为<code>files</code>的文件夹目录</li>
<li>getCacheDir()  获取名为<code>cache</code>的文件目录</li>
</ul>
<p>当使用数据库，<code>Webview</code>，和<code>SharedPreferences</code>的时候，系统会自动创建<code>databases</code>，<code>app_webview</code>和<code>shared_prefs</code>等文件夹，当然也可以自己创建相关的文件夹。</p>
<blockquote>
<p>注意：当用户卸载APP时，系统会自动删除data/data/目录下对应包名的文件夹及其内容</p>
</blockquote>
<h3 id="外部存储空间中的应用私有目录"><a href="#外部存储空间中的应用私有目录" class="headerlink" title="外部存储空间中的应用私有目录"></a>外部存储空间中的应用私有目录</h3><hr>
<p>考虑到内部存储空间容量有限，<code>Android</code>在外部存储空间中也提供有特殊目录供应用存放私有文件，文件路径为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/storage/emulated/0/Android/data/app package name</div></pre></td></tr></table></figure>
<p>与内部存储空间的应用私有目录不同的是：</p>
<p>第一，默认情况下，系统并不会自动创建外部存储空间的应用私有目录，只有在应用需要的时候，开发人员通过<code>SDK</code>提供的API创建该目录文件夹和操作文件夹内容。</p>
<p>第二，自<code>Android</code>7.0开始，系统对应用私有目录的访问权限进一步限制。其他<code>App</code>无法通过<code>file://</code>这种形式的<code>Uri</code>直接读写该目录下的文件内容，而是通过<code>FileProvider</code>访问。</p>
<p>我们可以通过<code>ContextWrapper</code>提供的方法来获取相应的目录：</p>
<ul>
<li>getExternalCacheDir() </li>
<li>getExternalCacheDir()</li>
</ul>
<p>等等，当然，也可以通过<code>Environment</code>间接操作，但是需要向用户申请权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Environment.getExternalStorageState();</div></pre></td></tr></table></figure>
<p>类似于 File 和 Cache 默认分类目录，开发人员也可以在应用私有目录中创建属于自己的自定义目录，方便于分类存储应用相关文件。</p>
<p>值得注意的一点是，对于外部存储空间下的应用私有目录文件，由于普通用户可以自由修改和删除，开发人员在使用时，一定要做好判空处理和异常捕获，防止应用崩溃退出！</p>
<h3 id="外部存储空间中的公共目录"><a href="#外部存储空间中的公共目录" class="headerlink" title="外部存储空间中的公共目录"></a>外部存储空间中的公共目录</h3><hr>
<p>通常来说，应用涉及到的持久化数据分为两类：应用相关数据和应用无关数据。前者是指专供宿主 App 使用的数据信息，比如一些应用的配置信息，数据库信息，缓存文件等。当应用被卸载，这些信息也应该被随之删除，避免存储空间产生不必要的占用。</p>
<p>相对而言，后者更偏向于这类信息：当应用被卸载，用户仍然希望保留于设备当中的信息。常见如，拍照类应用的图片文件，用户是使用浏览器手动下载的文件等。</p>
<p>显然，无论是内部存储空间，还是外部储存空间，上述两个应用私有目录由于其特有的生命周期（随着应用卸载而自动清除）只适合存储应用相关数据。</p>
<p>或者从访问权限上来说，应用无关数据应该是宿主应用希望与其他应用共享这些数据的，应该存放在外部存储空间的公共目录文件夹下。</p>
<p>外部存储空间已经为用户默认分类出一些公共目录。开发人员可以通过 Environment 类提供的方法直接获取相应目录的绝对路径，传递不同的 type 参数类型即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Environment.getExternalStoragePublicDirectory(String type);</div></pre></td></tr></table></figure>
<p>Envinonment 类提供诸多 type 参数的常量，比如：</p>
<ul>
<li>DIRECTORY_MUSIC：Music</li>
<li>DIRECTORY_MOVIES：Movies</li>
<li>DIRECTORY_PICTURES：Pictures</li>
<li>DIRECTORY_DOWNLOADS：Download</li>
</ul>
<p>等等，以第一个常量为例，音乐类别的公共目录绝对路径为：/storage/emulated/0/Music。如果你使用文件管理器打开设备的外部存储空间的话，均可以看到这些公共目录文件夹。</p>
<p>面对如此诸多的默认类别，开发人员在保存自己应用的公共文件时，也要养成良好的习惯，将要保存的数据分门别类地保存在不同公共目录下。当然，你也可以在公共目录下再次创建属于自己应用的目录，便于管理。</p>
<blockquote>
<p>注意：访问外部存储空间时记得申请读写权限！</p>
</blockquote>
<h3 id="外部存储空间中的其他目录"><a href="#外部存储空间中的其他目录" class="headerlink" title="外部存储空间中的其他目录"></a>外部存储空间中的其他目录</h3><hr>
<p>一般来说，利用两种应用私有目录和公共目录便能够存储应用中需要保存的数据和文件。如果这些还不够的话，那一定是你的开发姿势不对。在 Code Review 的前提下，如果还是不够的话，还可以在外部存储空间自由创建其他目录，通过这个方式获取外部存储空间的绝对路径，然后操作文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Environment.getExternalStorageDirectory();</div></pre></td></tr></table></figure>
<p>例如，我们可以在外包存储的根目录下创建自己的目录：<code>/storage/emulated/0/自己的目录</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;code&gt;iOS&lt;/code&gt;系统中，系统会为每个应用分配一个独立的空间，用来存放应用产生的数据，并且每个应用只能访问自己的存储空间。由于&lt;code&gt;Android&lt;/code&gt;手机可以插拔内存卡，所以，相对于&lt;code&gt;iOS&lt;/code&gt;来说，存储方式更多一点。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://guiyongdong.github.io/categories/Android/"/>
    
    
      <category term="android" scheme="https://guiyongdong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之运行时权限</title>
    <link href="https://guiyongdong.github.io/2017/05/04/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90/"/>
    <id>https://guiyongdong.github.io/2017/05/04/一天一Android之运行时权限/</id>
    <published>2017-05-04T01:32:33.000Z</published>
    <updated>2017-05-05T02:25:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>说起权限问题，<code>iOS</code>平台处理的非常严谨，几乎所有的权限都需要在运行时由用户来确认是否允许应用使用此权限。<code>android</code>平台稍微好一点，一部分权限只需要在<code>AndroidManifest.xml</code>中申请一下就可以使用，一部分却需要在运行时由用户来确定。今天就来说说<code>Android</code>的运行时权限问题。</p>
<a id="more"></a>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>运行时权限是在<code>Android6.0</code>才出现的。权限能很好的保护用户的隐私。谷歌将权限分为两类，一类是<code>Normal Permissions</code>，这类权限一般不涉及用户的隐私，不需要用户进行授权，只需要在<code>AndroidManifest.xml</code>中申请就可以。另一类是<code>Dangerous Permission</code>，这类一般都是涉及到用户的隐私的，不仅需要在<code>AndroidManifest.xml</code>中申请，还需要用户进行授权，比如读取SD卡等。</p>
<p><strong>Normal Permissions</strong> 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ACCESS_LOCATION_EXTRA_COMMANDS    允许应用程序访问额外的位置提供命令</div><div class="line">ACCESS_NETWORK_STATE     允许程序访问有关GSM网络信息</div><div class="line">ACCESS_NOTIFICATION_POLICY</div><div class="line">ACCESS_WIFI_STATE     允许程序访问Wi-Fi网络状态信息</div><div class="line">BLUETOOTH     允许程序连接到已配对的蓝牙设备</div><div class="line">BLUETOOTH_ADMIN     允许程序发现和配对蓝牙设备</div><div class="line">BROADCAST_STICKY     允许一个程序广播常用intents</div><div class="line">CHANGE_NETWORK_STATE     允许程序改变网络连接状态</div><div class="line">CHANGE_WIFI_MULTICAST_STATE</div><div class="line">CHANGE_WIFI_STATE     允许程序改变Wi-Fi连接状态</div><div class="line">DISABLE_KEYGUARD     允许程序禁用键盘锁</div><div class="line">EXPAND_STATUS_BAR     允许一个程序扩展收缩在状态栏</div><div class="line">GET_PACKAGE_SIZE     允许一个程序获取任何package占用空间容量</div><div class="line">INSTALL_SHORTCUT</div><div class="line">INTERNET     允许程序打开网络套接字</div><div class="line">KILL_BACKGROUND_PROCESSES</div><div class="line">MODIFY_AUDIO_SETTINGS     允许程序修改全局音频设置</div><div class="line">NFC</div><div class="line">READ_SYNC_SETTINGS     允许程序读取同步设置</div><div class="line">READ_SYNC_STATS     允许程序读取同步状态</div><div class="line">RECEIVE_BOOT_COMPLETED     允许程序接收到 ACTION_BOOT_COMPLETED    广播在系统完成启动</div><div class="line">REORDER_TASKS     允许程序改变Z轴排列任务</div><div class="line">REQUEST_INSTALL_PACKAGES</div><div class="line">SET_ALARM</div><div class="line">SET_TIME_ZONE     允许程序设置时间区域</div><div class="line">SET_WALLPAPER     允许程序设置壁纸</div><div class="line">SET_WALLPAPER_HINTS     允许程序设置壁纸hits</div><div class="line">TRANSMIT_IR</div><div class="line">UNINSTALL_SHORTCUT</div><div class="line">USE_FINGERPRINT</div><div class="line">VIBRATE     允许访问振动设备</div><div class="line">WAKE_LOCK     允许使用PowerManager的 WakeLocks保持进程在休眠时从屏幕消失</div><div class="line">WRITE_SYNC_SETTINGS     允许程序写入同步设置</div></pre></td></tr></table></figure>
<p><strong>Dangerous Permissions</strong> 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">group:android.permission-group.CONTACTS</div><div class="line">  permission:android.permission.WRITE_CONTACTS     允许程序写入但不读取用户联系人数据</div><div class="line">  permission:android.permission.GET_ACCOUNTS     访问一个帐户列表在Accounts Service中</div><div class="line">  permission:android.permission.READ_CONTACTS    允许程序读取用户联系人数据</div><div class="line"></div><div class="line">group:android.permission-group.PHONE</div><div class="line">  permission:android.permission.READ_CALL_LOG</div><div class="line">  permission:android.permission.READ_PHONE_STATE     读取电话状态</div><div class="line">  permission:android.permission.CALL_PHONE    允许一个程序初始化一个电话拨号不需通过拨号用户界面需要用户确认</div><div class="line">  permission:android.permission.WRITE_CALL_LOG</div><div class="line">  permission:android.permission.USE_SIP     允许程序使用SIP视频服务</div><div class="line">  permission:android.permission.PROCESS_OUTGOING_CALLS     允许程序监视、修改有关播出电话</div><div class="line">  permission:com.android.voicemail.permission.ADD_VOICEMAIL</div><div class="line"></div><div class="line">group:android.permission-group.CALENDAR</div><div class="line">  permission:android.permission.READ_CALENDAR     允许程序读取用户日历数据</div><div class="line">  permission:android.permission.WRITE_CALENDAR     允许一个程序写入但不读取用户日历数据</div><div class="line"></div><div class="line">group:android.permission-group.CAMERA</div><div class="line">  permission:android.permission.CAMERA     请求访问使用照相设备</div><div class="line"></div><div class="line">group:android.permission-group.SENSORS</div><div class="line">  permission:android.permission.BODY_SENSORS</div><div class="line"></div><div class="line">group:android.permission-group.LOCATION</div><div class="line">  permission:android.permission.ACCESS_FINE_LOCATION     允许一个程序访问精良位置(如GPS)</div><div class="line">  permission:android.permission.ACCESS_COARSE_LOCATION     允许一个程序访问CellID或WiFi热点来获取粗略的位置</div><div class="line"></div><div class="line">group:android.permission-group.STORAGE</div><div class="line">  permission:android.permission.READ_EXTERNAL_STORAGE     允许程序读取外部存储，如SD卡读取文件</div><div class="line">  permission:android.permission.WRITE_EXTERNAL_STORAGE     允许程序写入外部存储，如SD卡上写文件</div><div class="line"></div><div class="line">group:android.permission-group.MICROPHONE</div><div class="line">  permission:android.permission.RECORD_AUDIO     允许程序录制音频</div><div class="line"></div><div class="line">group:android.permission-group.SMS</div><div class="line">  permission:android.permission.READ_SMS     允许程序读取短信息</div><div class="line">  permission:android.permission.RECEIVE_WAP_PUSH     允许程序监控将收到WAP PUSH信息</div><div class="line">  permission:android.permission.RECEIVE_MMS     允许一个程序监控将收到MMS彩信,记录或处理</div><div class="line">  permission:android.permission.RECEIVE_SMS     允许程序监控一个将收到短信息，记录或处理</div><div class="line">  permission:android.permission.SEND_SMS     允许程序发送SMS短信</div><div class="line">  permission:android.permission.READ_CELL_BROADCASTS</div></pre></td></tr></table></figure>
<p>可以看到，危险权限都是一组一组的，那么分组的意义何在呢？</p>
<p>如果你申请某个危险的权限，假设APP早已经被用户授权了同一组的某个危险权限，那么系统会立即授权，而不需要用户去点击授权，比如当APP对<code>READ_CONTACTS</code>已经授权了，当你申请<code>WRITE_CONTACTS</code>时，系统会直接授权通过。另外，对于申请时弹出的<code>dialog</code>上面的文本说明也是对整个权限组的说明，而不是单个权限。不过需要注意的是，不要对权限组依赖过多，尽可能对每个危险权限都进行正常流程的申请，因为权限组可能会在后期的版本中有变化。</p>
<h3 id="请求权限"><a href="#请求权限" class="headerlink" title="请求权限"></a>请求权限</h3><p>请求权限的步骤分为如下几步：</p>
<p>1 . 在<code>AndroidManifest.xml</code>文件中添加需要申请的权限。如果不添加，可能会崩溃。</p>
<p>2 . 检查权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">            <span class="comment">//请求权限</span></div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//业务</span></div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//6.0以下不需要运行时权限 业务</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里判断某权限是否被用户授权的方法是：<code>checkSelfPermission</code>，方法接收一个参数，为权限名称。此方法为<code>ContextWrapper</code>的实例方法，而我们的<code>Activity</code>一般都间接继承于<code>ContextWrapper</code>，所以，可以在<code>Activity</code>中直接调用此方法。方法返回两种结果：<code>PackageManager.PERMISSION_DENIED</code>和<code>PackageManager.PERMISSION_GRANTED</code>，当返回<code>DENIED</code>就需要申请授权了。</p>
<p>3 . 申请授权</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">requestPermissions(<span class="keyword">new</span> String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,<span class="number">10086</span>);</div></pre></td></tr></table></figure>
<p>此方法定义在<code>Activity</code>中，接收；两个参数，第一个为需要申请的权限的字符串数组，第二个为请求码。主要用于回调的时候检测，系统允许我们一次性申请多个权限，系统会逐一询问用户。注意，此方法为异步。</p>
<p>4 . 处理权限申请回调</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (requestCode == <span class="number">10086</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">            <span class="comment">// 表明用户同意权限  业务</span></div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//用户不同意</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此回调方法回回传三个参数，第一个为请求码，就是我们在请求权限时候传多去的请求码，第二个是权限数组，第三个是请求结果数组。 这里，首先校验权限码，然后，判断<code>grantResults</code>的长度是否大于0，因为这里我们申请的只有一种权限，所以我直接判断数组中的第一个元素是否为<code>PackageManager.PERMISSION_GRANTED</code>，如果我们一次申请多个权限，需要分别判断。</p>
<p>基本的申请权限步骤已经介绍完毕。</p>
<p>完整的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                <span class="comment">//请求权限</span></div><div class="line">                requestPermissions(<span class="keyword">new</span> String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,<span class="number">10086</span>);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//业务</span></div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//6.0以下不需要运行时权限 业务</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (requestCode == <span class="number">10086</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                <span class="comment">// 表明用户同意权限</span></div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//用户不同意</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>虽然权限处理并不麻烦，但是需要编写很多重复的代码，所以，这里推荐一个库:<a href="https://github.com/hongyangAndroid/MPermissions" target="_blank" rel="external">MPermissions</a>，用起来还是很方便的。</p>
<h5 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h5><p>首先，在项目的<code>build.gradle</code>中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.4&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在<code>app</code>的<code>buid.gradle</code>中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">apply plugin: &apos;com.neenbedankt.android-apt&apos;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    apt &apos;com.zhy:mpermission-compiler:1.0.0&apos;</div><div class="line">    compile &apos;com.zhy:mpermission-api:1.0.0&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ul>
<li>申请权限 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">MPermissions.requestPermissions(MainActivity.this, 100, Manifest.permission.WRITE_EXTERNAL_STORAGE);</div></pre></td></tr></table></figure>
<ul>
<li>处理权限回调</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">    MPermissions.onRequestPermissionsResult(<span class="keyword">this</span>, requestCode, permissions, grantResults);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完整的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">		 <span class="comment">//申请权限 权限码很重要</span></div><div class="line">        MPermissions.requestPermissions(MainActivity.<span class="keyword">this</span>, <span class="number">100</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="comment">//处理权限回调</span></div><div class="line">        MPermissions.onRequestPermissionsResult(<span class="keyword">this</span>, requestCode, permissions, grantResults);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//会根据权限码 来映射方法 执行方法</span></div><div class="line">    <span class="meta">@PermissionGrant</span>(<span class="number">100</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"Contact permission is granted"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说起权限问题，&lt;code&gt;iOS&lt;/code&gt;平台处理的非常严谨，几乎所有的权限都需要在运行时由用户来确认是否允许应用使用此权限。&lt;code&gt;android&lt;/code&gt;平台稍微好一点，一部分权限只需要在&lt;code&gt;AndroidManifest.xml&lt;/code&gt;中申请一下就可以使用，一部分却需要在运行时由用户来确定。今天就来说说&lt;code&gt;Android&lt;/code&gt;的运行时权限问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://guiyongdong.github.io/categories/Android/"/>
    
    
      <category term="android" scheme="https://guiyongdong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一天一Android之Material Desisgn</title>
    <link href="https://guiyongdong.github.io/2017/04/15/%E4%B8%80%E5%A4%A9%E4%B8%80Android%E4%B9%8BMaterial%20Desisgn/"/>
    <id>https://guiyongdong.github.io/2017/04/15/一天一Android之Material Desisgn/</id>
    <published>2017-04-15T03:32:11.000Z</published>
    <updated>2017-04-19T03:54:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先要说一下现在手机的UI风格，其实之前包括现在，<code>Android</code>的界面设计都是模仿<code>iOS</code>的，就拿我之前的公司，所有的<code>UI</code>图都是根据<code>6s</code>的尺寸，<code>iOS</code>的设计风格来设计得到，<code>Android</code>同学有时候就抱怨，这个好难实现，但是在<code>iOS</code>上，实现起来就很容易了。那么在2014年，谷歌推出了<code>Material Desisgn</code>，一套全新的界面设计语言，但是不少<code>Material Desisgn</code>的效果却很难实现，而<code>Android</code>中却几乎没有提供相应的<code>API</code>支持，于是在2015年，谷歌推出了一个<code>Design Support</code>库，这个库将<code>Material Desisgn</code>中最具代表性的一些控件和效果进行了封装，那么，今天我们就来看看有哪些常用的控件。</p>
<a id="more"></a>
<h3 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h3><p><code>Toolbar</code>是<code>Android</code>5.0开始推出的一个导航控件，用来替换<code>ActionBar</code>。为了兼容老系统，需要在<code>build.gradle</code>导入<code>v7 appcompat</code>支持库。谷歌允许开发者定制修改<code>Toolbar</code>，如：</p>
<ul>
<li>设置导航栏图标</li>
<li>设置App的logo</li>
<li>支持设置标题和子标题</li>
<li>支持添加一个或多个自定义控件</li>
<li>支持Action Menu</li>
</ul>
<div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/912181-dca123890a64e6e0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>

<p>另外，一个<code>Toolbar</code>就是一个<code>View</code>，跟其他<code>View</code>一样包含在布局中，并且一个<code>Activity</code>中可以有多个<code>Toolbar</code>。</p>
<p>任何一个新建的项目，默认都会显示<code>ActionBar</code>，为了取消系统自带的<code>ActionBar</code>，通常会更改<code>APP</code>的<code>theme</code>。例如，会直接在<code>styles.xml</code>文件中如此修改：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里直接把之前的<code>Theme.AppCompat.Light.DarkActionBar</code>更改为<code>Theme.AppCompat.Light.NoActionBar</code>，当然，你也可以修改主题的其他属性。</p>
<p>现在已经把<code>ActionBar</code>隐藏起来了，接下来在<code>activity_main.xml</code>上添加如下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.MainActivity"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"自定义"</span></div><div class="line">            /&gt;</div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在<code>MainActivity</code>中这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>找到<code>toolbar</code>，并调用<code>setSupportActionBar(toolbar)</code>，这样既可以使用<code>Toolbar</code>，也可以使用<code>ActionBar</code>的外观。当然，你也可以不调用<code>setSupportActionBar(toolbar)</code>，将<code>Toolbar</code>当成普通的<code>View</code>使用。</p>
<p>那<code>Toolbar</code>还可以设置哪些属性呢？</p>
<p><strong>设置左边的图标</strong><br><code>toolbar.setNavigationIcon(R.drawable.home);</code></p>
<p><strong>设置logo</strong><br><code>toolbar.setLogo(R.mipmap.ic_launcher);</code></p>
<p><strong>设置主标题</strong><br><code>toolbar.setTitle(&quot;主标题&quot;);</code></p>
<p><strong>设置子标题</strong><br><code>toolbar.setSubtitle(&quot;子标题&quot;);</code></p>
<p>当然，它不仅可以添加自定义<code>View</code>，它也可以添加<code>action</code>按钮，如下，创建<code>Menu resource file</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">      <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/search"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/search"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"搜索"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/notification"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ling"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"通知"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/item1"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"item1"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/item2"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"item2"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在<code>MainActivity</code>中这样用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        <span class="comment">//设置左边的图标</span></div><div class="line">        toolbar.setNavigationIcon(R.drawable.home);</div><div class="line">        <span class="comment">//设置logo</span></div><div class="line">        toolbar.setLogo(R.mipmap.ic_launcher);</div><div class="line">        <span class="comment">//设置主标题</span></div><div class="line">        toolbar.setTitle(<span class="string">"主标题"</span>);</div><div class="line">        <span class="comment">//子标题</span></div><div class="line">        toolbar.setSubtitle(<span class="string">"子标题"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        getMenuInflater().inflate(R.menu.toolbar_action,menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (item.getItemId())&#123;</div><div class="line">            <span class="keyword">case</span> R.id.search:</div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"搜索"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.notification:</div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"通知"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.item1:</div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"item1"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.item2:</div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"item2"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们不设置<code>setSupportActionBar(toolbar)</code>，那么<code>Toolbar</code>就是当成一个<code>View</code>使用，就可以这样添加<code>action</code>按钮：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line"></div><div class="line">        <span class="comment">//设置左边的图标</span></div><div class="line">        toolbar.setNavigationIcon(R.drawable.home);</div><div class="line">        <span class="comment">//设置logo</span></div><div class="line">        toolbar.setLogo(R.mipmap.ic_launcher);</div><div class="line">        <span class="comment">//设置主标题</span></div><div class="line">        toolbar.setTitle(<span class="string">"主标题"</span>);</div><div class="line">        <span class="comment">//子标题</span></div><div class="line">        toolbar.setSubtitle(<span class="string">"子标题"</span>);</div><div class="line"></div><div class="line">        toolbar.inflateMenu(R.menu.toolbar_action);</div><div class="line">        toolbar.setOnMenuItemClickListener(<span class="keyword">new</span> Toolbar.OnMenuItemClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">                <span class="keyword">switch</span> (item.getItemId())&#123;</div><div class="line">                    <span class="keyword">case</span> R.id.search:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"搜索"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.notification:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"通知"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.item1:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"item1"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.item2:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"item2"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终运行效果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android22.png?raw=true" width="375"><br></div>


<hr>
<h3 id="DrawerLayout"><a href="#DrawerLayout" class="headerlink" title="DrawerLayout"></a>DrawerLayout</h3><p><code>APP</code>中，侧滑菜单使用的频率蛮高的，比如<code>QQ</code>。<code>Android</code>提供了<code>DrawerLayout</code>来实现这种效果，<code>DrawerLayout</code>是一个布局，在布局中允许放两个直接子控件，第一个子控件是主屏幕中显示的内容，第二个子控件是滑动菜单中显示的内容，因此，我们修改一下<code>activity_main.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.MainActivity"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"自定义"</span></div><div class="line">                /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#fff"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"侧滑菜单"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>首先，在根布局<code>DrawerLayout</code>里面，我们放了两个<code>LinearLayout</code>布局，第一个<code>LinearLayout</code>作为屏幕中显示的内容，里面放置了<code>Toolbar</code>。第二个<code>LinearLayout</code>就是我们的侧滑菜单，里面放置了一个<code>TextView</code>。但是关于第二个<code>LinearLayout</code>我们需要注意一点，<code>android:layout_gravity</code>这个属性是必须指定的，因为需要告诉<code>DrawerLayout</code>互动菜单是在屏幕的左边还是右边，指定<code>left</code>表示左边，指定<code>right</code>表示右边，我们这里指定了<code>start</code>，表示根据系统语言进行判断，如果系统语言是从左往右的，菜单就在左边。</p>
<p>现在就可以通过滑动屏幕的左边，打开菜单栏了。如图：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android23.png?raw=true" width="375"><br></div>

<p>现在，只能通过屏幕的左边滑动才能打开菜单，但是，一般我们都会在<code>Toolbar</code>上的左边放置一个按钮，通过点击按钮也能打开菜单栏。来看<code>MainActivity.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DrawerLayout mDrawerLayout;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line"></div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line"><span class="comment">//        setSupportActionBar(toolbar);</span></div><div class="line"></div><div class="line">        <span class="comment">//设置左边的图标</span></div><div class="line">        toolbar.setNavigationIcon(R.drawable.home);</div><div class="line">        <span class="comment">//设置logo</span></div><div class="line">        toolbar.setLogo(R.mipmap.ic_launcher);</div><div class="line">        <span class="comment">//设置主标题</span></div><div class="line">        toolbar.setTitle(<span class="string">"主标题"</span>);</div><div class="line">        <span class="comment">//子标题</span></div><div class="line">        toolbar.setSubtitle(<span class="string">"子标题"</span>);</div><div class="line"></div><div class="line">        toolbar.inflateMenu(R.menu.toolbar_action);</div><div class="line">        toolbar.setOnMenuItemClickListener(<span class="keyword">new</span> Toolbar.OnMenuItemClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">                <span class="keyword">switch</span> (item.getItemId())&#123;</div><div class="line">                    <span class="keyword">case</span> R.id.search:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"搜索"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.notification:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"通知"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.item1:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"item1"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.item2:</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"item2"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        toolbar.setNavigationOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"home"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                mDrawerLayout.openDrawer(GravityCompat.START);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们没有将<code>Toolbar</code>设置为<code>ActionBar</code>，但是我们设置了<code>Toolbar</code>的<code>NavigationIcon</code>，所以，我们直接给<code>NavigationIcon</code>添加点击事件:<code>toolbar.setNavigationOnClickListener()</code>，然后调用<code>mDrawerLayout.openDrawer(GravityCompat.START)</code>开启菜单。</p>
<p>如果将<code>Toolbar</code>设置为<code>ActionBar</code>，则需要在<code>onOptionsItemSelected()</code>方法中来处理点击事件。并且，如果你没有设置<code>Toolbar</code>的<code>NavigationIcon</code>，则需要这样设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">ActionBar actionBar = getSupportActionBar();</div><div class="line"><span class="keyword">if</span> (actionBar != <span class="keyword">null</span>) &#123;</div><div class="line">    actionBar.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">    actionBar.setHomeAsUpIndicator(R.drawable.home);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>并且此按钮的<code>id</code>永远是<code>android.R.id.home</code>。</p>
<hr>
<h3 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h3><p><code>NavigationView</code>也是<code>Design Support</code>库中提供的一个控件，也很好用。首先需要导入这个库，在<code>app/build.gradle</code>文件，在<code>dependencies</code>中添加如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile 'com.android.support:design:25.3.0'</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们先来看一下运行效果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android24.png?raw=true" width="375"><br></div>

<p>首先我定义了一个头视图和一个<code>menu</code>，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/search"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/search"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"搜索"</span></div><div class="line">                /&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/notification"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/ling"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"通知"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/item1"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"首页"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@drawable/home"</span></div><div class="line">                /&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/item2"</span></div><div class="line">                <span class="attr">android:title</span>=<span class="string">"item2"</span></div><div class="line">                <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">                /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"180dp"</span></div><div class="line">                <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">                &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"头视图"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#000"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在<code>activity_main.xml</code>这样用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.MainActivity"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"自定义"</span></div><div class="line">                /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">app:menu</span>=<span class="string">"@menu/nav_menu"</span></div><div class="line">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/nav_header"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_view"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#963"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以看到，我们直接把菜单换成了<code>NavigationView</code>，<code>app:menu</code>设置<code>menu</code>，<code>app:headerLayout</code>设置头视图。当然我们也可以为<code>NavigationView</code>的<code>menu</code>添加点击事件。在<code>MainActivity.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DrawerLayout mDrawerLayout;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        ...</div><div class="line"></div><div class="line">        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);</div><div class="line">        navigationView.setNavigationItemSelectedListener(<span class="keyword">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(@NonNull MenuItem item)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,item.getItemId()+<span class="string">""</span>,Toast.LENGTH_SHORT);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="FloatingActionButton-悬浮按钮"><a href="#FloatingActionButton-悬浮按钮" class="headerlink" title="FloatingActionButton 悬浮按钮"></a>FloatingActionButton 悬浮按钮</h3><p>这个控件可以实现悬浮按钮的效果，它默认会使用<code>colorAccent</code>来作为按钮的颜色，当然还可以为它指定一个图标。修改<code>activity_main.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.MainActivity"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"自定义"</span></div><div class="line">                /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"end|bottom"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/car"</span></div><div class="line">            <span class="attr">android:elevation</span>=<span class="string">"8dp"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">	...</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里，可以通过<code>android:src</code>指定按钮的图片，<code>android:elevation</code>可以指定按钮的投影度，数值越大，投影面积越大，但是投影效果越淡，反之越浓。当然，还可以为它添加点击事件，其实<code>FloatingActionButton</code>和一个普通的按钮一样，也是通过<code>setOnClickListener</code>来添加点击是事件。</p>
<hr>
<h3 id="AppBarLayout"><a href="#AppBarLayout" class="headerlink" title="AppBarLayout"></a>AppBarLayout</h3><p><code>AppBarLayout</code>实际上是一个垂直方向的<code>LinearLayout</code>，它内部做了很多滚动事件的封装。它可以通过监听滚动视图的滚动来做出响应。我们依然在<code>activity_main.xml</code>中修改代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.MainActivity"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></div><div class="line">    &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">                <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways|snap"</span>&gt;</div><div class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:text</span>=<span class="string">"自定义"</span></div><div class="line">                    /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/text_view"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"end|bottom"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/car"</span></div><div class="line">            <span class="attr">android:elevation</span>=<span class="string">"8dp"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">app:menu</span>=<span class="string">"@menu/nav_menu"</span></div><div class="line">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/nav_header"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_view"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#963"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>首先，我们修改了主布局为<code>CoordinatorLayout</code>，<code>CoordinatorLayout</code>是一个加强版的<code>FrameLayout</code>布局。然后添加<code>AppBarLayout</code>布局，并让<code>Toolbar</code>当做它的子布局。最后，添加一个<code>NestedScrollView</code>，最重要的一点是，设置<code>app:layout_behavior</code>属性为<code>@string/appbar_scrolling_view_behavior</code>，表示滚动视图在<code>Toolbar</code>的下面。另外，还给<code>Toolbar</code>添加了属性<code>app:layout_scrollFlags</code>，值为<code>scroll|enterAlways|snap</code>，其中<code>scroll</code>表示当<code>NestedScrollView</code>向上滚动的时候，<code>Toolbar</code>会跟着一起向上滚动并隐藏，<code>enterAlways</code>表示<code>NestedScrollView</code>向下滚动的时候，<code>Toolbar</code>会跟着一起向下滚动并显示出来。<code>snap</code>表示当<code>Toolbar</code>还没有完全隐藏或显示的时候，会根据当前滚动的距离，自动选择是隐藏还是显示。</p>
<hr>
<h3 id="CollapsingToolbarLayout-可折叠式标题栏"><a href="#CollapsingToolbarLayout-可折叠式标题栏" class="headerlink" title="CollapsingToolbarLayout 可折叠式标题栏"></a>CollapsingToolbarLayout 可折叠式标题栏</h3><p><code>CollapsingToolbarLayout</code></p>
<p><code>CollapsingToolbarLayout</code>是一个作用于<code>Toolbar</code>基础上的布局，它可以根据滚动视图的滚动距离来改变高度。先来看一下运行的结果：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android25.gif?raw=true" width="375"><br></div>

<p>我这里创建另一个活动<code>SecondActivity</code>，布局如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.SecondActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--标题栏--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"250dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/appBar"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_toolbar"</span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></div><div class="line">            <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span></div><div class="line">                <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span>/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#852"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">            </div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_marginBottom</span>=<span class="string">"15dp"</span></div><div class="line">                <span class="attr">android:layout_marginRight</span>=<span class="string">"15dp"</span></div><div class="line">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"15dp"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"35dp"</span>&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/content_text"</span></div><div class="line">                    <span class="attr">android:textColor</span>=<span class="string">"#000"</span></div><div class="line">                    /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们根布局依然使用<code>CoordinatorLayout</code>，同样的，需要使用<code>AppBarLayout</code>作为<code>Toolbar</code>的根布局。这里，指定<code>AppBarLayout</code>的高度为<code>250dp</code>，当然，可以根据需求改动。然后添加了<code>CollapsingToolbarLayout</code>布局，并且指定了主题为<code>@style/ThemeOverlay.AppCompat.Dark.ActionBar</code>，<code>app:contentScrim</code>属性用于指定<code>CollapsingToolbarLayout</code>在趋于折叠状态以及折叠之后的背景色，其实<code>CollapsingToolbarLayout</code>折叠之后就是一个普通的<code>Toolbar</code>。<code>app:layout_scrollFlags</code>我们刚才也用到过，这里指定为<code>scroll|exitUntilCollapsed</code>，<code>scroll</code>表示<code>CollapsingToolbarLayout</code>会随着滚动内容滚动，<code>exitUntilCollapsed</code>表示当<code>CollapsingToolbarLayout</code>随着滚动完成折叠之后就保留在界面上，不再移出屏幕。</p>
<p>可以看到，我们又在<code>CollapsingToolbarLayout</code>中定义了一个<code>View</code>和<code>Toolbar</code>，其实也就意味着，这个标题栏是由普通的<code>View</code>加上<code>Toolbar</code>合成的，<code>app:layout_collapseMode</code>属性，用于指定当前控件<code>CollapsingToolbarLayout</code>折叠过程中的折叠模式，其中<code>Toolbar</code>指定为<code>pin</code>，表示在折叠过程中位置始终保持不变，<code>View</code>指定为<code>parallax</code>，表示会在折叠的过程中产生一定的位置偏移。</p>
<p>最后，在<code>SecondActivity.java</code>中，添加如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_second);</div><div class="line">        <span class="comment">//获取到CollapsingToolbarLayout  并设置标题</span></div><div class="line">        CollapsingToolbarLayout collapsingToolbarLayout = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);</div><div class="line">        collapsingToolbarLayout.setTitle(<span class="string">"苹果"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//获取Toolbar 并将Toolbar设置为ActionBar</span></div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">        ActionBar actionBar = getSupportActionBar();</div><div class="line">        <span class="keyword">if</span> (actionBar != <span class="keyword">null</span>) &#123;</div><div class="line">            actionBar.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//设置内容</span></div><div class="line">        TextView textView = (TextView) findViewById(R.id.content_text);</div><div class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++) &#123;</div><div class="line">            stringBuilder.append(<span class="string">"苹果"</span>);</div><div class="line">        &#125;</div><div class="line">        textView.setText(stringBuilder.toString());</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">        getMenuInflater().inflate(R.menu.toolbar_action,menu);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (item.getItemId() == android.R.id.home) &#123;</div><div class="line">            finish();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改状态栏"><a href="#修改状态栏" class="headerlink" title="修改状态栏"></a>修改状态栏</h3><p>最初的时候，<code>iOS</code>和<code>Android</code>一个比较大的不同就是状态栏，<code>iOS</code>的状态栏属于当前视图的一部分，而<code>Android</code>却永远是黑色的。好在在<code>Android 5.0</code>之后，也可以对状态栏进行修改了。</p>
<p>要想让背景图能和系统的状态栏融合，需要借助<code>android:fitsSystemWindows</code>这个属性。我们需要在<code>activity_second.xml</code>修改布局，给<code>View</code>布局和它的所有父布局都添加这个属性。如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.materialdesisgndemo.SecondActivity"</span></div><div class="line">    </div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--标题栏--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"250dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/appBar"</span></div><div class="line">        </div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_toolbar"</span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></div><div class="line">            <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span></div><div class="line">            </div><div class="line">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span></div><div class="line">                <span class="attr">android:background</span>=<span class="string">"#956"</span></div><div class="line">                </div><div class="line">                <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">    </div><div class="line">	...</div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后，我们还需要在主题中将<code>android:statusBarColor</code>属性指定为<code>@android:color/transparent</code>，即将状态栏的颜色设置为透明。因为<code>android:statusBarColor</code>属性是从<code>API 21</code>才有的。所以，新建<code>values-v21.xml</code>布局，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"SecondActivityTheme"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里定义了<code>SecondActivityTheme</code>，并设置<code>android:statusBarColor</code>。然后将这个主题添加到<code>values.xml</code>中，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;item name="android:textColorPrimary"&gt;#000&lt;/item&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"SecondActivityTheme"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>/&gt;</span><span class="xml"></span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>最后，在<code>AndroidManifest.xml</code>文件中设置<code>SecondActivity</code>的主题：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.guiyongdong.materialdesisgndemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span></span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@style/SecondActivityTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/android/android26.png?raw=true" width="375"><br></div>


<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>好了，至此关于<code>Material Desisgn</code>风格的控件已经学的差不多了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先要说一下现在手机的UI风格，其实之前包括现在，&lt;code&gt;Android&lt;/code&gt;的界面设计都是模仿&lt;code&gt;iOS&lt;/code&gt;的，就拿我之前的公司，所有的&lt;code&gt;UI&lt;/code&gt;图都是根据&lt;code&gt;6s&lt;/code&gt;的尺寸，&lt;code&gt;iOS&lt;/code&gt;的设计风格来设计得到，&lt;code&gt;Android&lt;/code&gt;同学有时候就抱怨，这个好难实现，但是在&lt;code&gt;iOS&lt;/code&gt;上，实现起来就很容易了。那么在2014年，谷歌推出了&lt;code&gt;Material Desisgn&lt;/code&gt;，一套全新的界面设计语言，但是不少&lt;code&gt;Material Desisgn&lt;/code&gt;的效果却很难实现，而&lt;code&gt;Android&lt;/code&gt;中却几乎没有提供相应的&lt;code&gt;API&lt;/code&gt;支持，于是在2015年，谷歌推出了一个&lt;code&gt;Design Support&lt;/code&gt;库，这个库将&lt;code&gt;Material Desisgn&lt;/code&gt;中最具代表性的一些控件和效果进行了封装，那么，今天我们就来看看有哪些常用的控件。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://guiyongdong.github.io/categories/Android/"/>
    
    
      <category term="android" scheme="https://guiyongdong.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>说一说JS和Objective-C的交互</title>
    <link href="https://guiyongdong.github.io/2017/04/14/%E8%AF%B4%E4%B8%80%E8%AF%B4JS%E5%92%8CObjective-C%E7%9A%84%E4%BA%A4%E4%BA%92/"/>
    <id>https://guiyongdong.github.io/2017/04/14/说一说JS和Objective-C的交互/</id>
    <published>2017-04-14T08:39:35.000Z</published>
    <updated>2017-04-14T10:35:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>很早以前就听闻<code>&lt;JavaScriptCore/JavaScriptCore.h&gt;</code>的大名了，只是没有正面接触过，有的也只是间接接触过，比如<code>ReactNative</code>，它渲染界面的核心就是<code>&lt;JavaScriptCore/JavaScriptCore.h&gt;</code>。但是今天就不得不和它有一次正面的接触了，公司要做一个功能，需要<code>Native</code>和<code>js</code>方法之间的互调，所以，本篇文章就说说如何实现。当然，本篇文章说的都是基础。</p>
<a id="more"></a>
<h3 id="JSContext"><a href="#JSContext" class="headerlink" title="JSContext"></a>JSContext</h3><p>这个东西是干什么的？看看苹果官方给的解释：A JSContextobject represents a JavaScript execution environment. You create and use JavaScript contexts to evaluate JavaScript scripts from Objective-C or Swift code, to access values defined in or calculated in JavaScript, and to make native objects, methods, or functions accessible to JavaScript.翻译一下，大概意思就是：<code>JSContext</code>就是整个<code>JavaScript</code>的上下文，拥有这个上下文，就可以访问<code>JavaScript</code>中的对象或者方法，也可以使用本地的对象或者方法来供<code>JavaScript</code>调用。说白了，通过<code>JSContext</code>就可以实现交互。</p>
<h5 id="获取JSContext"><a href="#获取JSContext" class="headerlink" title="获取JSContext"></a>获取<code>JSContext</code></h5><p>通常情况下可以在<code>webView</code>加载完以后获取:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    JSContext *context = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取到<code>JSContext</code>就可以和<code>js</code>交互了。</p>
<h3 id="js调用原生方法"><a href="#js调用原生方法" class="headerlink" title="js调用原生方法"></a>js调用原生方法</h3><p><code>JSContext</code>提供了两种方式，可以让<code>js</code>调用原生的方法，一种是<code>block</code>，一种是<code>JSExport</code>协议。</p>
<h5 id="使用block交互"><a href="#使用block交互" class="headerlink" title="使用block交互"></a>使用block交互</h5><p>例如，有如下网页:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"playAudio()"</span>&gt;</span>播放音频<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>点击<code>webView</code>中的播放按钮，然后调用原生的播放功能，我们这里定义播放按钮的方法为<code>playAudio</code>，所以在<code>Objective-C</code>这样调用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    JSContext *context = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line">    context[<span class="string">@"playAudio"</span>] = ^() &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"js调用本地开始播放"</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>点击播放按钮，控制台如下输出：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-14</span> <span class="number">17</span>:<span class="number">42</span>:<span class="number">42.692</span> JSCoreDemo[<span class="number">30994</span>:<span class="number">1357505</span>] js调用本地开始播放</div></pre></td></tr></table></figure></p>
<p>这里需要注意的是<code>js</code>中的方法名和<code>block</code>中的字符串一定要一样。</p>
<p>这种情况下，是<code>js</code>调用原生是不传参数的，那传参又该如何呢？</p>
<p>例如，如下网页：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">jsPlayAudio</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            nativePlayAudio(<span class="string">"http://www.baidu.com"</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"jsPlayAudio()"</span>&gt;</span>给Native传参<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里是显调用<code>js</code>的<code>jsPlayAudio</code>方法，然后调用原生的<code>nativePlayAudio</code>方法，并且传过去一个字符串。在<code>Objective-C</code>这样调用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    JSContext *context = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line">    context[<span class="string">@"nativePlayAudio"</span>] = ^() &#123;</div><div class="line">        <span class="built_in">NSArray</span> *args = [JSContext currentArguments];</div><div class="line">        <span class="keyword">for</span> (JSValue obj <span class="keyword">in</span> args) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"js传过来的参数是：%@"</span>,obj);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-14</span> <span class="number">17</span>:<span class="number">49</span>:<span class="number">19.051</span> JSCoreDemo[<span class="number">31131</span>:<span class="number">1367134</span>] js传过来的参数是：http:<span class="comment">//www.baidu.com</span></div></pre></td></tr></table></figure></p>
<p>通过<code>[JSContext currentArguments]</code>可以获取到所有的参数，因为参数有可能不是一个。所有的参数都会被包装成<code>JSValue</code>对象，查看<code>JSValue</code>可以看出，<code>JSValue</code>可以转换为：<code>Object</code>、<code>Bool</code>、<code>Double</code>、<code>Int32</code>、<code>UInt32</code>、<code>Number</code>、<code>String</code>、<code>Date</code>、<code>Array</code>、<code>Dictionary</code>等类型。并且<code>JSValue</code>还提供了一系列的判断是否是某一类型的方法。具体转换类型如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">  Objective-C type  |   JavaScript type</div><div class="line">--------------------+---------------------</div><div class="line">        nil         |     undefined</div><div class="line">       NSNull       |        null</div><div class="line">      NSString      |       string</div><div class="line">      NSNumber      |   number, boolean</div><div class="line">    NSDictionary    |   Object object</div><div class="line">      NSArray       |    Array object</div><div class="line">       NSDate       |     Date object</div><div class="line">      NSBlock (1)   |   Function object (1)</div><div class="line">         id (2)     |   Wrapper object (2)</div><div class="line">       Class (3)    | Constructor object (3)</div></pre></td></tr></table></figure>
<h5 id="使用JSExport交互"><a href="#使用JSExport交互" class="headerlink" title="使用JSExport交互"></a>使用JSExport交互</h5><p>使用<code>block</code>交互有一个问题，加入我们在<code>js</code>中不是直接调用方法，而是调用某个对象的某个方法，这个时候再使用<code>block</code>就不行了，这就使用到了<code>JSExport</code>。</p>
<p>例如，如下网页：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">jsPlayAudio</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            nativeObj.playAudio();</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"jsPlayAudio()"</span>&gt;</span>给Native传参<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>nativeObj</code>是在<code>js</code>中定义的对象，当然，<code>js</code>可能并没有创建这个对象。那该如何使用呢？</p>
<p>这里需要我们定义一个协议，并继承<code>JSExport</code>协议，在协议中添加方法，如下：</p>
<p><strong>BridgeModel.h</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;JavaScriptCore/JavaScriptCore.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">BridgeProtocol</span> &lt;<span class="title">JSExport</span>&gt;</span></div><div class="line">-  (<span class="keyword">void</span>)playAudio;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BridgeModel</span> : <span class="title">NSObject</span>&lt;<span class="title">BridgeProtocol</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>BridgeModel.m</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"BridgeModel.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">BridgeModel</span></span></div><div class="line">-  (<span class="keyword">void</span>)playAudio &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"js调用本地开始播放"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>需要如此使用：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    JSContext *context = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];    </div><div class="line">    BridgeModel *model = [[BridgeModel alloc] init];</div><div class="line">    context[<span class="string">@"nativeObj"</span>] = model;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>记住，<code>js</code>中的对象名和<code>Objective-C</code>中的对象名要一致。并且协议方法一定不能是<code>@optional</code>。</p>
<p>输出如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-14</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">41.545</span> JSCoreDemo[<span class="number">31708</span>:<span class="number">1402262</span>] js调用本地开始播放</div></pre></td></tr></table></figure></p>
<p>我们再来看看传参该如何处理：</p>
<p>例如，如下网页：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">jsPlayAudio</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            nativeObj.playAudioWithUrlAndType(<span class="string">"http://www.baidu.com"</span>,<span class="number">666</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"jsPlayAudio()"</span>&gt;</span>给Native传参<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里传了两个参数。</p>
<p>来看<code>Objective-C</code>:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">BridgeProtocol</span> &lt;<span class="title">JSExport</span>&gt;</span></div><div class="line">- (<span class="keyword">void</span>)playAudioWithUrl:(<span class="built_in">NSString</span> *)url AndType:(<span class="built_in">NSInteger</span>)type;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)playAudioWithUrl:(<span class="built_in">NSString</span> *)url AndType:(<span class="built_in">NSInteger</span>)type &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"js调用本地开始播放--%@--%ld"</span>,url,type);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>协议中我们定义了一个方法，<code>playAudioWithUrl</code>和<code>AndType</code>拼起来正好是<code>js</code>中的方法，所以，只要原生的方法拼起来和<code>js</code>中的方法一致就可以调用。</p>
<p>输出如下：<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-14</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">45.854</span> JSCoreDemo[<span class="number">31973</span>:<span class="number">1416619</span>] js调用本地开始播放--http:<span class="comment">//www.baidu.com--666</span></div></pre></td></tr></table></figure></p>
<h3 id="原生调用js"><a href="#原生调用js" class="headerlink" title="原生调用js"></a>原生调用js</h3><p>使用原生调用js方法就很简单了。</p>
<p>例如，如下网页：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">endAudio</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">            alert(<span class="string">'停止'</span>+str);</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">endAudio</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">            alert(<span class="string">'停止'</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"jsPlayAudio()"</span>&gt;</span>给Native传参<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>直接使用<code>JSContext</code>就可以调用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    JSContext *context = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line">    </div><div class="line">    [context evaluateScript:<span class="string">@"endAudio()"</span>];</div><div class="line">    [context evaluateScript:<span class="string">@"endAudio(abc)"</span>];    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，想调用某个<code>js</code>对象的方法，也可以直接调用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[context evaluateScript:<span class="string">@"jsObj.endAudio(abc)"</span>];</div></pre></td></tr></table></figure>
<p>另外，你也可以传<code>JSValue</code>对象：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *js = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"endAudio(%@)"</span>,[JSValue valueWithDouble:<span class="number">1.11</span> inContext:context]];</div><div class="line">[context evaluateScript:js];</div></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>好了，基本的<code>Objective-C</code>和<code>js</code>交互已经说完了，至于更强大的功能，就由你慢慢专研吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很早以前就听闻&lt;code&gt;&amp;lt;JavaScriptCore/JavaScriptCore.h&amp;gt;&lt;/code&gt;的大名了，只是没有正面接触过，有的也只是间接接触过，比如&lt;code&gt;ReactNative&lt;/code&gt;，它渲染界面的核心就是&lt;code&gt;&amp;lt;JavaScriptCore/JavaScriptCore.h&amp;gt;&lt;/code&gt;。但是今天就不得不和它有一次正面的接触了，公司要做一个功能，需要&lt;code&gt;Native&lt;/code&gt;和&lt;code&gt;js&lt;/code&gt;方法之间的互调，所以，本篇文章就说说如何实现。当然，本篇文章说的都是基础。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://guiyongdong.github.io/categories/Objective-C/"/>
    
    
      <category term="js交互" scheme="https://guiyongdong.github.io/tags/js%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative利用CodePush实现热更新</title>
    <link href="https://guiyongdong.github.io/2017/04/07/ReactNative%E5%88%A9%E7%94%A8CodePush%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    <id>https://guiyongdong.github.io/2017/04/07/ReactNative利用CodePush实现热更新/</id>
    <published>2017-04-07T02:55:30.000Z</published>
    <updated>2017-06-26T06:50:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要说一下如何利用<code>ReactNative</code>的<code>jsbundle</code>机制来实现<code>App</code>的热更新。</p>
<p>前段时间<code>iOS</code>界发生了一件大事，苹果禁止含有热更新或者热修复的<code>APP</code>上架，这里主要是禁止使用<code>runtime</code>的一些特性。但是<code>ReactNative</code>不同，它没有使用到<code>runtime</code>特性，并且好多人已经证实，<code>ReactNative</code>应用依然可以上线。</p>
<p>其实好多应用并不是使用<code>ReactNative</code>直接开发，而是在原生应用的基础上，导入<code>ReactNative</code>。<code>iOS</code>最好使用<code>cocoapods</code>导入，<code>Android</code>使用<code>build.gradle</code>添加依赖包。本篇文章主要包含三个部分：环境搭建、<code>iOS</code>热更新和<code>Android</code>热更新。</p>
<a id="more"></a>
<h3 id="环境搭建-macOS"><a href="#环境搭建-macOS" class="headerlink" title="环境搭建-macOS"></a>环境搭建-macOS</h3><p>在了解本篇文章之前，你要把<code>ReactNative</code>的环境配好，你可以看<a href="http://reactnative.cn/docs/0.43/getting-started.html" target="_blank" rel="external">这里</a>来配置环境。如果你是<code>macOS</code>系统，这里推荐你一定要装<code>Homebrew</code>，因为<code>Homebrew</code>是<code>macOS</code>下的包管理器，可以安装很多软件。但是，这里并不推荐你使用<code>Homebrew</code>来安装<code>Node</code>，最好使用<code>nvm</code>来安装<code>node</code>，主要是因为<code>nvm</code>是一个强大的<code>node</code>包管理器，在你本机上你可以安装好几个版本的<code>node</code>，并且可以切换任意版本的<code>node</code>。可以使用<code>Homebrew</code>来安装<code>nvm</code>。</p>
<p><strong>安装Homebrew</strong></p>
<p>直接在终端执行以下命令即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<p>因为<code>macOS</code>自带<code>ruby</code>，放在<code>/usr/bin</code>目录下，所以你可以直接使用<code>ruby</code>命令。下面的你可以不实现：（如果你的<code>ruby</code>版本过低，最好别动系统自带的<code>ruby</code>，你可以使用<code>rvm</code>来添加新版本<code>ruby</code>，使用<code>homebrew</code>来安装<code>rvm</code>，重新配置环境变量即可。如果你当前<code>shell</code>是<code>bash</code>，则在当前用户目录下修改<code>.bash_profile</code>添加环境变量，如果当前<code>shell</code>是<code>zsh</code>，则在当前用户目录下修改<code>.zshrc</code>添加环境变量，我接下来所说的添加环境变量都这种情况，当然你电脑的<code>shell</code>也可能是另外两只情况，但是都一样）</p>
<p><strong>安装nvm</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">brew install nvm</div></pre></td></tr></table></figure>
<p>安装完<code>nvm</code>，必须要配置环境变量，需要在根据你当前的<code>shell</code>在相应的文件中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</div><div class="line">  . &quot;/usr/local/opt/nvm/nvm.sh&quot;</div></pre></td></tr></table></figure>
<p>然后可以使用如下命令查看是否配好环境:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nvm --version</div></pre></td></tr></table></figure></p>
<p><strong>安装node</strong></p>
<p>通过<code>nvm ls-remote</code>可以列出所有版本的<code>node</code>，你可以根据你的所需按钮指定版本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nvm install v6.10.0</div></pre></td></tr></table></figure>
<p>安装完<code>node</code>以后通过<code>nvm ls</code>查看当前已经按钮的有哪些版本。<code>node</code>中自带<code>npm</code>，所有你以后可以直接使用<code>npm</code>来安装其他依赖包。</p>
<p><strong>安装react-native-cli</strong></p>
<p>这是<code>ReactNative</code>命令，使用它可以构建<code>ReactNative</code>应用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install -g react-native-cli</div></pre></td></tr></table></figure>
<p><code>-g</code>表示安装到全局模块。</p>
<p>接下来还推荐你安装<code>Watchman</code>和<code>Flow</code>，但是你安装这写不影响开发，安装了更好。它们都可以通过<code>homebrew</code>来安装。</p>
<p>关于IDE，这里推荐<code>Visual Studio Code</code>和<code>WebStorm</code>，至于选哪个看你。</p>
<hr>
<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p><code>ReactNative</code>提供了热更新的功能，但是它并没有热更新的能力，我们需要借助其他平台来实现，这里推荐使用微软的<code>CodePush</code>，它专门用来给<code>ReactNative</code>和<code>Cordova</code>提供热更新管理。它是一个中央管理库。</p>
<h4 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h4><p>首先创建一个<code>iOS</code>工程，这里创建一个示例工程名为：<code>CodePushDemo</code>，并添加<code>cocoapods</code>支持。为了方便管理，我们在工程的根目录下创建一个名为<code>ReactNative</code>的文件夹，这里面放置所有关于<code>ReactNative</code>的文件。打开终端，并进入到<code>ReactNative</code>文件夹中。使用下列命令来初始化依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm init</div><div class="line">npm install --save react react-native</div></pre></td></tr></table></figure>
<p>至此，你文件夹下会有如下文件：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/reactnative/reactnative1.png?raw=true" width="375"><br></div>

<p>打开<code>package.json</code>，如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"CodePushDemo"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"node node_modules/react-native/local-cli/cli.js start"</span>,</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"jest"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"GYD"</span>,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"react"</span>: <span class="string">"^16.0.0-alpha.6"</span>,</div><div class="line">    <span class="attr">"react-native"</span>: <span class="string">"^0.43.1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"babel-jest"</span>: <span class="string">"19.0.0"</span>,</div><div class="line">    <span class="attr">"babel-preset-react-native"</span>: <span class="string">"1.9.1"</span>,</div><div class="line">    <span class="attr">"jest"</span>: <span class="string">"19.0.2"</span>,</div><div class="line">    <span class="attr">"react-test-renderer"</span>: <span class="string">"16.0.0-alpha.6"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"jest"</span>: &#123;</div><div class="line">    <span class="attr">"preset"</span>: <span class="string">"react-native"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，<code>React</code>和<code>ReactNative</code>包我们已经下好了，下面需要装一下<code>code-push-cli</code>，这是<code>CodePush</code>为我们提供的管理工具。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install -g code-push-cli</div></pre></td></tr></table></figure>
<p>如此，<code>code-push-cli</code>已经装好，使用<code>code-push -v</code>可以查看当前版本。</p>
<p>接下来还需要导入<code>CodePush</code>包。依然使用终端，进入到我们刚刚创建的<code>ReactNative</code>文件夹中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install react-native-code-push</div></pre></td></tr></table></figure>
<p>然后你再次打开<code>package.json</code>，你会发现在<code>dependencies</code>字段下多了<code>&quot;react-native-code-push&quot;: &quot;^2.0.1-beta&quot;</code>这一句，说明我们的包已经添加好了。</p>
<p>至此，我们说有的<code>ReactNative</code>依赖已经添加好。</p>
<h4 id="添加pod依赖"><a href="#添加pod依赖" class="headerlink" title="添加pod依赖"></a>添加pod依赖</h4><p>我们这里使用<code>cocoapods</code>来添加<code>ReactNative</code>的依赖，打开并编辑<code>Podfile</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">platform :ios, ‘8.0’</div><div class="line"></div><div class="line">target &apos;CodePushDemo&apos; do</div><div class="line">  # 导入ReactNative 注意，这里的path路径一定要写对 因为我们的node_modules放在了ReactNative文件夹下。</div><div class="line">  pod &apos;React&apos;, :path =&gt; &apos;./ReactNative/node_modules/react-native&apos;, :subspecs =&gt; [</div><div class="line">    &apos;Core&apos;,</div><div class="line">    &apos;RCTText&apos;,</div><div class="line">    &apos;RCTNetwork&apos;,</div><div class="line">    &apos;RCTWebSocket&apos;, # 这个模块是用于调试功能的</div><div class="line">    # 在这里继续添加你所需要的模块</div><div class="line">  ]</div><div class="line">  # 如果你的RN版本 &gt;= 0.42.0，请加入下面这行</div><div class="line">  pod &quot;Yoga&quot;, :path =&gt; &quot;./ReactNative/node_modules/react-native/ReactCommon/yoga&quot;	</div><div class="line">  #CodePush 热更新</div><div class="line">  pod &apos;CodePush&apos;, :path =&gt; &apos;./ReactNative/node_modules/react-native-code-push&apos;</div><div class="line"></div><div class="line">  target &apos;CodePushDemoTests&apos; do</div><div class="line">    inherit! :search_paths</div><div class="line">  end</div><div class="line"></div><div class="line">  target &apos;CodePushDemoUITests&apos; do</div><div class="line">    inherit! :search_paths</div><div class="line">  end</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure>
<p>然后执行<code>pod install</code>，接下来打开工程，看是否编译通过。</p>
<h4 id="在CodePush上创建应用"><a href="#在CodePush上创建应用" class="headerlink" title="在CodePush上创建应用"></a>在CodePush上创建应用</h4><p><strong>注册账号</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">code-push register</div></pre></td></tr></table></figure></p>
<p>你注册完成以后会给你一个key，你需要将这个key输入终端。</p>
<p><strong>向CodePush服务器注册app</strong><br>为了让CodePush服务器知道你的app，我们需要向它注册app： 在终端输入code-push app add <appname>即可完成注册。</appname></p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/reactnative/reactnative2.png?raw=true" width="375"><br></div>

<p>注册完成之后会返回一套deployment key，该key在后面步骤中会用到。</p>
<p>注意，因为<code>CodePush</code>不会区分<code>iOS</code>和<code>Android</code>，所以我们需要注册两个<code>APP</code>。</p>
<p><code>code-push</code> 关于<code>app</code>的相关命令：</p>
<ul>
<li><code>code-push app add</code> 在账号里面添加一个新的app </li>
<li><code>code-push app remove</code> 在账号里移除一个app </li>
<li><code>code-push app rename</code> 重命名一个存在app</li>
<li><code>code-push app list</code> 列出账号下面的所有app </li>
<li><code>code-push app transfer</code> 把app的所有权转移到另外一个账号 </li>
</ul>
<h4 id="使用CodePush"><a href="#使用CodePush" class="headerlink" title="使用CodePush"></a>使用CodePush</h4><p>首先在<code>Info.plist</code>文件中添加键值对：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CodePushDeploymentKey<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>zjS1l098BMmScNFNrOl7ZmsAi3VCNylurZJ6M<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中这个key是你在注册<code>app</code>的时候<code>CodePush</code>给你的，我们这里使用<code>Production key</code>。你也可以通过<code>code-push deployment ls &lt;APP_NAME&gt; -k</code>来查看<code>deployment key</code>。</p>
<p>当然，在我们测试的时候，要把工程更改为<code>Release</code>模式。</p>
<p>然后创建<code>index.ios.js</code>，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React , &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="comment">//导入热更新</span></div><div class="line"><span class="keyword">import</span> codePush <span class="keyword">from</span> <span class="string">"react-native-code-push"</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CodePushDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.highScoresTitle&#125;</span>&gt;</span></div><div class="line">          测试</div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  componentDidMount()&#123;</div><div class="line">    <span class="comment">//检查是否有信版本</span></div><div class="line">    codePush.sync();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: <span class="number">1</span>,</div><div class="line">    justifyContent: <span class="string">'center'</span>,</div><div class="line">    alignItems: <span class="string">'center'</span>,</div><div class="line">    backgroundColor: <span class="string">'#FFFFFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  highScoresTitle: &#123;</div><div class="line">    fontSize: <span class="number">20</span>,</div><div class="line">    textAlign: <span class="string">'center'</span>,</div><div class="line">    margin: <span class="number">10</span>,</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 整体js模块的名称</span></div><div class="line">AppRegistry.registerComponent(<span class="string">'CodePushDemo'</span>, () =&gt; CodePushDemo);</div></pre></td></tr></table></figure>
<p>首先要导入热更新模块<code>import codePush from &quot;react-native-code-push&quot;;</code>，而且我们一般再<code>componentDidMount</code>方法中调用<code>sync</code>放，后台请求更新。</p>
<p>我们在原生里面需要这么使用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"RNViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTRootView.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTBundleURLProvider.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;CodePush/CodePush.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RNViewController</span> ()</span></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RNViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">    <span class="keyword">self</span>.title = <span class="string">@"RN界面"</span>;</div><div class="line">  </div><div class="line">    <span class="built_in">NSURL</span> *jsCodeLocation;  </div><div class="line">    jsCodeLocation = [CodePush bundleURL];</div><div class="line">    RCTRootView *view = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation moduleName:<span class="string">@"CodePushDemo"</span> initialProperties:<span class="literal">nil</span> launchOptions:<span class="literal">nil</span>];</div><div class="line">    view.frame = <span class="keyword">self</span>.view.bounds;</div><div class="line">    [<span class="keyword">self</span>.view addSubview:view];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们知道，<code>ReactNative</code>是以<code>bundle</code>的形式加载界面的，所以，我们需要向<code>CodePush</code>提交我们的新<code>Bundle</code>。</p>
<p>将<code>js</code>打包成<code>Bundle</code>的命令是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">react-native bundle --platform 平台 --entry-file 启动文件 --bundle-output 打包js输出文件 --assets-dest 资源输出目录 --dev 是否调试。 </div><div class="line"></div><div class="line">react-native bundle --platform ios --entry-file index.ios.js --bundle-output ./bundle/main.jsbundle --dev false</div></pre></td></tr></table></figure>
<p>最终打好的包如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/reactnative/reactnative3.png?raw=true" width="375"><br></div>

<p>注意，这里有一个坑，在你首次打好包以后，或者你重新上传<code>app</code>到<code>appstore</code>的时候，你需要先把这个<code>main.jsbundle</code>导入到工程中，但是以后更新<code>bundle</code>的时候就不用再次导了，总之，需要保证你的工程中有一个<code>main.jsbundle</code>。</p>
<p>接下来，需要把我们新打好的<code>bundle</code>上传到<code>CodePush</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">code-push release &lt;应用名称&gt; &lt;Bundles所在目录&gt; &lt;对应的应用版本&gt; --deploymentName： 更新环境 --description： 更新描述 --mandatory： 是否强制更新</div><div class="line"></div><div class="line">code-push release CodePushDemo ./bundle/main.jsbundle 1.0.0 --deploymentName Production --description &quot;1.0&quot; --mandatory true</div></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li><code>CodePush</code>默认是<code>staging</code>环境，这里我们切换到<code>Production</code>环境</li>
<li>如果有<code>mandatory</code>则<code>CodePush</code>会根据<code>mandatory</code>是<code>true</code>或<code>false</code>来控制应用是否强制更新。默认情况下<code>mandatory</code>为<code>false</code>即不强制更新。</li>
<li>对应的应用版本（<code>targetBinaryVersion</code>）是指当前app的版本，也就是说此次更新的<code>bundle</code>对应的是<code>app</code>的那个版本。不要将其理解为这次<code>js</code>更新的版本。</li>
<li>如果我们要对某一个应用版本进行多次更新，只需要上传与上次不同的<code>bundle</code>即可</li>
</ul>
<p>在终端输入 <code>code-push deployment history &lt;appName&gt; Production</code> 可以看到<code>Production</code>版本更新的时间、描述等等属性。 </p>
<p>应用启动之后，从<code>CodePush</code>服务器查询更新，并下载到本地，下载好之后跟新界面。</p>
<p>更多部署命令：</p>
<ul>
<li><code>code-push deployment rm</code> 删除部署</li>
</ul>
<p>接下来我们再来看看<code>codePush.sync()</code>方法，它可以传如下几种参数：</p>
<ul>
<li>deploymentKey （String）： 部署key，指定你要查询更新的部署秘钥，默认情况下该值来自于Info.plist(iOS)和MianActivity.java(Android)文件，你可以通过设置该属性来动态查询不同部署key下的更新。</li>
<li>installMode (codePush.InstallMode)： 安装模式，用在向CodePush推送更新时没有设置强制更新(mandatory为true)的情况下，默认codePush.InstallMode.ON_NEXT_RESTART即下一次启动的时候安装。</li>
<li>mandatoryInstallMode (codePush.InstallMode):强制更新,默认codePush.InstallMode.IMMEDIATE。</li>
<li>minimumBackgroundDuration (Number):该属性用于指定app处于后台多少秒才进行重启已完成更新。默认为0。该属性只在installMode为InstallMode.ON_NEXT_RESUME情况下有效。</li>
</ul>
<p>至此，<code>iOS</code>热更新已经说完。</p>
<hr>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><h4 id="创建工程-1"><a href="#创建工程-1" class="headerlink" title="创建工程"></a>创建工程</h4><p>首先，我们依然需要创建<code>package.json</code>，并添加依赖包。最终的工程目录为：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/reactnative/reactnative5.png?raw=true" width="375"><br></div>

<p>接下来配置<code>Android</code>工程，添加依赖。这里我们先添加<code>ReactNative</code>依赖，这里面的坑还是不少的。</p>
<h4 id="添加ReactNative依赖"><a href="#添加ReactNative依赖" class="headerlink" title="添加ReactNative依赖"></a>添加ReactNative依赖</h4><p>在你的app中 build.gradle 文件中添加 React Native 依赖:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile &apos;com.facebook.react:react-native:0.43.1&apos;</div><div class="line">&#125;</div><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    configurations.all &#123;</div><div class="line">        resolutionStrategy.force &apos;com.google.code.findbugs:jsr305:1.3.9&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>react-native</code>后面的版本是你当前<code>package.json</code>内的<code>react-native</code>版本。在这里我们还添加了<code>configurations.all</code>，这里是为了兼容<code>appcompat</code>库。</p>
<p>然后在项目的<code>build.gradle</code>文件中为<code>ReactNative</code>添加一个<code>maven</code>依赖的入口，必须写在<code>&quot;allprojects&quot;</code>代码块中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123;</div><div class="line">            // All of React Native (JS, Android binaries) is installed from npm</div><div class="line">            url &quot;$rootDir/../ReactNative/node_modules/react-native/android&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加完依赖后，新建一个<code>RNActivity</code>。在<code>MainActivity</code>中添加一个按钮，按钮点击打开<code>RNActivity</code>，在<code>RNActivity</code>里面的添加<code>ReactNative</code>界面。由于需要一些权限问题，所以一定要在<code>AndroidManifest.xml</code>文件中添加如下权限：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.SYSTEM_ALERT_WINDOW"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.SYSTEM_OVERLAY_WINDOW"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>因为<code>SYSTEM_OVERLAY_WINDOW</code>是运行时权限，所以我们要在按钮点击的时候去添加权限。<code>MainActivity</code>如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.button);</div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (!Settings.canDrawOverlays(MainActivity.<span class="keyword">this</span>)) &#123;</div><div class="line">                        <span class="comment">//开启权限</span></div><div class="line">                        Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</div><div class="line">                        startActivity(intent);</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        openRNActivity();</div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    openRNActivity();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openRNActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,RNActivity.class);</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再来看<code>RNActivity</code>，因为我们是将<code>ReactNative</code>作为一个子界面放在布局中的，所以我们直接在<code>RNActivity</code>的布局文件中添加<code>ReactRootView</code>布局，布局如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.guiyongdong.codepushdemoandroid.RNActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.facebook.react.ReactRootView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rn_layout"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后看<code>RNActivity.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RNActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">DefaultHardwareBackBtnHandler</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> ReactRootView mReactRootView;</div><div class="line">    <span class="keyword">private</span> ReactInstanceManager mReactInstanceManager;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_rn);</div><div class="line"></div><div class="line">        mReactRootView = (ReactRootView) findViewById(R.id.rn_layout);</div><div class="line">        mReactInstanceManager = ReactInstanceManager.builder()</div><div class="line">                .setCurrentActivity(<span class="keyword">this</span>)</div><div class="line">                .setApplication(getApplication())</div><div class="line">                .setBundleAssetName(<span class="string">"index.android.bundle"</span>)</div><div class="line">                .setJSMainModuleName(<span class="string">"index.android"</span>)</div><div class="line">                .addPackage(<span class="keyword">new</span> MainReactPackage())</div><div class="line">                .setUseDeveloperSupport(BuildConfig.DEBUG)</div><div class="line">                .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">                .build();</div><div class="line">        mReactRootView.startReactApplication(mReactInstanceManager,<span class="string">"CodePushDemoAndroid"</span>,<span class="keyword">null</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeDefaultOnBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onBackPressed();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onHostPause(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onHostResume(<span class="keyword">this</span>, <span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onHostDestroy();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactInstanceManager.onBackPressed();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">super</span>.onBackPressed();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ReactRootView</code>就是我们的<code>ReactNative</code>界面，<code>ReactInstanceManager</code>主要是去加载<code>bundle</code>的，注意，这里的名字一定要和<code>js</code>中注册的名字一样。我们再来看<code>index.android.js</code>文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React , &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  Image</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CodePushDemoAndroid</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.highScoresTitle&#125;</span>&gt;</span></div><div class="line">          我是ReactNative界面</div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: <span class="number">1</span>,</div><div class="line">    justifyContent: <span class="string">'center'</span>,</div><div class="line">    alignItems: <span class="string">'center'</span>,</div><div class="line">    backgroundColor: <span class="string">'#FFFFFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  highScoresTitle: &#123;</div><div class="line">    fontSize: <span class="number">20</span>,</div><div class="line">    textAlign: <span class="string">'center'</span>,</div><div class="line">    margin: <span class="number">10</span>,</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 整体js模块的名称</span></div><div class="line">AppRegistry.registerComponent(<span class="string">'CodePushDemoAndroid'</span>, () =&gt; CodePushDemoAndroid);</div></pre></td></tr></table></figure>
<p>最终运行结果如下：</p>
<div align="center"><br><img src="https://github.com/guiyongdong/Resource/blob/master/hexoImage/reactnative/reactnative6.gif?raw=true" width="375"><br></div>

<p>至此，我们<code>Android</code>原生项目导入<code>ReactNative</code>已经完成，是不是感觉比<code>iOS</code>坑太多了。<br>下面我们再来看如何导入<code>CodePush</code>。</p>
<h4 id="添加CodePush依赖"><a href="#添加CodePush依赖" class="headerlink" title="添加CodePush依赖"></a>添加CodePush依赖</h4><p>在使用<code>CodePush</code>之前，我们依然要在<code>CodePush</code>平台上添加一个<code>APP</code>，获取<code>key</code>。这些过程和<code>iOS</code>一样，这里就不再说了。</p>
<p>在 <code>app</code>的<code>build.gradle</code>文件里面添如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">apply from: &quot;../../ReactNative/node_modules/react-native-code-push/android/codepush.gradle&quot;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile project(&apos;:react-native-code-push&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，这里的路径一定要根据实际情况来写。比如我的<code>node_modules</code>是放在了和工程目录同一目录下的<code>ReactNative</code>文件夹下。</p>
<p>然后在工程下的<code>settings.gradle</code>中添加如下代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">include &apos;:react-native-code-push&apos;</div><div class="line">project(&apos;:react-native-code-push&apos;).projectDir = new File(rootProject.projectDir, &apos;../ReactNative/node_modules/react-native-code-push/android/app&apos;)</div></pre></td></tr></table></figure>
<p>这里是将<code>react-native-code-push</code>模块导入到工程中，作为一个子模块。</p>
<p>注意，你<code>Android</code>工程的<code>buildToolsVersion</code>版本可能比<code>react-native-code-push</code>的版本高，所以你需要修改<code>react-native-code-push</code>的版本。</p>
<p>至此，<code>CodePush</code>的环境算是配好了。接下来看如何使用。</p>
<p>在这里，你只需要修改<code>RNActivity.java</code>中<code>onCreate</code>方法就行:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RNActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">DefaultHardwareBackBtnHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ReactRootView mReactRootView;</div><div class="line">    <span class="keyword">private</span> ReactInstanceManager mReactInstanceManager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_rn);</div><div class="line">        <span class="comment">// 这里的key要替换成你自己的key</span></div><div class="line">        CodePush codepush = <span class="keyword">new</span> CodePush(<span class="string">"_lVphT2Ox1tyCFRIhzVrBoTcGwKbNylurZJ6M"</span>,getApplication(),BuildConfig.DEBUG);</div><div class="line">        <span class="comment">// 本地bundle的路径</span></div><div class="line">        String path = CodePush.getJSBundleFile();</div><div class="line">        </div><div class="line">        mReactRootView = (ReactRootView) findViewById(R.id.rn_layout);</div><div class="line">        mReactInstanceManager = ReactInstanceManager.builder()</div><div class="line">                .setCurrentActivity(<span class="keyword">this</span>)</div><div class="line">                .setApplication(getApplication())</div><div class="line">                .setJSBundleFile(path)</div><div class="line"><span class="comment">//                .setBundleAssetName("index.android.bundle")</span></div><div class="line"><span class="comment">//                .setJSMainModuleName("index.android")</span></div><div class="line">                .addPackage(<span class="keyword">new</span> MainReactPackage())</div><div class="line">                .addPackage(codepush)</div><div class="line">                .setUseDeveloperSupport(BuildConfig.DEBUG)</div><div class="line">                .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">                .build();</div><div class="line">        mReactRootView.startReactApplication(mReactInstanceManager,<span class="string">"CodePushDemoAndroid"</span>,<span class="keyword">null</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出来，之前我们是使用<code>setBundleAssetName(&quot;index.android.bundle&quot;)</code>和<code>setJSMainModuleName(&quot;index.android&quot;)</code>方法去加载本地<code>bundle</code>，现在我们使用<code>setJSBundleFile(path)</code>并且还添加了<code>addPackage(codepush)</code>。好了，现在这个界面就可以随时更新了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实，<code>ReactNative</code>为什么能热更新？主要是因为我们使用<code>js</code>将代码写好，然后使用<code>ReactNative</code>将<code>js</code>代码打包成<code>jsbundle</code>，而真正去执行代码的就是这个<code>jsbundle</code>，只要你的<code>app</code>支持<code>ReactNative</code>环境，就可以去加载<code>jsbundle</code>，而这个<code>jsbundle</code>其实是放在本地的。所以，你完全可以自己搭一个服务器，去判断远端是否有新<code>bundle</code>，如果有，那么下载下来，替换本地的<code>bundle</code>，等到下次运行的时候就可以更新的。当然，你也可以在下载完以后才去加载这个<code>bundle</code>。我们使用<code>CodePush</code>，只是因为它版本的控制等做的比较好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要说一下如何利用&lt;code&gt;ReactNative&lt;/code&gt;的&lt;code&gt;jsbundle&lt;/code&gt;机制来实现&lt;code&gt;App&lt;/code&gt;的热更新。&lt;/p&gt;
&lt;p&gt;前段时间&lt;code&gt;iOS&lt;/code&gt;界发生了一件大事，苹果禁止含有热更新或者热修复的&lt;code&gt;APP&lt;/code&gt;上架，这里主要是禁止使用&lt;code&gt;runtime&lt;/code&gt;的一些特性。但是&lt;code&gt;ReactNative&lt;/code&gt;不同，它没有使用到&lt;code&gt;runtime&lt;/code&gt;特性，并且好多人已经证实，&lt;code&gt;ReactNative&lt;/code&gt;应用依然可以上线。&lt;/p&gt;
&lt;p&gt;其实好多应用并不是使用&lt;code&gt;ReactNative&lt;/code&gt;直接开发，而是在原生应用的基础上，导入&lt;code&gt;ReactNative&lt;/code&gt;。&lt;code&gt;iOS&lt;/code&gt;最好使用&lt;code&gt;cocoapods&lt;/code&gt;导入，&lt;code&gt;Android&lt;/code&gt;使用&lt;code&gt;build.gradle&lt;/code&gt;添加依赖包。本篇文章主要包含三个部分：环境搭建、&lt;code&gt;iOS&lt;/code&gt;热更新和&lt;code&gt;Android&lt;/code&gt;热更新。&lt;/p&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="https://guiyongdong.github.io/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="https://guiyongdong.github.io/tags/ReactNative/"/>
    
  </entry>
  
</feed>
